define("@openswap/sdk", (require, exports)=>{
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  Contracts: () => contracts_exports,
  OpenSwap: () => OpenSwap2,
  deploy: () => deploy,
  deployCoreContracts: () => deployCoreContracts,
  deployHybridRouter: () => deployHybridRouter,
  deployOracleContracts: () => deployOracleContracts,
  deployRangeContracts: () => deployRangeContracts,
  deployRestrictedContracts: () => deployRestrictedContracts,
  deployRestrictedPairOracle: () => deployRestrictedPairOracle,
  initHybridRouterRegistry: () => initHybridRouterRegistry,
  toDeploymentContracts: () => toDeploymentContracts
});

// src/contracts/index.ts
var contracts_exports = {};
__export(contracts_exports, {
  ERC20: () => ERC20,
  OAXDEX_Administrator: () => OAXDEX_Administrator,
  OAXDEX_Governance: () => OAXDEX_Governance,
  OAXDEX_VotingContract: () => OAXDEX_VotingContract,
  OAXDEX_VotingExecutor: () => OAXDEX_VotingExecutor,
  OAXDEX_VotingRegistry: () => OAXDEX_VotingRegistry,
  OSWAP_CertiKSecurityOracle: () => OSWAP_CertiKSecurityOracle,
  OSWAP_ConfigStore: () => OSWAP_ConfigStore,
  OSWAP_ERC20: () => OSWAP_ERC20,
  OSWAP_Factory: () => OSWAP_Factory,
  OSWAP_FactoryBase: () => OSWAP_FactoryBase,
  OSWAP_HybridRouter: () => OSWAP_HybridRouter,
  OSWAP_HybridRouter2: () => OSWAP_HybridRouter2,
  OSWAP_HybridRouterRegistry: () => OSWAP_HybridRouterRegistry,
  OSWAP_OracleFactory: () => OSWAP_OracleFactory,
  OSWAP_OracleLiquidityProvider: () => OSWAP_OracleLiquidityProvider,
  OSWAP_OraclePair: () => OSWAP_OraclePair,
  OSWAP_OraclePairCreator: () => OSWAP_OraclePairCreator,
  OSWAP_OracleRouter: () => OSWAP_OracleRouter,
  OSWAP_Pair: () => OSWAP_Pair,
  OSWAP_PairCreator: () => OSWAP_PairCreator,
  OSWAP_PausableFactory: () => OSWAP_PausableFactory,
  OSWAP_PausablePair: () => OSWAP_PausablePair,
  OSWAP_RangeFactory: () => OSWAP_RangeFactory,
  OSWAP_RangeLiquidityProvider: () => OSWAP_RangeLiquidityProvider,
  OSWAP_RangePair: () => OSWAP_RangePair,
  OSWAP_RangePairCreator: () => OSWAP_RangePairCreator,
  OSWAP_RestrictedFactory: () => OSWAP_RestrictedFactory,
  OSWAP_RestrictedLiquidityProvider: () => OSWAP_RestrictedLiquidityProvider,
  OSWAP_RestrictedPair: () => OSWAP_RestrictedPair,
  OSWAP_RestrictedPair2: () => OSWAP_RestrictedPair2,
  OSWAP_RestrictedPairCreator: () => OSWAP_RestrictedPairCreator,
  OSWAP_RestrictedPairOracle: () => OSWAP_RestrictedPairOracle,
  OSWAP_Router: () => OSWAP_Router,
  OSWAP_VotingExecutor1: () => OSWAP_VotingExecutor1,
  OSWAP_VotingExecutor2: () => OSWAP_VotingExecutor2,
  OSWAP_VotingExecutor3: () => OSWAP_VotingExecutor3,
  OSWAP_VotingExecutor4: () => OSWAP_VotingExecutor4,
  OpenSwap: () => OpenSwap
});

// src/contracts/OpenSwap.ts
var import_eth_wallet = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OpenSwap.json.ts
var OpenSwap_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_minter", "type": "address" }, { "internalType": "address", "name": "initSupplyTo", "type": "address" }, { "internalType": "uint256", "name": "initSupply", "type": "uint256" }, { "internalType": "uint256", "name": "totalSupply", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "minter", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60a06040523480156200001157600080fd5b50604051620013d4380380620013d4833981810160405260808110156200003757600080fd5b50805160208083015160408085015160609095015181518083018352600881526704f70656e537761760c41b8186019081528351808501909452600584526404f535741560dc1b958401959095528051959693959394919384939192620000a2916003919062000395565b508051620000b890600490602084019062000395565b50506005805460ff1916601217905550806200011b576040805162461bcd60e51b815260206004820152601560248201527f45524332304361707065643a2063617020697320300000000000000000000000604482015290519081900360640190fd5b6006556001600160601b0319606085901b166080526200014583836001600160e01b036200014f16565b5050505062000437565b6001600160a01b038216620001ab576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b620001c2600083836001600160e01b036200026716565b620001de816002546200032660201b620007fb1790919060201c565b6002556001600160a01b0382166000908152602081815260409091205462000211918390620007fb62000326821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6200027f8383836200032160201b620008761760201c565b6001600160a01b0383166200032157620002a16001600160e01b036200038816565b620002cd82620002b96001600160e01b036200038f16565b6200032660201b620007fb1790919060201c565b111562000321576040805162461bcd60e51b815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fd5b505050565b60008282018381101562000381576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6006545b90565b60025490565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003d857805160ff191683800117855562000408565b8280016001018555821562000408579182015b8281111562000408578251825591602001919060010190620003eb565b50620004169291506200041a565b5090565b6200038c91905b8082111562000416576000815560010162000421565b60805160601c610f7a6200045a6000398061047f52806105f35250610f7a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610314578063a457c2d71461031c578063a9059cbb14610355578063dd62ed3e1461038e576100ea565b8063395093511461026d57806340c10f19146102a657806370a08231146102e1576100ea565b806318160ddd116100c857806318160ddd146101ea57806323b872dd14610204578063313ce56714610247578063355274ea14610265576100ea565b806306fdde03146100ef578063075461721461016c578063095ea7b31461019d575b600080fd5b6100f76103c9565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017461047d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101d6600480360360408110156101b357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104a1565b604080519115158252519081900360200190f35b6101f26104be565b60408051918252519081900360200190f35b6101d66004803603606081101561021a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356104c4565b61024f61056b565b6040805160ff9092168252519081900360200190f35b6101f2610574565b6101d66004803603604081101561028357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561057a565b6102df600480360360408110156102bc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105db565b005b6101f2600480360360208110156102f757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661068d565b6100f76106b5565b6101d66004803603604081101561033257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610734565b6101d66004803603604081101561036b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356107af565b6101f2600480360360408110156103a457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166107c3565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104735780601f1061044857610100808354040283529160200191610473565b820191906000526020600020905b81548152906001019060200180831161045657829003601f168201915b5050505050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104b56104ae61087b565b848461087f565b50600192915050565b60025490565b60006104d18484846109c6565b610561846104dd61087b565b61055c85604051806060016040528060288152602001610eaf6028913973ffffffffffffffffffffffffffffffffffffffff8a1660009081526001602052604081209061052861087b565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff610ba216565b61087f565b5060019392505050565b60055460ff1690565b60065490565b60006104b561058761087b565b8461055c856001600061059861087b565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff6107fb16565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461067f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d206d696e7465720000000000000000000000000000000000604482015290519081900360640190fd5b6106898282610c53565b5050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104735780601f1061044857610100808354040283529160200191610473565b60006104b561074161087b565b8461055c85604051806060016040528060258152602001610f20602591396001600061076b61087b565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff610ba216565b60006104b56107bc61087b565b84846109c6565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60008282018381101561086f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff83166108eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610efc6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610957576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610e676022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610ed76025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610e446023913960400191505060405180910390fd5b610aa9838383610d90565b610af981604051806060016040528060268152602001610e896026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919063ffffffff610ba216565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082209390935590841681522054610b3b908263ffffffff6107fb16565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610c4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c10578181015183820152602001610bf8565b50505050905090810190601f168015610c3d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff8216610cd557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610ce160008383610d90565b600254610cf4908263ffffffff6107fb16565b60025573ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054610d2d908263ffffffff6107fb16565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b610d9b838383610876565b73ffffffffffffffffffffffffffffffffffffffff831661087657610dbe610574565b610dd682610dca6104be565b9063ffffffff6107fb16565b111561087657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f45524332304361707065643a2063617020657863656564656400000000000000604482015290519081900360640190fdfe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212200e670732a2ae18340eac324a65fcf5aaa21db2258a5ca51d23e85bdc33e7832f64736f6c634300060b0033"
};

// src/contracts/OpenSwap.ts
var OpenSwap = class extends import_eth_wallet.Contract {
  constructor(wallet, address) {
    super(wallet, address, OpenSwap_json_default.abi, OpenSwap_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.minter, params.initSupplyTo, import_eth_wallet.Utils.toString(params.initSupply), import_eth_wallet.Utils.toString(params.totalSupply));
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet.BigNumber(result.value),
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet.BigNumber(result.value),
      _event: event
    };
  }
  async allowance(params) {
    let result = await this.call("allowance", [params.owner, params.spender]);
    return new import_eth_wallet.BigNumber(result);
  }
  async approve_send(params) {
    let result = await this.send("approve", [params.spender, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  async approve_call(params) {
    let result = await this.call("approve", [params.spender, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  async balanceOf(account) {
    let result = await this.call("balanceOf", [account]);
    return new import_eth_wallet.BigNumber(result);
  }
  async cap() {
    let result = await this.call("cap");
    return new import_eth_wallet.BigNumber(result);
  }
  async decimals() {
    let result = await this.call("decimals");
    return new import_eth_wallet.BigNumber(result);
  }
  async decreaseAllowance_send(params) {
    let result = await this.send("decreaseAllowance", [params.spender, import_eth_wallet.Utils.toString(params.subtractedValue)]);
    return result;
  }
  async decreaseAllowance_call(params) {
    let result = await this.call("decreaseAllowance", [params.spender, import_eth_wallet.Utils.toString(params.subtractedValue)]);
    return result;
  }
  async increaseAllowance_send(params) {
    let result = await this.send("increaseAllowance", [params.spender, import_eth_wallet.Utils.toString(params.addedValue)]);
    return result;
  }
  async increaseAllowance_call(params) {
    let result = await this.call("increaseAllowance", [params.spender, import_eth_wallet.Utils.toString(params.addedValue)]);
    return result;
  }
  async mint_send(params) {
    let result = await this.send("mint", [params.account, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  async mint_call(params) {
    let result = await this.call("mint", [params.account, import_eth_wallet.Utils.toString(params.amount)]);
    return;
  }
  async minter() {
    let result = await this.call("minter");
    return result;
  }
  async name() {
    let result = await this.call("name");
    return result;
  }
  async symbol() {
    let result = await this.call("symbol");
    return result;
  }
  async totalSupply() {
    let result = await this.call("totalSupply");
    return new import_eth_wallet.BigNumber(result);
  }
  async transfer_send(params) {
    let result = await this.send("transfer", [params.recipient, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  async transfer_call(params) {
    let result = await this.call("transfer", [params.recipient, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  async transferFrom_send(params) {
    let result = await this.send("transferFrom", [params.sender, params.recipient, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  async transferFrom_call(params) {
    let result = await this.call("transferFrom", [params.sender, params.recipient, import_eth_wallet.Utils.toString(params.amount)]);
    return result;
  }
  assign() {
    this.approve = Object.assign(this.approve_send, { call: this.approve_call });
    this.decreaseAllowance = Object.assign(this.decreaseAllowance_send, { call: this.decreaseAllowance_call });
    this.increaseAllowance = Object.assign(this.increaseAllowance_send, { call: this.increaseAllowance_call });
    this.mint = Object.assign(this.mint_send, { call: this.mint_call });
    this.transfer = Object.assign(this.transfer_send, { call: this.transfer_call });
    this.transferFrom = Object.assign(this.transferFrom_send, { call: this.transferFrom_call });
  }
};

// src/contracts/amm/OSWAP_ERC20.ts
var import_eth_wallet2 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/amm/OSWAP_ERC20.json.ts
var OSWAP_ERC20_json_default = {
  "abi": [
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "inputs": [], "name": "EIP712_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "NAME_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "VERSION_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50610c55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063313ce567116100975780639e4e7318116100665780639e4e7318146102c5578063a9059cbb146102cd578063d505accf14610306578063dd62ed3e14610366576100f5565b8063313ce5671461023957806370a08231146102575780637ecebe001461028a57806395d89b41146102bd576100f5565b806318160ddd116100d357806318160ddd146101de57806323b872dd146101e6578063253d2c7d1461022957806330adf81f14610231576100f5565b806304622c2e146100fa57806306fdde0314610114578063095ea7b314610191575b600080fd5b6101026103a1565b60408051918252519081900360200190f35b61011c6103c5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015657818101518382015260200161013e565b50505050905090810190601f1680156101835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ca600480360360408110156101a757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103fe565b604080519115158252519081900360200190f35b610102610414565b6101ca600480360360608110156101fc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561041a565b6101026104f9565b61010261051d565b610241610541565b6040805160ff9092168252519081900360200190f35b6101026004803603602081101561026d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610546565b610102600480360360208110156102a057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610558565b61011c61056a565b6101026105a3565b6101ca600480360360408110156102e357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105c7565b610364600480360360e081101561031c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356105d4565b005b6101026004803603604081101561037c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610944565b7fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba81565b6040518060400160405280600c81526020017f4f70656e53776170204c5073000000000000000000000000000000000000000081525081565b600061040b338484610961565b50600192915050565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146104e45773ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203384529091529020546104b2908363ffffffff6109d016565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b6104ef848484610a19565b5060019392505050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60016020526000908152604090205481565b60036020526000908152604090205481565b6040518060400160405280600881526020017f4f535741502d4c5000000000000000000000000000000000000000000000000081525081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600061040b338484610a19565b4284101561064357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba828401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608301524660808301523060a0808401919091528351808403909101815260c08301845280519082012073ffffffffffffffffffffffffffffffffffffffff8b8116600081815260038552868120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0890152610100880193909352928d1661012087015261014086018c90526101608601919091526101808086018b9052865180870390910181526101a0860187528051908501207f19010000000000000000000000000000000000000000000000000000000000006101c08701526101c286018490526101e28087019190915286518087039091018152610202860180885281519186019190912090829052610222860180885281905260ff8a16610242870152610262860189905261028286018890529551929594909391926102a280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015610847573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116158015906108c257508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61092d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015290519081900360640190fd5b6109388a8a8a610961565b50505050505050505050565b600260209081526000928352604080842090915290825290205481565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000610a1283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610afa565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610a4f908263ffffffff6109d016565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600160205260408082209390935590841681522054610a91908263ffffffff610bab16565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610ba3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b68578181015183820152602001610b50565b50505050905090810190601f168015610b955780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610a1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfea264697066735822122096db91cc4abeafe9715515fe37e334f2a0e94e86a23f845259aae562ffd5183e64736f6c634300060b0033"
};

// src/contracts/amm/OSWAP_ERC20.ts
var OSWAP_ERC20 = class extends import_eth_wallet2.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ERC20_json_default.abi, OSWAP_ERC20_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet2.BigNumber(result.value),
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet2.BigNumber(result.value),
      _event: event
    };
  }
  async EIP712_TYPEHASH() {
    let result = await this.call("EIP712_TYPEHASH");
    return result;
  }
  async NAME_HASH() {
    let result = await this.call("NAME_HASH");
    return result;
  }
  async PERMIT_TYPEHASH() {
    let result = await this.call("PERMIT_TYPEHASH");
    return result;
  }
  async VERSION_HASH() {
    let result = await this.call("VERSION_HASH");
    return result;
  }
  async allowance(params) {
    let result = await this.call("allowance", [params.param1, params.param2]);
    return new import_eth_wallet2.BigNumber(result);
  }
  async approve_send(params) {
    let result = await this.send("approve", [params.spender, import_eth_wallet2.Utils.toString(params.value)]);
    return result;
  }
  async approve_call(params) {
    let result = await this.call("approve", [params.spender, import_eth_wallet2.Utils.toString(params.value)]);
    return result;
  }
  async balanceOf(param1) {
    let result = await this.call("balanceOf", [param1]);
    return new import_eth_wallet2.BigNumber(result);
  }
  async decimals() {
    let result = await this.call("decimals");
    return new import_eth_wallet2.BigNumber(result);
  }
  async name() {
    let result = await this.call("name");
    return result;
  }
  async nonces(param1) {
    let result = await this.call("nonces", [param1]);
    return new import_eth_wallet2.BigNumber(result);
  }
  async permit_send(params) {
    let result = await this.send("permit", [params.owner, params.spender, import_eth_wallet2.Utils.toString(params.value), import_eth_wallet2.Utils.toString(params.deadline), import_eth_wallet2.Utils.toString(params.v), import_eth_wallet2.Utils.stringToBytes32(params.r), import_eth_wallet2.Utils.stringToBytes32(params.s)]);
    return result;
  }
  async permit_call(params) {
    let result = await this.call("permit", [params.owner, params.spender, import_eth_wallet2.Utils.toString(params.value), import_eth_wallet2.Utils.toString(params.deadline), import_eth_wallet2.Utils.toString(params.v), import_eth_wallet2.Utils.stringToBytes32(params.r), import_eth_wallet2.Utils.stringToBytes32(params.s)]);
    return;
  }
  async symbol() {
    let result = await this.call("symbol");
    return result;
  }
  async totalSupply() {
    let result = await this.call("totalSupply");
    return new import_eth_wallet2.BigNumber(result);
  }
  async transfer_send(params) {
    let result = await this.send("transfer", [params.to, import_eth_wallet2.Utils.toString(params.value)]);
    return result;
  }
  async transfer_call(params) {
    let result = await this.call("transfer", [params.to, import_eth_wallet2.Utils.toString(params.value)]);
    return result;
  }
  async transferFrom_send(params) {
    let result = await this.send("transferFrom", [params.from, params.to, import_eth_wallet2.Utils.toString(params.value)]);
    return result;
  }
  async transferFrom_call(params) {
    let result = await this.call("transferFrom", [params.from, params.to, import_eth_wallet2.Utils.toString(params.value)]);
    return result;
  }
  assign() {
    this.approve = Object.assign(this.approve_send, { call: this.approve_call });
    this.permit = Object.assign(this.permit_send, { call: this.permit_call });
    this.transfer = Object.assign(this.transfer_send, { call: this.transfer_call });
    this.transferFrom = Object.assign(this.transferFrom_send, { call: this.transferFrom_call });
  }
};

// src/contracts/amm/OSWAP_Factory.ts
var import_eth_wallet3 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/amm/OSWAP_Factory.json.ts
var OSWAP_Factory_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeParams", "outputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b506040516117b73803806117b7833981810160405260a081101561003357600080fd5b508051602082015160408301516060808501516080958601519185901b6001600160601b03191690955260008054600160ff1990911617610100600160a81b0319166101006001600160a01b0386160217905592939192909190620186a08311156100d9576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f54524144455f46454560781b604482015290519081900360640190fd5b620186a0821115610131576040805162461bcd60e51b815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b60038390556004829055600580546001600160a01b0319166001600160a01b0383161790556040805167747261646546656560c01b8152602081018590528151600080516020611797833981519152929181900390910190a1600454604080516a70726f746f636f6c46656560a81b8152602081019290925280516000805160206117978339815191529281900390910190a1600554604080516c70726f746f636f6c466565546f60981b815260609290921b6001600160601b031916602083015280516000805160206117978339815191529281900390910190a1505050505060805160601c6115456102526000398061036452806105585280610593528061068652806108ad528061109852806112a2528061139552506115456000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063b0e21e8a11610097578063e0e6799f11610066578063e0e6799f14610289578063e6a43905146102bc578063ef369252146102f7578063f5ee3348146102ff57610100565b8063b0e21e8a14610222578063b8f7a6651461022a578063c538b5d614610246578063c9c653961461024e57610100565b80635aa6e675116100d35780635aa6e6751461018c5780636883618a14610194578063787dce3d146101cf5780639931e80b146101ec57610100565b806310603023146101055780631e3dd18b1461012457806324bcdfbd1461016a578063574f2ba314610184575b600080fd5b6101226004803603602081101561011b57600080fd5b503561031e565b005b6101416004803603602081101561013a57600080fd5b5035610516565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61017261054a565b60408051918252519081900360200190f35b610172610550565b610141610556565b610122600480360360408110156101aa57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561057a565b610122600480360360208110156101e557600080fd5b5035610867565b6101f4610a5f565b6040805192835273ffffffffffffffffffffffffffffffffffffffff90911660208301528051918290030190f35b610172610a7f565b610232610a85565b604080519115158252519081900360200190f35b610141610a8e565b6101416004803603604081101561026457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610aaf565b6101226004803603602081101561029f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611052565b610141600480360360408110156102d257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661123a565b61014161126d565b6101226004803603602081101561031557600080fd5b50351515611289565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d60208110156103d457600080fd5b505161044157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a08111156104b357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6003819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b6002818154811061052357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60035481565b60025490565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d602081101561062157600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806106f95750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156106cc57600080fd5b505afa1580156106e0573d6000803e3d6000fd5b505050506040513d60208110156106f657600080fd5b50515b61074e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806114ef6021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b5050505080156108215760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610863565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d602081101561091d57600080fd5b505161098a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a08111156109fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b6004819055604080517f70726f746f636f6c46656500000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b60045460055473ffffffffffffffffffffffffffffffffffffffff169091565b60045481565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610b89578385610b8c565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610c1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260016020908152604080832085851684529091529020541615610cb457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b60208310610dda57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610d9d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610e3a576040519150601f19603f3d011682016040523d82523d6000602084013e610e3f565b606091505b509150915081610eb057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b808060200190516020811015610ec557600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b158015610f4357600080fd5b505af1158015610f57573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156110de57600080fd5b505afa1580156110f2573d6000803e3d6000fd5b505050506040513d602081101561110857600080fd5b505161117557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561130657600080fd5b505afa15801561131a573d6000803e3d6000fd5b505050506040513d602081101561133057600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806114085750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d602081101561140557600080fd5b50515b61145d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806114ef6021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff16156114c1576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a16114eb565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b5056fe4e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220ca28cdc7f24324693a51f0adfdd811d1f6dc54da65e40b0e2b890b98be1273e864736f6c634300060b003322ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509"
};

// src/contracts/amm/OSWAP_Factory.ts
var OSWAP_Factory = class extends import_eth_wallet3.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_Factory_json_default.abi, OSWAP_Factory_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.pairCreator, import_eth_wallet3.Utils.toString(params.tradeFee), import_eth_wallet3.Utils.toString(params.protocolFee), params.protocolFeeTo);
  }
  parsePairCreatedEvent(receipt) {
    return this.parseEvents(receipt, "PairCreated").map((e) => this.decodePairCreatedEvent(e));
  }
  decodePairCreatedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      pair: result.pair,
      newSize: new import_eth_wallet3.BigNumber(result.newSize),
      _event: event
    };
  }
  parsePairRestartedEvent(receipt) {
    return this.parseEvents(receipt, "PairRestarted").map((e) => this.decodePairRestartedEvent(e));
  }
  decodePairRestartedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parsePairShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "PairShutdowned").map((e) => this.decodePairShutdownedEvent(e));
  }
  decodePairShutdownedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parseRestartedEvent(receipt) {
    return this.parseEvents(receipt, "Restarted").map((e) => this.decodeRestartedEvent(e));
  }
  decodeRestartedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "Shutdowned").map((e) => this.decodeShutdownedEvent(e));
  }
  decodeShutdownedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  async allPairs(param1) {
    let result = await this.call("allPairs", [import_eth_wallet3.Utils.toString(param1)]);
    return result;
  }
  async allPairsLength() {
    let result = await this.call("allPairsLength");
    return new import_eth_wallet3.BigNumber(result);
  }
  async createPair_send(params) {
    let result = await this.send("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async createPair_call(params) {
    let result = await this.call("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async getPair(params) {
    let result = await this.call("getPair", [params.param1, params.param2]);
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async pairCreator() {
    let result = await this.call("pairCreator");
    return result;
  }
  async protocolFee() {
    let result = await this.call("protocolFee");
    return new import_eth_wallet3.BigNumber(result);
  }
  async protocolFeeParams() {
    let result = await this.call("protocolFeeParams");
    return {
      _protocolFee: new import_eth_wallet3.BigNumber(result._protocolFee),
      _protocolFeeTo: result._protocolFeeTo
    };
  }
  async protocolFeeTo() {
    let result = await this.call("protocolFeeTo");
    return result;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setLiveForPair_send(params) {
    let result = await this.send("setLiveForPair", [params.pair, params.live]);
    return result;
  }
  async setLiveForPair_call(params) {
    let result = await this.call("setLiveForPair", [params.pair, params.live]);
    return;
  }
  async setProtocolFee_send(protocolFee) {
    let result = await this.send("setProtocolFee", [import_eth_wallet3.Utils.toString(protocolFee)]);
    return result;
  }
  async setProtocolFee_call(protocolFee) {
    let result = await this.call("setProtocolFee", [import_eth_wallet3.Utils.toString(protocolFee)]);
    return;
  }
  async setProtocolFeeTo_send(protocolFeeTo) {
    let result = await this.send("setProtocolFeeTo", [protocolFeeTo]);
    return result;
  }
  async setProtocolFeeTo_call(protocolFeeTo) {
    let result = await this.call("setProtocolFeeTo", [protocolFeeTo]);
    return;
  }
  async setTradeFee_send(tradeFee) {
    let result = await this.send("setTradeFee", [import_eth_wallet3.Utils.toString(tradeFee)]);
    return result;
  }
  async setTradeFee_call(tradeFee) {
    let result = await this.call("setTradeFee", [import_eth_wallet3.Utils.toString(tradeFee)]);
    return;
  }
  async tradeFee() {
    let result = await this.call("tradeFee");
    return new import_eth_wallet3.BigNumber(result);
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setLiveForPair = Object.assign(this.setLiveForPair_send, { call: this.setLiveForPair_call });
    this.setProtocolFee = Object.assign(this.setProtocolFee_send, { call: this.setProtocolFee_call });
    this.setProtocolFeeTo = Object.assign(this.setProtocolFeeTo_send, { call: this.setProtocolFeeTo_call });
    this.setTradeFee = Object.assign(this.setTradeFee_send, { call: this.setTradeFee_call });
  }
};

// src/contracts/amm/OSWAP_Pair.ts
var import_eth_wallet4 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/amm/OSWAP_Pair.json.ts
var OSWAP_Pair_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "Burn", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1", "type": "uint256" }], "name": "Mint", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "ProtocolFeeSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount0In", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1In", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint112", "name": "reserve0", "type": "uint112" }, { "indexed": false, "internalType": "uint112", "name": "reserve1", "type": "uint112" }], "name": "Sync", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }], "name": "TradeFeeSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "inputs": [], "name": "EIP712_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "MINIMUM_LIQUIDITY", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "NAME_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "PERMIT_TYPEHASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "VERSION_HASH", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }], "name": "burn", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getReserves", "outputs": [{ "internalType": "uint112", "name": "_reserve0", "type": "uint112" }, { "internalType": "uint112", "name": "_reserve1", "type": "uint112" }, { "internalType": "uint32", "name": "_blockTimestampLast", "type": "uint32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "kLast", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }], "name": "mint", "outputs": [{ "internalType": "uint256", "name": "liquidity", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "nonces", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "price0CumulativeLast", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "price1CumulativeLast", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }], "name": "skim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60a06040526001600c553480156200001657600080fd5b5033606081901b6080526004805460ff19166001178155604080516324bcdfbd60e01b8152905183926324bcdfbd92808201926020929091829003018186803b1580156200006357600080fd5b505afa15801562000078573d6000803e3d6000fd5b505050506040513d60208110156200008f57600080fd5b5051600a55604080516358710f4560e11b815290516001600160a01b0383169163b0e21e8a916004808301926020929190829003018186803b158015620000d557600080fd5b505afa158015620000ea573d6000803e3d6000fd5b505050506040513d60208110156200010157600080fd5b5051600b55600a5460408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a1600b5460408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a15060805160601c613b55620001b2600039806108855280611389528061147252806118055280611d8a52806125a45280612b96528061351d5250613b556000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806370a0823111610160578063b8f7a665116100d8578063d21220a71161008c578063dd62ed3e11610071578063dd62ed3e146107a8578063f5ee3348146107e3578063fff6cae91461080257610277565b8063d21220a714610742578063d505accf1461074a57610277565b8063bc25cf77116100bd578063bc25cf77146106ce578063c45a015514610701578063ca706bcf1461070957610277565b8063b8f7a665146106be578063ba9a7a56146106c657610277565b806389afcb441161012f5780639e4e7318116101145780639e4e731814610675578063a9059cbb1461067d578063b0e21e8a146106b657610277565b806389afcb441461062157806395d89b411461066d57610277565b806370a08231146105ab5780637464fc3d146105de578063758cdcf0146105e65780637ecebe00146105ee57610277565b8063253d2c7d116101f3578063485cc955116101c25780635a3d5493116101a75780635a3d549314610537578063632db21c1461053f5780636a6278421461057857610277565b8063485cc955146104f45780635909c0d51461052f57610277565b8063253d2c7d146104be57806330adf81f146104c6578063313ce567146104ce578063481bdf0d146104ec57610277565b8063095ea7b31161024a57806318160ddd1161022f57806318160ddd1461046b57806323b872dd1461047357806324bcdfbd146104b657610277565b8063095ea7b3146103ed5780630dfe16811461043a57610277565b8063022c0d9f1461027c57806304622c2e1461031757806306fdde03146103315780630902f1ac146103ae575b600080fd5b6103156004803603608081101561029257600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102d657600080fd5b8201836020820111156102e857600080fd5b8035906020019184600183028401116401000000008311171561030a57600080fd5b50909250905061080a565b005b61031f6110a4565b60408051918252519081900360200190f35b6103396110c8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037357818101518382015260200161035b565b50505050905090810190601f1680156103a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103b6611101565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6104266004803603604081101561040357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611156565b604080519115158252519081900360200190f35b61044261116d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61031f61118e565b6104266004803603606081101561048957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611194565b61031f611273565b61031f611279565b61031f61129d565b6104d66112c1565b6040805160ff9092168252519081900360200190f35b6103156112c6565b6103156004803603604081101561050a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661145a565b61031f611572565b61031f611578565b61031f6004803603604081101561055557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561157e565b61031f6004803603602081101561058e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611788565b61031f600480360360208110156105c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cf7565b61031f611d09565b610315611d0f565b61031f6004803603602081101561060457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e58565b6106546004803603602081101561063757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e6a565b6040805192835260208301919091528051918290030190f35b610339612324565b61031f61235d565b6104266004803603604081101561069357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612381565b61031f61238e565b610426612394565b61031f61239d565b610315600480360360208110156106e457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123a3565b6104426125a2565b61031f6004803603604081101561071f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356125c6565b6104426127d5565b610315600480360360e081101561076057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356127f1565b61031f600480360360408110156107be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612b61565b610315600480360360208110156107f957600080fd5b50351515612b7e565b610315612c53565b600c5460011461087b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b505161098257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff166109f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000851180610a025750600084115b610a6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600080610a78611101565b5091509150816dffffffffffffffffffffffffffff1687108015610aab5750806dffffffffffffffffffffffffffff1686105b610b1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b600454600554600091829173ffffffffffffffffffffffffffffffffffffffff6101009092048216919081169089168214801590610b8057508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b610beb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f544f00000000000000000000000000000000000000000000604482015290519081900360640190fd5b8a15610bfc57610bfc828a8d612e41565b8915610c0d57610c0d818a8c612e41565b8615610cef578873ffffffffffffffffffffffffffffffffffffffff16638a62aac4338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610d5b57600080fd5b505afa158015610d6f573d6000803e3d6000fd5b505050506040513d6020811015610d8557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610df757600080fd5b505afa158015610e0b573d6000803e3d6000fd5b505050506040513d6020811015610e2157600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610e4b576000610e61565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610e85576000610e9b565b89856dffffffffffffffffffffffffffff160383035b90506000821180610eac5750600081115b610f1757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6000610f50610f31600a548561304e90919063ffffffff16565b610f4487620186a063ffffffff61304e16565b9063ffffffff6130c816565b90506000610f6c610f31600a548561304e90919063ffffffff16565b9050610fa66402540be400610f9a6dffffffffffffffffffffffffffff8b8116908b1663ffffffff61304e16565b9063ffffffff61304e16565b610fb6838363ffffffff61304e16565b101561102357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f4b00000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50506110318484888861310a565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b7fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba81565b6040518060400160405280600c81526020017f4f70656e53776170204c5073000000000000000000000000000000000000000081525081565b6006546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006111633384846133c6565b5060015b92915050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461125e5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205461122c908363ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b611269848484613435565b5060019392505050565b600a5481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600c5460011461133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611347611101565b509150915060006113588383613516565b90508015611387576113836dffffffffffffffffffffffffffff84811690841663ffffffff61304e16565b6009555b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5051600b81905560408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a150506001600c5550565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146114fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff94851602179055600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60075481565b60085481565b600080611599600a54620186a06130c890919063ffffffff16565b600554909150600090819073ffffffffffffffffffffffffffffffffffffffff8781169116146115f0576006546dffffffffffffffffffffffffffff6e01000000000000000000000000000082048116911661161a565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116116ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b6000821180156116bd5750600081115b61172857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000611741620186a0610f9a858963ffffffff61304e16565b9050600061175985610f9a858a63ffffffff6130c816565b905061177c6001611770848463ffffffff6136d616565b9063ffffffff61371816565b98975050505050505050565b6000600c546001146117fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b505050506040513d602081101561189557600080fd5b505161190257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff1661197357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008061197e611101565b50915091506000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d6020811015611af157600080fd5b505190506000611b17836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b3b836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b498787613516565b60005490915080611b8657611b726103e8610f44611b6d878763ffffffff61304e16565b61378c565b9850611b8160006103e86137de565b611be3565b611be06dffffffffffffffffffffffffffff8916611baa868463ffffffff61304e16565b81611bb157fe5b046dffffffffffffffffffffffffffff8916611bd3868563ffffffff61304e16565b81611bda57fe5b0461388e565b98505b60008911611c5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015290519081900360640190fd5b611c5c8a8a6137de565b611c6886868a8a61310a565b8115611caa57600654611ca6906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b60095481565b600c54600114611d8057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166324bcdfbd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dee57600080fd5b505afa158015611e02573d6000803e3d6000fd5b505050506040513d6020811015611e1857600080fd5b5051600a81905560408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a16001600c55565b60036020526000908152604090205481565b600080600c54600114611ede57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611eee611101565b5030600090815260016020526040812054929450909250611f0f8484613516565b60048054600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230948101949094525193945073ffffffffffffffffffffffffffffffffffffffff61010090920482169391169160009184916370a08231916024808301926020929190829003018186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d6020811015611fbe57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561203257600080fd5b505afa158015612046573d6000803e3d6000fd5b505050506040513d602081101561205c57600080fd5b505160005490915080612075888563ffffffff61304e16565b8161207c57fe5b049a5080612090888463ffffffff61304e16565b8161209757fe5b04995060008b1180156120aa575060008a115b61211557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e4544000000604482015290519081900360640190fd5b61211f30886138a4565b61212a858d8d612e41565b612135848d8c612e41565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8716916370a08231916024808301926020929190829003018186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d60208110156121cb57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191945073ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b15801561223d57600080fd5b505afa158015612251573d6000803e3d6000fd5b505050506040513d602081101561226757600080fd5b5051915061227783838b8b61310a565b85156122b9576006546122b5906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b604080518c8152602081018c9052815173ffffffffffffffffffffffffffffffffffffffff8f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600881526020017f4f535741502d4c5000000000000000000000000000000000000000000000000081525081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6000611163338484613435565b600b5481565b60045460ff1681565b6103e881565b600c5460011461241457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054600554600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230958101959095525161010090930473ffffffffffffffffffffffffffffffffffffffff908116949216926124f992859287926124f4926dffffffffffffffffffffffffffff9092169185916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b505afa1580156124d0573d6000803e3d6000fd5b505050506040513d60208110156124e657600080fd5b50519063ffffffff6130c816565b612e41565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161259892849287926124f4926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b50506001600c5550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806125e1600a54620186a06130c890919063ffffffff16565b600454909150600090819073ffffffffffffffffffffffffffffffffffffffff878116610100909204161461263d576006546dffffffffffffffffffffffffffff6e010000000000000000000000000000820481169116612667565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116126fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60008211801561270a5750600081115b61277557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000612787868563ffffffff61304e16565b9050600061279b828463ffffffff61304e16565b905060006127b68361177087620186a063ffffffff61304e16565b90506127c8828263ffffffff6136d616565b9998505050505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561286057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba828401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608301524660808301523060a0808401919091528351808403909101815260c08301845280519082012073ffffffffffffffffffffffffffffffffffffffff8b8116600081815260038552868120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0890152610100880193909352928d1661012087015261014086018c90526101608601919091526101808086018b9052865180870390910181526101a0860187528051908501207f19010000000000000000000000000000000000000000000000000000000000006101c08701526101c286018490526101e28087019190915286518087039091018152610202860180885281519186019190912090829052610222860180885281905260ff8a16610242870152610262860189905261028286018890529551929594909391926102a280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015612a64573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590612adf57508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612b4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015290519081900360640190fd5b612b558a8a8a6133c6565b50505050505050505050565b600260209081526000928352604080842090915290825290205481565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612c2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600c54600114612cc457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054604080517f70a08231000000000000000000000000000000000000000000000000000000008152309381019390935251612e3a9261010090920473ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015612d4357600080fd5b505afa158015612d57573d6000803e3d6000fd5b505050506040513d6020811015612d6d57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612de057600080fd5b505afa158015612df4573d6000803e3d6000fd5b505050506040513d6020811015612e0a57600080fd5b50516006546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041661310a565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310612f4757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612f0a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b5091509150818015612fdc575080511580612fdc5750808060200190516020811015612fd957600080fd5b50515b61304757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008261305d57506000611167565b8282028284828161306a57fe5b04146130c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613aff6021913960400191505060405180910390fd5b9392505050565b60006130c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613969565b6dffffffffffffffffffffffffffff841180159061313657506dffffffffffffffffffffffffffff8311155b6131a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60065463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906131f157506dffffffffffffffffffffffffffff841615155b801561320c57506dffffffffffffffffffffffffffff831615155b156132bc578063ffffffff1661324f8561322586613a1a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff613a3e16565b600780547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661328f8461322587613a1a565b600880547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600680547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205461346b908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602052604080822093909355908416815220546134ad908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639931e80b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561358057600080fd5b505afa158015613594573d6000803e3d6000fd5b505050506040513d60408110156135aa57600080fd5b508051602090910151600b5460095473ffffffffffffffffffffffffffffffffffffffff83161580159750939550919350916136b35780156136ae57600061360e611b6d6dffffffffffffffffffffffffffff8a8116908a1663ffffffff61304e16565b9050600061361b8361378c565b9050808211156136ab57600061364d85610f9a61363e868663ffffffff6130c816565b6000549063ffffffff61304e16565b90506000613687613664848863ffffffff61304e16565b61177061367a620186a08a63ffffffff6130c816565b879063ffffffff61304e16565b9050600081838161369457fe5b04905080156136a7576136a788826137de565b5050505b50505b6136bf565b80156136bf5760006009555b8382146136cc57600b8490555b5050505092915050565b60006130c183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613a7f565b6000828201838110156130c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600060038211156137cf575080600160028204015b818110156137c9578091506002818285816137b857fe5b0401816137c157fe5b0490506137a1565b506137d9565b81156137d9575060015b919050565b6000546137f1908263ffffffff61371816565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054613829908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061389d57816130c1565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546138da908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554613914908263ffffffff6130c816565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b60008184841115613a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139d75781810151838201526020016139bf565b50505050905090810190601f168015613a045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681613a7757fe5b049392505050565b60008183613ae8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156139d75781810151838201526020016139bf565b506000838581613af457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122027a8d76894289a79faa3322bb1179c0d57c06b8e157fef9c3f081474c0dc79d364736f6c634300060b0033"
};

// src/contracts/amm/OSWAP_Pair.ts
var OSWAP_Pair = class extends import_eth_wallet4.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_Pair_json_default.abi, OSWAP_Pair_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet4.BigNumber(result.value),
      _event: event
    };
  }
  parseBurnEvent(receipt) {
    return this.parseEvents(receipt, "Burn").map((e) => this.decodeBurnEvent(e));
  }
  decodeBurnEvent(event) {
    let result = event.data;
    return {
      sender: result.sender,
      amount0: new import_eth_wallet4.BigNumber(result.amount0),
      amount1: new import_eth_wallet4.BigNumber(result.amount1),
      to: result.to,
      _event: event
    };
  }
  parseMintEvent(receipt) {
    return this.parseEvents(receipt, "Mint").map((e) => this.decodeMintEvent(e));
  }
  decodeMintEvent(event) {
    let result = event.data;
    return {
      sender: result.sender,
      amount0: new import_eth_wallet4.BigNumber(result.amount0),
      amount1: new import_eth_wallet4.BigNumber(result.amount1),
      _event: event
    };
  }
  parseProtocolFeeSetEvent(receipt) {
    return this.parseEvents(receipt, "ProtocolFeeSet").map((e) => this.decodeProtocolFeeSetEvent(e));
  }
  decodeProtocolFeeSetEvent(event) {
    let result = event.data;
    return {
      protocolFee: new import_eth_wallet4.BigNumber(result.protocolFee),
      _event: event
    };
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      sender: result.sender,
      amount0In: new import_eth_wallet4.BigNumber(result.amount0In),
      amount1In: new import_eth_wallet4.BigNumber(result.amount1In),
      amount0Out: new import_eth_wallet4.BigNumber(result.amount0Out),
      amount1Out: new import_eth_wallet4.BigNumber(result.amount1Out),
      to: result.to,
      _event: event
    };
  }
  parseSyncEvent(receipt) {
    return this.parseEvents(receipt, "Sync").map((e) => this.decodeSyncEvent(e));
  }
  decodeSyncEvent(event) {
    let result = event.data;
    return {
      reserve0: new import_eth_wallet4.BigNumber(result.reserve0),
      reserve1: new import_eth_wallet4.BigNumber(result.reserve1),
      _event: event
    };
  }
  parseTradeFeeSetEvent(receipt) {
    return this.parseEvents(receipt, "TradeFeeSet").map((e) => this.decodeTradeFeeSetEvent(e));
  }
  decodeTradeFeeSetEvent(event) {
    let result = event.data;
    return {
      tradeFee: new import_eth_wallet4.BigNumber(result.tradeFee),
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet4.BigNumber(result.value),
      _event: event
    };
  }
  async EIP712_TYPEHASH() {
    let result = await this.call("EIP712_TYPEHASH");
    return result;
  }
  async MINIMUM_LIQUIDITY() {
    let result = await this.call("MINIMUM_LIQUIDITY");
    return new import_eth_wallet4.BigNumber(result);
  }
  async NAME_HASH() {
    let result = await this.call("NAME_HASH");
    return result;
  }
  async PERMIT_TYPEHASH() {
    let result = await this.call("PERMIT_TYPEHASH");
    return result;
  }
  async VERSION_HASH() {
    let result = await this.call("VERSION_HASH");
    return result;
  }
  async allowance(params) {
    let result = await this.call("allowance", [params.param1, params.param2]);
    return new import_eth_wallet4.BigNumber(result);
  }
  async approve_send(params) {
    let result = await this.send("approve", [params.spender, import_eth_wallet4.Utils.toString(params.value)]);
    return result;
  }
  async approve_call(params) {
    let result = await this.call("approve", [params.spender, import_eth_wallet4.Utils.toString(params.value)]);
    return result;
  }
  async balanceOf(param1) {
    let result = await this.call("balanceOf", [param1]);
    return new import_eth_wallet4.BigNumber(result);
  }
  async burn_send(to) {
    let result = await this.send("burn", [to]);
    return result;
  }
  async burn_call(to) {
    let result = await this.call("burn", [to]);
    return {
      amount0: new import_eth_wallet4.BigNumber(result.amount0),
      amount1: new import_eth_wallet4.BigNumber(result.amount1)
    };
  }
  async decimals() {
    let result = await this.call("decimals");
    return new import_eth_wallet4.BigNumber(result);
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [params.tokenOut, import_eth_wallet4.Utils.toString(params.amountOut)]);
    return new import_eth_wallet4.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [params.tokenIn, import_eth_wallet4.Utils.toString(params.amountIn)]);
    return new import_eth_wallet4.BigNumber(result);
  }
  async getReserves() {
    let result = await this.call("getReserves");
    return {
      _reserve0: new import_eth_wallet4.BigNumber(result._reserve0),
      _reserve1: new import_eth_wallet4.BigNumber(result._reserve1),
      _blockTimestampLast: new import_eth_wallet4.BigNumber(result._blockTimestampLast)
    };
  }
  async initialize_send(params) {
    let result = await this.send("initialize", [params.token0, params.token1]);
    return result;
  }
  async initialize_call(params) {
    let result = await this.call("initialize", [params.token0, params.token1]);
    return;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async kLast() {
    let result = await this.call("kLast");
    return new import_eth_wallet4.BigNumber(result);
  }
  async mint_send(to) {
    let result = await this.send("mint", [to]);
    return result;
  }
  async mint_call(to) {
    let result = await this.call("mint", [to]);
    return new import_eth_wallet4.BigNumber(result);
  }
  async name() {
    let result = await this.call("name");
    return result;
  }
  async nonces(param1) {
    let result = await this.call("nonces", [param1]);
    return new import_eth_wallet4.BigNumber(result);
  }
  async permit_send(params) {
    let result = await this.send("permit", [params.owner, params.spender, import_eth_wallet4.Utils.toString(params.value), import_eth_wallet4.Utils.toString(params.deadline), import_eth_wallet4.Utils.toString(params.v), import_eth_wallet4.Utils.stringToBytes32(params.r), import_eth_wallet4.Utils.stringToBytes32(params.s)]);
    return result;
  }
  async permit_call(params) {
    let result = await this.call("permit", [params.owner, params.spender, import_eth_wallet4.Utils.toString(params.value), import_eth_wallet4.Utils.toString(params.deadline), import_eth_wallet4.Utils.toString(params.v), import_eth_wallet4.Utils.stringToBytes32(params.r), import_eth_wallet4.Utils.stringToBytes32(params.s)]);
    return;
  }
  async price0CumulativeLast() {
    let result = await this.call("price0CumulativeLast");
    return new import_eth_wallet4.BigNumber(result);
  }
  async price1CumulativeLast() {
    let result = await this.call("price1CumulativeLast");
    return new import_eth_wallet4.BigNumber(result);
  }
  async protocolFee() {
    let result = await this.call("protocolFee");
    return new import_eth_wallet4.BigNumber(result);
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async skim_send(to) {
    let result = await this.send("skim", [to]);
    return result;
  }
  async skim_call(to) {
    let result = await this.call("skim", [to]);
    return;
  }
  async swap_send(params) {
    let result = await this.send("swap", [import_eth_wallet4.Utils.toString(params.amount0Out), import_eth_wallet4.Utils.toString(params.amount1Out), params.to, params.data]);
    return result;
  }
  async swap_call(params) {
    let result = await this.call("swap", [import_eth_wallet4.Utils.toString(params.amount0Out), import_eth_wallet4.Utils.toString(params.amount1Out), params.to, params.data]);
    return;
  }
  async symbol() {
    let result = await this.call("symbol");
    return result;
  }
  async sync_send() {
    let result = await this.send("sync");
    return result;
  }
  async sync_call() {
    let result = await this.call("sync");
    return;
  }
  async token0() {
    let result = await this.call("token0");
    return result;
  }
  async token1() {
    let result = await this.call("token1");
    return result;
  }
  async totalSupply() {
    let result = await this.call("totalSupply");
    return new import_eth_wallet4.BigNumber(result);
  }
  async tradeFee() {
    let result = await this.call("tradeFee");
    return new import_eth_wallet4.BigNumber(result);
  }
  async transfer_send(params) {
    let result = await this.send("transfer", [params.to, import_eth_wallet4.Utils.toString(params.value)]);
    return result;
  }
  async transfer_call(params) {
    let result = await this.call("transfer", [params.to, import_eth_wallet4.Utils.toString(params.value)]);
    return result;
  }
  async transferFrom_send(params) {
    let result = await this.send("transferFrom", [params.from, params.to, import_eth_wallet4.Utils.toString(params.value)]);
    return result;
  }
  async transferFrom_call(params) {
    let result = await this.call("transferFrom", [params.from, params.to, import_eth_wallet4.Utils.toString(params.value)]);
    return result;
  }
  async updateFee_send() {
    let result = await this.send("updateFee");
    return result;
  }
  async updateFee_call() {
    let result = await this.call("updateFee");
    return;
  }
  async updateProtocolFee_send() {
    let result = await this.send("updateProtocolFee");
    return result;
  }
  async updateProtocolFee_call() {
    let result = await this.call("updateProtocolFee");
    return;
  }
  assign() {
    this.approve = Object.assign(this.approve_send, { call: this.approve_call });
    this.burn = Object.assign(this.burn_send, { call: this.burn_call });
    this.initialize = Object.assign(this.initialize_send, { call: this.initialize_call });
    this.mint = Object.assign(this.mint_send, { call: this.mint_call });
    this.permit = Object.assign(this.permit_send, { call: this.permit_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.skim = Object.assign(this.skim_send, { call: this.skim_call });
    this.swap = Object.assign(this.swap_send, { call: this.swap_call });
    this.sync = Object.assign(this.sync_send, { call: this.sync_call });
    this.transfer = Object.assign(this.transfer_send, { call: this.transfer_call });
    this.transferFrom = Object.assign(this.transferFrom_send, { call: this.transferFrom_call });
    this.updateFee = Object.assign(this.updateFee_send, { call: this.updateFee_call });
    this.updateProtocolFee = Object.assign(this.updateProtocolFee_send, { call: this.updateProtocolFee_call });
  }
};

// src/contracts/amm/OSWAP_PairCreator.ts
var import_eth_wallet5 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/amm/OSWAP_PairCreator.json.ts
var OSWAP_PairCreator_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50613dfb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b613d07806100bf8339019056fe60a06040526001600c553480156200001657600080fd5b5033606081901b6080526004805460ff19166001178155604080516324bcdfbd60e01b8152905183926324bcdfbd92808201926020929091829003018186803b1580156200006357600080fd5b505afa15801562000078573d6000803e3d6000fd5b505050506040513d60208110156200008f57600080fd5b5051600a55604080516358710f4560e11b815290516001600160a01b0383169163b0e21e8a916004808301926020929190829003018186803b158015620000d557600080fd5b505afa158015620000ea573d6000803e3d6000fd5b505050506040513d60208110156200010157600080fd5b5051600b55600a5460408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a1600b5460408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a15060805160601c613b55620001b2600039806108855280611389528061147252806118055280611d8a52806125a45280612b96528061351d5250613b556000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806370a0823111610160578063b8f7a665116100d8578063d21220a71161008c578063dd62ed3e11610071578063dd62ed3e146107a8578063f5ee3348146107e3578063fff6cae91461080257610277565b8063d21220a714610742578063d505accf1461074a57610277565b8063bc25cf77116100bd578063bc25cf77146106ce578063c45a015514610701578063ca706bcf1461070957610277565b8063b8f7a665146106be578063ba9a7a56146106c657610277565b806389afcb441161012f5780639e4e7318116101145780639e4e731814610675578063a9059cbb1461067d578063b0e21e8a146106b657610277565b806389afcb441461062157806395d89b411461066d57610277565b806370a08231146105ab5780637464fc3d146105de578063758cdcf0146105e65780637ecebe00146105ee57610277565b8063253d2c7d116101f3578063485cc955116101c25780635a3d5493116101a75780635a3d549314610537578063632db21c1461053f5780636a6278421461057857610277565b8063485cc955146104f45780635909c0d51461052f57610277565b8063253d2c7d146104be57806330adf81f146104c6578063313ce567146104ce578063481bdf0d146104ec57610277565b8063095ea7b31161024a57806318160ddd1161022f57806318160ddd1461046b57806323b872dd1461047357806324bcdfbd146104b657610277565b8063095ea7b3146103ed5780630dfe16811461043a57610277565b8063022c0d9f1461027c57806304622c2e1461031757806306fdde03146103315780630902f1ac146103ae575b600080fd5b6103156004803603608081101561029257600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102d657600080fd5b8201836020820111156102e857600080fd5b8035906020019184600183028401116401000000008311171561030a57600080fd5b50909250905061080a565b005b61031f6110a4565b60408051918252519081900360200190f35b6103396110c8565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037357818101518382015260200161035b565b50505050905090810190601f1680156103a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103b6611101565b604080516dffffffffffffffffffffffffffff948516815292909316602083015263ffffffff168183015290519081900360600190f35b6104266004803603604081101561040357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611156565b604080519115158252519081900360200190f35b61044261116d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61031f61118e565b6104266004803603606081101561048957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135611194565b61031f611273565b61031f611279565b61031f61129d565b6104d66112c1565b6040805160ff9092168252519081900360200190f35b6103156112c6565b6103156004803603604081101561050a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661145a565b61031f611572565b61031f611578565b61031f6004803603604081101561055557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561157e565b61031f6004803603602081101561058e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611788565b61031f600480360360208110156105c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cf7565b61031f611d09565b610315611d0f565b61031f6004803603602081101561060457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e58565b6106546004803603602081101561063757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e6a565b6040805192835260208301919091528051918290030190f35b610339612324565b61031f61235d565b6104266004803603604081101561069357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612381565b61031f61238e565b610426612394565b61031f61239d565b610315600480360360208110156106e457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123a3565b6104426125a2565b61031f6004803603604081101561071f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356125c6565b6104426127d5565b610315600480360360e081101561076057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356127f1565b61031f600480360360408110156107be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612b61565b610315600480360360208110156107f957600080fd5b50351515612b7e565b610315612c53565b600c5460011461087b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d602081101561091557600080fd5b505161098257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff166109f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000851180610a025750600084115b610a6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600080610a78611101565b5091509150816dffffffffffffffffffffffffffff1687108015610aab5750806dffffffffffffffffffffffffffff1686105b610b1657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b600454600554600091829173ffffffffffffffffffffffffffffffffffffffff6101009092048216919081169089168214801590610b8057508073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614155b610beb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f494e56414c49445f544f00000000000000000000000000000000000000000000604482015290519081900360640190fd5b8a15610bfc57610bfc828a8d612e41565b8915610c0d57610c0d818a8c612e41565b8615610cef578873ffffffffffffffffffffffffffffffffffffffff16638a62aac4338d8d8c8c6040518663ffffffff1660e01b8152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050505b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8416916370a08231916024808301926020929190829003018186803b158015610d5b57600080fd5b505afa158015610d6f573d6000803e3d6000fd5b505050506040513d6020811015610d8557600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191955073ffffffffffffffffffffffffffffffffffffffff8316916370a0823191602480820192602092909190829003018186803b158015610df757600080fd5b505afa158015610e0b573d6000803e3d6000fd5b505050506040513d6020811015610e2157600080fd5b5051925060009150506dffffffffffffffffffffffffffff85168a90038311610e4b576000610e61565b89856dffffffffffffffffffffffffffff160383035b9050600089856dffffffffffffffffffffffffffff16038311610e85576000610e9b565b89856dffffffffffffffffffffffffffff160383035b90506000821180610eac5750600081115b610f1757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6000610f50610f31600a548561304e90919063ffffffff16565b610f4487620186a063ffffffff61304e16565b9063ffffffff6130c816565b90506000610f6c610f31600a548561304e90919063ffffffff16565b9050610fa66402540be400610f9a6dffffffffffffffffffffffffffff8b8116908b1663ffffffff61304e16565b9063ffffffff61304e16565b610fb6838363ffffffff61304e16565b101561102357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f4b00000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50506110318484888861310a565b60408051838152602081018390528082018d9052606081018c9052905173ffffffffffffffffffffffffffffffffffffffff8b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001600c55505050505050505050565b7fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba81565b6040518060400160405280600c81526020017f4f70656e53776170204c5073000000000000000000000000000000000000000081525081565b6006546dffffffffffffffffffffffffffff808216926e0100000000000000000000000000008304909116917c0100000000000000000000000000000000000000000000000000000000900463ffffffff1690565b60006111633384846133c6565b5060015b92915050565b600454610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1461125e5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915290205461122c908363ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b611269848484613435565b5060019392505050565b600a5481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b600c5460011461133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611347611101565b509150915060006113588383613516565b90508015611387576113836dffffffffffffffffffffffffffff84811690841663ffffffff61304e16565b6009555b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113ed57600080fd5b505afa158015611401573d6000803e3d6000fd5b505050506040513d602081101561141757600080fd5b5051600b81905560408051918252517fdb5aafdb29539329e37d4e3ee869bc4031941fd55a5dfc92824fbe34b204e30d9181900360200190a150506001600c5550565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146114fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff94851602179055600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60075481565b60085481565b600080611599600a54620186a06130c890919063ffffffff16565b600554909150600090819073ffffffffffffffffffffffffffffffffffffffff8781169116146115f0576006546dffffffffffffffffffffffffffff6e01000000000000000000000000000082048116911661161a565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116116ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b6000821180156116bd5750600081115b61172857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000611741620186a0610f9a858963ffffffff61304e16565b9050600061175985610f9a858a63ffffffff6130c816565b905061177c6001611770848463ffffffff6136d616565b9063ffffffff61371816565b98975050505050505050565b6000600c546001146117fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186b57600080fd5b505af115801561187f573d6000803e3d6000fd5b505050506040513d602081101561189557600080fd5b505161190257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60045460ff1661197357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f5041495220504155534544000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008061197e611101565b50915091506000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905192935060009273ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d6020811015611af157600080fd5b505190506000611b17836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b3b836dffffffffffffffffffffffffffff871663ffffffff6130c816565b90506000611b498787613516565b60005490915080611b8657611b726103e8610f44611b6d878763ffffffff61304e16565b61378c565b9850611b8160006103e86137de565b611be3565b611be06dffffffffffffffffffffffffffff8916611baa868463ffffffff61304e16565b81611bb157fe5b046dffffffffffffffffffffffffffff8916611bd3868563ffffffff61304e16565b81611bda57fe5b0461388e565b98505b60008911611c5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015290519081900360640190fd5b611c5c8a8a6137de565b611c6886868a8a61310a565b8115611caa57600654611ca6906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001600c5550949695505050505050565b60016020526000908152604090205481565b60095481565b600c54600114611d8057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166324bcdfbd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dee57600080fd5b505afa158015611e02573d6000803e3d6000fd5b505050506040513d6020811015611e1857600080fd5b5051600a81905560408051918252517f1ce638f7798b6e448ecff4c806c7c01d3fedb23354b03f03994f5161b12bad629181900360200190a16001600c55565b60036020526000908152604090205481565b600080600c54600114611ede57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c81905580611eee611101565b5030600090815260016020526040812054929450909250611f0f8484613516565b60048054600554604080517f70a0823100000000000000000000000000000000000000000000000000000000815230948101949094525193945073ffffffffffffffffffffffffffffffffffffffff61010090920482169391169160009184916370a08231916024808301926020929190829003018186803b158015611f9457600080fd5b505afa158015611fa8573d6000803e3d6000fd5b505050506040513d6020811015611fbe57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191925060009173ffffffffffffffffffffffffffffffffffffffff8516916370a08231916024808301926020929190829003018186803b15801561203257600080fd5b505afa158015612046573d6000803e3d6000fd5b505050506040513d602081101561205c57600080fd5b505160005490915080612075888563ffffffff61304e16565b8161207c57fe5b049a5080612090888463ffffffff61304e16565b8161209757fe5b04995060008b1180156120aa575060008a115b61211557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4255524e4544000000604482015290519081900360640190fd5b61211f30886138a4565b61212a858d8d612e41565b612135848d8c612e41565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff8716916370a08231916024808301926020929190829003018186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d60208110156121cb57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905191945073ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b15801561223d57600080fd5b505afa158015612251573d6000803e3d6000fd5b505050506040513d602081101561226757600080fd5b5051915061227783838b8b61310a565b85156122b9576006546122b5906dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041663ffffffff61304e16565b6009555b604080518c8152602081018c9052815173ffffffffffffffffffffffffffffffffffffffff8f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001600c81905550915091565b6040518060400160405280600881526020017f4f535741502d4c5000000000000000000000000000000000000000000000000081525081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6000611163338484613435565b600b5481565b60045460ff1681565b6103e881565b600c5460011461241457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054600554600654604080517f70a0823100000000000000000000000000000000000000000000000000000000815230958101959095525161010090930473ffffffffffffffffffffffffffffffffffffffff908116949216926124f992859287926124f4926dffffffffffffffffffffffffffff9092169185916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b505afa1580156124d0573d6000803e3d6000fd5b505050506040513d60208110156124e657600080fd5b50519063ffffffff6130c816565b612e41565b600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905161259892849287926124f4926e01000000000000000000000000000090046dffffffffffffffffffffffffffff169173ffffffffffffffffffffffffffffffffffffffff8616916370a0823191602480820192602092909190829003018186803b1580156124bc57600080fd5b50506001600c5550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806125e1600a54620186a06130c890919063ffffffff16565b600454909150600090819073ffffffffffffffffffffffffffffffffffffffff878116610100909204161461263d576006546dffffffffffffffffffffffffffff6e010000000000000000000000000000820481169116612667565b6006546dffffffffffffffffffffffffffff808216916e0100000000000000000000000000009004165b6dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150600085116126fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60008211801561270a5750600081115b61277557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000612787868563ffffffff61304e16565b9050600061279b828463ffffffff61304e16565b905060006127b68361177087620186a063ffffffff61304e16565b90506127c8828263ffffffff6136d616565b9998505050505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561286057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527fccf0ed8d136d82190c405c1be2cf07fff31d482a66996af4f69b3259174a23ba828401527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608301524660808301523060a0808401919091528351808403909101815260c08301845280519082012073ffffffffffffffffffffffffffffffffffffffff8b8116600081815260038552868120805460018082019092557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960e0890152610100880193909352928d1661012087015261014086018c90526101608601919091526101808086018b9052865180870390910181526101a0860187528051908501207f19010000000000000000000000000000000000000000000000000000000000006101c08701526101c286018490526101e28087019190915286518087039091018152610202860180885281519186019190912090829052610222860180885281905260ff8a16610242870152610262860189905261028286018890529551929594909391926102a280830193927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301929081900390910190855afa158015612a64573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811615801590612adf57508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612b4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f5349474e4154555245000000000000000000000000000000604482015290519081900360640190fd5b612b558a8a8a6133c6565b50505050505050505050565b600260209081526000928352604080842090915290825290205481565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612c2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600c54600114612cc457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600c5560048054604080517f70a08231000000000000000000000000000000000000000000000000000000008152309381019390935251612e3a9261010090920473ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015612d4357600080fd5b505afa158015612d57573d6000803e3d6000fd5b505050506040513d6020811015612d6d57600080fd5b5051600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015612de057600080fd5b505afa158015612df4573d6000803e3d6000fd5b505050506040513d6020811015612e0a57600080fd5b50516006546dffffffffffffffffffffffffffff808216916e01000000000000000000000000000090041661310a565b6001600c55565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310612f4757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612f0a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612fa9576040519150601f19603f3d011682016040523d82523d6000602084013e612fae565b606091505b5091509150818015612fdc575080511580612fdc5750808060200190516020811015612fd957600080fd5b50515b61304757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008261305d57506000611167565b8282028284828161306a57fe5b04146130c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613aff6021913960400191505060405180910390fd5b9392505050565b60006130c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613969565b6dffffffffffffffffffffffffffff841180159061313657506dffffffffffffffffffffffffffff8311155b6131a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60065463ffffffff428116917c0100000000000000000000000000000000000000000000000000000000900481168203908116158015906131f157506dffffffffffffffffffffffffffff841615155b801561320c57506dffffffffffffffffffffffffffff831615155b156132bc578063ffffffff1661324f8561322586613a1a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169063ffffffff613a3e16565b600780547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff929092169290920201905563ffffffff811661328f8461322587613a1a565b600880547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff92909216929092020190555b600680547fffffffffffffffffffffffffffffffffffff0000000000000000000000000000166dffffffffffffffffffffffffffff888116919091177fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff166e0100000000000000000000000000008883168102919091177bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167c010000000000000000000000000000000000000000000000000000000063ffffffff871602179283905560408051848416815291909304909116602082015281517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1929181900390910190a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090205461346b908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602052604080822093909355908416815220546134ad908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639931e80b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561358057600080fd5b505afa158015613594573d6000803e3d6000fd5b505050506040513d60408110156135aa57600080fd5b508051602090910151600b5460095473ffffffffffffffffffffffffffffffffffffffff83161580159750939550919350916136b35780156136ae57600061360e611b6d6dffffffffffffffffffffffffffff8a8116908a1663ffffffff61304e16565b9050600061361b8361378c565b9050808211156136ab57600061364d85610f9a61363e868663ffffffff6130c816565b6000549063ffffffff61304e16565b90506000613687613664848863ffffffff61304e16565b61177061367a620186a08a63ffffffff6130c816565b879063ffffffff61304e16565b9050600081838161369457fe5b04905080156136a7576136a788826137de565b5050505b50505b6136bf565b80156136bf5760006009555b8382146136cc57600b8490555b5050505092915050565b60006130c183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613a7f565b6000828201838110156130c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600060038211156137cf575080600160028204015b818110156137c9578091506002818285816137b857fe5b0401816137c157fe5b0490506137a1565b506137d9565b81156137d9575060015b919050565b6000546137f1908263ffffffff61371816565b600090815573ffffffffffffffffffffffffffffffffffffffff8316815260016020526040902054613829908263ffffffff61371816565b73ffffffffffffffffffffffffffffffffffffffff831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600081831061389d57816130c1565b5090919050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160205260409020546138da908263ffffffff6130c816565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081209190915554613914908263ffffffff6130c816565b600090815560408051838152905173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b60008184841115613a12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156139d75781810151838201526020016139bf565b50505050905090810190601f168015613a045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6dffffffffffffffffffffffffffff166e0100000000000000000000000000000290565b60006dffffffffffffffffffffffffffff82167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff841681613a7757fe5b049392505050565b60008183613ae8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528351602484015283519092839260449091019190850190808383600083156139d75781810151838201526020016139bf565b506000838581613af457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122027a8d76894289a79faa3322bb1179c0d57c06b8e157fef9c3f081474c0dc79d364736f6c634300060b0033a264697066735822122072e4e3bbd05cda32fc75230c73b3bd4a2178549cf030922002c42e276842ed9264736f6c634300060b0033"
};

// src/contracts/amm/OSWAP_PairCreator.ts
var OSWAP_PairCreator = class extends import_eth_wallet5.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_PairCreator_json_default.abi, OSWAP_PairCreator_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  async createPair_send(salt) {
    let result = await this.send("createPair", [import_eth_wallet5.Utils.stringToBytes32(salt)]);
    return result;
  }
  async createPair_call(salt) {
    let result = await this.call("createPair", [import_eth_wallet5.Utils.stringToBytes32(salt)]);
    return result;
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
  }
};

// src/contracts/amm/OSWAP_Router.ts
var import_eth_wallet6 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/amm/OSWAP_Router.json.ts
var OSWAP_Router_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "amountADesired", "type": "uint256" }, { "internalType": "uint256", "name": "amountBDesired", "type": "uint256" }, { "internalType": "uint256", "name": "amountAMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountBMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amountTokenDesired", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }], "name": "getAmountsIn", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }], "name": "getAmountsOut", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "getReserves", "outputs": [{ "internalType": "uint256", "name": "reserveA", "type": "uint256" }, { "internalType": "uint256", "name": "reserveB", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "reserveA", "type": "uint256" }, { "internalType": "uint256", "name": "reserveB", "type": "uint256" }], "name": "quote", "outputs": [{ "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "pure", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountAMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountBMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETHSupportingFeeOnTransferTokens", "outputs": [{ "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool", "name": "approveMax", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "removeLiquidityETHWithPermit", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool", "name": "approveMax", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens", "outputs": [{ "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "liquidity", "type": "uint256" }, { "internalType": "uint256", "name": "amountAMin", "type": "uint256" }, { "internalType": "uint256", "name": "amountBMin", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool", "name": "approveMax", "type": "bool" }, { "internalType": "uint8", "name": "v", "type": "uint8" }, { "internalType": "bytes32", "name": "r", "type": "bytes32" }, { "internalType": "bytes32", "name": "s", "type": "bytes32" }], "name": "removeLiquidityWithPermit", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "60c060405234801561001057600080fd5b5060405162005387380380620053878339818101604052604081101561003557600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c61527562000112600039806101b75280610ee05280610f1b5280611107528061139e52806119245280611adc52806120a9528061222d5280612313528061241a52806125c2528061265752806128d05280612a765280612b4b5280612c505280612d385280612db952806136145280613929528061395e52806139925280613a135280613c2d5280613dd25280613e675250806133b752806143825280614e715280614f5252506152756000f3fe60806040526004361061019a5760003560e01c80638803dbee116100e1578063c45a01551161008a578063ded9382a11610064578063ded9382a14610c74578063e8e3370014610cf4578063f305d71914610d81578063fb3bdb4114610dd4576101e0565b8063c45a015514610b60578063d06ca61f14610b75578063d52bb6f414610c2c576101e0565b8063af2979eb116100bb578063af2979eb14610a03578063b6f9de9514610a63578063baa2abde14610af6576101e0565b80638803dbee146108ea578063ad5c46481461098f578063ad615dec146109cd576101e0565b80634a25d94a116101435780635e1e63251161011d5780635e1e632514610764578063791ac947146107b25780637ff36ab514610857576101e0565b80634a25d94a1461059a5780635b0d59841461063f5780635c11d795146106bf576101e0565b80631f00ca74116101745780631f00ca74146103b35780632195995c1461046a57806338ed1739146104f5576101e0565b806302751cec146101e55780630a9a2b721461025e57806318cbafe5146102be576101e0565b366101e0573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101de57fe5b005b600080fd5b3480156101f157600080fd5b50610245600480360360c081101561020857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a00135610e67565b6040805192835260208301919091528051918290030190f35b34801561026a57600080fd5b506102ac6004803603606081101561028157600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201358116916040013516610fba565b60408051918252519081900360200190f35b3480156102ca57600080fd5b50610363600480360360a08110156102e157600080fd5b81359160208101359181019060608101604082013564010000000081111561030857600080fd5b82018360208201111561031a57600080fd5b8035906020019184602083028401116401000000008311171561033c57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561107e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561039f578181015183820152602001610387565b505050509050019250505060405180910390f35b3480156103bf57600080fd5b50610363600480360360408110156103d657600080fd5b813591908101906040810160208201356401000000008111156103f857600080fd5b82018360208201111561040a57600080fd5b8035906020019184602083028401116401000000008311171561042c57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061146a945050505050565b34801561047657600080fd5b50610245600480360361016081101561048e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c08101359060e081013515159060ff61010082013516906101208101359061014001356115f8565b34801561050157600080fd5b50610363600480360360a081101561051857600080fd5b81359160208101359181019060608101604082013564010000000081111561053f57600080fd5b82018360208201111561055157600080fd5b8035906020019184602083028401116401000000008311171561057357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611715565b3480156105a657600080fd5b50610363600480360360a08110156105bd57600080fd5b8135916020810135918101906060810160408201356401000000008111156105e457600080fd5b8201836020820111156105f657600080fd5b8035906020019184602083028401116401000000008311171561061857600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561189b565b34801561064b57600080fd5b506102ac600480360361014081101561066357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135611ad3565b3480156106cb57600080fd5b506101de600480360360a08110156106e257600080fd5b81359160208101359181019060608101604082013564010000000081111561070957600080fd5b82018360208201111561071b57600080fd5b8035906020019184602083028401116401000000008311171561073d57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135611c04565b34801561077057600080fd5b506102ac6004803603606081101561078757600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff60208201358116916040013516611f92565b3480156107be57600080fd5b506101de600480360360a08110156107d557600080fd5b8135916020810135918101906060810160408201356401000000008111156107fc57600080fd5b82018360208201111561080e57600080fd5b8035906020019184602083028401116401000000008311171561083057600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612022565b6103636004803603608081101561086d57600080fd5b8135919081019060408101602082013564010000000081111561088f57600080fd5b8201836020820111156108a157600080fd5b803590602001918460208302840111640100000000831117156108c357600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff81351690602001356123a6565b3480156108f657600080fd5b50610363600480360360a081101561090d57600080fd5b81359160208101359181019060608101604082013564010000000081111561093457600080fd5b82018360208201111561094657600080fd5b8035906020019184602083028401116401000000008311171561096857600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff813516906020013561279a565b34801561099b57600080fd5b506109a46128ce565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156109d957600080fd5b506102ac600480360360608110156109f057600080fd5b50803590602081013590604001356128f2565b348015610a0f57600080fd5b506102ac600480360360c0811015610a2657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356129fe565b6101de60048036036080811015610a7957600080fd5b81359190810190604081016020820135640100000000811115610a9b57600080fd5b820183602082011115610aad57600080fd5b80359060200191846020830284011164010000000083111715610acf57600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135612bde565b348015610b0257600080fd5b50610245600480360360e0811015610b1957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359091169060c001356130a0565b348015610b6c57600080fd5b506109a46133b5565b348015610b8157600080fd5b5061036360048036036040811015610b9857600080fd5b81359190810190604081016020820135640100000000811115610bba57600080fd5b820183602082011115610bcc57600080fd5b80359060200191846020830284011164010000000083111715610bee57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506133d9945050505050565b348015610c3857600080fd5b5061024560048036036040811015610c4f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516613523565b348015610c8057600080fd5b506102456004803603610140811015610c9857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a08101359060c081013515159060ff60e08201351690610100810135906101200135613609565b348015610d0057600080fd5b50610d636004803603610100811015610d1857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135613740565b60408051938452602084019290925282820152519081900360600190f35b610d63600480360360c0811015610d9757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135916040820135916060810135916080820135169060a001356138ae565b61036360048036036080811015610dea57600080fd5b81359190810190604081016020820135640100000000811115610e0c57600080fd5b820183602082011115610e1e57600080fd5b80359060200191846020830284011164010000000083111715610e4057600080fd5b919350915073ffffffffffffffffffffffffffffffffffffffff8135169060200135613bb9565b6000808242811015610eda57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610f09897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a6130a0565b9093509150610f19898685613fdc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610f8c57600080fd5b505af1158015610fa0573d6000803e3d6000fd5b50505050610fae85836141b9565b50965096945050505050565b6000610fc683836142f6565b73ffffffffffffffffffffffffffffffffffffffff1663632db21c83866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561104a57600080fd5b505afa15801561105e573d6000803e3d6000fd5b505050506040513d602081101561107457600080fd5b5051949350505050565b606081428110156110f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061115557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b611231888787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133d992505050565b9150868260018451038151811061124457fe5b602002602001015110156112b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61135d868660008181106112c957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611343898960008181106112f757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600181811061132157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166142f6565b8560008151811061135057fe5b60200260200101516143fb565b61139c828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506145cb915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836001855103815181106113e857fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561142657600080fd5b505af115801561143a573d6000803e3d6000fd5b5050505061145f848360018551038151811061145257fe5b60200260200101516141b9565b509695505050505050565b60606002825110156114dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156114f557600080fd5b5060405190808252806020026020018201604052801561151f578160200160208202803683370190505b509050828160018351038151811061153357fe5b602090810291909101015281517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b80156115f1576115b082828151811061157857fe5b602002602001015184600184038151811061158f57fe5b60200260200101518584815181106115a357fe5b6020026020010151610fba565b8260018303815181106115bf57fe5b60209081029190910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611563565b5092915050565b60008060006116078e8e6142f6565b9050600087611616578c611638565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b1580156116d457600080fd5b505af11580156116e8573d6000803e3d6000fd5b505050506116fb8f8f8f8f8f8f8f6130a0565b809450819550505050509b509b9950505050505050505050565b6060814281101561178757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6117c4888787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133d992505050565b915086826001845103815181106117d757fe5b6020026020010151101561184c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61185c868660008181106112c957fe5b61145f828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506145cb915050565b6060814281101561190d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001686867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061197257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a1157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b611a4e8887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146a92505050565b91508682600081518110611a5e57fe5b602002602001015111156112b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b600080611b008c7f00000000000000000000000000000000000000000000000000000000000000006142f6565b9050600086611b0f578b611b31565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018b905260ff8916608482015260a4810188905260c48101879052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b158015611bcd57600080fd5b505af1158015611be1573d6000803e3d6000fd5b50505050611bf38d8d8d8d8d8d6129fe565b9d9c50505050505050505050505050565b8042811015611c7457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611ce285856000818110611c8457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611cdc88886000818110611cb257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168989600181811061132157fe5b8a6143fb565b600085857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611d1257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611dab57600080fd5b505afa158015611dbf573d6000803e3d6000fd5b505050506040513d6020811015611dd557600080fd5b50516040805160208881028281018201909352888252929350611e17929091899189918291850190849080828437600092019190915250889250614810915050565b86611f1b8288887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611e4a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ee357600080fd5b505afa158015611ef7573d6000803e3d6000fd5b505050506040513d6020811015611f0d57600080fd5b50519063ffffffff614bf316565b1015611f8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b5050505050505050565b6000611f9e83836142f6565b73ffffffffffffffffffffffffffffffffffffffff1663ca706bcf84866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561104a57600080fd5b804281101561209257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181106120f757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461219657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6121a685856000818110611c8457fe5b6121e4858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250614810915050565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561227457600080fd5b505afa158015612288573d6000803e3d6000fd5b505050506040513d602081101561229e57600080fd5b505190508681101561231157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561238457600080fd5b505af1158015612398573d6000803e3d6000fd5b50505050611f8884826141b9565b6060814281101561241857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061245c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b612538348787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506133d992505050565b9150868260018451038151811061254b57fe5b602002602001015110156125c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061260957fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561263c57600080fd5b505af1158015612650573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6126a188886000818110611cb257fe5b846000815181106126ae57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561271f57600080fd5b505af1158015612733573d6000803e3d6000fd5b505050506040513d602081101561274957600080fd5b505161275157fe5b612790828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506145cb915050565b5095945050505050565b6060814281101561280c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6128498887878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146a92505050565b9150868260008151811061285957fe5b6020026020010151111561184c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600080841161296257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6000831180156129725750600082115b6129dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b826129ee858463ffffffff614c3e16565b816129f557fe5b04949350505050565b60008142811015612a7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b612a9f887f000000000000000000000000000000000000000000000000000000000000000089898930896130a0565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051919450612b4992508a91879173ffffffffffffffffffffffffffffffffffffffff8416916370a0823191602480820192602092909190829003018186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b5051613fdc565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b5050505061145f84836141b9565b8042811015612c4e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685856000818110612c9257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612d3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612d9e57600080fd5b505af1158015612db2573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612e0388886000818110611cb257fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612e6d57600080fd5b505af1158015612e81573d6000803e3d6000fd5b505050506040513d6020811015612e9757600080fd5b5051612e9f57fe5b600086867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612ecf57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612f6857600080fd5b505afa158015612f7c573d6000803e3d6000fd5b505050506040513d6020811015612f9257600080fd5b50516040805160208981028281018201909352898252929350612fd49290918a918a918291850190849080828437600092019190915250899250614810915050565b87611f1b8289897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061300757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ee357600080fd5b600080824281101561311357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061311f8b8b6142f6565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff831660248201819052604482018d9052915192935090916323b872dd916064808201926020929091908290030181600087803b1580156131a057600080fd5b505af11580156131b4573d6000803e3d6000fd5b505050506040513d60208110156131ca57600080fd5b5050604080517f89afcb4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015282516000938493928616926389afcb44926024808301939282900301818787803b15801561323d57600080fd5b505af1158015613251573d6000803e3d6000fd5b505050506040513d604081101561326757600080fd5b508051602090910151909250905060006132818e8e614cb1565b5090508073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16146132be5781836132c1565b82825b90975095508a87101561333557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f415f414d4f554e540000000000000000000000604482015290519081900360640190fd5b898610156133a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f425f414d4f554e540000000000000000000000604482015290519081900360640190fd5b505050505097509795505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060028251101561344c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561346457600080fd5b5060405190808252806020026020018201604052801561348e578160200160208202803683370190505b509050828160008151811061349f57fe5b60200260200101818152505060005b60018351038110156115f1576135018282815181106134c957fe5b60200260200101518483815181106134dd57fe5b60200260200101518584600101815181106134f457fe5b6020026020010151611f92565b82826001018151811061351057fe5b60209081029190910101526001016134ae565b60008060006135328585614cb1565b50905060008061354287876142f6565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561358757600080fd5b505afa15801561359b573d6000803e3d6000fd5b505050506040513d60608110156135b157600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff878116908416146135f85780826135fb565b81815b909890975095505050505050565b60008060006136388d7f00000000000000000000000000000000000000000000000000000000000000006142f6565b9050600087613647578c613669565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b604080517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052606481018c905260ff8a16608482015260a4810189905260c48101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163d505accf9160e48082019260009290919082900301818387803b15801561370557600080fd5b505af1158015613719573d6000803e3d6000fd5b5050505061372b8e8e8e8e8e8e610e67565b909f909e509c50505050505050505050505050565b600080600083428110156137b557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6137c38c8c8c8c8c8c614e1a565b909450925060006137d48d8d6142f6565b90506137e28d3383886143fb565b6137ee8c3383876143fb565b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561386d57600080fd5b505af1158015613881573d6000803e3d6000fd5b505050506040513d602081101561389757600080fd5b5051949d939c50939a509198505050505050505050565b6000806000834281101561392357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6139518a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c614e1a565b909450925060006139828b7f00000000000000000000000000000000000000000000000000000000000000006142f6565b90506139908b3383886143fb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156139f857600080fd5b505af1158015613a0c573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613ab857600080fd5b505af1158015613acc573d6000803e3d6000fd5b505050506040513d6020811015613ae257600080fd5b5051613aea57fe5b8073ffffffffffffffffffffffffffffffffffffffff16636a627842886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015613b6957600080fd5b505af1158015613b7d573d6000803e3d6000fd5b505050506040513d6020811015613b9357600080fd5b5051925034841015613bab57613bab338534036141b9565b505096509650969350505050565b60608142811015613c2b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866000818110613c6f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613d0e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b613d4b8787878080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061146a92505050565b91503482600081518110613d5b57fe5b60200260200101511115613dd057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db083600081518110613e1957fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015613e4c57600080fd5b505af1158015613e60573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb613eb188886000818110611cb257fe5b84600081518110613ebe57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613f2f57600080fd5b505af1158015613f43573d6000803e3d6000fd5b505050506040513d6020811015613f5957600080fd5b5051613f6157fe5b613fa0828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506145cb915050565b81600081518110613fad57fe5b6020026020010151341115612790576127903383600081518110613fcd57fe5b602002602001015134036141b9565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106140b257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614075565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614114576040519150601f19603f3d011682016040523d82523d6000602084013e614119565b606091505b5091509150818015614147575080511580614147575080806020019051602081101561414457600080fd5b50515b6141b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061423057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016141f3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614292576040519150601f19603f3d011682016040523d82523d6000602084013e614297565b606091505b50509050806142f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806151f96023913960400191505060405180910390fd5b505050565b60008060006143058585614cb1565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401527f000000000000000000000000000000000000000000000000000000000000000090951b166069820152607d8101939093527f5c193265bc1f16117085a454b86f04b786de5c40d54a45dc24869043eb75f155609d808501919091528151808503909101815260bd9093019052815191012095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106144d957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161449c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461453b576040519150601f19603f3d011682016040523d82523d6000602084013e614540565b606091505b509150915081801561456e57508051158061456e575080806020019051602081101561456b57600080fd5b50515b6145c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061521c6024913960400191505060405180910390fd5b505050505050565b60005b600183510381101561480a576000808483815181106145e957fe5b602002602001015185846001018151811061460057fe5b60200260200101519150915060006146188383614cb1565b509050600087856001018151811061462c57fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161461467457826000614678565b6000835b91509150600060028a5103881061468f57886146af565b6146af868b8a600201815181106146a257fe5b60200260200101516142f6565b90506146bb87876142f6565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015614705576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614790578181015183820152602001614778565b50505050905090810190601f1680156147bd5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156147df57600080fd5b505af11580156147f3573d6000803e3d6000fd5b5050600190990198506145ce975050505050505050565b50505050565b60005b60018351038110156142f15760008084838151811061482e57fe5b602002602001015185846001018151811061484557fe5b602002602001015191509150600061485d8383614cb1565b509050600061486c84846142f6565b90506000806000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156148ba57600080fd5b505afa1580156148ce573d6000803e3d6000fd5b505050506040513d60608110156148e457600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169350169050600073ffffffffffffffffffffffffffffffffffffffff8981169088161461492d578183614930565b82825b5090506149b4818a73ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611ee357600080fd5b94508573ffffffffffffffffffffffffffffffffffffffff1663ca706bcf8a876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015614a3b57600080fd5b505afa158015614a4f573d6000803e3d6000fd5b505050506040513d6020811015614a6557600080fd5b50519350600092508291505073ffffffffffffffffffffffffffffffffffffffff88811690871614614a9957826000614a9d565b6000835b91509150600060028c51038a10614ab4578a614ac7565b614ac7888d8c600201815181106146a257fe5b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b83811015614b77578181015183820152602001614b5f565b50505050905090810190601f168015614ba45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015614bc657600080fd5b505af1158015614bda573d6000803e3d6000fd5b50506001909b019a506148139950505050505050505050565b6000614c3583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615126565b90505b92915050565b600082614c4d57506000614c38565b82820282848281614c5a57fe5b0414614c35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806151d86021913960400191505060405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614d4f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614d89578284614d8c565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614e1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015287811660248301529151600092839283927f00000000000000000000000000000000000000000000000000000000000000009092169163e6a4390591604480820192602092909190829003018186803b158015614eba57600080fd5b505afa158015614ece573d6000803e3d6000fd5b505050506040513d6020811015614ee457600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161415614fca57604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152898116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b158015614f9d57600080fd5b505af1158015614fb1573d6000803e3d6000fd5b505050506040513d6020811015614fc757600080fd5b50505b600080614fd78a8a613523565b91509150816000148015614fe9575080155b15614ff957879350869250615119565b60006150068984846128f2565b9050878111615089578581101561507e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f425f414d4f554e540000000000000000000000604482015290519081900360640190fd5b889450925082615117565b60006150968984866128f2565b9050898111156150a257fe5b8781101561511157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f494e53554646494349454e545f415f414d4f554e540000000000000000000000604482015290519081900360640190fd5b94508793505b505b5050965096945050505050565b600081848411156151cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561519457818101518382015260200161517c565b50505050905090810190601f1680156151c15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220bd000b0f82c67d79a8d655a8d9d95b48b382cadd539a4bf65d66b7f1a3043a5364736f6c634300060b0033"
};

// src/contracts/amm/OSWAP_Router.ts
var OSWAP_Router = class extends import_eth_wallet6.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_Router_json_default.abi, OSWAP_Router_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.factory, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.tokenA, params.tokenB, import_eth_wallet6.Utils.toString(params.amountADesired), import_eth_wallet6.Utils.toString(params.amountBDesired), import_eth_wallet6.Utils.toString(params.amountAMin), import_eth_wallet6.Utils.toString(params.amountBMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.tokenA, params.tokenB, import_eth_wallet6.Utils.toString(params.amountADesired), import_eth_wallet6.Utils.toString(params.amountBDesired), import_eth_wallet6.Utils.toString(params.amountAMin), import_eth_wallet6.Utils.toString(params.amountBMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return {
      amountA: new import_eth_wallet6.BigNumber(result.amountA),
      amountB: new import_eth_wallet6.BigNumber(result.amountB),
      liquidity: new import_eth_wallet6.BigNumber(result.liquidity)
    };
  }
  async addLiquidityETH_send(params, _value) {
    let result = await this.send("addLiquidityETH", [params.token, import_eth_wallet6.Utils.toString(params.amountTokenDesired), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async addLiquidityETH_call(params, _value) {
    let result = await this.call("addLiquidityETH", [params.token, import_eth_wallet6.Utils.toString(params.amountTokenDesired), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return {
      amountToken: new import_eth_wallet6.BigNumber(result.amountToken),
      amountETH: new import_eth_wallet6.BigNumber(result.amountETH),
      liquidity: new import_eth_wallet6.BigNumber(result.liquidity)
    };
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [import_eth_wallet6.Utils.toString(params.amountOut), params.tokenIn, params.tokenOut]);
    return new import_eth_wallet6.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [import_eth_wallet6.Utils.toString(params.amountIn), params.tokenIn, params.tokenOut]);
    return new import_eth_wallet6.BigNumber(result);
  }
  async getAmountsIn(params) {
    let result = await this.call("getAmountsIn", [import_eth_wallet6.Utils.toString(params.amountOut), params.path]);
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async getAmountsOut(params) {
    let result = await this.call("getAmountsOut", [import_eth_wallet6.Utils.toString(params.amountIn), params.path]);
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async getReserves(params) {
    let result = await this.call("getReserves", [params.tokenA, params.tokenB]);
    return {
      reserveA: new import_eth_wallet6.BigNumber(result.reserveA),
      reserveB: new import_eth_wallet6.BigNumber(result.reserveB)
    };
  }
  async quote(params) {
    let result = await this.call("quote", [import_eth_wallet6.Utils.toString(params.amountA), import_eth_wallet6.Utils.toString(params.reserveA), import_eth_wallet6.Utils.toString(params.reserveB)]);
    return new import_eth_wallet6.BigNumber(result);
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.tokenA, params.tokenB, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountAMin), import_eth_wallet6.Utils.toString(params.amountBMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.tokenA, params.tokenB, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountAMin), import_eth_wallet6.Utils.toString(params.amountBMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return {
      amountA: new import_eth_wallet6.BigNumber(result.amountA),
      amountB: new import_eth_wallet6.BigNumber(result.amountB)
    };
  }
  async removeLiquidityETH_send(params) {
    let result = await this.send("removeLiquidityETH", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidityETH_call(params) {
    let result = await this.call("removeLiquidityETH", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return {
      amountToken: new import_eth_wallet6.BigNumber(result.amountToken),
      amountETH: new import_eth_wallet6.BigNumber(result.amountETH)
    };
  }
  async removeLiquidityETHSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("removeLiquidityETHSupportingFeeOnTransferTokens", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidityETHSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("removeLiquidityETHSupportingFeeOnTransferTokens", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return new import_eth_wallet6.BigNumber(result);
  }
  async removeLiquidityETHWithPermit_send(params) {
    let result = await this.send("removeLiquidityETHWithPermit", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline), params.approveMax, import_eth_wallet6.Utils.toString(params.v), import_eth_wallet6.Utils.stringToBytes32(params.r), import_eth_wallet6.Utils.stringToBytes32(params.s)]);
    return result;
  }
  async removeLiquidityETHWithPermit_call(params) {
    let result = await this.call("removeLiquidityETHWithPermit", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline), params.approveMax, import_eth_wallet6.Utils.toString(params.v), import_eth_wallet6.Utils.stringToBytes32(params.r), import_eth_wallet6.Utils.stringToBytes32(params.s)]);
    return {
      amountToken: new import_eth_wallet6.BigNumber(result.amountToken),
      amountETH: new import_eth_wallet6.BigNumber(result.amountETH)
    };
  }
  async removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("removeLiquidityETHWithPermitSupportingFeeOnTransferTokens", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline), params.approveMax, import_eth_wallet6.Utils.toString(params.v), import_eth_wallet6.Utils.stringToBytes32(params.r), import_eth_wallet6.Utils.stringToBytes32(params.s)]);
    return result;
  }
  async removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("removeLiquidityETHWithPermitSupportingFeeOnTransferTokens", [params.token, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountTokenMin), import_eth_wallet6.Utils.toString(params.amountETHMin), params.to, import_eth_wallet6.Utils.toString(params.deadline), params.approveMax, import_eth_wallet6.Utils.toString(params.v), import_eth_wallet6.Utils.stringToBytes32(params.r), import_eth_wallet6.Utils.stringToBytes32(params.s)]);
    return new import_eth_wallet6.BigNumber(result);
  }
  async removeLiquidityWithPermit_send(params) {
    let result = await this.send("removeLiquidityWithPermit", [params.tokenA, params.tokenB, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountAMin), import_eth_wallet6.Utils.toString(params.amountBMin), params.to, import_eth_wallet6.Utils.toString(params.deadline), params.approveMax, import_eth_wallet6.Utils.toString(params.v), import_eth_wallet6.Utils.stringToBytes32(params.r), import_eth_wallet6.Utils.stringToBytes32(params.s)]);
    return result;
  }
  async removeLiquidityWithPermit_call(params) {
    let result = await this.call("removeLiquidityWithPermit", [params.tokenA, params.tokenB, import_eth_wallet6.Utils.toString(params.liquidity), import_eth_wallet6.Utils.toString(params.amountAMin), import_eth_wallet6.Utils.toString(params.amountBMin), params.to, import_eth_wallet6.Utils.toString(params.deadline), params.approveMax, import_eth_wallet6.Utils.toString(params.v), import_eth_wallet6.Utils.stringToBytes32(params.r), import_eth_wallet6.Utils.stringToBytes32(params.s)]);
    return {
      amountA: new import_eth_wallet6.BigNumber(result.amountA),
      amountB: new import_eth_wallet6.BigNumber(result.amountB)
    };
  }
  async swapETHForExactTokens_send(params, _value) {
    let result = await this.send("swapETHForExactTokens", [import_eth_wallet6.Utils.toString(params.amountOut), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async swapETHForExactTokens_call(params, _value) {
    let result = await this.call("swapETHForExactTokens", [import_eth_wallet6.Utils.toString(params.amountOut), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async swapExactETHForTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokens", [import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async swapExactETHForTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokens", [import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)], { value: _value });
    return;
  }
  async swapExactTokensForETH_send(params) {
    let result = await this.send("swapExactTokensForETH", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async swapExactTokensForETH_call(params) {
    let result = await this.call("swapExactTokensForETH", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return;
  }
  async swapExactTokensForTokens_send(params) {
    let result = await this.send("swapExactTokensForTokens", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async swapExactTokensForTokens_call(params) {
    let result = await this.call("swapExactTokensForTokens", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet6.Utils.toString(params.amountIn), import_eth_wallet6.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return;
  }
  async swapTokensForExactETH_send(params) {
    let result = await this.send("swapTokensForExactETH", [import_eth_wallet6.Utils.toString(params.amountOut), import_eth_wallet6.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async swapTokensForExactETH_call(params) {
    let result = await this.call("swapTokensForExactETH", [import_eth_wallet6.Utils.toString(params.amountOut), import_eth_wallet6.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  async swapTokensForExactTokens_send(params) {
    let result = await this.send("swapTokensForExactTokens", [import_eth_wallet6.Utils.toString(params.amountOut), import_eth_wallet6.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result;
  }
  async swapTokensForExactTokens_call(params) {
    let result = await this.call("swapTokensForExactTokens", [import_eth_wallet6.Utils.toString(params.amountOut), import_eth_wallet6.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet6.Utils.toString(params.deadline)]);
    return result.map((e) => new import_eth_wallet6.BigNumber(e));
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.addLiquidityETH = Object.assign(this.addLiquidityETH_send, { call: this.addLiquidityETH_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.removeLiquidityETH = Object.assign(this.removeLiquidityETH_send, { call: this.removeLiquidityETH_call });
    this.removeLiquidityETHSupportingFeeOnTransferTokens = Object.assign(this.removeLiquidityETHSupportingFeeOnTransferTokens_send, { call: this.removeLiquidityETHSupportingFeeOnTransferTokens_call });
    this.removeLiquidityETHWithPermit = Object.assign(this.removeLiquidityETHWithPermit_send, { call: this.removeLiquidityETHWithPermit_call });
    this.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens = Object.assign(this.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_send, { call: this.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens_call });
    this.removeLiquidityWithPermit = Object.assign(this.removeLiquidityWithPermit_send, { call: this.removeLiquidityWithPermit_call });
    this.swapETHForExactTokens = Object.assign(this.swapETHForExactTokens_send, { call: this.swapETHForExactTokens_call });
    this.swapExactETHForTokens = Object.assign(this.swapExactETHForTokens_send, { call: this.swapExactETHForTokens_call });
    this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactETHForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactETHForTokensSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForETH = Object.assign(this.swapExactTokensForETH_send, { call: this.swapExactTokensForETH_call });
    this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForETHSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForETHSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForTokens = Object.assign(this.swapExactTokensForTokens_send, { call: this.swapExactTokensForTokens_call });
    this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForTokensSupportingFeeOnTransferTokens_call });
    this.swapTokensForExactETH = Object.assign(this.swapTokensForExactETH_send, { call: this.swapTokensForExactETH_call });
    this.swapTokensForExactTokens = Object.assign(this.swapTokensForExactTokens_send, { call: this.swapTokensForExactTokens_call });
  }
};

// src/contracts/amm/OSWAP_VotingExecutor1.ts
var import_eth_wallet7 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/amm/OSWAP_VotingExecutor1.json.ts
var OSWAP_VotingExecutor1_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b506040516107cc3803806107cc8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03831690811790915560408051635aa6e67560e01b81529051635aa6e67591600480820192602092909190829003018186803b15801561008957600080fd5b505afa15801561009d573d6000803e3d6000fd5b505050506040513d60208110156100b357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055506106e6806100e66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635aa6e675146100465780638af7c64914610077578063c45a0155146100e9575b600080fd5b61004e6100f1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e76004803603602081101561008d57600080fd5b8101906020810181356401000000008111156100a857600080fd5b8201836020820111156100ba57600080fd5b803590602001918460208302840111640100000000831117156100dc57600080fd5b50909250905061010d565b005b61004e610694565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600054604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163b15866e691602480820192602092909190829003018186803b15801561017e57600080fd5b505afa158015610192573d6000803e3d6000fd5b505050506040513d60208110156101a857600080fd5b505161021557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b60008282600081811061022457fe5b90506020020135905060008383600181811061023c57fe5b6020029190910135915050600283141561054957817f7365745472616465466565000000000000000000000000000000000000000000141561030857600154604080517f1060302300000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff9092169163106030239160248082019260009290919082900301818387803b1580156102eb57600080fd5b505af11580156102ff573d6000803e3d6000fd5b50505050610544565b817f73657450726f746f636f6c46656500000000000000000000000000000000000014156103a357600154604080517f787dce3d00000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff9092169163787dce3d9160248082019260009290919082900301818387803b1580156102eb57600080fd5b817f73657450726f746f636f6c466565546f00000000000000000000000000000000141561044157600154604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606084901c6004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163e0e6799f9160248082019260009290919082900301818387803b1580156102eb57600080fd5b817f7365744c6976650000000000000000000000000000000000000000000000000014156104dd57600154604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528315156004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163f5ee33489160248082019260009290919082900301818387803b1580156102eb57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b61068e565b600383141561062757817f7365744c697665466f725061697200000000000000000000000000000000000014156104dd5760015473ffffffffffffffffffffffffffffffffffffffff16636883618a606083901c868660028181106105aa57fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b1580156102eb57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff168156fea26469706673582212206cad92ecb11b8ee5a7559c9233f8d31eabdc8c614ccfecf4895f1d4e4c0bac8064736f6c634300060b0033"
};

// src/contracts/amm/OSWAP_VotingExecutor1.ts
var OSWAP_VotingExecutor1 = class extends import_eth_wallet7.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingExecutor1_json_default.abi, OSWAP_VotingExecutor1_json_default.bytecode);
    this.assign();
  }
  deploy(factory) {
    return this._deploy(factory);
  }
  async execute_send(params) {
    let result = await this.send("execute", [import_eth_wallet7.Utils.stringToBytes32(params)]);
    return result;
  }
  async execute_call(params) {
    let result = await this.call("execute", [import_eth_wallet7.Utils.stringToBytes32(params)]);
    return;
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
  }
};

// src/contracts/commons/OSWAP_FactoryBase.ts
var import_eth_wallet8 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/commons/OSWAP_FactoryBase.json.ts
var OSWAP_FactoryBase_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b50604051610eb3380380610eb38339818101604052604081101561003357600080fd5b508051602090910151606082901b6001600160601b03191660805260008054600160ff1990911617610100600160a81b0319166101006001600160a01b0393841602178155911690610e0d906100a6903980610242528061027d52806103705280610b6a5280610c5d5250610e0d6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b8f7a66511610076578063c9c653961161005b578063c9c6539614610171578063e6a43905146101ac578063f5ee3348146101e7576100a3565b8063b8f7a6651461014d578063c538b5d614610169576100a3565b80631e3dd18b146100a8578063574f2ba3146100ee5780635aa6e675146101085780636883618a14610110575b600080fd5b6100c5600480360360208110156100be57600080fd5b5035610206565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100f661023a565b60408051918252519081900360200190f35b6100c5610240565b61014b6004803603604081101561012657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610264565b005b610155610551565b604080519115158252519081900360200190f35b6100c561055a565b6100c56004803603604081101561018757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661057b565b6100c5600480360360408110156101c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610b1e565b61014b600480360360208110156101fd57600080fd5b50351515610b51565b6002818154811061021357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60025490565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e157600080fd5b505afa1580156102f5573d6000803e3d6000fd5b505050506040513d602081101561030b57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806103e35750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156103b657600080fd5b505afa1580156103ca573d6000803e3d6000fd5b505050506040513d60208110156103e057600080fd5b50515b610438576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610db76021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b1580156104a757600080fd5b505af11580156104bb573d6000803e3d6000fd5b50505050801561050b5760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a261054d565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561061857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610655578385610658565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166106df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526001602090815260408083208585168452909152902054161561078057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b602083106108a657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610869565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114610906576040519150601f19603f3d011682016040523d82523d6000602084013e61090b565b606091505b50915091508161097c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561099157600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b158015610a0f57600080fd5b505af1158015610a23573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d6020811015610bf857600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480610cd05750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610ca357600080fd5b505afa158015610cb7573d6000803e3d6000fd5b505050506040513d6020811015610ccd57600080fd5b50515b610d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610db76021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff1615610d89576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1610db3565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b5056fe4e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220dd5c87ec837f11be8c5aea567df055d593c10659a2bac55f7a7cc04fb6bb993a64736f6c634300060b0033"
};

// src/contracts/commons/OSWAP_FactoryBase.ts
var OSWAP_FactoryBase = class extends import_eth_wallet8.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_FactoryBase_json_default.abi, OSWAP_FactoryBase_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.pairCreator);
  }
  parsePairCreatedEvent(receipt) {
    return this.parseEvents(receipt, "PairCreated").map((e) => this.decodePairCreatedEvent(e));
  }
  decodePairCreatedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      pair: result.pair,
      newSize: new import_eth_wallet8.BigNumber(result.newSize),
      _event: event
    };
  }
  parsePairRestartedEvent(receipt) {
    return this.parseEvents(receipt, "PairRestarted").map((e) => this.decodePairRestartedEvent(e));
  }
  decodePairRestartedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parsePairShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "PairShutdowned").map((e) => this.decodePairShutdownedEvent(e));
  }
  decodePairShutdownedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parseRestartedEvent(receipt) {
    return this.parseEvents(receipt, "Restarted").map((e) => this.decodeRestartedEvent(e));
  }
  decodeRestartedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "Shutdowned").map((e) => this.decodeShutdownedEvent(e));
  }
  decodeShutdownedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  async allPairs(param1) {
    let result = await this.call("allPairs", [import_eth_wallet8.Utils.toString(param1)]);
    return result;
  }
  async allPairsLength() {
    let result = await this.call("allPairsLength");
    return new import_eth_wallet8.BigNumber(result);
  }
  async createPair_send(params) {
    let result = await this.send("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async createPair_call(params) {
    let result = await this.call("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async getPair(params) {
    let result = await this.call("getPair", [params.param1, params.param2]);
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async pairCreator() {
    let result = await this.call("pairCreator");
    return result;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setLiveForPair_send(params) {
    let result = await this.send("setLiveForPair", [params.pair, params.live]);
    return result;
  }
  async setLiveForPair_call(params) {
    let result = await this.call("setLiveForPair", [params.pair, params.live]);
    return;
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setLiveForPair = Object.assign(this.setLiveForPair_send, { call: this.setLiveForPair_call });
  }
};

// src/contracts/commons/OSWAP_PausableFactory.ts
var import_eth_wallet9 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/commons/OSWAP_PausableFactory.json.ts
var OSWAP_PausableFactory_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b506040516107553803806107558339818101604052602081101561003357600080fd5b50516001600160601b031960609190911b166080526000805460ff1916600117905560805160601c6106d06100856000398060fc5280610137528061022a528061042d528061052052506106d06000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780636883618a14610082578063b8f7a665146100bf578063f5ee3348146100db575b600080fd5b6100596100fa565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100bd6004803603604081101561009857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561011e565b005b6100c761040b565b604080519115158252519081900360200190f35b6100bd600480360360208110156100f157600080fd5b50351515610414565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561019b57600080fd5b505afa1580156101af573d6000803e3d6000fd5b505050506040513d60208110156101c557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16148061029d5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561027057600080fd5b505afa158015610284573d6000803e3d6000fd5b505050506040513d602081101561029a57600080fd5b50515b6102f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061067a6021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b5050505080156103c55760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610407565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b60005460ff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d60208110156104bb57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806105935750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d602081101561059057600080fd5b50515b6105e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061067a6021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff161561064c576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1610676565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b5056fe4e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220da446436743c2f019e6eaf7d28351771aa9624e79e82ec225ac894b979ea658e64736f6c634300060b0033"
};

// src/contracts/commons/OSWAP_PausableFactory.ts
var OSWAP_PausableFactory = class extends import_eth_wallet9.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_PausableFactory_json_default.abi, OSWAP_PausableFactory_json_default.bytecode);
    this.assign();
  }
  deploy(governance) {
    return this._deploy(governance);
  }
  parsePairRestartedEvent(receipt) {
    return this.parseEvents(receipt, "PairRestarted").map((e) => this.decodePairRestartedEvent(e));
  }
  decodePairRestartedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parsePairShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "PairShutdowned").map((e) => this.decodePairShutdownedEvent(e));
  }
  decodePairShutdownedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parseRestartedEvent(receipt) {
    return this.parseEvents(receipt, "Restarted").map((e) => this.decodeRestartedEvent(e));
  }
  decodeRestartedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "Shutdowned").map((e) => this.decodeShutdownedEvent(e));
  }
  decodeShutdownedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setLiveForPair_send(params) {
    let result = await this.send("setLiveForPair", [params.pair, params.live]);
    return result;
  }
  async setLiveForPair_call(params) {
    let result = await this.call("setLiveForPair", [params.pair, params.live]);
    return;
  }
  assign() {
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setLiveForPair = Object.assign(this.setLiveForPair_send, { call: this.setLiveForPair_call });
  }
};

// src/contracts/commons/OSWAP_PausablePair.ts
var import_eth_wallet10 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/commons/OSWAP_PausablePair.json.ts
var OSWAP_PausablePair_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b503360601b6080526000805460ff1916600117905560805160601c6101ec6100456000398060bf528060f952506101ec6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b8f7a66514610046578063c45a015514610062578063f5ee334814610093575b600080fd5b61004e6100b4565b604080519115158252519081900360200190f35b61006a6100bd565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100b2600480360360208110156100a957600080fd5b503515156100e1565b005b60005460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461018557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905556fea2646970667358221220e05fb854aed1563d2723be99c1c39328951ea7b27264067c4da6e04ca9069f1a64736f6c634300060b0033"
};

// src/contracts/commons/OSWAP_PausablePair.ts
var OSWAP_PausablePair = class extends import_eth_wallet10.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_PausablePair_json_default.abi, OSWAP_PausablePair_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  assign() {
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
  }
};

// src/contracts/gov/OAXDEX_Administrator.ts
var import_eth_wallet11 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/gov/OAXDEX_Administrator.json.ts
var OAXDEX_Administrator_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "admin", "type": "address" }], "name": "AddAdmin", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "admin", "type": "address" }], "name": "RemoveAdmin", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "maxAdmin", "type": "uint256" }], "name": "SetMaxAdmin", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedFactoryRestart", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedFactoryShutdown", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedPairRestart", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedPairShutdown", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "admin", "type": "address" }, { "indexed": true, "internalType": "address", "name": "votingContract", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "VotedVeto", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "addAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "admins", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "adminsIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allAdmins", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "executeFactoryRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "executeFactoryShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "address", "name": "pair", "type": "address" }], "name": "executePairRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "address", "name": "pair", "type": "address" }], "name": "executePairShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "executeVetoVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "factoryRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "factoryRestartVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "factoryShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "factoryShutdownVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "getFactoryRestartVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "factory", "type": "address" }], "name": "getFactoryShutdownVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "name": "getPairRestartVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "name": "getPairShutdownVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "getVetoVotingVote", "outputs": [{ "internalType": "bool[]", "name": "votes", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "maxAdmin", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "pairRestart", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "pairRestartVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "pairShutdown", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "pairShutdownVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "removeAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_maxAdmin", "type": "uint256" }], "name": "setMaxAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }, { "internalType": "bool", "name": "YorN", "type": "bool" }], "name": "vetoVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "vetoVotingVote", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b5060405161238b38038061238b8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661231061007b600039806107f75280610a24528061100a528061147a5280611d7d52506123106000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80635d801cde116100f95780639c32abbb11610097578063e03d9a8611610071578063e03d9a8614610700578063e7be483714610733578063e9204d271461076e578063f1f63806146107a9576101c4565b80639c32abbb1461065f578063a1e363ac14610692578063c88e3366146106c5576101c4565b80636c84f565116100d35780636c84f5651461057b57806370480275146105b65780638cece344146105e95780639bc0cc3114610624576101c4565b80635d801cde146104ca578063656b7a901461050557806368ddb11714610540576101c4565b806327e93d3a1161016657806341ab10161161014057806341ab10161461040f57806348d64c55146104545780635aa6e675146104875780635b7ddc911461048f576101c4565b806327e93d3a1461039957806337d493de146103d457806340f32be614610407576101c4565b806314bfd6d0116101a257806314bfd6d01461029e57806314ffa2f6146102e45780631785f53c146103175780632097ca0f1461034a576101c4565b806303cb43e5146101c95780630f436c50146101e85780631378f9af1461026b575b600080fd5b6101e6600480360360208110156101df57600080fd5b50356107b1565b005b61021b600480360360208110156101fe57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661090f565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561025757818101518382015260200161023f565b505050509050019250505060405180910390f35b61021b6004803603602081101561028157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610948565b6102bb600480360360208110156102b457600080fd5b5035610979565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61021b600480360360208110156102fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109ad565b6101e66004803603602081101561032d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109de565b6103856004803603604081101561036057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610ddc565b604080519115158252519081900360200190f35b610385600480360360408110156103af57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610dfc565b61021b600480360360208110156103ea57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e1c565b61021b610e4d565b6104426004803603602081101561042557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ebc565b60408051918252519081900360200190f35b6101e66004803603602081101561046a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ece565b6102bb611008565b6101e6600480360360408110156104a557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661102c565b610385600480360360408110156104e057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661116e565b6101e66004803603604081101561051b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561118e565b6101e66004803603604081101561055657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156112d1565b6103856004803603604081101561059157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611414565b6101e6600480360360208110156105cc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611434565b6101e6600480360360408110156105ff57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166117cd565b6101e66004803603604081101561063a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156118f6565b6101e66004803603602081101561067557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a39565b61021b600480360360208110156106a857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b56565b6101e6600480360360408110156106db57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611b87565b6101e66004803603602081101561071657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cca565b6103856004803603604081101561074957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611e1a565b6101e66004803603604081101561078457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611e3a565b610442611f7d565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561083d57600080fd5b505afa158015610851573d6000803e3d6000fd5b505050506040513d602081101561086757600080fd5b50516108d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b60008190556040805182815290517fbfebbee9defc5b0daedb13be2253f4b914aed3dd852d6f6df95bc3407a70f56b9181900360200190a150565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040902060609061094090611f83565b90505b919050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902060609061094090611f83565b6001818154811061098657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902060609061094090611f83565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610a6a57600080fd5b505afa158015610a7e573d6000803e3d6000fd5b505050506040513d6020811015610a9457600080fd5b5051610b0157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205480151580610b7957508173ffffffffffffffffffffffffffffffffffffffff166001600081548110610b5557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b610be457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f41646d696e3a2053687574646f776e2061646d696e206e6f7420657869737473604482015290519081900360640190fd5b6001547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01811015610d0057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110610c4057fe5b6000918252602090912001546001805473ffffffffffffffffffffffffffffffffffffffff9092169183908110610c7357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002600060018481548110610ccd57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600260205260408120556001805480610d3157fe5b600082815260209081902082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559091019091556040805173ffffffffffffffffffffffffffffffffffffffff8516815290517f753f40ca3312b2408759a67875b367955e7baa221daf08aa3d643d96202ac12b929181900390910190a15050565b600560209081526000928352604080842090915290825290205460ff1681565b600460209081526000928352604080842090915290825290205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902060609061094090611f83565b60606001805480602002602001604051908101604052809291908181526020018280548015610eb257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610e87575b5050505050905090565b60026020526000908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020610efc9061204d565b610f51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180612286602c913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020610f7f906120dd565b604080517ff5ee334800000000000000000000000000000000000000000000000000000000815260016004820152905173ffffffffffffffffffffffffffffffffffffffff83169163f5ee334891602480830192600092919082900301818387803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902061105a9061204d565b6110af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061225c602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604090206110dd906120dd565b604080517f6883618a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600060248301819052925190851692636883618a926044808201939182900301818387803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b505050505050565b600360209081526000928352604080842090915290825290205460ff1681565b336000818152600260205260409020546001805490919081106111ad57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461123b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600560209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517fc740c963ad3062876764b3de1e79ec958ecc91bc80c843ab880b445b6f08aaf5929181900390910190a35050565b336000818152600260205260409020546001805490919081106112f057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161461137e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600460209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517fd2779ae0737775372a46dca2b6eccc807e4a580e65b2991fb71802ccf652f477929181900390910190a35050565b600660209081526000928352604080842090915290825290205460ff1681565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156114c057600080fd5b505afa1580156114d4573d6000803e3d6000fd5b505050506040513d60208110156114ea57600080fd5b505161155757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b6000546001805461156d9163ffffffff61216916565b11156115c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806121e56022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811661164657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f41584445583a20494e56414c49445f53485554444f574e5f41444d494e0000604482015290519081900360640190fd5b60015415806116aa575073ffffffffffffffffffffffffffffffffffffffff811660008181526002602052604090205460018054909190811061168557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b61171557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f41584445583a20616c726561647920612073687574646f776e2061646d696e604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260408083208590558486018655949091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001682179055825190815291517fad6de4452a631e641cb59902236607946ce9272b9b981f2f80e8d129cb9084ba9281900390910190a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604090206117fb9061204d565b611850576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806122b26029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040902061187e906120dd565b604080517f6883618a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015260016024830152915191841691636883618a9160448082019260009290919082900301818387803b15801561115257600080fd5b3360008181526002602052604090205460018054909190811061191557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146119a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600660209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517ff0d5f0e6914c3a2c68c9720c557fe7dcd776e534cac2331a83f31c90bfeb7daa929181900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260409020611a679061204d565b611abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d81526020018061222f602d913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600460205260409020611aea906120dd565b604080517ff5ee3348000000000000000000000000000000000000000000000000000000008152600060048201819052915173ffffffffffffffffffffffffffffffffffffffff84169263f5ee3348926024808201939182900301818387803b158015610fed57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040902060609061094090611f83565b33600081815260026020526040902054600180549091908110611ba657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611c3457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600360209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517f65a2cd14fa9c26913c0e70766d15e6e2d83b8caa96eb968322857ac9e7a865e7929181900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020611cf89061204d565b611d4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806122076028913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020611d7b906120dd565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166326ae21a9826040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610fed57600080fd5b600760209081526000928352604080842090915290825290205460ff1681565b33600081815260026020526040902054600180549091908110611e5957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611ee757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f41646d696e3a204e6f7420612073687574646f776e2061646d696e0000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600760209081526040808320338085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515908117909155815190815290517f4977a037ed21a1311479c0431a1dd57b219c93415c05a88aab887818d4d3888d929181900390910190a35050565b60005481565b6001546060908067ffffffffffffffff81118015611fa057600080fd5b50604051908082528060200260200182016040528015611fca578160200160208202803683370190505b50915060005b818110156120465783600060018381548110611fe857fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902054835160ff9091169084908390811061202e57fe5b91151560209283029190910190910152600101611fd0565b5050919050565b6001805460009182919081901c825b828110156120d1578560006001838154811061207457fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16835282019290925260400190205460ff16156120c957600190930192818411156120c9576001945050505050610943565b60010161205c565b50600095945050505050565b60015460005b81811015612164576000836000600184815481106120fd57fe5b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556001016120e3565b505050565b6000828201838110156121dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe4f41584445583a204d61782073687574646f776e2061646d696e207265616368656441646d696e3a20657865637574655665746f566f74696e673a2051756f72756d206e6f74206d657441646d696e3a2065786563757465466163746f727953687574646f776e3a2051756f72756d206e6f74206d657441646d696e3a20657865637574655061697253687574646f776e3a2051756f72756d206e6f74206d657441646d696e3a2065786563757465466163746f7279526573746172743a2051756f72756d206e6f74206d657441646d696e3a206578656375746550616972526573746172743a2051756f72756d206e6f74206d6574a264697066735822122091b40f31142abe20e4e119ad248b5e3294b137ff4dd1c2d6b1abe3b2613dae9064736f6c634300060b0033"
};

// src/contracts/gov/OAXDEX_Administrator.ts
var OAXDEX_Administrator = class extends import_eth_wallet11.Contract {
  constructor(wallet, address) {
    super(wallet, address, OAXDEX_Administrator_json_default.abi, OAXDEX_Administrator_json_default.bytecode);
    this.assign();
  }
  deploy(governance) {
    return this._deploy(governance);
  }
  parseAddAdminEvent(receipt) {
    return this.parseEvents(receipt, "AddAdmin").map((e) => this.decodeAddAdminEvent(e));
  }
  decodeAddAdminEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      _event: event
    };
  }
  parseRemoveAdminEvent(receipt) {
    return this.parseEvents(receipt, "RemoveAdmin").map((e) => this.decodeRemoveAdminEvent(e));
  }
  decodeRemoveAdminEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      _event: event
    };
  }
  parseSetMaxAdminEvent(receipt) {
    return this.parseEvents(receipt, "SetMaxAdmin").map((e) => this.decodeSetMaxAdminEvent(e));
  }
  decodeSetMaxAdminEvent(event) {
    let result = event.data;
    return {
      maxAdmin: new import_eth_wallet11.BigNumber(result.maxAdmin),
      _event: event
    };
  }
  parseVotedFactoryRestartEvent(receipt) {
    return this.parseEvents(receipt, "VotedFactoryRestart").map((e) => this.decodeVotedFactoryRestartEvent(e));
  }
  decodeVotedFactoryRestartEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      factory: result.factory,
      YorN: result.YorN,
      _event: event
    };
  }
  parseVotedFactoryShutdownEvent(receipt) {
    return this.parseEvents(receipt, "VotedFactoryShutdown").map((e) => this.decodeVotedFactoryShutdownEvent(e));
  }
  decodeVotedFactoryShutdownEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      factory: result.factory,
      YorN: result.YorN,
      _event: event
    };
  }
  parseVotedPairRestartEvent(receipt) {
    return this.parseEvents(receipt, "VotedPairRestart").map((e) => this.decodeVotedPairRestartEvent(e));
  }
  decodeVotedPairRestartEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      pair: result.pair,
      YorN: result.YorN,
      _event: event
    };
  }
  parseVotedPairShutdownEvent(receipt) {
    return this.parseEvents(receipt, "VotedPairShutdown").map((e) => this.decodeVotedPairShutdownEvent(e));
  }
  decodeVotedPairShutdownEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      pair: result.pair,
      YorN: result.YorN,
      _event: event
    };
  }
  parseVotedVetoEvent(receipt) {
    return this.parseEvents(receipt, "VotedVeto").map((e) => this.decodeVotedVetoEvent(e));
  }
  decodeVotedVetoEvent(event) {
    let result = event.data;
    return {
      admin: result.admin,
      votingContract: result.votingContract,
      YorN: result.YorN,
      _event: event
    };
  }
  async addAdmin_send(admin) {
    let result = await this.send("addAdmin", [admin]);
    return result;
  }
  async addAdmin_call(admin) {
    let result = await this.call("addAdmin", [admin]);
    return;
  }
  async admins(param1) {
    let result = await this.call("admins", [import_eth_wallet11.Utils.toString(param1)]);
    return result;
  }
  async adminsIdx(param1) {
    let result = await this.call("adminsIdx", [param1]);
    return new import_eth_wallet11.BigNumber(result);
  }
  async allAdmins() {
    let result = await this.call("allAdmins");
    return result;
  }
  async executeFactoryRestart_send(factory) {
    let result = await this.send("executeFactoryRestart", [factory]);
    return result;
  }
  async executeFactoryRestart_call(factory) {
    let result = await this.call("executeFactoryRestart", [factory]);
    return;
  }
  async executeFactoryShutdown_send(factory) {
    let result = await this.send("executeFactoryShutdown", [factory]);
    return result;
  }
  async executeFactoryShutdown_call(factory) {
    let result = await this.call("executeFactoryShutdown", [factory]);
    return;
  }
  async executePairRestart_send(params) {
    let result = await this.send("executePairRestart", [params.factory, params.pair]);
    return result;
  }
  async executePairRestart_call(params) {
    let result = await this.call("executePairRestart", [params.factory, params.pair]);
    return;
  }
  async executePairShutdown_send(params) {
    let result = await this.send("executePairShutdown", [params.factory, params.pair]);
    return result;
  }
  async executePairShutdown_call(params) {
    let result = await this.call("executePairShutdown", [params.factory, params.pair]);
    return;
  }
  async executeVetoVoting_send(votingContract) {
    let result = await this.send("executeVetoVoting", [votingContract]);
    return result;
  }
  async executeVetoVoting_call(votingContract) {
    let result = await this.call("executeVetoVoting", [votingContract]);
    return;
  }
  async factoryRestart_send(params) {
    let result = await this.send("factoryRestart", [params.factory, params.YorN]);
    return result;
  }
  async factoryRestart_call(params) {
    let result = await this.call("factoryRestart", [params.factory, params.YorN]);
    return;
  }
  async factoryRestartVote(params) {
    let result = await this.call("factoryRestartVote", [params.param1, params.param2]);
    return result;
  }
  async factoryShutdown_send(params) {
    let result = await this.send("factoryShutdown", [params.factory, params.YorN]);
    return result;
  }
  async factoryShutdown_call(params) {
    let result = await this.call("factoryShutdown", [params.factory, params.YorN]);
    return;
  }
  async factoryShutdownVote(params) {
    let result = await this.call("factoryShutdownVote", [params.param1, params.param2]);
    return result;
  }
  async getFactoryRestartVote(factory) {
    let result = await this.call("getFactoryRestartVote", [factory]);
    return result;
  }
  async getFactoryShutdownVote(factory) {
    let result = await this.call("getFactoryShutdownVote", [factory]);
    return result;
  }
  async getPairRestartVote(pair) {
    let result = await this.call("getPairRestartVote", [pair]);
    return result;
  }
  async getPairShutdownVote(pair) {
    let result = await this.call("getPairShutdownVote", [pair]);
    return result;
  }
  async getVetoVotingVote(votingContract) {
    let result = await this.call("getVetoVotingVote", [votingContract]);
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async maxAdmin() {
    let result = await this.call("maxAdmin");
    return new import_eth_wallet11.BigNumber(result);
  }
  async pairRestart_send(params) {
    let result = await this.send("pairRestart", [params.pair, params.YorN]);
    return result;
  }
  async pairRestart_call(params) {
    let result = await this.call("pairRestart", [params.pair, params.YorN]);
    return;
  }
  async pairRestartVote(params) {
    let result = await this.call("pairRestartVote", [params.param1, params.param2]);
    return result;
  }
  async pairShutdown_send(params) {
    let result = await this.send("pairShutdown", [params.pair, params.YorN]);
    return result;
  }
  async pairShutdown_call(params) {
    let result = await this.call("pairShutdown", [params.pair, params.YorN]);
    return;
  }
  async pairShutdownVote(params) {
    let result = await this.call("pairShutdownVote", [params.param1, params.param2]);
    return result;
  }
  async removeAdmin_send(admin) {
    let result = await this.send("removeAdmin", [admin]);
    return result;
  }
  async removeAdmin_call(admin) {
    let result = await this.call("removeAdmin", [admin]);
    return;
  }
  async setMaxAdmin_send(maxAdmin) {
    let result = await this.send("setMaxAdmin", [import_eth_wallet11.Utils.toString(maxAdmin)]);
    return result;
  }
  async setMaxAdmin_call(maxAdmin) {
    let result = await this.call("setMaxAdmin", [import_eth_wallet11.Utils.toString(maxAdmin)]);
    return;
  }
  async vetoVoting_send(params) {
    let result = await this.send("vetoVoting", [params.votingContract, params.YorN]);
    return result;
  }
  async vetoVoting_call(params) {
    let result = await this.call("vetoVoting", [params.votingContract, params.YorN]);
    return;
  }
  async vetoVotingVote(params) {
    let result = await this.call("vetoVotingVote", [params.param1, params.param2]);
    return result;
  }
  assign() {
    this.addAdmin = Object.assign(this.addAdmin_send, { call: this.addAdmin_call });
    this.executeFactoryRestart = Object.assign(this.executeFactoryRestart_send, { call: this.executeFactoryRestart_call });
    this.executeFactoryShutdown = Object.assign(this.executeFactoryShutdown_send, { call: this.executeFactoryShutdown_call });
    this.executePairRestart = Object.assign(this.executePairRestart_send, { call: this.executePairRestart_call });
    this.executePairShutdown = Object.assign(this.executePairShutdown_send, { call: this.executePairShutdown_call });
    this.executeVetoVoting = Object.assign(this.executeVetoVoting_send, { call: this.executeVetoVoting_call });
    this.factoryRestart = Object.assign(this.factoryRestart_send, { call: this.factoryRestart_call });
    this.factoryShutdown = Object.assign(this.factoryShutdown_send, { call: this.factoryShutdown_call });
    this.pairRestart = Object.assign(this.pairRestart_send, { call: this.pairRestart_call });
    this.pairShutdown = Object.assign(this.pairShutdown_send, { call: this.pairShutdown_call });
    this.removeAdmin = Object.assign(this.removeAdmin_send, { call: this.removeAdmin_call });
    this.setMaxAdmin = Object.assign(this.setMaxAdmin_send, { call: this.setMaxAdmin_call });
    this.vetoVoting = Object.assign(this.vetoVoting_send, { call: this.vetoVoting_call });
  }
};

// src/contracts/gov/OAXDEX_Governance.ts
var import_eth_wallet12 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/gov/OAXDEX_Governance.json.ts
var OAXDEX_Governance_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_oaxToken", "type": "address" }, { "internalType": "address", "name": "_votingToken", "type": "address" }, { "internalType": "bytes32[]", "name": "_names", "type": "bytes32[]" }, { "internalType": "uint256[]", "name": "_minExeDelay", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_maxVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minOaxTokenToCreateVote", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minQuorum", "type": "uint256[]" }, { "internalType": "uint256", "name": "_minStakePeriod", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minOaxTokenToCreateVote", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "AddVotingConfig", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Executed", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "poll", "type": "address" }], "name": "NewPoll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "NewVote", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "poll", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Poll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }], "name": "SetVotingConfig", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Stake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Unstake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Veto", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "vote", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Vote", "type": "event" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minOaxTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "addVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allVotings", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }], "name": "closeVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "executed", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "freezedStake", "outputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getNewVoteId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getVotingConfigProfiles", "outputs": [{ "internalType": "bytes32[]", "name": "profiles", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getVotingCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }], "name": "getVotingParams", "outputs": [{ "internalType": "uint256", "name": "_minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "_minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_minOaxTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "_minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getVotings", "outputs": [{ "internalType": "address[]", "name": "_votings", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "initAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "_votingExecutor", "type": "address[]" }], "name": "initVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "isVotingContract", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "minStakePeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }, { "internalType": "bool", "name": "isExecutiveVote", "type": "bool" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "oaxToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "setAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_minStakePeriod", "type": "uint256" }], "name": "setMinStakePeriod", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "internalType": "uint256", "name": "paramValue", "type": "uint256" }], "name": "setVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingRegister", "type": "address" }], "name": "setVotingRegister", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "stake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "stakeOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "unlockStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "voting", "type": "address" }], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "voteCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "poll", "type": "bool" }, { "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "voted", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingConfigProfiles", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingConfigProfilesLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "votingConfigs", "outputs": [{ "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minOaxTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingRegister", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votings", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c06040523480156200001157600080fd5b50604051620046433803806200464383398181016040526101208110156200003857600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006457600080fd5b9083019060208201858111156200007a57600080fd5b82518660208202830111640100000000821117156200009857600080fd5b82525081516020918201928201910280838360005b83811015620000c7578181015183820152602001620000ad565b5050505090500160405260200180516040519392919084640100000000821115620000f157600080fd5b9083019060208201858111156200010757600080fd5b82518660208202830111640100000000821117156200012557600080fd5b82525081516020918201928201910280838360005b83811015620001545781810151838201526020016200013a565b50505050905001604052602001805160405193929190846401000000008211156200017e57600080fd5b9083019060208201858111156200019457600080fd5b8251866020820283011164010000000082111715620001b257600080fd5b82525081516020918201928201910280838360005b83811015620001e1578181015183820152602001620001c7565b50505050905001604052602001805160405193929190846401000000008211156200020b57600080fd5b9083019060208201858111156200022157600080fd5b82518660208202830111640100000000821117156200023f57600080fd5b82525081516020918201928201910280838360005b838110156200026e57818101518382015260200162000254565b50505050905001604052602001805160405193929190846401000000008211156200029857600080fd5b908301906020820185811115620002ae57600080fd5b8251866020820283011164010000000082111715620002cc57600080fd5b82525081516020918201928201910280838360005b83811015620002fb578181015183820152602001620002e1565b50505050905001604052602001805160405193929190846401000000008211156200032557600080fd5b9083019060208201858111156200033b57600080fd5b82518660208202830111640100000000821117156200035957600080fd5b82525081516020918201928201910280838360005b83811015620003885781810151838201526020016200036e565b50505050919091016040525060200151915060009050620003b16001600160e01b036200080316565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b031960608a811b821660805289901b1660a0528551875114801562000428575084518651145b801562000436575083518551145b801562000444575082518451145b801562000452575081518351145b6200048f5760405162461bcd60e51b81526004018080602001828103825260248152602001806200461f6024913960400191505060405180910390fd5b60005b875181101562000741576000878281518110620004ab57fe5b6020026020010151118015620004d8575062093a80878281518110620004cd57fe5b602002602001015111155b6200052a576040805162461bcd60e51b815260206004820152601b60248201527f4f41584445583a20496e76616c6964206d696e45786544656c61790000000000604482015290519081900360640190fd5b8481815181106200053757fe5b60200260200101518682815181106200054c57fe5b602002602001015110801562000579575062093a808682815181106200056e57fe5b602002602001015111155b620005cb576040805162461bcd60e51b815260206004820152601f60248201527f4f41584445583a20496e76616c6964206d696e566f74654475726174696f6e00604482015290519081900360640190fd5b6000600160008a8481518110620005de57fe5b6020026020010151815260200190815260200160002090508782815181106200060357fe5b602002602001015181600001819055508682815181106200062057fe5b602002602001015181600101819055508582815181106200063d57fe5b602002602001015181600201819055508482815181106200065a57fe5b602002602001015181600301819055508382815181106200067757fe5b6020026020010151816004018190555060028983815181106200069657fe5b6020908102919091018101518254600181018455600093845291909220015588517f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf09129908a9084908110620006e657fe5b602090810291909101810151835460018501546002860154600387015460048801546040805196875296860194909452848601929092526060840152608083015260a082015290519081900360c00190a15060010162000492565b5060008111801562000756575062278d008111155b620007a8576040805162461bcd60e51b815260206004820152601e60248201527f4f41584445583a20496e76616c6964206d696e5374616b65506572696f640000604482015290519081900360640190fd5b600b8190556040805182815290516d1b5a5b94dd185ad954195c9a5bd960921b917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509919081900360200190a250505050505050505062000807565b3390565b60805160601c60a05160601c613ddf6200084060003980610f445280612553528061263852806126bc5250806127415250613ddf6000f3fe608060405234801561001057600080fd5b50600436106102f45760003560e01c80638da5cb5b11610191578063b716d463116100e3578063f2486f4411610097578063f851a44011610071578063f851a44014610963578063ff2a59b01461096b578063ffccd84314610973576102f4565b8063f2486f44146108e0578063f2fde38b146108fd578063f6f04d7f14610930576102f4565b8063c6384071116100c8578063c6384071146108a7578063d84f2bc6146108af578063d9c37086146108b7576102f4565b8063b716d46314610897578063bb9fe6bf1461089f576102f4565b8063a3818b3b11610145578063a8fd327e1161011f578063a8fd327e1461083f578063b03401231461085c578063b15866e614610864576102f4565b8063a3818b3b146107be578063a598d03c14610805578063a694fc3a14610822576102f4565b80639449f013116101765780639449f0131461076057806395e5cfa2146107935780639c2aab5e146107b6576102f4565b80638da5cb5b146107125780639192705014610743576102f4565b806362072e761161024a578063715018a6116101fe57806378a1a9fa116101d857806378a1a9fa146106c757806382107751146106cf5780638b0e9f3f1461070a576102f4565b8063715018a61461063c578063718fbb7914610644578063788ddbcb1461068c576102f4565b806365eaf8bc1161022f57806365eaf8bc146105955780636a333cee146105d6578063704b6c0214610609576102f4565b806362072e761461052757806365611e431461055a576102f4565b80632e17de78116102ac5780634262336011610286578063426233601461048b578063499b86d8146104be5780635c13d4ac146104db576102f4565b80632e17de78146103f657806331a38c89146104135780633b32cf421461041b576102f4565b806326ae21a9116102dd57806326ae21a91461034857806329294e2b1461037b57806329711413146103ee576102f4565b806308c4934d146102f9578063145988981461032e575b600080fd5b61032c6004803603602081101561030f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661097b565b005b610336610a9d565b60408051918252519081900360200190f35b61032c6004803603602081101561035e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b1f565b61039e6004803603604081101561039157600080fd5b5080359060200135610c52565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103da5781810151838201526020016103c2565b505050509050019250505060405180910390f35b61039e610d44565b61032c6004803603602081101561040c57600080fd5b5035610db3565b61032c610f6a565b61032c6004803603602081101561043157600080fd5b81019060208101813564010000000081111561044c57600080fd5b82018360208201111561045e57600080fd5b8035906020019184602083028401116401000000008311171561048057600080fd5b509092509050611037565b610336600480360360208110156104a157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611184565b61032c600480360360208110156104d457600080fd5b5035611196565b61050e600480360360208110156104f157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112f0565b6040805192835260208301919091528051918290030190f35b61032c6004803603602081101561053d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611309565b61032c600480360360c081101561057057600080fd5b5080359060208101359060408101359060608101359060808101359060a0013561158d565b61032c600480360360608110156105ab57600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356118fc565b61032c600480360360208110156105ec57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a3e565b61032c6004803603602081101561061f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611c18565b61032c611c96565b6106616004803603602081101561065a57600080fd5b5035611d96565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61032c600480360360408110156106a257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611e29565b610336611eb5565b61032c600480360360408110156106e557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611ebb565b6103366123a4565b61071a6123aa565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61071a6004803603602081101561075957600080fd5b50356123c6565b6103366004803603602081101561077657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166123fa565b61039e600480360360408110156107a957600080fd5b508035906020013561240c565b6103366124e5565b6107f1600480360360208110156107d457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166124eb565b604080519115158252519081900360200190f35b61071a6004803603602081101561081b57600080fd5b5035612500565b61032c6004803603602081101561083857600080fd5b503561250d565b6106616004803603602081101561085557600080fd5b503561268c565b61071a6126ba565b6107f16004803603602081101561087a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166126de565b61071a61273f565b61032c612763565b610336612870565b610336612876565b61032c600480360360608110156108cd57600080fd5b508035906020810135906040013561287c565b610336600480360360208110156108f657600080fd5b5035612d47565b61032c6004803603602081101561091357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612d65565b6103366004803603602081101561094657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612eef565b61071a612f01565b610336612f1d565b61071a612f23565b610983612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614610a0c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600a5473ffffffffffffffffffffffffffffffffffffffff1615610a9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f41584445583a20416c72656164792073657400000000000000000000000000604482015290519081900360640190fd5b610a9a81612f43565b50565b60065460009073ffffffffffffffffffffffffffffffffffffffff163314610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613ccf6023913960400191505060405180910390fd5b50600c80546001019081905590565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610ba557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f41584445583a204e6f742066726f6d2073687574646f776e2061646d696e00604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff1663ef9b78c66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bed57600080fd5b505af1158015610c01573d6000803e3d6000fd5b50505050610c0e81613089565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f1c24a27ac669c0278656c76cc711441c8dd32d21c32227dad2b42bf6271e8fae90600090a250565b600e54606090610c68848463ffffffff6132ff16565b1115610c7757600e5483900391505b8167ffffffffffffffff81118015610c8e57600080fd5b50604051908082528060200260200182016040528015610cb8578160200160208202803683370190505b5090508260005b83811015610d3c57600e8281548110610cd457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281518110610d0b57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260019182019101610cbf565b505092915050565b6060600e805480602002602001604051908101604052809291908181526020018280548015610da957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d7e575b5050505050905090565b33600090815260036020908152604080832054600490925290912054610dde9163ffffffff6132ff16565b811115610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613ca4602b913960400191505060405180910390fd5b336000908152600360205260409020548111610e815733600090815260036020526040902054610e6c908263ffffffff61337a16565b33600090815260036020526040902055610f3f565b33600090815260036020526040812054610ea290839063ffffffff61337a16565b3360009081526003602090815260408083208381556001018390556004909152902054909150610ed8908263ffffffff61337a16565b33600090815260046020526040902055600554610efb908263ffffffff61337a16565b600555610f07336133bc565b60408051828152905133917f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd919081900360200190a2505b610a9a7f00000000000000000000000000000000000000000000000000000000000000003383613472565b336000818152600d6020526040902054600e80549091908110610f8957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613cf26026913960400191505060405180910390fd5b61100a33613089565b60405133907fdf42bfa876a741bbe542cf1a563269e1390bf03901b5d433a6e8afd6ee36dbfe90600090a2565b61103f612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff9081169116146110c857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6007541561113757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a206578656375746f7220616c72656164792073657400000000604482015290519081900360640190fd5b8060005b8181101561117e5761117684848381811061115257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16600161364f565b60010161113b565b50505050565b60046020526000908152604090205481565b3360009081526009602052604090205460ff1661121457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b600081118015611227575062278d008111155b61129257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f41584445583a20496e76616c6964206d696e5374616b65506572696f640000604482015290519081900360640190fd5b600b8190556040805182815290517f6d696e5374616b65506572696f64000000000000000000000000000000000000917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509919081900360200190a250565b6003602052600090815260409020805460019091015482565b8073ffffffffffffffffffffffffffffffffffffffff1663b3fff9bf6040518163ffffffff1660e01b815260040160006040518083038186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156113aa57600080fd5b81019080805160405193929190846401000000008211156113ca57600080fd5b9083019060208201858111156113df57600080fd5b82518660208202830111640100000000821117156113fc57600080fd5b82525081516020918201928201910280838360005b83811015611429578181015183820152602001611411565b50505050905001604052505050516000146114a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f476f7665726e616e63653a204e6f74206120506f6c6c00000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114eb57600080fd5b505afa1580156114ff573d6000803e3d6000fd5b505050506040513d602081101561151557600080fd5b5051421161158457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f476f7665726e616e63653a20566f74696e67206e6f7420656e64656400000000604482015290519081900360640190fd5b610a9a81613089565b3360009081526009602052604090205460ff1661160b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b60008511801561161e575062093a808511155b61168957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f41584445583a20496e76616c6964206d696e45786544656c61790000000000604482015290519081900360640190fd5b828410801561169b575062093a808411155b61170657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a20496e76616c696420766f74654475726174696f6e00000000604482015290519081900360640190fd5b600554821115611761576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613d186027913960400191505060405180910390fd5b6005548111156117d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f41584445583a20496e76616c6964206d696e51756f72756d00000000000000604482015290519081900360640190fd5b600086815260016020526040902080541561184e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f41584445583a20436f6e66696720616c726561647920657869737473000000604482015290519081900360640190fd5b858155600180820186905560028083018690556003830185905560048301849055805491820181556000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018790556040805188815260208101889052808201879052606081018690526080810185905260a0810184905290517f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf091299181900360c00190a150505050505050565b336000818152600d6020526040902054600e8054909190811061191b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614611993576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613cf26026913960400191505060405180910390fd5b82156119eb57604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f939cecbaa6409c96475d12a0cf1c30c058192b2b51716b5591c3f659ed9354a79181900360200190a3611a39565b604080518281529051339173ffffffffffffffffffffffffffffffffffffffff8516917f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc9181900360200190a35b505050565b611a46612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611acf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff1615611b5457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4f41584445583a20416c72656164792073657400000000000000000000000000604482015290519081900360640190fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617908190556040805160609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252517f766f74696e675265676973746572000000000000000000000000000000000000917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509916020918190039190910190a250565b3360009081526009602052604090205460ff16610a9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b611c9e612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611d2757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600081815260016020526040812060038101548291829182918291611e0157507f766f74650000000000000000000000000000000000000000000000000000000060005260016020527f981ebb1b944d3b52f140c2fb331aac52efb7ba38f2e98cea5942f05b58a04f6f5b8054600182015460028301546003840154600490940154929a91995097509195509350915050565b3360009081526009602052604090205460ff16611ea757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b611eb1828261364f565b5050565b60075490565b60065473ffffffffffffffffffffffffffffffffffffffff163314611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613ccf6023913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613d886022913960400191505060405180910390fd5b600e541580611ffb575073ffffffffffffffffffffffffffffffffffffffff82166000818152600d6020526040902054600e80549091908110611fd657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b612050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613c7a602a913960400191505060405180910390fd5b60005b600e54811015612291576000600e828154811061206c57fe5b6000918252602082200154604080517fb3fff9bf000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169350839263b3fff9bf92600480840193829003018186803b1580156120dc57600080fd5b505afa1580156120f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561213757600080fd5b810190808051604051939291908464010000000082111561215757600080fd5b90830190602082018581111561216c57600080fd5b825186602082028301116401000000008211171561218957600080fd5b82525081516020918201928201910280838360005b838110156121b657818101518382015260200161219e565b505050509050016040525050505160001480156122435750428173ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561221557600080fd5b505afa158015612229573d6000803e3d6000fd5b505050506040513d602081101561223f57600080fd5b5051105b156122845761227f600e838154811061225857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16613089565b61228b565b6001909101905b50612053565b600e805473ffffffffffffffffffffffffffffffffffffffff85166000818152600d60205260408120839055600183018455929092527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055811561235e5760405173ffffffffffffffffffffffffffffffffffffffff8416907f3b7f4bea1b2462212751e8a9d23ca2a37a1abf7ff729725e224314f1c190c99190600090a2611a39565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f83f5721a5071f4aac6f77c58360d8c8618098cebdc6d3c393f1e757ef4d1082b90600090a2505050565b60055481565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600781815481106123d357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600d6020526000908152604090205481565b6002546060908310156124df5760025461242c848463ffffffff6132ff16565b111561244857600254612445908463ffffffff61337a16565b91505b8167ffffffffffffffff8111801561245f57600080fd5b50604051908082528060200260200182016040528015612489578160200160208202803683370190505b50905060005b828110156124dd5760026124a9828663ffffffff6132ff16565b815481106124b357fe5b90600052602060002001548282815181106124ca57fe5b602090810291909101015260010161248f565b505b92915050565b600e5490565b60096020526000908152604090205460ff1681565b600e81815481106123d357fe5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561259957600080fd5b505afa1580156125ad573d6000803e3d6000fd5b505050506040513d60208110156125c357600080fd5b505181111561263357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f476f7665726e616e63653a20696e73756666696369656e742062616c616e6365604482015290519081900360640190fd5b61265f7f0000000000000000000000000000000000000000000000000000000000000000333084613928565b3360009081526003602052604090208054612680908363ffffffff6132ff16565b81554260019091015550565b6001602081905260009182526040909120805491810154600282015460038301546004909301549192909185565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000818152600d6020526040812054600e8054929392909190811061271657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161492915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b33600090815260036020526040902080546127df57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f476f7665726e616e63653a204e6f7468696e6720746f207374616b6500000000604482015290519081900360640190fd5b426127f9600b5483600101546132ff90919063ffffffff16565b1061284f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613d3f6025913960400191505060405180910390fd5b805433600090815260036020526040812081815560010155611eb181613af8565b600c5481565b600b5481565b3360009081526009602052604090205460ff166128fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f41584445583a204e6f742066726f6d20766f74696e67000000000000000000604482015290519081900360640190fd5b60008381526001602052604090205461297457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f41584445583a20436f6e666967206e6f742065786973747300000000000000604482015290519081900360640190fd5b817f6d696e45786544656c61790000000000000000000000000000000000000000001415612a30576000811180156129af575062093a808111155b612a1a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f41584445583a20496e76616c6964206d696e45786544656c61790000000000604482015290519081900360640190fd5b6000838152600160205260409020819055612d0b565b817f6d696e566f74654475726174696f6e00000000000000000000000000000000001415612b005760008381526001602052604090206002015481108015612a7b575062093a808111155b612ae657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a20496e76616c696420766f74654475726174696f6e00000000604482015290519081900360640190fd5b600083815260016020819052604090912001819055612d0b565b817f6d6178566f74654475726174696f6e00000000000000000000000000000000001415612bc157600083815260016020819052604090912001548111612ba857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f41584445583a20496e76616c696420766f74654475726174696f6e00000000604482015290519081900360640190fd5b6000838152600160205260409020600201819055612d0b565b817f6d696e4f6178546f6b656e546f437265617465566f74650000000000000000001415612c5d57600554811115612c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180613d186027913960400191505060405180910390fd5b6000838152600160205260409020600301819055612d0b565b817f6d696e51756f72756d00000000000000000000000000000000000000000000001415612d0b57600554811115612cf657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f41584445583a20496e76616c6964206d696e51756f72756d00000000000000604482015290519081900360640190fd5b60008381526001602052604090206004018190555b604080518281529051839185917f10eff86a4e52b12bd92a6e64442cdb5baa87a9b327114811ebfc96a7c1e002819181900360200190a3505050565b60028181548110612d5457fe5b600091825260209091200154905081565b612d6d612f3f565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614612df657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612e62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613c546026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60086020526000908152604090205481565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b60025490565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b3390565b73ffffffffffffffffffffffffffffffffffffffff8116612fc557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f41584445583a20496e76616c69642061646d696e0000000000000000000000604482015290519081900360640190fd5b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617908190556040805160609290921b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000168252517f61646d696e000000000000000000000000000000000000000000000000000000917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509916020918190039190910190a250565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d60205260409020548015158061310157508173ffffffffffffffffffffffffffffffffffffffff16600e6000815481106130dd57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b613156576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613cf26026913960400191505060405180910390fd5b600e547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0181101561327257600e80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106131b257fe5b600091825260209091200154600e805473ffffffffffffffffffffffffffffffffffffffff90921691839081106131e557fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d6000600e848154811061323f57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d6020526040812055600e8054806132a357fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b60008282018381101561337357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600061337383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613b80565b60005b600e54811015611eb157600e81815481106133d657fe5b6000918252602082200154604080517f17e42ec000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152915191909216926317e42ec0926024808201939182900301818387803b15801561344e57600080fd5b505af1158015613462573d6000803e3d6000fd5b5050600190920191506133bf9050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b6020831061354857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161350b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146135aa576040519150601f19603f3d011682016040523d82523d6000602084013e6135af565b606091505b50915091508180156135dd5750805115806135dd57508080602001905160208110156135da57600080fd5b50515b61364857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b73ffffffffffffffffffffffffffffffffffffffff82166136d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f41584445583a20496e76616c6964206578656375746f720000000000000000604482015290519081900360640190fd5b6007541580613735575073ffffffffffffffffffffffffffffffffffffffff821660008181526008602052604090205460078054909190811061371057fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b156137c0576007805473ffffffffffffffffffffffffffffffffffffffff84166000818152600860205260408120839055600183018455929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909117905561383b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602052604090205461383b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613c326022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016826138de5760006138e1565b60015b604080517f766f74696e674578656375746f720000000000000000000000000000000000008152602081019390935260ff9190911682820152519081900360600190a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310613a0657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016139c9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613a68576040519150601f19603f3d011682016040523d82523d6000602084013e613a6d565b606091505b5091509150818015613a9b575080511580613a9b5750808060200190516020811015613a9857600080fd5b50515b613af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613d646024913960400191505060405180910390fd5b505050505050565b33600090815260046020526040902054613b18908263ffffffff6132ff16565b33600090815260046020526040902055600554613b3b908263ffffffff6132ff16565b600555613b47336133bc565b60408051828152905133917febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a919081900360200190a250565b60008184841115613c29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613bee578181015183820152602001613bd6565b50505050905090810190601f168015613c1b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f41584445583a2063616e6e6f74207265736574206d61696e206578656375746f724f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373476f7665726e616e63653a20566f74696e6720636f6e747261637420616c726561647920657869737473476f7665726e616e63653a20756e6c6f636b2076616c756520657863656564206c6f636b65642066756e64476f7665726e616e63653a204e6f742066726f6d20766f74696e675265676973747279476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f74206578697374734f41584445583a20496e76616c6964206d696e4f6178546f6b656e546f437265617465566f7465476f7665726e616e63653a20467265657a656420706572696f64206e6f74207061737365645472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544476f7665726e616e63653a20496e76616c696420766f74696e672061646472657373a2646970667358221220d90ff00ac71282603f5116370920486c8e7c1a711eb10243fa7404f7a062fe2864736f6c634300060b00334f41584445583a20417267756d656e74206c656e67746873206e6f74206d617463686564"
};

// src/contracts/gov/OAXDEX_Governance.ts
var OAXDEX_Governance = class extends import_eth_wallet12.Contract {
  constructor(wallet, address) {
    super(wallet, address, OAXDEX_Governance_json_default.abi, OAXDEX_Governance_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.oaxToken, params.votingToken, import_eth_wallet12.Utils.stringToBytes32(params.names), import_eth_wallet12.Utils.toString(params.minExeDelay), import_eth_wallet12.Utils.toString(params.minVoteDuration), import_eth_wallet12.Utils.toString(params.maxVoteDuration), import_eth_wallet12.Utils.toString(params.minOaxTokenToCreateVote), import_eth_wallet12.Utils.toString(params.minQuorum), import_eth_wallet12.Utils.toString(params.minStakePeriod));
  }
  parseAddVotingConfigEvent(receipt) {
    return this.parseEvents(receipt, "AddVotingConfig").map((e) => this.decodeAddVotingConfigEvent(e));
  }
  decodeAddVotingConfigEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      minExeDelay: new import_eth_wallet12.BigNumber(result.minExeDelay),
      minVoteDuration: new import_eth_wallet12.BigNumber(result.minVoteDuration),
      maxVoteDuration: new import_eth_wallet12.BigNumber(result.maxVoteDuration),
      minOaxTokenToCreateVote: new import_eth_wallet12.BigNumber(result.minOaxTokenToCreateVote),
      minQuorum: new import_eth_wallet12.BigNumber(result.minQuorum),
      _event: event
    };
  }
  parseExecutedEvent(receipt) {
    return this.parseEvents(receipt, "Executed").map((e) => this.decodeExecutedEvent(e));
  }
  decodeExecutedEvent(event) {
    let result = event.data;
    return {
      vote: result.vote,
      _event: event
    };
  }
  parseNewPollEvent(receipt) {
    return this.parseEvents(receipt, "NewPoll").map((e) => this.decodeNewPollEvent(e));
  }
  decodeNewPollEvent(event) {
    let result = event.data;
    return {
      poll: result.poll,
      _event: event
    };
  }
  parseNewVoteEvent(receipt) {
    return this.parseEvents(receipt, "NewVote").map((e) => this.decodeNewVoteEvent(e));
  }
  decodeNewVoteEvent(event) {
    let result = event.data;
    return {
      vote: result.vote,
      _event: event
    };
  }
  parseOwnershipTransferredEvent(receipt) {
    return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
  }
  decodeOwnershipTransferredEvent(event) {
    let result = event.data;
    return {
      previousOwner: result.previousOwner,
      newOwner: result.newOwner,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parsePollEvent(receipt) {
    return this.parseEvents(receipt, "Poll").map((e) => this.decodePollEvent(e));
  }
  decodePollEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      poll: result.poll,
      option: new import_eth_wallet12.BigNumber(result.option),
      _event: event
    };
  }
  parseSetVotingConfigEvent(receipt) {
    return this.parseEvents(receipt, "SetVotingConfig").map((e) => this.decodeSetVotingConfigEvent(e));
  }
  decodeSetVotingConfigEvent(event) {
    let result = event.data;
    return {
      configName: result.configName,
      paramName: result.paramName,
      minExeDelay: new import_eth_wallet12.BigNumber(result.minExeDelay),
      _event: event
    };
  }
  parseStakeEvent(receipt) {
    return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
  }
  decodeStakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      value: new import_eth_wallet12.BigNumber(result.value),
      _event: event
    };
  }
  parseUnstakeEvent(receipt) {
    return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
  }
  decodeUnstakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      value: new import_eth_wallet12.BigNumber(result.value),
      _event: event
    };
  }
  parseVetoEvent(receipt) {
    return this.parseEvents(receipt, "Veto").map((e) => this.decodeVetoEvent(e));
  }
  decodeVetoEvent(event) {
    let result = event.data;
    return {
      vote: result.vote,
      _event: event
    };
  }
  parseVoteEvent(receipt) {
    return this.parseEvents(receipt, "Vote").map((e) => this.decodeVoteEvent(e));
  }
  decodeVoteEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      vote: result.vote,
      option: new import_eth_wallet12.BigNumber(result.option),
      _event: event
    };
  }
  async addVotingConfig_send(params) {
    let result = await this.send("addVotingConfig", [import_eth_wallet12.Utils.stringToBytes32(params.name), import_eth_wallet12.Utils.toString(params.minExeDelay), import_eth_wallet12.Utils.toString(params.minVoteDuration), import_eth_wallet12.Utils.toString(params.maxVoteDuration), import_eth_wallet12.Utils.toString(params.minOaxTokenToCreateVote), import_eth_wallet12.Utils.toString(params.minQuorum)]);
    return result;
  }
  async addVotingConfig_call(params) {
    let result = await this.call("addVotingConfig", [import_eth_wallet12.Utils.stringToBytes32(params.name), import_eth_wallet12.Utils.toString(params.minExeDelay), import_eth_wallet12.Utils.toString(params.minVoteDuration), import_eth_wallet12.Utils.toString(params.maxVoteDuration), import_eth_wallet12.Utils.toString(params.minOaxTokenToCreateVote), import_eth_wallet12.Utils.toString(params.minQuorum)]);
    return;
  }
  async admin() {
    let result = await this.call("admin");
    return result;
  }
  async allVotings() {
    let result = await this.call("allVotings");
    return result;
  }
  async closeVote_send(vote) {
    let result = await this.send("closeVote", [vote]);
    return result;
  }
  async closeVote_call(vote) {
    let result = await this.call("closeVote", [vote]);
    return;
  }
  async executed_send() {
    let result = await this.send("executed");
    return result;
  }
  async executed_call() {
    let result = await this.call("executed");
    return;
  }
  async freezedStake(param1) {
    let result = await this.call("freezedStake", [param1]);
    return {
      amount: new import_eth_wallet12.BigNumber(result.amount),
      timestamp: new import_eth_wallet12.BigNumber(result.timestamp)
    };
  }
  async getNewVoteId_send() {
    let result = await this.send("getNewVoteId");
    return result;
  }
  async getNewVoteId_call() {
    let result = await this.call("getNewVoteId");
    return new import_eth_wallet12.BigNumber(result);
  }
  async getVotingConfigProfiles(params) {
    let result = await this.call("getVotingConfigProfiles", [import_eth_wallet12.Utils.toString(params.start), import_eth_wallet12.Utils.toString(params.length)]);
    return result;
  }
  async getVotingCount() {
    let result = await this.call("getVotingCount");
    return new import_eth_wallet12.BigNumber(result);
  }
  async getVotingParams(name) {
    let result = await this.call("getVotingParams", [import_eth_wallet12.Utils.stringToBytes32(name)]);
    return {
      _minExeDelay: new import_eth_wallet12.BigNumber(result._minExeDelay),
      _minVoteDuration: new import_eth_wallet12.BigNumber(result._minVoteDuration),
      _maxVoteDuration: new import_eth_wallet12.BigNumber(result._maxVoteDuration),
      _minOaxTokenToCreateVote: new import_eth_wallet12.BigNumber(result._minOaxTokenToCreateVote),
      _minQuorum: new import_eth_wallet12.BigNumber(result._minQuorum)
    };
  }
  async getVotings(params) {
    let result = await this.call("getVotings", [import_eth_wallet12.Utils.toString(params.start), import_eth_wallet12.Utils.toString(params.count)]);
    return result;
  }
  async initAdmin_send(admin) {
    let result = await this.send("initAdmin", [admin]);
    return result;
  }
  async initAdmin_call(admin) {
    let result = await this.call("initAdmin", [admin]);
    return;
  }
  async initVotingExecutor_send(votingExecutor) {
    let result = await this.send("initVotingExecutor", [votingExecutor]);
    return result;
  }
  async initVotingExecutor_call(votingExecutor) {
    let result = await this.call("initVotingExecutor", [votingExecutor]);
    return;
  }
  async isVotingContract(votingContract) {
    let result = await this.call("isVotingContract", [votingContract]);
    return result;
  }
  async isVotingExecutor(param1) {
    let result = await this.call("isVotingExecutor", [param1]);
    return result;
  }
  async minStakePeriod() {
    let result = await this.call("minStakePeriod");
    return new import_eth_wallet12.BigNumber(result);
  }
  async newVote_send(params) {
    let result = await this.send("newVote", [params.vote, params.isExecutiveVote]);
    return result;
  }
  async newVote_call(params) {
    let result = await this.call("newVote", [params.vote, params.isExecutiveVote]);
    return;
  }
  async oaxToken() {
    let result = await this.call("oaxToken");
    return result;
  }
  async owner() {
    let result = await this.call("owner");
    return result;
  }
  async renounceOwnership_send() {
    let result = await this.send("renounceOwnership");
    return result;
  }
  async renounceOwnership_call() {
    let result = await this.call("renounceOwnership");
    return;
  }
  async setAdmin_send(admin) {
    let result = await this.send("setAdmin", [admin]);
    return result;
  }
  async setAdmin_call(admin) {
    let result = await this.call("setAdmin", [admin]);
    return;
  }
  async setMinStakePeriod_send(minStakePeriod) {
    let result = await this.send("setMinStakePeriod", [import_eth_wallet12.Utils.toString(minStakePeriod)]);
    return result;
  }
  async setMinStakePeriod_call(minStakePeriod) {
    let result = await this.call("setMinStakePeriod", [import_eth_wallet12.Utils.toString(minStakePeriod)]);
    return;
  }
  async setVotingConfig_send(params) {
    let result = await this.send("setVotingConfig", [import_eth_wallet12.Utils.stringToBytes32(params.configName), import_eth_wallet12.Utils.stringToBytes32(params.paramName), import_eth_wallet12.Utils.toString(params.paramValue)]);
    return result;
  }
  async setVotingConfig_call(params) {
    let result = await this.call("setVotingConfig", [import_eth_wallet12.Utils.stringToBytes32(params.configName), import_eth_wallet12.Utils.stringToBytes32(params.paramName), import_eth_wallet12.Utils.toString(params.paramValue)]);
    return;
  }
  async setVotingExecutor_send(params) {
    let result = await this.send("setVotingExecutor", [params.votingExecutor, params.bool]);
    return result;
  }
  async setVotingExecutor_call(params) {
    let result = await this.call("setVotingExecutor", [params.votingExecutor, params.bool]);
    return;
  }
  async setVotingRegister_send(votingRegister) {
    let result = await this.send("setVotingRegister", [votingRegister]);
    return result;
  }
  async setVotingRegister_call(votingRegister) {
    let result = await this.call("setVotingRegister", [votingRegister]);
    return;
  }
  async stake_send(value) {
    let result = await this.send("stake", [import_eth_wallet12.Utils.toString(value)]);
    return result;
  }
  async stake_call(value) {
    let result = await this.call("stake", [import_eth_wallet12.Utils.toString(value)]);
    return;
  }
  async stakeOf(param1) {
    let result = await this.call("stakeOf", [param1]);
    return new import_eth_wallet12.BigNumber(result);
  }
  async totalStake() {
    let result = await this.call("totalStake");
    return new import_eth_wallet12.BigNumber(result);
  }
  async transferOwnership_send(newOwner) {
    let result = await this.send("transferOwnership", [newOwner]);
    return result;
  }
  async transferOwnership_call(newOwner) {
    let result = await this.call("transferOwnership", [newOwner]);
    return;
  }
  async unlockStake_send() {
    let result = await this.send("unlockStake");
    return result;
  }
  async unlockStake_call() {
    let result = await this.call("unlockStake");
    return;
  }
  async unstake_send(value) {
    let result = await this.send("unstake", [import_eth_wallet12.Utils.toString(value)]);
    return result;
  }
  async unstake_call(value) {
    let result = await this.call("unstake", [import_eth_wallet12.Utils.toString(value)]);
    return;
  }
  async veto_send(voting) {
    let result = await this.send("veto", [voting]);
    return result;
  }
  async veto_call(voting) {
    let result = await this.call("veto", [voting]);
    return;
  }
  async voteCount() {
    let result = await this.call("voteCount");
    return new import_eth_wallet12.BigNumber(result);
  }
  async voted_send(params) {
    let result = await this.send("voted", [params.poll, params.account, import_eth_wallet12.Utils.toString(params.option)]);
    return result;
  }
  async voted_call(params) {
    let result = await this.call("voted", [params.poll, params.account, import_eth_wallet12.Utils.toString(params.option)]);
    return;
  }
  async votingConfigProfiles(param1) {
    let result = await this.call("votingConfigProfiles", [import_eth_wallet12.Utils.toString(param1)]);
    return result;
  }
  async votingConfigProfilesLength() {
    let result = await this.call("votingConfigProfilesLength");
    return new import_eth_wallet12.BigNumber(result);
  }
  async votingConfigs(param1) {
    let result = await this.call("votingConfigs", [import_eth_wallet12.Utils.stringToBytes32(param1)]);
    return {
      minExeDelay: new import_eth_wallet12.BigNumber(result.minExeDelay),
      minVoteDuration: new import_eth_wallet12.BigNumber(result.minVoteDuration),
      maxVoteDuration: new import_eth_wallet12.BigNumber(result.maxVoteDuration),
      minOaxTokenToCreateVote: new import_eth_wallet12.BigNumber(result.minOaxTokenToCreateVote),
      minQuorum: new import_eth_wallet12.BigNumber(result.minQuorum)
    };
  }
  async votingExecutor(param1) {
    let result = await this.call("votingExecutor", [import_eth_wallet12.Utils.toString(param1)]);
    return result;
  }
  async votingExecutorInv(param1) {
    let result = await this.call("votingExecutorInv", [param1]);
    return new import_eth_wallet12.BigNumber(result);
  }
  async votingExecutorLength() {
    let result = await this.call("votingExecutorLength");
    return new import_eth_wallet12.BigNumber(result);
  }
  async votingIdx(param1) {
    let result = await this.call("votingIdx", [param1]);
    return new import_eth_wallet12.BigNumber(result);
  }
  async votingRegister() {
    let result = await this.call("votingRegister");
    return result;
  }
  async votingToken() {
    let result = await this.call("votingToken");
    return result;
  }
  async votings(param1) {
    let result = await this.call("votings", [import_eth_wallet12.Utils.toString(param1)]);
    return result;
  }
  assign() {
    this.addVotingConfig = Object.assign(this.addVotingConfig_send, { call: this.addVotingConfig_call });
    this.closeVote = Object.assign(this.closeVote_send, { call: this.closeVote_call });
    this.executed = Object.assign(this.executed_send, { call: this.executed_call });
    this.getNewVoteId = Object.assign(this.getNewVoteId_send, { call: this.getNewVoteId_call });
    this.initAdmin = Object.assign(this.initAdmin_send, { call: this.initAdmin_call });
    this.initVotingExecutor = Object.assign(this.initVotingExecutor_send, { call: this.initVotingExecutor_call });
    this.newVote = Object.assign(this.newVote_send, { call: this.newVote_call });
    this.renounceOwnership = Object.assign(this.renounceOwnership_send, { call: this.renounceOwnership_call });
    this.setAdmin = Object.assign(this.setAdmin_send, { call: this.setAdmin_call });
    this.setMinStakePeriod = Object.assign(this.setMinStakePeriod_send, { call: this.setMinStakePeriod_call });
    this.setVotingConfig = Object.assign(this.setVotingConfig_send, { call: this.setVotingConfig_call });
    this.setVotingExecutor = Object.assign(this.setVotingExecutor_send, { call: this.setVotingExecutor_call });
    this.setVotingRegister = Object.assign(this.setVotingRegister_send, { call: this.setVotingRegister_call });
    this.stake = Object.assign(this.stake_send, { call: this.stake_call });
    this.transferOwnership = Object.assign(this.transferOwnership_send, { call: this.transferOwnership_call });
    this.unlockStake = Object.assign(this.unlockStake_send, { call: this.unlockStake_call });
    this.unstake = Object.assign(this.unstake_send, { call: this.unstake_call });
    this.veto = Object.assign(this.veto_send, { call: this.veto_call });
    this.voted = Object.assign(this.voted_send, { call: this.voted_call });
  }
};

// src/contracts/gov/OAXDEX_VotingContract.ts
var import_eth_wallet13 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/gov/OAXDEX_VotingContract.json.ts
var OAXDEX_VotingContract_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "governance_", "type": "address" }, { "internalType": "address", "name": "executor_", "type": "address" }, { "internalType": "uint256", "name": "id_", "type": "uint256" }, { "internalType": "bytes32", "name": "name_", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options_", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum_", "type": "uint256" }, { "internalType": "uint256", "name": "threshold_", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime_", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay_", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam_", "type": "bytes32[]" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_executeParam", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_options", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_optionsWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteOption", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "executeDelay", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "executeParam", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "executed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "executor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getParams", "outputs": [{ "internalType": "address", "name": "executor_", "type": "address" }, { "internalType": "uint256", "name": "id_", "type": "uint256" }, { "internalType": "bytes32", "name": "name_", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options_", "type": "bytes32[]" }, { "internalType": "uint256", "name": "voteStartTime_", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime_", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay_", "type": "uint256" }, { "internalType": "bool[2]", "name": "status_", "type": "bool[2]" }, { "internalType": "uint256[]", "name": "optionsWeight_", "type": "uint256[]" }, { "internalType": "uint256[3]", "name": "quorum_", "type": "uint256[3]" }, { "internalType": "bytes32[]", "name": "executeParam_", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "id", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "options", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "optionsCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "optionsWeight", "outputs": [{ "internalType": "uint256[]", "name": "", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "quorum", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "threshold", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "updateWeight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "vetoed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "vote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "voteEndTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "voteStartTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/gov/OAXDEX_VotingContract.ts
var OAXDEX_VotingContract = class extends import_eth_wallet13.Contract {
  constructor(wallet, address) {
    super(wallet, address, OAXDEX_VotingContract_json_default.abi, OAXDEX_VotingContract_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.executor, import_eth_wallet13.Utils.toString(params.id), import_eth_wallet13.Utils.stringToBytes32(params.name), import_eth_wallet13.Utils.stringToBytes32(params.options), import_eth_wallet13.Utils.toString(params.quorum), import_eth_wallet13.Utils.toString(params.threshold), import_eth_wallet13.Utils.toString(params.voteEndTime), import_eth_wallet13.Utils.toString(params.executeDelay), import_eth_wallet13.Utils.stringToBytes32(params.executeParam));
  }
  async _executeParam(param1) {
    let result = await this.call("_executeParam", [import_eth_wallet13.Utils.toString(param1)]);
    return result;
  }
  async _options(param1) {
    let result = await this.call("_options", [import_eth_wallet13.Utils.toString(param1)]);
    return result;
  }
  async _optionsWeight(param1) {
    let result = await this.call("_optionsWeight", [import_eth_wallet13.Utils.toString(param1)]);
    return new import_eth_wallet13.BigNumber(result);
  }
  async accountVoteOption(param1) {
    let result = await this.call("accountVoteOption", [param1]);
    return new import_eth_wallet13.BigNumber(result);
  }
  async accountVoteWeight(param1) {
    let result = await this.call("accountVoteWeight", [param1]);
    return new import_eth_wallet13.BigNumber(result);
  }
  async execute_send() {
    let result = await this.send("execute");
    return result;
  }
  async execute_call() {
    let result = await this.call("execute");
    return;
  }
  async executeDelay() {
    let result = await this.call("executeDelay");
    return new import_eth_wallet13.BigNumber(result);
  }
  async executeParam() {
    let result = await this.call("executeParam");
    return result;
  }
  async executed() {
    let result = await this.call("executed");
    return result;
  }
  async executor() {
    let result = await this.call("executor");
    return result;
  }
  async getParams() {
    let result = await this.call("getParams");
    return {
      executor_: result.executor_,
      id_: new import_eth_wallet13.BigNumber(result.id_),
      name_: result.name_,
      options_: result.options_,
      voteStartTime_: new import_eth_wallet13.BigNumber(result.voteStartTime_),
      voteEndTime_: new import_eth_wallet13.BigNumber(result.voteEndTime_),
      executeDelay_: new import_eth_wallet13.BigNumber(result.executeDelay_),
      status_: result.status_,
      optionsWeight_: result.optionsWeight_.map((e) => new import_eth_wallet13.BigNumber(e)),
      quorum_: result.quorum_.map((e) => new import_eth_wallet13.BigNumber(e)),
      executeParam_: result.executeParam_
    };
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async id() {
    let result = await this.call("id");
    return new import_eth_wallet13.BigNumber(result);
  }
  async name() {
    let result = await this.call("name");
    return result;
  }
  async options() {
    let result = await this.call("options");
    return result;
  }
  async optionsCount() {
    let result = await this.call("optionsCount");
    return new import_eth_wallet13.BigNumber(result);
  }
  async optionsWeight() {
    let result = await this.call("optionsWeight");
    return result.map((e) => new import_eth_wallet13.BigNumber(e));
  }
  async quorum() {
    let result = await this.call("quorum");
    return new import_eth_wallet13.BigNumber(result);
  }
  async threshold() {
    let result = await this.call("threshold");
    return new import_eth_wallet13.BigNumber(result);
  }
  async totalVoteWeight() {
    let result = await this.call("totalVoteWeight");
    return new import_eth_wallet13.BigNumber(result);
  }
  async totalWeight() {
    let result = await this.call("totalWeight");
    return new import_eth_wallet13.BigNumber(result);
  }
  async updateWeight_send(account) {
    let result = await this.send("updateWeight", [account]);
    return result;
  }
  async updateWeight_call(account) {
    let result = await this.call("updateWeight", [account]);
    return;
  }
  async veto_send() {
    let result = await this.send("veto");
    return result;
  }
  async veto_call() {
    let result = await this.call("veto");
    return;
  }
  async vetoed() {
    let result = await this.call("vetoed");
    return result;
  }
  async vote_send(option) {
    let result = await this.send("vote", [import_eth_wallet13.Utils.toString(option)]);
    return result;
  }
  async vote_call(option) {
    let result = await this.call("vote", [import_eth_wallet13.Utils.toString(option)]);
    return;
  }
  async voteEndTime() {
    let result = await this.call("voteEndTime");
    return new import_eth_wallet13.BigNumber(result);
  }
  async voteStartTime() {
    let result = await this.call("voteStartTime");
    return new import_eth_wallet13.BigNumber(result);
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
    this.updateWeight = Object.assign(this.updateWeight_send, { call: this.updateWeight_call });
    this.veto = Object.assign(this.veto_send, { call: this.veto_call });
    this.vote = Object.assign(this.vote_send, { call: this.vote_call });
  }
};

// src/contracts/gov/OAXDEX_VotingExecutor.ts
var import_eth_wallet14 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/gov/OAXDEX_VotingExecutor.json.ts
var OAXDEX_VotingExecutor_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_admin", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50604051610a04380380610a048339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b0319918216179091556001805493909216921691909117905561098a8061007a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635aa6e675146100465780638af7c64914610077578063f851a440146100e9575b600080fd5b61004e6100f1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e76004803603602081101561008d57600080fd5b8101906020810181356401000000008111156100a857600080fd5b8201836020820111156100ba57600080fd5b803590602001918460208302840111640100000000831117156100dc57600080fd5b50909250905061010d565b005b61004e6108c3565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600054604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163b15866e691602480820192602092909190829003018186803b15801561017e57600080fd5b505afa158015610192573d6000803e3d6000fd5b505050506040513d60208110156101a857600080fd5b50516101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806108e06026913960400191505060405180910390fd5b60008282600081811061020e57fe5b90506020020135905060008383600181811061022657fe5b6020029190910135915050600483141561036357817f736574566f74696e67436f6e6669670000000000000000000000000000000000141561030d5760005473ffffffffffffffffffffffffffffffffffffffff1663d9c37086828686600281811061028e57fe5b90506020020135878760038181106102a257fe5b9050602002013560001c6040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156102f057600080fd5b505af1158015610304573d6000803e3d6000fd5b5050505061035e565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061092f6026913960400191505060405180910390fd5b6108bd565b600283141561067257817f7365744d696e5374616b65506572696f6400000000000000000000000000000014156104025760008054604080517f499b86d800000000000000000000000000000000000000000000000000000000815260048101859052905173ffffffffffffffffffffffffffffffffffffffff9092169263499b86d89260248084019382900301818387803b1580156102f057600080fd5b817f7365744d617841646d696e000000000000000000000000000000000000000000141561049d57600154604080517f03cb43e500000000000000000000000000000000000000000000000000000000815260048101849052905173ffffffffffffffffffffffffffffffffffffffff909216916303cb43e59160248082019260009290919082900301818387803b1580156102f057600080fd5b817f61646441646d696e000000000000000000000000000000000000000000000000141561053b57600154604080517f70480275000000000000000000000000000000000000000000000000000000008152606084901c6004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163704802759160248082019260009290919082900301818387803b1580156102f057600080fd5b817f72656d6f766541646d696e00000000000000000000000000000000000000000014156105d957600154604080517f1785f53c000000000000000000000000000000000000000000000000000000008152606084901c6004820152905173ffffffffffffffffffffffffffffffffffffffff90921691631785f53c9160248082019260009290919082900301818387803b1580156102f057600080fd5b817f73657441646d696e000000000000000000000000000000000000000000000000141561030d5760008054604080517f704b6c02000000000000000000000000000000000000000000000000000000008152606085901c6004820152905173ffffffffffffffffffffffffffffffffffffffff9092169263704b6c029260248084019382900301818387803b1580156102f057600080fd5b600383141561075057817f736574566f74696e674578656375746f72000000000000000000000000000000141561030d5760005473ffffffffffffffffffffffffffffffffffffffff1663788ddbcb606083901c868660028181106106d357fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b1580156102f057600080fd5b600783141561086c57817f616464566f74696e67436f6e6669670000000000000000000000000000000000141561030d5760005473ffffffffffffffffffffffffffffffffffffffff166365611e4382868660028181106107ad57fe5b9050602002013560001c878760038181106107c457fe5b9050602002013560001c888860048181106107db57fe5b9050602002013560001c898960058181106107f257fe5b9050602002013560001c8a8a600681811061080957fe5b9050602002013560001c6040518763ffffffff1660e01b8152600401808781526020018681526020018581526020018481526020018381526020018281526020019650505050505050600060405180830381600087803b1580156102f057600080fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806109066029913960400191505060405180910390fd5b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff168156fe4f41584445585f566f74696e674578656375746f723a204e6f742066726f6d20766f74696e674f41584445585f566f74696e674578656375746f723a20496e76616c696420706172616d65746572734f41584445585f566f74696e674578656375746f723a20556e6b6e6f776e20636f6d6d616e64a2646970667358221220c7b0e11642a4108f4ad99d81218fac6c87c1a32d1beace76ffaa02f9736aac2664736f6c634300060b0033"
};

// src/contracts/gov/OAXDEX_VotingExecutor.ts
var OAXDEX_VotingExecutor = class extends import_eth_wallet14.Contract {
  constructor(wallet, address) {
    super(wallet, address, OAXDEX_VotingExecutor_json_default.abi, OAXDEX_VotingExecutor_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.admin);
  }
  async admin() {
    let result = await this.call("admin");
    return result;
  }
  async execute_send(params) {
    let result = await this.send("execute", [import_eth_wallet14.Utils.stringToBytes32(params)]);
    return result;
  }
  async execute_call(params) {
    let result = await this.call("execute", [import_eth_wallet14.Utils.stringToBytes32(params)]);
    return;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
  }
};

// src/contracts/gov/OAXDEX_VotingRegistry.ts
var import_eth_wallet15 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/gov/OAXDEX_VotingRegistry.json.ts
var OAXDEX_VotingRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "executor", "type": "address" }, { "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum", "type": "uint256" }, { "internalType": "uint256", "name": "threshold", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam", "type": "bytes32[]" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50604051612b1b380380612b1b8339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055612ab6806100656000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80635aa6e675146200003f578063dac642fb1462000072575b600080fd5b6200004962000178565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6200017660048036036101008110156200008b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691602081013591810190606081016040820135640100000000811115620000c957600080fd5b820183602082011115620000dc57600080fd5b80359060200191846020830284011164010000000083111715620000ff57600080fd5b9193909282359260208101359260408201359260608301359260a0810190608001356401000000008111156200013457600080fd5b8201836020820111156200014757600080fd5b803590602001918460208302840111640100000000831117156200016a57600080fd5b50909250905062000194565b005b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600054604080517fa3818b3b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d81166004830152915184151593929092169163a3818b3b91602480820192602092909190829003018186803b1580156200020d57600080fd5b505afa15801562000222573d6000803e3d6000fd5b505050506040513d60208110156200023957600080fd5b505162000292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018062002a5a6027913960400191505060405180910390fd5b600081620002c1577f706f6c6c00000000000000000000000000000000000000000000000000000000620002d7565b83836000818110620002cf57fe5b905060200201355b905060008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663718fbb79876040518263ffffffff1660e01b81526004018082815260200191505060a06040518083038186803b1580156200035457600080fd5b505afa15801562000369573d6000803e3d6000fd5b505050506040513d60a08110156200038057600080fd5b50805160208083015160408085015160608601516080909601516000805484517f426233600000000000000000000000000000000000000000000000000000000081523360048201529451979d50949b5091995095975094955073ffffffffffffffffffffffffffffffffffffffff90911692634262336092602480840193919291829003018186803b1580156200041757600080fd5b505afa1580156200042c573d6000803e3d6000fd5b505050506040513d60208110156200044357600080fd5b5051905082811015620004a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180620029ce6036913960400191505060405180910390fd5b84620004b58d4263ffffffff620008f516565b10156200050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018062002a04602e913960400191505060405180910390fd5b83620005218d4263ffffffff620008f516565b11156200057a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062002975602f913960400191505060405180910390fd5b87156200063757818e1015620005dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602881526020018062002a326028913960400191505060405180910390fd5b858b101562000637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180620029a4602a913960400191505060405180910390fd5b5050505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663145988986040518163ffffffff1660e01b8152600401602060405180830381600087803b158015620006aa57600080fd5b505af1158015620006bf573d6000803e3d6000fd5b505050506040513d6020811015620006d657600080fd5b505160008054604051929350909173ffffffffffffffffffffffffffffffffffffffff909116908e9084908f908f908f908f908f908f908f908f908f906200071e90620009f5565b808d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a8152602001806020018881526020018781526020018681526020018581526020018060200183810383528b8b82818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f8201169050808301925050509e505050505050505050505050505050604051809103906000f0801580156200084f573d6000803e3d6000fd5b5060008054604080517f8210775100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80861660048301528815156024830152915194955091169263821077519260448084019391929182900301818387803b158015620008cd57600080fd5b505af1158015620008e2573d6000803e3d6000fd5b5050505050505050505050505050505050565b60006200093983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525062000940565b9392505050565b60008184841115620009ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620009b157818101518382015260200162000997565b50505050905090810190601f168015620009df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b611f718062000a048339019056fe60806040523480156200001157600080fd5b5060405162001f7138038062001f7183398181016040526101408110156200003857600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007457600080fd5b9083019060208201858111156200008a57600080fd5b8251866020820283011164010000000082111715620000a857600080fd5b82525081516020918201928201910280838360005b83811015620000d7578181015183820152602001620000bd565b505050509190910160408181526020840151908401516060850151608086015160a0909601805193989297919695509192909190846401000000008211156200011f57600080fd5b9083019060208201858111156200013557600080fd5b82518660208202830111640100000000821117156200015357600080fd5b82525081516020918201928201910280838360005b838110156200018257818101518382015260200162000168565b5050505090500160405250505082421115620001d05760405162461bcd60e51b815260040180806020018281038252602481526020018062001f4d6024913960400191505060405180910390fd5b805115620003da57896001600160a01b031663a3818b3b8a6040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b1580156200022f57600080fd5b505afa15801562000244573d6000803e3d6000fd5b505050506040513d60208110156200025b57600080fd5b5051620002af576040805162461bcd60e51b815260206004820181905260248201527f566f74696e67436f6e74726163743a20496e76616c6964206578656375746f72604482015290519081900360640190fd5b85516002148015620002d9575085600081518110620002ca57fe5b6020026020010151605960f81b145b8015620002fe575085600181518110620002ef57fe5b6020026020010151602760f91b145b62000350576040805162461bcd60e51b815260206004820152601f60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e7300604482015290519081900360640190fd5b670de0b6b3a7640000841115620003995760405162461bcd60e51b815260040180806020018281038252602181526020018062001f2c6021913960400191505060405180910390fd5b60008211620003da5760405162461bcd60e51b815260040180806020018281038252602581526020018062001f076025913960400191505060405180910390fd5b600080546001600160a01b03808d166001600160a01b03199283161792839055600180548d831693169290921790915560408051638b0e9f3f60e01b815290519290911691638b0e9f3f91600480820192602092909190829003018186803b1580156200044657600080fd5b505afa1580156200045b573d6000803e3d6000fd5b505050506040513d60208110156200047257600080fd5b5051600f556002889055600387905585516200049690600490602089019062000530565b506005859055600684905585516001600160401b0381118015620004b957600080fd5b50604051908082528060200260200182016040528015620004e4578160200160208202803683370190505b508051620004fb91600d9160209091019062000530565b50426007556008839055600982905580516200051f90601090602084019062000530565b5050505050505050505050620005a0565b8280548282559060005260206000209081019282156200056e579160200282015b828111156200056e57825182559160200191906001019062000551565b506200057c92915062000580565b5090565b6200059d91905b808211156200057c576000815560010162000587565b90565b61195780620005b06000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80635e615a6b116100f9578063af640d0f11610097578063e5188f5511610071578063e5188f5514610561578063ede20b4614610569578063ef9b78c614610571578063fc8add8114610579576101b9565b8063af640d0f14610549578063b3fff9bf14610551578063c34c08e514610559576101b9565b8063876cdb2f116100d3578063876cdb2f1461051457806396c82e571461051c5780639e6cb42b14610524578063a25457611461052c576101b9565b80635e615a6b146103725780636146195414610504578063769bdea31461050c576101b9565b80631a1dbabb1161016657806331a38c891161014057806331a38c891461030057806342cde4e81461031c578063583b306e146103245780635aa6e67514610341576101b9565b80631a1dbabb146102925780632376a29a1461029a578063281a9bdf146102cd576101b9565b80631703a018116101975780631703a0181461024f57806317e42ec01461025757806318024acc1461028a576101b9565b80630121b93f146101be57806306fdde03146101dd5780631069143a146101f7575b600080fd5b6101db600480360360208110156101d457600080fd5b5035610596565b005b6101e5610a48565b60408051918252519081900360200190f35b6101ff610a4e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023b578181015183820152602001610223565b505050509050019250505060405180910390f35b6101e5610aa6565b6101db6004803603602081101561026d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610aac565b6101e5610cb2565b6101e5610cb8565b6101e5600480360360208110156102b057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610cbe565b6101e5600480360360208110156102e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610cd0565b610308610ce2565b604080519115158252519081900360200190f35b6101e5610ceb565b6101e56004803603602081101561033a57600080fd5b5035610cf1565b610349610d0f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61037a610d2b565b604051808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a81526020018060200189815260200188815260200187815260200186600260200280838360005b838110156103f65781810151838201526020016103de565b50505092019150506020810185606080838360005b8381101561042357818101518382015260200161040b565b505050509050018060200184810384528c818151815260200191508051906020019060200280838360005b8381101561046657818101518382015260200161044e565b50505050905001848103835287818151815260200191508051906020019060200280838360005b838110156104a557818101518382015260200161048d565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156104e45781810151838201526020016104cc565b505050509050019e50505050505050505050505050505060405180910390f35b6101db610edd565b6101ff611388565b6101e56113de565b6101e56113e4565b6101e56113ea565b6101e56004803603602081101561054257600080fd5b50356113f0565b6101e56113fd565b6101ff611403565b610349611459565b6101e5611475565b61030861147b565b6101db611489565b6101e56004803603602081101561058f57600080fd5b5035611583565b6008544211156105f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061186b6022913960400191505060405180910390fd5b600a54610100900460ff1615610652576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806117ff6023913960400191505060405180910390fd5b600a5460ff16156106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806117da6025913960400191505060405180910390fd5b600454811061071e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e0000604482015290519081900360640190fd5b60008054601054604080517f65eaf8bc00000000000000000000000000000000000000000000000000000000815291156004830152336024830152604482018590525173ffffffffffffffffffffffffffffffffffffffff909216926365eaf8bc9260648084019382900301818387803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b5050336000908152600c6020526040902054915050801561083857336000908152600b6020526040902054600d8054610807918491849081106107ee57fe5b906000526020600020015461159090919063ffffffff16565b600d828154811061081457fe5b600091825260209091200155600e54610833908363ffffffff61159016565b600e55505b60008054604080517f42623360000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff90921691634262336091602480820192602092909190829003018186803b1580156108aa57600080fd5b505afa1580156108be573d6000803e3d6000fd5b505050506040513d60208110156108d457600080fd5b505190508061092e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118226022913960400191505060405180910390fd5b336000908152600b60209081526040808320869055600c9091529020819055600d805461097a9183918690811061096157fe5b90600052602060002001546115db90919063ffffffff16565b600d848154811061098757fe5b600091825260209091200155600e546109a6908263ffffffff6115db16565b600e55600054604080517f8b0e9f3f000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638b0e9f3f91600480820192602092909190829003018186803b158015610a1457600080fd5b505afa158015610a28573d6000803e3d6000fd5b505050506040513d6020811015610a3e57600080fd5b5051600f55505050565b60035481565b60606004805480602002602001604051908101604052809291908181526020018280548015610a9c57602002820191906000526020600020905b815481526020019060010190808311610a88575b5050505050905090565b60055481565b6008544211158015610ac65750600a54610100900460ff16155b8015610ad55750600a5460ff16155b15610caf5760008054604080517f4262336000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916342623360916024808301926020929190829003018186803b158015610b4e57600080fd5b505afa158015610b62573d6000803e3d6000fd5b505050506040513d6020811015610b7857600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83166000908152600c60205260409020549091508015801590610bb25750818114155b15610c485773ffffffffffffffffffffffffffffffffffffffff83166000908152600b6020908152604080832054600c909252909120839055600d8054610c11918591610c05918691869081106107ee57fe5b9063ffffffff6115db16565b600d8281548110610c1e57fe5b600091825260209091200155600e54610c43908490610c05908563ffffffff61159016565b600e55505b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1457600080fd5b50565b60075481565b60045490565b600c6020526000908152604090205481565b600b6020526000908152604090205481565b600a5460ff1681565b60065481565b60108181548110610cfe57fe5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060606000806000610d3f611773565b6060610d49611791565b600154600254600354600754600854600954604080518082018252600a5460ff80821615158352610100909104161515602080830191909152825160608181018552600554825260065482840152600f548286015260048054865181860281018601909752808752919b73ffffffffffffffffffffffffffffffffffffffff169a9998909790969095909493600d9392601092918a9190830182828015610e0f57602002820191906000526020600020905b815481526020019060010190808311610dfb575b5050505050975082805480602002602001604051908101604052809291908181526020018280548015610e6157602002820191906000526020600020905b815481526020019060010190808311610e4d575b5050505050925080805480602002602001604051908101604052809291908181526020018280548015610eb357602002820191906000526020600020905b815481526020019060010190808311610e9f575b505050505090509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b600954600854610ef29163ffffffff6115db16565b4211610f49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806117b0602a913960400191505060405180910390fd5b600a54610100900460ff1615610faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806117ff6023913960400191505060405180910390fd5b600a5460ff1615611006576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806117da6025913960400191505060405180910390fd5b60105461105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602981526020018061188d6029913960400191505060405180910390fd5b600554600e5410156110d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a2051756f72756d206e6f74206d65740000604482015290519081900360640190fd5b600d6001815481106110df57fe5b9060005260206000200154600d6000815481106110f857fe5b90600052602060002001541161116f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f566f74696e67436f6e74726163743a204d616a6f72697479206e6f74206d6574604482015290519081900360640190fd5b600654600e546111849163ffffffff61164f16565b6111b7670de0b6b3a7640000600d60008154811061119e57fe5b906000526020600020015461164f90919063ffffffff16565b1161120d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806119016021913960400191505060405180910390fd5b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155546040517f8af7c649000000000000000000000000000000000000000000000000000000008152602060048201908152601080546024840181905273ffffffffffffffffffffffffffffffffffffffff90941693638af7c649939192918291604490910190849080156112cd57602002820191906000526020600020905b8154815260200190600101908083116112b9575b505092505050600060405180830381600087803b1580156112ed57600080fd5b505af1158015611301573d6000803e3d6000fd5b505060008054604080517f31a38c89000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921694506331a38c899350600480820193929182900301818387803b15801561136e57600080fd5b505af1158015611382573d6000803e3d6000fd5b50505050565b6060600d805480602002602001604051908101604052809291908181526020018280548015610a9c5760200282019190600052602060002090815481526020019060010190808311610a88575050505050905090565b60095481565b600f5481565b60085481565b60048181548110610cfe57fe5b60025481565b60606010805480602002602001604051908101604052809291908181526020018280548015610a9c5760200282019190600052602060002090815481526020019060010190808311610a88575050505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b600a54610100900460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146114f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806118d7602a913960400191505060405180910390fd5b600a5460ff1615611555576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806118446027913960400191505060405180910390fd5b600a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b600d8181548110610cfe57fe5b60006115d283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506116c2565b90505b92915050565b6000828201838110156115d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261165e575060006115d5565b8282028284828161166b57fe5b04146115d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806118b66021913960400191505060405180910390fd5b6000818484111561176b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611730578181015183820152602001611718565b50505050905090810190601f16801561175d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe566f74696e67436f6e74726163743a20457865637574652064656c6179206e6f74207061737420796574566f74696e67436f6e74726163743a20566f746520616c7265616479206578656375746564566f74696e67436f6e74726163743a20566f746520616c7265616479207665746f6564566f74696e67436f6e74726163743a204e6f74207374616b656420746f20766f74654f41584445585f566f74696e67436f6e74726163743a20416c7265616479206578656375746564566f74696e67436f6e74726163743a20566f746520616c726561647920656e646564566f74696e67436f6e74726163743a204578656375746520706172616d206e6f7420646566696e6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f41584445585f566f74696e67436f6e74726163743a204e6f742066726f6d20476f7665726e616e6365566f74696e67436f6e74726163743a205468726573686f6c64206e6f74206d6574a2646970667358221220048474bbf8fa3121408a09801c28f822bd71a401da4e4c19cf56c790c53526ad64736f6c634300060b0033566f74696e67436f6e74726163743a20496e76616c696420657865637574652064656c6179566f74696e67436f6e74726163743a20496e76616c6964207468726573686f6c64566f74696e67436f6e74726163743a20566f74696e6720616c726561647920656e6465644f41584445585f566f74696e6752656769737472793a206578636565646564206d6178566f74654475726174696f6e4f41584445585f566f74696e6752656769737472793a206d696e45786544656c6179206e6f74206d65744f41584445585f566f74696e6752656769737472793a206d696e4f6178546f6b656e546f437265617465566f7465206e6f74206d65744f41584445585f566f74696e6752656769737472793a206d696e566f74654475726174696f6e206e6f74206d65744f41584445585f566f74696e6752656769737472793a206d696e51756f72756d206e6f74206d65744f41584445585f566f74696e6752656769737472793a20496e76616c6964206578656375746f72a2646970667358221220575603f1034e2c37d9854afdf3e04ad17a6a1d1fa3ad56a3f36aa2c2663b098b64736f6c634300060b0033"
};

// src/contracts/gov/OAXDEX_VotingRegistry.ts
var OAXDEX_VotingRegistry = class extends import_eth_wallet15.Contract {
  constructor(wallet, address) {
    super(wallet, address, OAXDEX_VotingRegistry_json_default.abi, OAXDEX_VotingRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(governance) {
    return this._deploy(governance);
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async newVote_send(params) {
    let result = await this.send("newVote", [params.executor, import_eth_wallet15.Utils.stringToBytes32(params.name), import_eth_wallet15.Utils.stringToBytes32(params.options), import_eth_wallet15.Utils.toString(params.quorum), import_eth_wallet15.Utils.toString(params.threshold), import_eth_wallet15.Utils.toString(params.voteEndTime), import_eth_wallet15.Utils.toString(params.executeDelay), import_eth_wallet15.Utils.stringToBytes32(params.executeParam)]);
    return result;
  }
  async newVote_call(params) {
    let result = await this.call("newVote", [params.executor, import_eth_wallet15.Utils.stringToBytes32(params.name), import_eth_wallet15.Utils.stringToBytes32(params.options), import_eth_wallet15.Utils.toString(params.quorum), import_eth_wallet15.Utils.toString(params.threshold), import_eth_wallet15.Utils.toString(params.voteEndTime), import_eth_wallet15.Utils.toString(params.executeDelay), import_eth_wallet15.Utils.stringToBytes32(params.executeParam)]);
    return;
  }
  assign() {
    this.newVote = Object.assign(this.newVote_send, { call: this.newVote_call });
  }
};

// src/contracts/libraries/ERC20.ts
var import_eth_wallet16 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/libraries/ERC20.json.ts
var ERC20_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60806040523480156200001157600080fd5b5060405162000eae38038062000eae833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200010a57600080fd5b9083019060208201858111156200012057600080fd5b82516401000000008111828201881017156200013b57600080fd5b82525081516020918201929091019080838360005b838110156200016a57818101518382015260200162000150565b50505050905090810190601f168015620001985780820380516001836020036101000a031916815260200191505b5060405250508251620001b491506003906020850190620001e0565b508051620001ca906004906020840190620001e0565b50506005805460ff191660121790555062000285565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022357805160ff191683800117855562000253565b8280016001018555821562000253579182015b828111156200025357825182559160200191906001019062000236565b506200026192915062000265565b5090565b6200028291905b808211156200026157600081556001016200026c565b90565b610c1980620002956000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610287578063a9059cbb146102c0578063dd62ed3e146102f9576100c9565b8063395093511461021357806370a082311461024c57806395d89b411461027f576100c9565b806318160ddd116100b257806318160ddd1461019857806323b872dd146101b2578063313ce567146101f5576100c9565b806306fdde03146100ce578063095ea7b31461014b575b600080fd5b6100d6610334565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101105781810151838201526020016100f8565b50505050905090810190601f16801561013d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101846004803603604081101561016157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103e8565b604080519115158252519081900360200190f35b6101a0610405565b60408051918252519081900360200190f35b610184600480360360608110156101c857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040013561040b565b6101fd6104b2565b6040805160ff9092168252519081900360200190f35b6101846004803603604081101561022957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356104bb565b6101a06004803603602081101561026257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661051c565b6100d6610544565b6101846004803603604081101561029d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356105c3565b610184600480360360408110156102d657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561063e565b6101a06004803603604081101561030f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610652565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103de5780601f106103b3576101008083540402835291602001916103de565b820191906000526020600020905b8154815290600101906020018083116103c157829003601f168201915b5050505050905090565b60006103fc6103f561068a565b848461068e565b50600192915050565b60025490565b60006104188484846107d5565b6104a88461042461068a565b6104a385604051806060016040528060288152602001610b4e6028913973ffffffffffffffffffffffffffffffffffffffff8a1660009081526001602052604081209061046f61068a565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002054919063ffffffff6109b116565b61068e565b5060019392505050565b60055460ff1690565b60006103fc6104c861068a565b846104a385600160006104d961068a565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff610a6216565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103de5780601f106103b3576101008083540402835291602001916103de565b60006103fc6105d061068a565b846104a385604051806060016040528060258152602001610bbf60259139600160006105fa61068a565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff6109b116565b60006103fc61064b61068a565b84846107d5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b3390565b73ffffffffffffffffffffffffffffffffffffffff83166106fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610b9b6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610766576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610b066022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610841576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610b766025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166108ad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610ae36023913960400191505060405180910390fd5b6108b8838383610add565b61090881604051806060016040528060268152602001610b286026913973ffffffffffffffffffffffffffffffffffffffff8616600090815260208190526040902054919063ffffffff6109b116565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220939093559084168152205461094a908263ffffffff610a6216565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610a5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a1f578181015183820152602001610a07565b50505050905090810190601f168015610a4c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610ad657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220421706e8ce8b1ce7d30c2e9941df88d708c52265cf6f438c9e10789614a48a9d64736f6c634300060b0033"
};

// src/contracts/libraries/ERC20.ts
var ERC20 = class extends import_eth_wallet16.Contract {
  constructor(wallet, address) {
    super(wallet, address, ERC20_json_default.abi, ERC20_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.name, params.symbol);
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet16.BigNumber(result.value),
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet16.BigNumber(result.value),
      _event: event
    };
  }
  async allowance(params) {
    let result = await this.call("allowance", [params.owner, params.spender]);
    return new import_eth_wallet16.BigNumber(result);
  }
  async approve_send(params) {
    let result = await this.send("approve", [params.spender, import_eth_wallet16.Utils.toString(params.amount)]);
    return result;
  }
  async approve_call(params) {
    let result = await this.call("approve", [params.spender, import_eth_wallet16.Utils.toString(params.amount)]);
    return result;
  }
  async balanceOf(account) {
    let result = await this.call("balanceOf", [account]);
    return new import_eth_wallet16.BigNumber(result);
  }
  async decimals() {
    let result = await this.call("decimals");
    return new import_eth_wallet16.BigNumber(result);
  }
  async decreaseAllowance_send(params) {
    let result = await this.send("decreaseAllowance", [params.spender, import_eth_wallet16.Utils.toString(params.subtractedValue)]);
    return result;
  }
  async decreaseAllowance_call(params) {
    let result = await this.call("decreaseAllowance", [params.spender, import_eth_wallet16.Utils.toString(params.subtractedValue)]);
    return result;
  }
  async increaseAllowance_send(params) {
    let result = await this.send("increaseAllowance", [params.spender, import_eth_wallet16.Utils.toString(params.addedValue)]);
    return result;
  }
  async increaseAllowance_call(params) {
    let result = await this.call("increaseAllowance", [params.spender, import_eth_wallet16.Utils.toString(params.addedValue)]);
    return result;
  }
  async name() {
    let result = await this.call("name");
    return result;
  }
  async symbol() {
    let result = await this.call("symbol");
    return result;
  }
  async totalSupply() {
    let result = await this.call("totalSupply");
    return new import_eth_wallet16.BigNumber(result);
  }
  async transfer_send(params) {
    let result = await this.send("transfer", [params.recipient, import_eth_wallet16.Utils.toString(params.amount)]);
    return result;
  }
  async transfer_call(params) {
    let result = await this.call("transfer", [params.recipient, import_eth_wallet16.Utils.toString(params.amount)]);
    return result;
  }
  async transferFrom_send(params) {
    let result = await this.send("transferFrom", [params.sender, params.recipient, import_eth_wallet16.Utils.toString(params.amount)]);
    return result;
  }
  async transferFrom_call(params) {
    let result = await this.call("transferFrom", [params.sender, params.recipient, import_eth_wallet16.Utils.toString(params.amount)]);
    return result;
  }
  assign() {
    this.approve = Object.assign(this.approve_send, { call: this.approve_call });
    this.decreaseAllowance = Object.assign(this.decreaseAllowance_send, { call: this.decreaseAllowance_call });
    this.increaseAllowance = Object.assign(this.increaseAllowance_send, { call: this.increaseAllowance_call });
    this.transfer = Object.assign(this.transfer_send, { call: this.transfer_call });
    this.transferFrom = Object.assign(this.transferFrom_send, { call: this.transferFrom_call });
  }
};

// src/contracts/oracle/OSWAP_CertiKSecurityOracle.ts
var import_eth_wallet17 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/oracle/OSWAP_CertiKSecurityOracle.json.ts
var OSWAP_CertiKSecurityOracle_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_oracleAddress", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "name": "getSecurityScore", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b506040516102a53803806102a58339818101604052602081101561003357600080fd5b50516001600160a01b038116610090576040805162461bcd60e51b815260206004820152601660248201527f496e76616c6964206f7261636c65206164647265737300000000000000000000604482015290519081900360640190fd5b606081901b6001600160601b0319166080526001600160a01b03166101df6100c66000398060b5528061018752506101df6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806352d382431461003b578063a89ae4ba14610080575b600080fd5b61006e6004803603602081101561005157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100b1565b60408051918252519081900360200190f35b610088610185565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166352d38243836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561015057600080fd5b505afa158015610164573d6000803e3d6000fd5b505050506040513d602081101561017a57600080fd5b505160ff1692915050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220bdf066927faf91f43d754c3fc88fc4ef3b43121f6d6bc7d651cae3dd2d1f516664736f6c634300060b0033"
};

// src/contracts/oracle/OSWAP_CertiKSecurityOracle.ts
var OSWAP_CertiKSecurityOracle = class extends import_eth_wallet17.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_CertiKSecurityOracle_json_default.abi, OSWAP_CertiKSecurityOracle_json_default.bytecode);
    this.assign();
  }
  deploy(oracleAddress) {
    return this._deploy(oracleAddress);
  }
  async getSecurityScore(oracle) {
    let result = await this.call("getSecurityScore", [oracle]);
    return new import_eth_wallet17.BigNumber(result);
  }
  async oracleAddress() {
    let result = await this.call("oracleAddress");
    return result;
  }
  assign() {
  }
};

// src/contracts/oracle/OSWAP_OracleFactory.ts
var import_eth_wallet18 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/oracle/OSWAP_OracleFactory.json.ts
var OSWAP_OracleFactory_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "uint256", "name": "_feePerDelegator", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "oracle", "type": "address" }], "name": "OracleAdded", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "oracle", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "score", "type": "uint256" }], "name": "OracleScores", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "Whitelisted", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "addOldOracleToNewPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allWhiteListed", "outputs": [{ "internalType": "address[]", "name": "list", "type": "address[]" }, { "internalType": "bool[]", "name": "allowed", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracle", "outputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracleSwapParams", "outputs": [{ "internalType": "address", "name": "oracle_", "type": "address" }, { "internalType": "uint256", "name": "tradeFee_", "type": "uint256" }, { "internalType": "uint256", "name": "protocolFee_", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "feePerDelegator", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isOracle", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isWhitelisted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minLotSize", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "minOracleScore", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "oracleScores", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "oracles", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "securityScoreOracle", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_feePerDelegator", "type": "uint256" }], "name": "setFeePerDelegator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "_minLotSize", "type": "uint256" }], "name": "setMinLotSize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "setOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_oracleRouter", "type": "address" }, { "internalType": "address", "name": "_oracleLiquidityProvider", "type": "address" }], "name": "setOracleLiquidityProvider", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_securityScoreOracle", "type": "address" }, { "internalType": "uint256", "name": "_minOracleScore", "type": "uint256" }], "name": "setSecurityScoreOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_who", "type": "address" }, { "internalType": "bool", "name": "_allow", "type": "bool" }], "name": "setWhiteList", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "name": "updateOracleScore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "whitelisted", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "whitelistedInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "whitelistedLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a06040523480156200001157600080fd5b506040516200380438038062003804833981810160405260c08110156200003757600080fd5b5080516020820151604083015160608085015160808087015160a0909701519286901b6001600160601b031916905260008054600160ff1990911617610100600160a81b0319166101006001600160a01b038716021781559495939492939092909190620000a4620002c7565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350620186a08411156200013f576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f54524144455f46454560781b604482015290519081900360640190fd5b620186a083111562000198576040805162461bcd60e51b815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b600584905560068390556007829055600880546001600160a01b0319166001600160a01b0383161790556040805167747261646546656560c01b8152602081018690528151600080516020620037e4833981519152929181900390910190a1600654604080516a70726f746f636f6c46656560a81b815260208101929092528051600080516020620037e48339815191529281900390910190a1600754604080516e3332b2a832b92232b632b3b0ba37b960891b815260208101929092528051600080516020620037e48339815191529281900390910190a1600854604080516c70726f746f636f6c466565546f60981b815260609290921b6001600160601b03191660208301528051600080516020620037e48339815191529281900390910190a1505050505050620002cb565b3390565b60805160601c6134bf6200032560003980610a785280610c705280610e7c528061154752806115af528061170852806117fb5280611ddd5280611fd55280612a5a5280612def5280612ee252806130af52506134bf6000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c8063715018a611610186578063b8f7a665116100e3578063e6a4390511610097578063f5ee334811610071578063f5ee334814610931578063f98126f914610950578063fc9e3c1414610983576102d3565b8063e6a43905146108bb578063ef369252146108f6578063f2fde38b146108fe576102d3565b8063c9c65396116100c8578063c9c6539614610845578063ddf2d4f414610880578063e0e6799f14610888576102d3565b8063b8f7a66514610835578063c538b5d61461083d576102d3565b80638da5cb5b1161013a57806396c669491161011f57806396c66949146107f2578063a97e5c93146107fa578063b0e21e8a1461082d576102d3565b80638da5cb5b146107af57806395277f39146107b7576102d3565b806376d3d5471161016b57806376d3d5471461074f578063787dce3d146107575780638d14e12714610774576102d3565b8063715018a61461070c5780637587044a14610714576102d3565b806341f4368211610234578063574f2ba3116101e85780635aa6e675116101cd5780635aa6e675146106ac578063636b0d1a146106b45780636883618a146106d1576102d3565b8063574f2ba31461067157806358ced00414610679576102d3565b80634fe2b2b3116102195780634fe2b2b3146105fb578063506a42851461062e57806352a03c0314610636576102d3565b806341f43682146105275780634fc4cc9b146105c8576102d3565b80632288f2ff1161028b5780633997624711610270578063399762471461047e5780633af32abf146104c35780633d4efe091461050a576102d3565b80632288f2ff1461042b57806324bcdfbd14610464576102d3565b806310603023116102bc578063106030231461038f578063130a0b40146103ac5780631e3dd18b146103e5576102d3565b8063069d188f146102d85780630c14458114610348575b600080fd5b610313600480360360408110156102ee57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661098b565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190f35b61038d6004803603606081101561035e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610a22565b005b61038d600480360360208110156103a557600080fd5b5035610a32565b61038d600480360360408110156103c257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610c2a565b610402600480360360208110156103fb57600080fd5b5035610e02565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61038d6004803603604081101561044157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610e36565b61046c61109a565b60408051918252519081900360200190f35b61038d6004803603606081101561049457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166110a0565b6104f6600480360360208110156104d957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111d5565b604080519115158252519081900360200190f35b6104026004803603602081101561052057600080fd5b50356111ea565b61052f6111f7565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561057357818101518382015260200161055b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105b257818101518382015260200161059a565b5050505090500194505050505060405180910390f35b61038d600480360360208110156105de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661132e565b61046c6004803603602081101561061157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166114cc565b6104026114de565b6104026004803603604081101561064c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166114fa565b61046c61152d565b61046c6004803603602081101561068f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611533565b610402611545565b61038d600480360360208110156106ca57600080fd5b5035611569565b61038d600480360360408110156106e757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156116ef565b61038d6119dc565b61038d6004803603604081101561072a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611adc565b61046c611d91565b61038d6004803603602081101561076d57600080fd5b5035611d97565b61038d6004803603604081101561078a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611f8f565b610402612228565b610402600480360360408110156107cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612244565b61046c612420565b6104f66004803603602081101561081057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612426565b61046c61243b565b6104f6612441565b61040261244a565b6104026004803603604081101561085b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661246b565b61046c612a0e565b61038d6004803603602081101561089e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a14565b610402600480360360408110156108d157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612bfc565b610402612c2f565b61038d6004803603602081101561091457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612c4b565b61038d6004803603602081101561094757600080fd5b50351515612dd6565b61046c6004803603602081101561096657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661303b565b61040261304d565b600080548190819060ff16610a0157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b6000610a0d8686612244565b60055460065491955093509150509250925092565b610a2d838383613069565b505050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d6020811015610ae857600080fd5b5051610b5557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a0811115610bc757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6005819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610cb657600080fd5b505afa158015610cca573d6000803e3d6000fd5b505050506040513d6020811015610ce057600080fd5b5051610d4d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c602090815260409182902083905581517f6d696e4c6f7453697a65000000000000000000000000000000000000000000008152606085811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169282019290925280830184905291517f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb7069281900390910190a15050565b60028181548110610e0f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d6020811015610eec57600080fd5b5051610f5957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6064811115610fc957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642073656375726974792073636f726500000000000000000000604482015290519081900360640190fd5b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790819055600a829055604080517f736563757269747953636f72654f7261636c65000000000000000000000000008152606092831b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015280820184905290517f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706929181900390910190a15050565b60055481565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600b602090815260408083208685168452909152902054161561114157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6f7261636c6520616c7265616479207365740000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604090205460ff16610a2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f7261636c65206e6f74207365656e0000000000000000000000000000000000604482015290519081900360640190fd5b60116020526000908152604090205460ff1681565b600f8181548110610e0f57fe5b606080600f80548060200260200160405190810160405280929190818152602001828054801561125d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611232575b505050505091506000825190508067ffffffffffffffff8111801561128157600080fd5b506040519080825280602002602001820160405280156112ab578160200160208202803683370190505b50915060005b818110156113285760116000600f83815481106112ca57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902054835160ff9091169084908390811061131057fe5b911515602092830291909101909101526001016112b1565b50509091565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600d602052604090205460ff166113c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f7261636c652041646170746f72206e6f7420666f756e640000000000000000604482015290519081900360640190fd5b600954604080517f52d3824300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915160009392909216916352d3824391602480820192602092909190829003018186803b15801561143957600080fd5b505afa15801561144d573d6000803e3d6000fd5b505050506040513d602081101561146357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff83166000818152600e60209081526040918290208490558151848152915193945091927f6aebc546a88b3e78f39de087a95a99cadce9673bfa36aced1a7d77d2fd3c5f53929181900390910190a25050565b60106020526000908152604090205481565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600b60209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60025490565b600e6020526000908152604090205481565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156115f557600080fd5b505afa158015611609573d6000803e3d6000fd5b505050506040513d602081101561161f57600080fd5b505161168c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6007819055604080517f66656550657244656c656761746f72000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d602081101561179657600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16148061186e5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d602081101561186b57600080fd5b50515b6118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134696021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b5050505080156119965760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a26119d8565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b6119e461341b565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614611a6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611ae461341b565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614611b6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff1615611bdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806134466023913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600f541580611c80575073ffffffffffffffffffffffffffffffffffffffff8216600081815260106020526040902054600f80549091908110611c5b57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b15611d0757600f805473ffffffffffffffffffffffffffffffffffffffff84166000818152601060205260408120839055600183018455929092527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff821660008181526011602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155825190815291517fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409281900390910190a25050565b600a5481565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015611e2357600080fd5b505afa158015611e37573d6000803e3d6000fd5b505050506040513d6020811015611e4d57600080fd5b5051611eba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a0811115611f2c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b6006819055604080517f70726f746f636f6c46656500000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561201b57600080fd5b505afa15801561202f573d6000803e3d6000fd5b505050506040513d602081101561204557600080fd5b50516120b257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600f541580612116575073ffffffffffffffffffffffffffffffffffffffff8216600081815260106020526040902054600f805490919081106120f157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b1561219d57600f805473ffffffffffffffffffffffffffffffffffffffff84166000818152601060205260408120839055600183018455929092527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b73ffffffffffffffffffffffffffffffffffffffff821660008181526011602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016851515908117909155825190815291517fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409281900390910190a25050565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106122e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f41646472657373206d75737420626520736f7274656400000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff8083166000908152600b602090815260408083208585168452909152902054168061238257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e6020526040902054600a5481101561241957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f7261636c652073636f726520746f6f206c6f77000000000000000000000000604482015290519081900360640190fd5b5092915050565b60075481565b600d6020526000908152604090205460ff1681565b60065481565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561250857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610612545578385612548565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff82166125cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82811660009081526001602090815260408083208585168452909152902054161561267057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b6020831061279657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612759565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146127f6576040519150601f19603f3d011682016040523d82523d6000602084013e6127fb565b606091505b50915091508161286c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561288157600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b1580156128ff57600080fd5b505af1158015612913573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b600f5490565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015612aa057600080fd5b505afa158015612ab4573d6000803e3d6000fd5b505050506040513d6020811015612aca57600080fd5b5051612b3757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b612c5361341b565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614612cdc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612d48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806134206026913960400191505060405180910390fd5b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015612e5357600080fd5b505afa158015612e67573d6000803e3d6000fd5b505050506040513d6020811015612e7d57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480612f555750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015612f2857600080fd5b505afa158015612f3c573d6000803e3d6000fd5b505050506040513d6020811015612f5257600080fd5b50515b612faa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806134696021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff161561300e576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1613038565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b50565b600c6020526000908152604090205481565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156130f557600080fd5b505afa158015613109573d6000803e3d6000fd5b505050506040513d602081101561311f57600080fd5b505161318c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161061322657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420616464726573732070616972206f72646572000000000000604482015290519081900360640190fd5b604080517f88462c8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301529151918316916388462c8d91604480820192602092909190829003018186803b15801561329e57600080fd5b505afa1580156132b2573d6000803e3d6000fd5b505050506040513d60208110156132c857600080fd5b505161333557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50616972206e6f7420737570706f72746564206279206f7261636c6500000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600b6020818152604080842088871680865290835281852080549789167fffffffffffffffffffffffff00000000000000000000000000000000000000009889168117909155938352818520868652835281852080549097168417909655828452600d82529283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055825191825291517fb4af261139740f02bdfd600c83590a7b42e71fd7798891b2b39cc7203e3de147929181900390910190a3505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f7261636c654c697175696469747950726f766964657220616c7265616479207365744e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a26469706673582212205d6f6cb97760b31c2abfd3aa45c5781bc6acc4fdc310c4cba004b29f210e683f64736f6c634300060b003322ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509"
};

// src/contracts/oracle/OSWAP_OracleFactory.ts
var OSWAP_OracleFactory = class extends import_eth_wallet18.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_OracleFactory_json_default.abi, OSWAP_OracleFactory_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.pairCreator, import_eth_wallet18.Utils.toString(params.tradeFee), import_eth_wallet18.Utils.toString(params.protocolFee), import_eth_wallet18.Utils.toString(params.feePerDelegator), params.protocolFeeTo);
  }
  parseOracleAddedEvent(receipt) {
    return this.parseEvents(receipt, "OracleAdded").map((e) => this.decodeOracleAddedEvent(e));
  }
  decodeOracleAddedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      oracle: result.oracle,
      _event: event
    };
  }
  parseOracleScoresEvent(receipt) {
    return this.parseEvents(receipt, "OracleScores").map((e) => this.decodeOracleScoresEvent(e));
  }
  decodeOracleScoresEvent(event) {
    let result = event.data;
    return {
      oracle: result.oracle,
      score: new import_eth_wallet18.BigNumber(result.score),
      _event: event
    };
  }
  parseOwnershipTransferredEvent(receipt) {
    return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
  }
  decodeOwnershipTransferredEvent(event) {
    let result = event.data;
    return {
      previousOwner: result.previousOwner,
      newOwner: result.newOwner,
      _event: event
    };
  }
  parsePairCreatedEvent(receipt) {
    return this.parseEvents(receipt, "PairCreated").map((e) => this.decodePairCreatedEvent(e));
  }
  decodePairCreatedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      pair: result.pair,
      newSize: new import_eth_wallet18.BigNumber(result.newSize),
      _event: event
    };
  }
  parsePairRestartedEvent(receipt) {
    return this.parseEvents(receipt, "PairRestarted").map((e) => this.decodePairRestartedEvent(e));
  }
  decodePairRestartedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parsePairShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "PairShutdowned").map((e) => this.decodePairShutdownedEvent(e));
  }
  decodePairShutdownedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parseRestartedEvent(receipt) {
    return this.parseEvents(receipt, "Restarted").map((e) => this.decodeRestartedEvent(e));
  }
  decodeRestartedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "Shutdowned").map((e) => this.decodeShutdownedEvent(e));
  }
  decodeShutdownedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseWhitelistedEvent(receipt) {
    return this.parseEvents(receipt, "Whitelisted").map((e) => this.decodeWhitelistedEvent(e));
  }
  decodeWhitelistedEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      allow: result.allow,
      _event: event
    };
  }
  async addOldOracleToNewPair_send(params) {
    let result = await this.send("addOldOracleToNewPair", [params.tokenA, params.tokenB, params.oracle]);
    return result;
  }
  async addOldOracleToNewPair_call(params) {
    let result = await this.call("addOldOracleToNewPair", [params.tokenA, params.tokenB, params.oracle]);
    return;
  }
  async allPairs(param1) {
    let result = await this.call("allPairs", [import_eth_wallet18.Utils.toString(param1)]);
    return result;
  }
  async allPairsLength() {
    let result = await this.call("allPairsLength");
    return new import_eth_wallet18.BigNumber(result);
  }
  async allWhiteListed() {
    let result = await this.call("allWhiteListed");
    return {
      list: result.list,
      allowed: result.allowed
    };
  }
  async checkAndGetOracle(params) {
    let result = await this.call("checkAndGetOracle", [params.tokenA, params.tokenB]);
    return result;
  }
  async checkAndGetOracleSwapParams(params) {
    let result = await this.call("checkAndGetOracleSwapParams", [params.tokenA, params.tokenB]);
    return {
      oracle_: result.oracle_,
      tradeFee_: new import_eth_wallet18.BigNumber(result.tradeFee_),
      protocolFee_: new import_eth_wallet18.BigNumber(result.protocolFee_)
    };
  }
  async createPair_send(params) {
    let result = await this.send("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async createPair_call(params) {
    let result = await this.call("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async feePerDelegator() {
    let result = await this.call("feePerDelegator");
    return new import_eth_wallet18.BigNumber(result);
  }
  async getPair(params) {
    let result = await this.call("getPair", [params.param1, params.param2]);
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async isOracle(param1) {
    let result = await this.call("isOracle", [param1]);
    return result;
  }
  async isWhitelisted(param1) {
    let result = await this.call("isWhitelisted", [param1]);
    return result;
  }
  async minLotSize(param1) {
    let result = await this.call("minLotSize", [param1]);
    return new import_eth_wallet18.BigNumber(result);
  }
  async minOracleScore() {
    let result = await this.call("minOracleScore");
    return new import_eth_wallet18.BigNumber(result);
  }
  async oracleLiquidityProvider() {
    let result = await this.call("oracleLiquidityProvider");
    return result;
  }
  async oracleScores(param1) {
    let result = await this.call("oracleScores", [param1]);
    return new import_eth_wallet18.BigNumber(result);
  }
  async oracles(params) {
    let result = await this.call("oracles", [params.param1, params.param2]);
    return result;
  }
  async owner() {
    let result = await this.call("owner");
    return result;
  }
  async pairCreator() {
    let result = await this.call("pairCreator");
    return result;
  }
  async protocolFee() {
    let result = await this.call("protocolFee");
    return new import_eth_wallet18.BigNumber(result);
  }
  async protocolFeeTo() {
    let result = await this.call("protocolFeeTo");
    return result;
  }
  async renounceOwnership_send() {
    let result = await this.send("renounceOwnership");
    return result;
  }
  async renounceOwnership_call() {
    let result = await this.call("renounceOwnership");
    return;
  }
  async securityScoreOracle() {
    let result = await this.call("securityScoreOracle");
    return result;
  }
  async setFeePerDelegator_send(feePerDelegator) {
    let result = await this.send("setFeePerDelegator", [import_eth_wallet18.Utils.toString(feePerDelegator)]);
    return result;
  }
  async setFeePerDelegator_call(feePerDelegator) {
    let result = await this.call("setFeePerDelegator", [import_eth_wallet18.Utils.toString(feePerDelegator)]);
    return;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setLiveForPair_send(params) {
    let result = await this.send("setLiveForPair", [params.pair, params.live]);
    return result;
  }
  async setLiveForPair_call(params) {
    let result = await this.call("setLiveForPair", [params.pair, params.live]);
    return;
  }
  async setMinLotSize_send(params) {
    let result = await this.send("setMinLotSize", [params.token, import_eth_wallet18.Utils.toString(params.minLotSize)]);
    return result;
  }
  async setMinLotSize_call(params) {
    let result = await this.call("setMinLotSize", [params.token, import_eth_wallet18.Utils.toString(params.minLotSize)]);
    return;
  }
  async setOracle_send(params) {
    let result = await this.send("setOracle", [params.tokenA, params.tokenB, params.oracle]);
    return result;
  }
  async setOracle_call(params) {
    let result = await this.call("setOracle", [params.tokenA, params.tokenB, params.oracle]);
    return;
  }
  async setOracleLiquidityProvider_send(params) {
    let result = await this.send("setOracleLiquidityProvider", [params.oracleRouter, params.oracleLiquidityProvider]);
    return result;
  }
  async setOracleLiquidityProvider_call(params) {
    let result = await this.call("setOracleLiquidityProvider", [params.oracleRouter, params.oracleLiquidityProvider]);
    return;
  }
  async setProtocolFee_send(protocolFee) {
    let result = await this.send("setProtocolFee", [import_eth_wallet18.Utils.toString(protocolFee)]);
    return result;
  }
  async setProtocolFee_call(protocolFee) {
    let result = await this.call("setProtocolFee", [import_eth_wallet18.Utils.toString(protocolFee)]);
    return;
  }
  async setProtocolFeeTo_send(protocolFeeTo) {
    let result = await this.send("setProtocolFeeTo", [protocolFeeTo]);
    return result;
  }
  async setProtocolFeeTo_call(protocolFeeTo) {
    let result = await this.call("setProtocolFeeTo", [protocolFeeTo]);
    return;
  }
  async setSecurityScoreOracle_send(params) {
    let result = await this.send("setSecurityScoreOracle", [params.securityScoreOracle, import_eth_wallet18.Utils.toString(params.minOracleScore)]);
    return result;
  }
  async setSecurityScoreOracle_call(params) {
    let result = await this.call("setSecurityScoreOracle", [params.securityScoreOracle, import_eth_wallet18.Utils.toString(params.minOracleScore)]);
    return;
  }
  async setTradeFee_send(tradeFee) {
    let result = await this.send("setTradeFee", [import_eth_wallet18.Utils.toString(tradeFee)]);
    return result;
  }
  async setTradeFee_call(tradeFee) {
    let result = await this.call("setTradeFee", [import_eth_wallet18.Utils.toString(tradeFee)]);
    return;
  }
  async setWhiteList_send(params) {
    let result = await this.send("setWhiteList", [params.who, params.allow]);
    return result;
  }
  async setWhiteList_call(params) {
    let result = await this.call("setWhiteList", [params.who, params.allow]);
    return;
  }
  async tradeFee() {
    let result = await this.call("tradeFee");
    return new import_eth_wallet18.BigNumber(result);
  }
  async transferOwnership_send(newOwner) {
    let result = await this.send("transferOwnership", [newOwner]);
    return result;
  }
  async transferOwnership_call(newOwner) {
    let result = await this.call("transferOwnership", [newOwner]);
    return;
  }
  async updateOracleScore_send(oracle) {
    let result = await this.send("updateOracleScore", [oracle]);
    return result;
  }
  async updateOracleScore_call(oracle) {
    let result = await this.call("updateOracleScore", [oracle]);
    return;
  }
  async whitelisted(param1) {
    let result = await this.call("whitelisted", [import_eth_wallet18.Utils.toString(param1)]);
    return result;
  }
  async whitelistedInv(param1) {
    let result = await this.call("whitelistedInv", [param1]);
    return new import_eth_wallet18.BigNumber(result);
  }
  async whitelistedLength() {
    let result = await this.call("whitelistedLength");
    return new import_eth_wallet18.BigNumber(result);
  }
  assign() {
    this.addOldOracleToNewPair = Object.assign(this.addOldOracleToNewPair_send, { call: this.addOldOracleToNewPair_call });
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
    this.renounceOwnership = Object.assign(this.renounceOwnership_send, { call: this.renounceOwnership_call });
    this.setFeePerDelegator = Object.assign(this.setFeePerDelegator_send, { call: this.setFeePerDelegator_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setLiveForPair = Object.assign(this.setLiveForPair_send, { call: this.setLiveForPair_call });
    this.setMinLotSize = Object.assign(this.setMinLotSize_send, { call: this.setMinLotSize_call });
    this.setOracle = Object.assign(this.setOracle_send, { call: this.setOracle_call });
    this.setOracleLiquidityProvider = Object.assign(this.setOracleLiquidityProvider_send, { call: this.setOracleLiquidityProvider_call });
    this.setProtocolFee = Object.assign(this.setProtocolFee_send, { call: this.setProtocolFee_call });
    this.setProtocolFeeTo = Object.assign(this.setProtocolFeeTo_send, { call: this.setProtocolFeeTo_call });
    this.setSecurityScoreOracle = Object.assign(this.setSecurityScoreOracle_send, { call: this.setSecurityScoreOracle_call });
    this.setTradeFee = Object.assign(this.setTradeFee_send, { call: this.setTradeFee_call });
    this.setWhiteList = Object.assign(this.setWhiteList_send, { call: this.setWhiteList_call });
    this.transferOwnership = Object.assign(this.transferOwnership_send, { call: this.transferOwnership_call });
    this.updateOracleScore = Object.assign(this.updateOracleScore_send, { call: this.updateOracleScore_call });
  }
};

// src/contracts/oracle/OSWAP_OracleLiquidityProvider.ts
var import_eth_wallet19 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/oracle/OSWAP_OracleLiquidityProvider.json.ts
var OSWAP_OracleLiquidityProvider_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": ""
};

// src/contracts/oracle/OSWAP_OracleLiquidityProvider.ts
var OSWAP_OracleLiquidityProvider = class extends import_eth_wallet19.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_OracleLiquidityProvider_json_default.abi, OSWAP_OracleLiquidityProvider_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.factory, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.tokenA, params.tokenB, params.addingTokenA, import_eth_wallet19.Utils.toString(params.staked), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountIn), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.tokenA, params.tokenB, params.addingTokenA, import_eth_wallet19.Utils.toString(params.staked), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountIn), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)]);
    return new import_eth_wallet19.BigNumber(result);
  }
  async addLiquidityETH_send(params, _value) {
    let result = await this.send("addLiquidityETH", [params.tokenA, params.addingTokenA, import_eth_wallet19.Utils.toString(params.staked), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountAIn), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async addLiquidityETH_call(params, _value) {
    let result = await this.call("addLiquidityETH", [params.tokenA, params.addingTokenA, import_eth_wallet19.Utils.toString(params.staked), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountAIn), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)], { value: _value });
    return new import_eth_wallet19.BigNumber(result);
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async removeAllLiquidity_send(params) {
    let result = await this.send("removeAllLiquidity", [params.tokenA, params.tokenB, params.to, import_eth_wallet19.Utils.toString(params.deadline)]);
    return result;
  }
  async removeAllLiquidity_call(params) {
    let result = await this.call("removeAllLiquidity", [params.tokenA, params.tokenB, params.to, import_eth_wallet19.Utils.toString(params.deadline)]);
    return {
      amountA: new import_eth_wallet19.BigNumber(result.amountA),
      amountB: new import_eth_wallet19.BigNumber(result.amountB)
    };
  }
  async removeAllLiquidityETH_send(params) {
    let result = await this.send("removeAllLiquidityETH", [params.tokenA, params.to, import_eth_wallet19.Utils.toString(params.deadline)]);
    return result;
  }
  async removeAllLiquidityETH_call(params) {
    let result = await this.call("removeAllLiquidityETH", [params.tokenA, params.to, import_eth_wallet19.Utils.toString(params.deadline)]);
    return {
      amountToken: new import_eth_wallet19.BigNumber(result.amountToken),
      amountETH: new import_eth_wallet19.BigNumber(result.amountETH)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.tokenA, params.tokenB, params.removingTokenA, params.to, import_eth_wallet19.Utils.toString(params.unstake), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountOut), import_eth_wallet19.Utils.toString(params.reserveOut), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.tokenA, params.tokenB, params.removingTokenA, params.to, import_eth_wallet19.Utils.toString(params.unstake), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountOut), import_eth_wallet19.Utils.toString(params.reserveOut), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)]);
    return;
  }
  async removeLiquidityETH_send(params) {
    let result = await this.send("removeLiquidityETH", [params.tokenA, params.removingTokenA, params.to, import_eth_wallet19.Utils.toString(params.unstake), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountOut), import_eth_wallet19.Utils.toString(params.reserveOut), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidityETH_call(params) {
    let result = await this.call("removeLiquidityETH", [params.tokenA, params.removingTokenA, params.to, import_eth_wallet19.Utils.toString(params.unstake), import_eth_wallet19.Utils.toString(params.afterIndex), import_eth_wallet19.Utils.toString(params.amountOut), import_eth_wallet19.Utils.toString(params.reserveOut), import_eth_wallet19.Utils.toString(params.expire), params.enable, import_eth_wallet19.Utils.toString(params.deadline)]);
    return;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.addLiquidityETH = Object.assign(this.addLiquidityETH_send, { call: this.addLiquidityETH_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeAllLiquidityETH = Object.assign(this.removeAllLiquidityETH_send, { call: this.removeAllLiquidityETH_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.removeLiquidityETH = Object.assign(this.removeLiquidityETH_send, { call: this.removeLiquidityETH_call });
  }
};

// src/contracts/oracle/OSWAP_OraclePair.ts
var import_eth_wallet20 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/oracle/OSWAP_OraclePair.json.ts
var OSWAP_OraclePair_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "staked", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "enable", "type": "bool" }], "name": "AddLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "delegator", "type": "address" }, { "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }], "name": "DelegatorPauseOffer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "delegator", "type": "address" }, { "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }], "name": "DelegatorResumeOffer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "NewProvider", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "enable", "type": "bool" }], "name": "RemoveLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "Replenish", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "address", "name": "delegator", "type": "address" }], "name": "SetDelegator", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newCounterReserveBalance", "type": "uint256" }], "name": "SwappedOneProvider", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "delegator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "_afterIndex", "type": "uint256" }], "name": "findPosition", "outputs": [{ "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "nextIndex", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "first", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "end", "type": "uint256" }], "name": "getQueue", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "uint256[]", "name": "amount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "staked", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "expire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "from", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getQueueFromIndex", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "uint256[]", "name": "amount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "staked", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "expire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }, { "internalType": "bool", "name": "isActive", "type": "bool" }, { "internalType": "bool", "name": "enabled", "type": "bool" }, { "internalType": "uint256", "name": "prev", "type": "uint256" }, { "internalType": "uint256", "name": "next", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "pauseOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "startingIndex", "type": "uint256" }, { "internalType": "uint256", "name": "limit", "type": "uint256" }], "name": "purgeExpire", "outputs": [{ "internalType": "uint256", "name": "purge", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "queueSize", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "enable", "type": "bool" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "replenish", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "afterIndex", "type": "uint256" }], "name": "resumeOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_delegator", "type": "address" }, { "internalType": "uint256", "name": "fee", "type": "uint256" }], "name": "setDelegator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_replenish", "type": "bool" }], "name": "setPrivateReplenish", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "stakeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/oracle/OSWAP_OraclePair.ts
var OSWAP_OraclePair = class extends import_eth_wallet20.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_OraclePair_json_default.abi, OSWAP_OraclePair_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  parseAddLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "AddLiquidity").map((e) => this.decodeAddLiquidityEvent(e));
  }
  decodeAddLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      staked: new import_eth_wallet20.BigNumber(result.staked),
      amount: new import_eth_wallet20.BigNumber(result.amount),
      newStakeBalance: new import_eth_wallet20.BigNumber(result.newStakeBalance),
      newAmountBalance: new import_eth_wallet20.BigNumber(result.newAmountBalance),
      expire: new import_eth_wallet20.BigNumber(result.expire),
      enable: result.enable,
      _event: event
    };
  }
  parseDelegatorPauseOfferEvent(receipt) {
    return this.parseEvents(receipt, "DelegatorPauseOffer").map((e) => this.decodeDelegatorPauseOfferEvent(e));
  }
  decodeDelegatorPauseOfferEvent(event) {
    let result = event.data;
    return {
      delegator: result.delegator,
      provider: result.provider,
      direction: result.direction,
      _event: event
    };
  }
  parseDelegatorResumeOfferEvent(receipt) {
    return this.parseEvents(receipt, "DelegatorResumeOffer").map((e) => this.decodeDelegatorResumeOfferEvent(e));
  }
  decodeDelegatorResumeOfferEvent(event) {
    let result = event.data;
    return {
      delegator: result.delegator,
      provider: result.provider,
      direction: result.direction,
      _event: event
    };
  }
  parseNewProviderEvent(receipt) {
    return this.parseEvents(receipt, "NewProvider").map((e) => this.decodeNewProviderEvent(e));
  }
  decodeNewProviderEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      index: new import_eth_wallet20.BigNumber(result.index),
      _event: event
    };
  }
  parseRemoveLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "RemoveLiquidity").map((e) => this.decodeRemoveLiquidityEvent(e));
  }
  decodeRemoveLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      unstake: new import_eth_wallet20.BigNumber(result.unstake),
      amountOut: new import_eth_wallet20.BigNumber(result.amountOut),
      reserveOut: new import_eth_wallet20.BigNumber(result.reserveOut),
      newStakeBalance: new import_eth_wallet20.BigNumber(result.newStakeBalance),
      newAmountBalance: new import_eth_wallet20.BigNumber(result.newAmountBalance),
      newReserveBalance: new import_eth_wallet20.BigNumber(result.newReserveBalance),
      expire: new import_eth_wallet20.BigNumber(result.expire),
      enable: result.enable,
      _event: event
    };
  }
  parseReplenishEvent(receipt) {
    return this.parseEvents(receipt, "Replenish").map((e) => this.decodeReplenishEvent(e));
  }
  decodeReplenishEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      amountIn: new import_eth_wallet20.BigNumber(result.amountIn),
      newAmountBalance: new import_eth_wallet20.BigNumber(result.newAmountBalance),
      newReserveBalance: new import_eth_wallet20.BigNumber(result.newReserveBalance),
      expire: new import_eth_wallet20.BigNumber(result.expire),
      _event: event
    };
  }
  parseSetDelegatorEvent(receipt) {
    return this.parseEvents(receipt, "SetDelegator").map((e) => this.decodeSetDelegatorEvent(e));
  }
  decodeSetDelegatorEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      delegator: result.delegator,
      _event: event
    };
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      to: result.to,
      direction: result.direction,
      price: new import_eth_wallet20.BigNumber(result.price),
      amountIn: new import_eth_wallet20.BigNumber(result.amountIn),
      amountOut: new import_eth_wallet20.BigNumber(result.amountOut),
      tradeFee: new import_eth_wallet20.BigNumber(result.tradeFee),
      protocolFee: new import_eth_wallet20.BigNumber(result.protocolFee),
      _event: event
    };
  }
  parseSwappedOneProviderEvent(receipt) {
    return this.parseEvents(receipt, "SwappedOneProvider").map((e) => this.decodeSwappedOneProviderEvent(e));
  }
  decodeSwappedOneProviderEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      amountOut: new import_eth_wallet20.BigNumber(result.amountOut),
      amountIn: new import_eth_wallet20.BigNumber(result.amountIn),
      newAmountBalance: new import_eth_wallet20.BigNumber(result.newAmountBalance),
      newCounterReserveBalance: new import_eth_wallet20.BigNumber(result.newCounterReserveBalance),
      _event: event
    };
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.staked), import_eth_wallet20.Utils.toString(params.afterIndex), import_eth_wallet20.Utils.toString(params.expire), params.enable]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.staked), import_eth_wallet20.Utils.toString(params.afterIndex), import_eth_wallet20.Utils.toString(params.expire), params.enable]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async counter() {
    let result = await this.call("counter");
    return new import_eth_wallet20.BigNumber(result);
  }
  async delegator(param1) {
    let result = await this.call("delegator", [param1]);
    return result;
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async feeBalance() {
    let result = await this.call("feeBalance");
    return new import_eth_wallet20.BigNumber(result);
  }
  async findPosition(params) {
    let result = await this.call("findPosition", [params.direction, import_eth_wallet20.Utils.toString(params.staked), import_eth_wallet20.Utils.toString(params.afterIndex)]);
    return {
      afterIndex: new import_eth_wallet20.BigNumber(result.afterIndex),
      nextIndex: new import_eth_wallet20.BigNumber(result.nextIndex)
    };
  }
  async first(param1) {
    let result = await this.call("first", [param1]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [params.tokenOut, import_eth_wallet20.Utils.toString(params.amountOut), params.data]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [params.tokenIn, import_eth_wallet20.Utils.toString(params.amountIn), params.data]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async getBalances() {
    let result = await this.call("getBalances");
    return {
      param1: new import_eth_wallet20.BigNumber(result[0]),
      param2: new import_eth_wallet20.BigNumber(result[1]),
      param3: new import_eth_wallet20.BigNumber(result[2])
    };
  }
  async getLastBalances() {
    let result = await this.call("getLastBalances");
    return {
      param1: new import_eth_wallet20.BigNumber(result[0]),
      param2: new import_eth_wallet20.BigNumber(result[1])
    };
  }
  async getLatestPrice(params) {
    let result = await this.call("getLatestPrice", [params.direction, params.payload]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async getProviderOffer(params) {
    let result = await this.call("getProviderOffer", [params.provider, params.direction]);
    return {
      index: new import_eth_wallet20.BigNumber(result.index),
      staked: new import_eth_wallet20.BigNumber(result.staked),
      amount: new import_eth_wallet20.BigNumber(result.amount),
      reserve: new import_eth_wallet20.BigNumber(result.reserve),
      expire: new import_eth_wallet20.BigNumber(result.expire),
      privateReplenish: result.privateReplenish
    };
  }
  async getQueue(params) {
    let result = await this.call("getQueue", [params.direction, import_eth_wallet20.Utils.toString(params.start), import_eth_wallet20.Utils.toString(params.end)]);
    return {
      index: result.index.map((e) => new import_eth_wallet20.BigNumber(e)),
      provider: result.provider,
      amount: result.amount.map((e) => new import_eth_wallet20.BigNumber(e)),
      staked: result.staked.map((e) => new import_eth_wallet20.BigNumber(e)),
      expire: result.expire.map((e) => new import_eth_wallet20.BigNumber(e))
    };
  }
  async getQueueFromIndex(params) {
    let result = await this.call("getQueueFromIndex", [params.direction, import_eth_wallet20.Utils.toString(params.from), import_eth_wallet20.Utils.toString(params.count)]);
    return {
      index: result.index.map((e) => new import_eth_wallet20.BigNumber(e)),
      provider: result.provider,
      amount: result.amount.map((e) => new import_eth_wallet20.BigNumber(e)),
      staked: result.staked.map((e) => new import_eth_wallet20.BigNumber(e)),
      expire: result.expire.map((e) => new import_eth_wallet20.BigNumber(e))
    };
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async initialize_send(params) {
    let result = await this.send("initialize", [params.token0, params.token1]);
    return result;
  }
  async initialize_call(params) {
    let result = await this.call("initialize", [params.token0, params.token1]);
    return;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async lastGovBalance() {
    let result = await this.call("lastGovBalance");
    return new import_eth_wallet20.BigNumber(result);
  }
  async lastToken0Balance() {
    let result = await this.call("lastToken0Balance");
    return new import_eth_wallet20.BigNumber(result);
  }
  async lastToken1Balance() {
    let result = await this.call("lastToken1Balance");
    return new import_eth_wallet20.BigNumber(result);
  }
  async offers(params) {
    let result = await this.call("offers", [params.param1, import_eth_wallet20.Utils.toString(params.param2)]);
    return {
      provider: result.provider,
      staked: new import_eth_wallet20.BigNumber(result.staked),
      amount: new import_eth_wallet20.BigNumber(result.amount),
      reserve: new import_eth_wallet20.BigNumber(result.reserve),
      expire: new import_eth_wallet20.BigNumber(result.expire),
      privateReplenish: result.privateReplenish,
      isActive: result.isActive,
      enabled: result.enabled,
      prev: new import_eth_wallet20.BigNumber(result.prev),
      next: new import_eth_wallet20.BigNumber(result.next)
    };
  }
  async oracleLiquidityProvider() {
    let result = await this.call("oracleLiquidityProvider");
    return result;
  }
  async pauseOffer_send(params) {
    let result = await this.send("pauseOffer", [params.provider, params.direction]);
    return result;
  }
  async pauseOffer_call(params) {
    let result = await this.call("pauseOffer", [params.provider, params.direction]);
    return;
  }
  async protocolFeeBalance0() {
    let result = await this.call("protocolFeeBalance0");
    return new import_eth_wallet20.BigNumber(result);
  }
  async protocolFeeBalance1() {
    let result = await this.call("protocolFeeBalance1");
    return new import_eth_wallet20.BigNumber(result);
  }
  async providerOfferIndex(param1) {
    let result = await this.call("providerOfferIndex", [param1]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async purgeExpire_send(params) {
    let result = await this.send("purgeExpire", [params.direction, import_eth_wallet20.Utils.toString(params.startingIndex), import_eth_wallet20.Utils.toString(params.limit)]);
    return result;
  }
  async purgeExpire_call(params) {
    let result = await this.call("purgeExpire", [params.direction, import_eth_wallet20.Utils.toString(params.startingIndex), import_eth_wallet20.Utils.toString(params.limit)]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async queueSize(param1) {
    let result = await this.call("queueSize", [param1]);
    return new import_eth_wallet20.BigNumber(result);
  }
  async redeemProtocolFee_send() {
    let result = await this.send("redeemProtocolFee");
    return result;
  }
  async redeemProtocolFee_call() {
    let result = await this.call("redeemProtocolFee");
    return;
  }
  async removeAllLiquidity_send(provider) {
    let result = await this.send("removeAllLiquidity", [provider]);
    return result;
  }
  async removeAllLiquidity_call(provider) {
    let result = await this.call("removeAllLiquidity", [provider]);
    return {
      amount0: new import_eth_wallet20.BigNumber(result.amount0),
      amount1: new import_eth_wallet20.BigNumber(result.amount1),
      staked: new import_eth_wallet20.BigNumber(result.staked)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.unstake), import_eth_wallet20.Utils.toString(params.afterIndex), import_eth_wallet20.Utils.toString(params.amountOut), import_eth_wallet20.Utils.toString(params.reserveOut), import_eth_wallet20.Utils.toString(params.expire), params.enable]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.unstake), import_eth_wallet20.Utils.toString(params.afterIndex), import_eth_wallet20.Utils.toString(params.amountOut), import_eth_wallet20.Utils.toString(params.reserveOut), import_eth_wallet20.Utils.toString(params.expire), params.enable]);
    return;
  }
  async replenish_send(params) {
    let result = await this.send("replenish", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.afterIndex), import_eth_wallet20.Utils.toString(params.amountIn), import_eth_wallet20.Utils.toString(params.expire)]);
    return result;
  }
  async replenish_call(params) {
    let result = await this.call("replenish", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.afterIndex), import_eth_wallet20.Utils.toString(params.amountIn), import_eth_wallet20.Utils.toString(params.expire)]);
    return;
  }
  async resumeOffer_send(params) {
    let result = await this.send("resumeOffer", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.afterIndex)]);
    return result;
  }
  async resumeOffer_call(params) {
    let result = await this.call("resumeOffer", [params.provider, params.direction, import_eth_wallet20.Utils.toString(params.afterIndex)]);
    return;
  }
  async scaleDirection() {
    let result = await this.call("scaleDirection");
    return result;
  }
  async scaler() {
    let result = await this.call("scaler");
    return new import_eth_wallet20.BigNumber(result);
  }
  async setDelegator_send(params) {
    let result = await this.send("setDelegator", [params.delegator, import_eth_wallet20.Utils.toString(params.fee)]);
    return result;
  }
  async setDelegator_call(params) {
    let result = await this.call("setDelegator", [params.delegator, import_eth_wallet20.Utils.toString(params.fee)]);
    return;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setPrivateReplenish_send(replenish) {
    let result = await this.send("setPrivateReplenish", [replenish]);
    return result;
  }
  async setPrivateReplenish_call(replenish) {
    let result = await this.call("setPrivateReplenish", [replenish]);
    return;
  }
  async stakeBalance() {
    let result = await this.call("stakeBalance");
    return new import_eth_wallet20.BigNumber(result);
  }
  async swap_send(params) {
    let result = await this.send("swap", [import_eth_wallet20.Utils.toString(params.amount0Out), import_eth_wallet20.Utils.toString(params.amount1Out), params.to, params.data]);
    return result;
  }
  async swap_call(params) {
    let result = await this.call("swap", [import_eth_wallet20.Utils.toString(params.amount0Out), import_eth_wallet20.Utils.toString(params.amount1Out), params.to, params.data]);
    return;
  }
  async sync_send() {
    let result = await this.send("sync");
    return result;
  }
  async sync_call() {
    let result = await this.call("sync");
    return;
  }
  async token0() {
    let result = await this.call("token0");
    return result;
  }
  async token1() {
    let result = await this.call("token1");
    return result;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.initialize = Object.assign(this.initialize_send, { call: this.initialize_call });
    this.pauseOffer = Object.assign(this.pauseOffer_send, { call: this.pauseOffer_call });
    this.purgeExpire = Object.assign(this.purgeExpire_send, { call: this.purgeExpire_call });
    this.redeemProtocolFee = Object.assign(this.redeemProtocolFee_send, { call: this.redeemProtocolFee_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.replenish = Object.assign(this.replenish_send, { call: this.replenish_call });
    this.resumeOffer = Object.assign(this.resumeOffer_send, { call: this.resumeOffer_call });
    this.setDelegator = Object.assign(this.setDelegator_send, { call: this.setDelegator_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setPrivateReplenish = Object.assign(this.setPrivateReplenish_send, { call: this.setPrivateReplenish_call });
    this.swap = Object.assign(this.swap_send, { call: this.swap_call });
    this.sync = Object.assign(this.sync_send, { call: this.sync_call });
  }
};

// src/contracts/oracle/OSWAP_OraclePairCreator.ts
var import_eth_wallet21 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/oracle/OSWAP_OraclePairCreator.json.ts
var OSWAP_OraclePairCreator_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50615e69806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b615d75806100bf8339019056fe610100604052600180553480156200001657600080fd5b5033606081901b6080526000805460ff1916600117815560408051635aa6e67560e01b81529051919291635aa6e67591600480820192602092909190829003018186803b1580156200006757600080fd5b505afa1580156200007c573d6000803e3d6000fd5b505050506040513d60208110156200009357600080fd5b50516001600160601b0319606082901b1660a0526040805163b716d46360e01b815290519192506001600160a01b0383169163b716d46391600480820192602092909190829003018186803b158015620000ec57600080fd5b505afa15801562000101573d6000803e3d6000fd5b505050506040513d60208110156200011857600080fd5b505160601b6001600160601b03191660e0526040805163506a428560e01b81529051339163506a4285916004808301926020929190829003018186803b1580156200016257600080fd5b505afa15801562000177573d6000803e3d6000fd5b505050506040513d60208110156200018e57600080fd5b50516001600160601b031960609190911b1660c0525060805160601c60a05160601c60c05160601c60e05160601c615b266200024f60003980610c8d52806113405280611d605280611dd3528061296652806131ba528061336f52806138ff525080611a8352806124ff52806125af5280613090525080612bf7525080610f71528061196e5280612035528061225c5280612cef528061328152806137de528061399e5280613a3652806141fb5280614d3552806151cb5250615b266000f3fe608060405234801561001057600080fd5b50600436106102fe5760003560e01c80636c94fb441161019c578063bd2f54d9116100ee578063db13653c11610097578063f1591f3311610071578063f1591f3314610c40578063f5ee334814610c5f578063fff6cae914610c7e576102fe565b8063db13653c14610b5a578063e4f2fd8f14610bea578063e53c5d5314610c15576102fe565b8063d21220a7116100c8578063d21220a714610aae578063d519f64d14610ab6578063da863e1214610b2f576102fe565b8063bd2f54d914610a65578063bebf7a6114610a9e578063c45a015514610aa6576102fe565b80639749d21311610150578063ae925e251161012a578063ae925e2514610a00578063b2901aa314610a41578063b8f7a66514610a49576102fe565b80639749d21314610969578063a26651e714610971578063a9b34c5e146109e1576102fe565b80637a6a5e1b116101815780637a6a5e1b14610926578063835daf6c1461095957806393bc9dfe14610961576102fe565b80636c94fb44146108d45780636d813c3c146108f3576102fe565b8063506a4285116102555780635a6b49781161020957806361bc221a116101e357806361bc221a14610832578063685639a91461083a5780636b4afee1146108cc576102fe565b80635a6b49781461068f5780635aa6e6751461082257806360b71d4e1461082a576102fe565b8063539e50821161023a578063539e50821461064c578063577e6d081461067f5780635a6af09d14610687576102fe565b8063506a4285146105e2578063517b8fc6146105ea576102fe565b8063284d8c95116102b75780633c6d5c72116102915780633c6d5c7214610531578063429922ef14610552578063485cc955146105a7576102fe565b8063284d8c951461044a5780633b19103b146104855780633c1e6ff514610529576102fe565b806305268cff116102e857806305268cff146103c45780630dfe1681146103f557806321cbf789146103fd576102fe565b8062113e0814610303578063022c0d9f14610329575b600080fd5b61030b610c86565b60408051938452602084019290925282820152519081900360600190f35b6103c26004803603608081101561033f57600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013516919081019060808101606082013564010000000081111561038357600080fd5b82018360208201111561039557600080fd5b803590602001918460018302840111640100000000831117156103b757600080fd5b509092509050610e9a565b005b6103cc61133e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103cc611362565b6103c2600480360360a081101561041357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101351515906040810135906060810135906080013561137e565b6103c26004803603604081101561046057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156116b0565b6105176004803603606081101561049b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156104d857600080fd5b8201836020820111156104ea57600080fd5b8035906020019184600183028401116401000000008311171561050c57600080fd5b509092509050611839565b60408051918252519081900360200190f35b6105176118e1565b6105396118e7565b6040805192835260208301919091528051918290030190f35b610517600480360360c081101561056857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a0013515156118f1565b6103c2600480360360408110156105bd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661201d565b6103cc6124fd565b6103c2600480360361010081101561060157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e001351515612521565b6103cc6004803603602081101561066257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a9f565b610517612ac7565b610517612acd565b6106ba600480360360608110156106a557600080fd5b50803515159060208101359060400135612ad3565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b8381101561070a5781810151838201526020016106f2565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b83811015610749578181015183820152602001610731565b50505050905001868103845289818151815260200191508051906020019060200280838360005b83811015610788578181015183820152602001610770565b50505050905001868103835288818151815260200191508051906020019060200280838360005b838110156107c75781810151838201526020016107af565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156108065781810151838201526020016107ee565b505050509050019a505050505050505050505060405180910390f35b6103cc612bf5565b610517612c19565b610517612c1f565b6105176004803603606081101561085057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561088d57600080fd5b82018360208201111561089f57600080fd5b803590602001918460018302840111640100000000831117156108c157600080fd5b509092509050612c25565b610517612fd3565b610517600480360360208110156108ea57600080fd5b50351515612fd9565b6105176004803603602081101561090957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612feb565b61030b6004803603602081101561093c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612ffd565b6105176131f8565b6105176131fe565b6103c2613204565b6109ac6004803603604081101561098757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013515156133b6565b6040805196875260208701959095528585019390935260608501919091526080840152151560a0830152519081900360c00190f35b6103c2600480360360208110156109f757600080fd5b50351515613420565b6103c260048036036060811015610a1657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604001356135b1565b610517613776565b610a5161377c565b604080519115158252519081900360200190f35b6103c260048036036040811015610a7b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135613785565b610a5161397b565b6103cc61399c565b6103cc6139c0565b61051760048036036040811015610acc57600080fd5b813515159190810190604081016020820135640100000000811115610af057600080fd5b820183602082011115610b0257600080fd5b80359060200191846001830284011164010000000083111715610b2457600080fd5b5090925090506139dc565b61053960048036036060811015610b4557600080fd5b50803515159060208101359060400135613c1b565b610b7f60048036036040811015610b7057600080fd5b50803515159060200135613dac565b6040805173ffffffffffffffffffffffffffffffffffffffff909b168b5260208b0199909952898901979097526060890195909552608088019390935290151560a0870152151560c0860152151560e085015261010084015261012083015251908190036101400190f35b61051760048036036060811015610c0057600080fd5b50803515159060208101359060400135613e26565b6106ba60048036036060811015610c2b57600080fd5b50803515159060208101359060400135613f32565b61051760048036036020811015610c5657600080fd5b503515156141d1565b6103c260048036036020811015610c7557600080fd5b503515156141e3565b6103c26142b8565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d2857600080fd5b505afa158015610d3c573d6000803e3d6000fd5b505050506040513d6020811015610d5257600080fd5b5051600854604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d6020811015610def57600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d6020811015610e8c57600080fd5b505191945092509050909192565b600154600114610f0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553233148015610f255750610f233361433c565b155b80610fe65750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015610fb957600080fd5b505af1158015610fcd573d6000803e3d6000fd5b505050506040513d6020811015610fe357600080fd5b50515b61105157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f742066726f6d2075736572206f722077686974656c697374656400000000604482015290519081900360640190fd5b60005460ff166110c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600c54600854604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093849361117893919273ffffffffffffffffffffffffffffffffffffffff909116916370a08231916024808301926020929190829003018186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d602081101561116a57600080fd5b50519063ffffffff61434216565b600d54600954604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519395506111f39373ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561114057600080fd5b905060008715801561120457508615155b1561125c57611218866001858a898961438d565b60095491985091506112419073ffffffffffffffffffffffffffffffffffffffff1687896147d2565b600e54611254908263ffffffff6149df16565b600e55611328565b8715801590611269575086155b156112c15761127d866000848b898961438d565b60085491995091506112a69073ffffffffffffffffffffffffffffffffffffffff16878a6147d2565b600f546112b9908263ffffffff6149df16565b600f55611328565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b611330614a53565b505060018055505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b6001546001146113ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905573ffffffffffffffffffffffffffffffffffffffff86168152600660205260409020548061148557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b84151560009081526005602081815260408084208585529091529091209081015460ff1615806114ca575073ffffffffffffffffffffffffffffffffffffffff871633145b61153557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8716331461158957600481015461158157851560009081526005602090815260408083208584529091529020600401549250611589565b806004015492505b4283116115f757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b600381015461160c908563ffffffff61434216565b8160030181905550611635868360008888888760050160029054906101000a900460ff16614a66565b600281015460038201546040805187815260208101939093528281019190915260608201859052518715159173ffffffffffffffffffffffffffffffffffffffff8a16917f49e6e6744d56bfe4585849d662ac11ba289d26bc6f22c021f794dd6c452f09929181900360800190a35050600180555050505050565b8173ffffffffffffffffffffffffffffffffffffffff81163314806116fb575073ffffffffffffffffffffffffffffffffffffffff8181166000908152600760205260409020541633145b61176657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420612064656c656761746f720000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083205485151584526005808452828520828652909352922090810154610100900460ff16156117c1576117bf8483614c38565b505b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1690556040518415159073ffffffffffffffffffffffffffffffffffffffff87169033907f3a699c5c4258bdd17cd89244a23fbb80a6ae96fc1f9fd5ea6f7aea92b5a434cc90600090a45050505050565b60008084116118a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6008546118d39073ffffffffffffffffffffffffffffffffffffffff878116911614858585614cd3565b509298975050505050505050565b600a5481565b600c54600d549091565b600060015460011461196457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119d457600080fd5b505af11580156119e8573d6000803e3d6000fd5b505050506040513d60208110156119fe57600080fd5b5051611a6b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611ac457503373ffffffffffffffffffffffffffffffffffffffff8816145b611b2f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60005460ff16611ba057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8716611c2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b428311611c9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6000806000611c9d610c86565b92509250925087611cb9600b548561434290919063ffffffff16565b1015611d2657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b601054611d39908963ffffffff6149df16565b60105560008915611db757600d54611d5890839063ffffffff61434216565b6009549091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415611db257611daf818a63ffffffff61434216565b90505b611e25565b600c54611dcb90849063ffffffff61434216565b6008549091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415611e2557611e22818a63ffffffff61434216565b90505b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526006602052604090205494508415611e6757611e628a868b8b858c8c614a66565b611f65565b600280546001019081905573ffffffffffffffffffffffffffffffffffffffff8c166000908152600660205260409020819055945080611f0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b611f188b8b878c8c868d8d615036565b60408051868152905173ffffffffffffffffffffffffffffffffffffffff8d16917f39944be52180e3811405a754586ce476cd9d34d40e98835c2b4c77eb26426b5b919081900360200190a25b600b849055600c839055600d82905589151560008181526005602090815260408083208984528252918290206001810154600282015484518f8152938401879052838501919091526060830152608082018b905289151560a0830152915191929173ffffffffffffffffffffffffffffffffffffffff8f16917ff28d90091af29243a415eaca7c0fee637460bb97faf17a52f7dbe8bd13f70b55919081900360c00190a3505060018055509198975050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146120c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6008805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600980548583169084161790819055600080527f07f793f8fd62a1688d9e2ebd2c8b2e8ab72cd080250f71b53bf5b4113f244d5e80548416309081179091557f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc6020527f45d21ede0cb86a9bc9f3a728b8ad730cd840abb3d7468e2d1713e27e21c48d2880549094161790925590811691161061220457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600854600954604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c03916044808301926020929190829003018186803b1580156122a257600080fd5b505afa1580156122b6573d6000803e3d6000fd5b505050506040513d60208110156122cc57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811661235257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600854604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b1580156123bd57600080fd5b505afa1580156123d1573d6000803e3d6000fd5b505050506040513d60208110156123e757600080fd5b5051600954604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b15801561245a57600080fd5b505afa15801561246e573d6000803e3d6000fd5b505050506040513d602081101561248457600080fd5b5051600980547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff858116818516117401000000000000000000000000000000000000000090810292909217928390559293509004166124e8578082036124ec565b8181035b60ff16600a90810a90555050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015460011461259257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806125f057503373ffffffffffffffffffffffffffffffffffffffff8916145b61265b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b4282116126c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff88166000908152600660205260409020548061275b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b87151560009081526005602090815260408083208484529091528120600281015490919061278f908863ffffffff61434216565b90508015806127a657506127a28a6151c7565b8110155b61281157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e69756d206c6f742073697a65206e6f74206d6574000000000000000000604482015290519081900360640190fd5b6001820154600090612829908b63ffffffff61434216565b6005840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff1662010000881515021790559050871561286c57600283018290555b891561287a57600183018190555b600383015461288f908863ffffffff61434216565b6003840155600483018690558415612927576005830154610100900460ff16156129145760008a1180156128f0575088841415806128f057508a15156000908152600560209081526040808320600787015484529091529020600101548111155b1561290f576128ff8b856152d4565b505061290f8b85838c868b615383565b612922565b6129228b85838c868b615383565b612945565b6005830154610100900460ff1615612945576129438b85614c38565b505b891561298c5760105461295e908b63ffffffff61434216565b60105561298c7f0000000000000000000000000000000000000000000000000000000000000000338c6147d2565b600088118061299b5750600087115b156129f6576129f68b6129c65760085473ffffffffffffffffffffffffffffffffffffffff166129e0565b60095473ffffffffffffffffffffffffffffffffffffffff165b336129f18b8b63ffffffff6149df16565b6147d2565b600183015460028401546003850154604080518e8152602081018d90528082018c90526060810194909452608084019290925260a083015260c0820188905286151560e0830152518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f3349af395fb66f8dc0da9c7cb36de02b3ba8f46b9299c8db3ffb916586432289918190036101000190a3612a8d614a53565b50506001805550505050505050505050565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600c5481565b821515600090815260046020526040902054606090819081908190819080881015612bc657808710612b21578015612b1b57612b1681600163ffffffff61434216565b612b1e565b60005b96505b6000612b4489612b388a600163ffffffff6149df16565b9063ffffffff61434216565b8a15156000908152600360209081526040808320546005835281842081855290925282209293509091905b8b831015612ba757508b1515600090815260056020908152604080832060079094015480845293909152902060019092019190612b6f565b612bb28d8286613f32565b995099509950995099505050505050612bea565b50506040805160008082526020820190815281830190925294509250839150819050805b939792965093509350565b7f000000000000000000000000000000000000000000000000000000000000000081565b60115481565b60025481565b6000808411612c9557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600854600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f00000000000000000000000000000000000000000000000000000000000000009091169163069d188f91604480820192606092909190829003018186803b158015612d3857600080fd5b505afa158015612d4c573d6000803e3d6000fd5b505050506040513d6060811015612d6257600080fd5b508051602090910151600954919350915073ffffffffffffffffffffffffffffffffffffffff888116911614600081612db35760095473ffffffffffffffffffffffffffffffffffffffff16612dcd565b60085473ffffffffffffffffffffffffffffffffffffffff165b90506000808573ffffffffffffffffffffffffffffffffffffffff1663d9da4fe6848d60008e8e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015612ec757600080fd5b505afa158015612edb573d6000803e3d6000fd5b505050506040513d6040811015612ef157600080fd5b5080516020909101519092509050612f0f8a8263ffffffff6154a216565b96506001600a541115612f6757600960149054906101000a900460ff1615158415151415612f5057600a54612f4b90889063ffffffff61551516565b612f64565b600a54612f6490889063ffffffff6154a216565b96505b612f886001612f7c898563ffffffff61551516565b9063ffffffff6149df16565b9650612fc46001612f7c612fa5620186a08963ffffffff61434216565b612fb88b620186a063ffffffff6154a216565b9063ffffffff61551516565b9b9a5050505050505050505050565b600d5481565b60036020526000908152604090205481565b60066020526000908152604090205481565b600080600060015460011461307357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806130d157503373ffffffffffffffffffffffffffffffffffffffff8516145b61313c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60008060008061314d886001615557565b9097509093509050613160886000615557565b9098509094509150613178848463ffffffff6149df16565b945061318a878363ffffffff6149df16565b965061319c868263ffffffff6149df16565b6010549096506131b2908663ffffffff61434216565b6010556131e07f000000000000000000000000000000000000000000000000000000000000000033876147d2565b6131e8614a53565b5050600180555092949193509150565b600e5481565b60105481565b60015460011461327557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b815260040160206040518083038186803b1580156132e557600080fd5b505afa1580156132f9573d6000803e3d6000fd5b505050506040513d602081101561330f57600080fd5b5051600e54600f5460115460085493945091929091906133469073ffffffffffffffffffffffffffffffffffffffff1685856147d2565b60095461336a9073ffffffffffffffffffffffffffffffffffffffff1685846147d2565b6133957f000000000000000000000000000000000000000000000000000000000000000085836147d2565b6000600e819055600f8190556011556133ac614a53565b5050600180555050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660209081526040808320548415158452600580845282852082865290935292206001810154600282015460038301546004840154939094015491939092909160ff169295509295509295565b60015460011461349157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190553380825260066020526040909120548061351357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b60008181527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc60209081526040808320600590810180549715157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0098891681179091559484527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b909252909120018054909316179091555060018055565b8273ffffffffffffffffffffffffffffffffffffffff81163314806135fc575073ffffffffffffffffffffffffffffffffffffffff8181166000908152600760205260409020541633145b61366757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420612064656c656761746f720000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083205486151584526005808452828520828652909352922090810154610100900460ff161580156136c15750428160040154115b80156136d957506136d1856151c7565b816002015410155b156136f8576136f8858383600101548785600201548660040154615383565b6005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100001790556040518515159073ffffffffffffffffffffffffffffffffffffffff88169033907f0a562c834cabe3252799eb49d60bc919314ee5daaad38ad4543773bbffd9610d90600090a4505050505050565b600b5481565b60005460ff1681565b33600081815260076020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155156139285760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166396c669496040518163ffffffff1660e01b815260040160206040518083038186803b15801561384257600080fd5b505afa158015613856573d6000803e3d6000fd5b505050506040513d602081101561386c57600080fd5b505190508015613926578083146138e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f466565204d69736d617463680000000000000000000000000000000000000000604482015290519081900360640190fd5b6011546138f7908263ffffffff6149df16565b6011556139267f00000000000000000000000000000000000000000000000000000000000000008330846157c1565b505b6040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918316917f49df09fe4d665b253962826a73af1c81a4d8389109f373416bbb0b2c18cd19af9181900360200190a2505050565b60095474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b600854600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f00000000000000000000000000000000000000000000000000000000000000009091169163069d188f91604480820192606092909190829003018186803b158015613a7f57600080fd5b505afa158015613a93573d6000803e3d6000fd5b505050506040513d6060811015613aa957600080fd5b5051905060008086613ada5760095460085473ffffffffffffffffffffffffffffffffffffffff9182169116613afb565b60085460095473ffffffffffffffffffffffffffffffffffffffff91821691165b915091508273ffffffffffffffffffffffffffffffffffffffff1663495e4348838389896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015613be457600080fd5b505afa158015613bf8573d6000803e3d6000fd5b505050506040513d6020811015613c0e57600080fd5b5051979650505050505050565b80600081613c3b5750831515600090815260036020526040902054613d40565b84151560009081526005602090815260408083208584529091529020805473ffffffffffffffffffffffffffffffffffffffff16613cda57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420696e64657800000000000000000000000000000000000000604482015290519081900360640190fd5b8481600101541015613d19576006810154925082613cf757613d19565b5084151560009081526005602090815260408083208584529091529020613cda565b8215613d29578060070154613d3c565b8515156000908152600360205260409020545b9150505b8015613da457841515600090815260056020908152604080832084845290915290205b80600101548511613da257600781015491925081613d8057613da2565b5084151560009081526005602090815260408083208484529091529020613d63565b505b935093915050565b600560208181526000938452604080852090915291835291208054600182015460028301546003840154600485015495850154600686015460079096015473ffffffffffffffffffffffffffffffffffffffff909516969395929491939260ff80831693610100840482169362010000900490911691908a565b6000600154600114613e9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155825b8015801590613eaf5750600083115b15613f2657841515600090815260056020908152604080832084845290915290206004810154421115613ef357613ee68683614c38565b6001909301929150613efb565b806007015491505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191613ea0565b50600180559392505050565b60608060608060608567ffffffffffffffff81118015613f5157600080fd5b50604051908082528060200260200182016040528015613f7b578160200160208202803683370190505b5094508567ffffffffffffffff81118015613f9557600080fd5b50604051908082528060200260200182016040528015613fbf578160200160208202803683370190505b5093508567ffffffffffffffff81118015613fd957600080fd5b50604051908082528060200260200182016040528015614003578160200160208202803683370190505b5092508567ffffffffffffffff8111801561401d57600080fd5b50604051908082528060200260200182016040528015614047578160200160208202803683370190505b5091508567ffffffffffffffff8111801561406157600080fd5b5060405190808252806020026020018201604052801561408b578160200160208202803683370190505b5088151560009081526005602090815260408083208b8452909152812091925090885b88831080156140bc57508015155b156141c357808884815181106140ce57fe5b60209081029190910101528154875173ffffffffffffffffffffffffffffffffffffffff9091169088908590811061410257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050816002015486848151811061414d57fe5b602002602001018181525050816001015485848151811061416a57fe5b602002602001018181525050816004015484848151811061418757fe5b6020908102919091018101919091528b1515600090815260058252604080822060079095015480835294909252206001909301929190506140ae565b505050939792965093509350565b60046020526000908152604090205481565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461428757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461432957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155614336614a53565b60018055565b3b151590565b600061438483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061599f565b90505b92915050565b60008060008060008060006143a48c8c8b8b614cd3565b939a509196509450925090508987101561441f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b8061442c578a945061446a565b6144556402540be400612fb8614448858563ffffffff6154a216565b8e9063ffffffff6154a216565b95506144678b8763ffffffff61434216565b94505b8b15158d73ffffffffffffffffffffffffffffffffffffffff167f0148b571d5049091b679cb2ccda30fb06d3aecaef641a0515a317498893d7da3868e8b888c604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a3505050508715156000908152600360205260408120548491805b60008411801561450457508215155b15614755578b15156000908152600560209081526040808320868452909152902060048101549092504211156145455761453e8c84614c38565b9250614750565b508a156000908152600560209081526040808320858452909152902060028201548085106146635761457d858263ffffffff61434216565b9450600061459589612fb8898563ffffffff6154a216565b60038401549091506145ad908263ffffffff6149df16565b8360030181905550600084600201819055508d15158460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c228484600088600301546040518085815260200184815260200183815260200182815260200194505050505060405180910390a361465b8e86614c38565b94505061474e565b600061467989612fb8898963ffffffff6154a216565b6003840154909150614691908263ffffffff6149df16565b600384015560028401546146ab908763ffffffff61434216565b84600201819055508d15158460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c228884886002015488600301546040518085815260200184815260200183815260200182815260200194505050505060405180910390a360009550505b505b6144f5565b83156147c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b5050505050965096945050505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b602083106148d857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161489b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461493a576040519150601f19603f3d011682016040523d82523d6000602084013e61493f565b606091505b509150915081801561496d57508051158061496d575080806020019051602081101561496a57600080fd5b50515b6149d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b5050505050565b60008282018381101561438457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b614a5b610c86565b600d55600c55600b55565b861515600090815260056020908152604080832089845290915281206002810154909190614a9a908663ffffffff6149df16565b9050614aa5896151c7565b811015614b1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e69756d206c6f742073697a65206e6f74206d6574000000000000000000604482015290519081900360640190fd5b6001820154600090614b2b908963ffffffff6149df16565b6005840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100008715150217905590508515614b6e57600283018290555b8715614b7c57600183018190555b600483018590558315614c0e576005830154610100900460ff1615614bfb57600088118015614bd757508689141580614bd7575089151560009081526005602090815260408083206006870154845290915290206001015481115b15614bf657614be68a8a6152d4565b5050614bf68a8a838a868a615383565b614c09565b614c098a8a838a868a615383565b614c2c565b6005830154610100900460ff1615614c2c57614c2a8a8a614c38565b505b50505050505050505050565b6000614c4483836152d4565b84151560008181526005602081815260408084208985528252808420600681018590556007810185905592830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905593835260049052919020549193509150614cb890600163ffffffff61434216565b93151560009081526004602052604090209390935592915050565b600854600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015251600092839283928392839283927f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614d7e57600080fd5b505afa158015614d92573d6000803e3d6000fd5b505050506040513d6060811015614da857600080fd5b50805160208201516040909201519194509092509050614dd5620186a0612fb88b8663ffffffff6154a216565b9350614de7898563ffffffff61434216565b98506000808273ffffffffffffffffffffffffffffffffffffffff1663d9da4fe68d614e2b5760095473ffffffffffffffffffffffffffffffffffffffff16614e45565b60085473ffffffffffffffffffffffffffffffffffffffff165b8e614e685760085473ffffffffffffffffffffffffffffffffffffffff16614e82565b60095473ffffffffffffffffffffffffffffffffffffffff165b8e60008f8f6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015614f5957600080fd5b505afa158015614f6d573d6000803e3d6000fd5b505050506040513d6040811015614f8357600080fd5b5080516020909101519092509050614fa18b8363ffffffff6154a216565b97506001600a541115614ff857600960149054906101000a900460ff1615158c151514614fe157600a54614fdc90899063ffffffff61551516565b614ff5565b600a54614ff590899063ffffffff6154a216565b97505b615008888263ffffffff61551516565b975061502681612fb884670de0b6b3a764000063ffffffff6154a216565b9650505050945094509450945094565b61503f876151c7565b8310156150ad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d696e69756d206c6f742073697a65206e6f74206d6574000000000000000000604482015290519081900360640190fd5b80156150c1576150c1878787878787615383565b9515801560009081526005602081815260408084208a85528252808420805473ffffffffffffffffffffffffffffffffffffffff909d167fffffffffffffffffffffffff00000000000000000000000000000000000000009d8e168117825560018083019b909b556002820198909855600481019690965594820180549a151562010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009c8d168b178116821790925594845282825285842099845298905292902080549098169092178755959095018054909416909117909116909217905550565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f98126f9836152285760085473ffffffffffffffffffffffffffffffffffffffff16615242565b60095473ffffffffffffffffffffffffffffffffffffffff165b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156152a257600080fd5b505afa1580156152b6573d6000803e3d6000fd5b505050506040513d60208110156152cc57600080fd5b505192915050565b811515600090815260056020908152604080832084845290915290206007810154600682015491821561532457841515600090815260056020908152604080832086845290915290206007018290555b811561534d57841515600090815260056020908152604080832085845290915290206006018390555b84151560009081526003602052604090205484141561537b5784151560009081526003602052604090208290555b509250929050565b60008211801561539257504281115b1561549a5760006153a4878686613c1b565b909450905083156153d257861515600090815260056020908152604080832087845290915290206007018690555b80156153fb57861515600090815260056020908152604080832084845290915290206006018690555b8615156000908152600560209081526040808320898452909152902060068101859055600781018290558461543f5787151560009081526003602052604090208790555b6005810154610100900460ff16615497576005810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790558715156000908152600460205260409020805460010190555b50505b505050505050565b6000826154b157506000614387565b828202828482816154be57fe5b0414614384576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180615ad06021913960400191505060405180910390fd5b600061438483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615a50565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604081205481908190806155ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b84151560009081526005602090815260408083208484529091529020805473ffffffffffffffffffffffffffffffffffffffff88811691161461569157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f466f7262696464656e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018101805460028301805460038501805460009586905592859055939093556005840154919750919550909350610100900460ff16156156d8576156d68683614c38565b505b615729866156fe5760085473ffffffffffffffffffffffffffffffffffffffff16615718565b60095473ffffffffffffffffffffffffffffffffffffffff165b336129f1878763ffffffff6149df16565b600581015460408051878152602081018790528082018690526000606082018190526080820181905260a0820181905260c08201526201000090920460ff16151560e0830152518715159173ffffffffffffffffffffffffffffffffffffffff8a16917f3349af395fb66f8dc0da9c7cb36de02b3ba8f46b9299c8db3ffb91658643228991610100908290030190a350509250925092565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061589f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615862565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114615901576040519150601f19603f3d011682016040523d82523d6000602084013e615906565b606091505b5091509150818015615934575080511580615934575080806020019051602081101561593157600080fd5b50515b61549a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b60008184841115615a48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615a0d5781810151838201526020016159f5565b50505050905090810190601f168015615a3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183615ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315615a0d5781810151838201526020016159f5565b506000838581615ac557fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220ef724b7ba8389ddbb0d71d8b32fb1ab8befb8232f478e1bac3a14d5aa179fe5764736f6c634300060b0033a2646970667358221220cb1985cd5e4d1e54a038a369d0ae5d2815ac8120c1cd3f7a51ab0e793a92472e64736f6c634300060b0033"
};

// src/contracts/oracle/OSWAP_OraclePairCreator.ts
var OSWAP_OraclePairCreator = class extends import_eth_wallet21.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_OraclePairCreator_json_default.abi, OSWAP_OraclePairCreator_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  async createPair_send(salt) {
    let result = await this.send("createPair", [import_eth_wallet21.Utils.stringToBytes32(salt)]);
    return result;
  }
  async createPair_call(salt) {
    let result = await this.call("createPair", [import_eth_wallet21.Utils.stringToBytes32(salt)]);
    return result;
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
  }
};

// src/contracts/oracle/OSWAP_VotingExecutor2.ts
var import_eth_wallet22 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/oracle/OSWAP_VotingExecutor2.json.ts
var OSWAP_VotingExecutor2_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c060405234801561001057600080fd5b50604051610c98380380610c988339818101604052602081101561003357600080fd5b50516001600160601b0319606082901b1660a05260408051635aa6e67560e01b815290516001600160a01b03831691635aa6e675916004808301926020929190829003018186803b15801561008757600080fd5b505afa15801561009b573d6000803e3d6000fd5b505050506040513d60208110156100b157600080fd5b5051606081811b6001600160601b03191660805260a0516001600160a01b0390921692501c610b6a61012e6000398061029d52806103cc52806104b6528061055452806105f252806106d8528061078f528061080952806108f152806109665280610a585280610b1252508060f3528061015b5250610b6a6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635aa6e675146100465780638af7c64914610077578063c45a0155146100e9575b600080fd5b61004e6100f1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e76004803603602081101561008d57600080fd5b8101906020810181356401000000008111156100a857600080fd5b8201836020820111156100ba57600080fd5b803590602001918460208302840111640100000000831117156100dc57600080fd5b509092509050610115565b005b61004e610b10565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b15866e6916024808301926020929190829003018186803b1580156101a157600080fd5b505afa1580156101b5573d6000803e3d6000fd5b505050506040513d60208110156101cb57600080fd5b505161023857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b60008282600081811061024757fe5b90506020020135905060008383600181811061025f57fe5b6020029190910135915050600483141561048357817f7365744f7261636c65000000000000000000000000000000000000000000000014156103a2577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c1445818260601c868660028181106102e857fe5b9050602002013560601c878760038181106102ff57fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815273ffffffffffffffffffffffffffffffffffffffff9687166004820152949095166024850152602002919091013560601c6044830152509051606480830192600092919082900301818387803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b5050505061047e565b817f6164644f6c644f7261636c65546f4e65775061697200000000000000000000001415610417577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663399762478260601c868660028181106102e857fe5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b610b0a565b60028314156107d657817f7365745472616465466565000000000000000000000000000000000000000000141561052a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663106030238260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561038557600080fd5b817f73657450726f746f636f6c46656500000000000000000000000000000000000014156105c8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663787dce3d8260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561038557600080fd5b817f73657446656550657244656c656761746f7200000000000000000000000000001415610666577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663636b0d1a8260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561038557600080fd5b817f73657450726f746f636f6c466565546f00000000000000000000000000000000141561071f57604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606083901c6004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e0e6799f91602480830192600092919082900301818387803b15801561038557600080fd5b817f7365744c69766500000000000000000000000000000000000000000000000000141561041757604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163f5ee334891602480830192600092919082900301818387803b15801561038557600080fd5b6003831415610aa357817f7365744d696e4c6f7453697a650000000000000000000000000000000000000014156108c7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663130a0b408260601c8686600281811061085457fe5b9050602002013560001c6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561038557600080fd5b817f736574536563757269747953636f72654f7261636c6500000000000000000000141561093c577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632288f2ff8260601c8686600281811061085457fe5b817f7365744c697665466f72506169720000000000000000000000000000000000001415610a2e577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636883618a8260601c868660028181106109b157fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b15801561038557600080fd5b817f73657457686974654c69737400000000000000000000000000000000000000001415610417577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d14e1278260601c868660028181106109b157fe5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220d76d6028e6fa6925b283d1cebcf93c71dc2666e462fee3c145644197a6d4696964736f6c634300060b0033"
};

// src/contracts/oracle/OSWAP_VotingExecutor2.ts
var OSWAP_VotingExecutor2 = class extends import_eth_wallet22.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingExecutor2_json_default.abi, OSWAP_VotingExecutor2_json_default.bytecode);
    this.assign();
  }
  deploy(factory) {
    return this._deploy(factory);
  }
  async execute_send(params) {
    let result = await this.send("execute", [import_eth_wallet22.Utils.stringToBytes32(params)]);
    return result;
  }
  async execute_call(params) {
    let result = await this.call("execute", [import_eth_wallet22.Utils.stringToBytes32(params)]);
    return;
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
  }
};

// src/contracts/range/OSWAP_RangeFactory.ts
var import_eth_wallet23 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/range/OSWAP_RangeFactory.json.ts
var OSWAP_RangeFactory_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_oracleFactory", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256[]", "name": "_stakeAmount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_liquidityProviderShare", "type": "uint256[]" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "checkAndGetSwapParams", "outputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "getAllLiquidityProviderShare", "outputs": [{ "internalType": "uint256[]", "name": "_stakeAmount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_liquidityProviderShare", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getCreateAddresses", "outputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_rangeLiquidityProvider", "type": "address" }, { "internalType": "address", "name": "_oracleFactory", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "stake", "type": "uint256" }], "name": "getLiquidityProviderShare", "outputs": [{ "internalType": "uint256", "name": "_liquidityProviderShare", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "liquidityProviderShare", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "rangeLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256[]", "name": "_stakeAmount", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_liquidityProviderShare", "type": "uint256[]" }], "name": "setLiquidityProviderShare", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_rangeLiquidityProvider", "type": "address" }], "name": "setRangeLiquidityProvider", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakeAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60c06040523480156200001157600080fd5b50604051620027b0380380620027b0833981810160405260e08110156200003757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007357600080fd5b9083019060208201858111156200008957600080fd5b8251866020820283011164010000000082111715620000a757600080fd5b82525081516020918201928201910280838360005b83811015620000d6578181015183820152602001620000bc565b50505050905001604052602001805160405193929190846401000000008211156200010057600080fd5b9083019060208201858111156200011657600080fd5b82518660208202830111640100000000821117156200013457600080fd5b82525081516020918201928201910280838360005b838110156200016357818101518382015260200162000149565b50505050919091016040525060200151606089901b6001600160601b03191660805260008054600160ff1990911617610100600160a81b0319166101006001600160a01b038a16021781559092509050620001bd62000267565b600380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160601b0319606087901b1660a05262000231846001600160e01b036200026c16565b6200024683836001600160e01b03620002f616565b6200025a816001600160e01b03620004f616565b50505050505050620005ca565b335b90565b620186a0811115620002b9576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f54524144455f46454560781b604482015290519081900360640190fd5b60058190556040805167747261646546656560c01b815260208101839052815160008051602062002790833981519152929181900390910190a150565b81518151811462000341576040805162461bcd60e51b815260206004820152601060248201526f0988a9c8ea890409c9ea8409a82a886960831b604482015290519081900360640190fd5b8251620003569060069060208601906200055d565b5081516200036c9060079060208501906200055d565b5060005b81811015620004f057620186a08382815181106200038a57fe5b60200260200101511115620003e6576040805162461bcd60e51b815260206004820152601760248201527f494e56414c4944204c4951554944495459205348415245000000000000000000604482015290519081900360640190fd5b80156200045857838181518110620003fa57fe5b60200260200101518460018303815181106200041257fe5b602002602001015110620004585760405162461bcd60e51b81526004018080602001828103825260238152602001806200276d6023913960400191505060405180910390fd5b7f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb7068482815181106200048657fe5b602002602001015160001b8483815181106200049e57fe5b602090810291909101810151604080517f6c697175696469747950726f76696465725368617265000000000000000000008152928301939093528183015290519081900360600190a160010162000370565b50505050565b600880546001600160a01b0319166001600160a01b0383161790819055604080516c70726f746f636f6c466565546f60981b815260609290921b6001600160601b03191660208301528051600080516020620027908339815191529281900390910190a150565b8280548282559060005260206000209081019282156200059b579160200282015b828111156200059b5782518255916020019190600101906200057e565b50620005a9929150620005ad565b5090565b6200026991905b80821115620005a95760008155600101620005b4565b60805160601c60a05160601c61214c6200062160003980610ecb528061177352508061063f52806108f05280610a495280610a845280610b77528061161d528061173b52806119f75280611aea525061214c6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80638da5cb5b116100ee578063e0e6799f11610097578063ed3b638c11610071578063ed3b638c14610582578063ef3692521461059f578063f2fde38b146105a7578063f5ee3348146105da576101ae565b8063e0e6799f146104d4578063e6a4390514610507578063ea2ed2c114610542576101ae565b8063c7f7fb90116100c8578063c7f7fb901461045e578063c9c6539614610466578063e0dd38d1146104a1576101ae565b80638da5cb5b14610432578063b8f7a6651461043a578063c538b5d614610456576101ae565b8063502180481161015b5780636883618a116101355780636883618a146103b55780636c57f602146103f0578063715018a61461040d5780638519573e14610415576101ae565b806350218048146102e3578063574f2ba3146103a55780635aa6e675146103ad576101ae565b80632c6ced381161018c5780632c6ced3814610232578063420328561461023a5780634af4bde814610242576101ae565b806310603023146101b35780631e3dd18b146101d257806324bcdfbd14610218575b600080fd5b6101d0600480360360208110156101c957600080fd5b50356105f9565b005b6101ef600480360360208110156101e857600080fd5b5035610728565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61022061075c565b60408051918252519081900360200190f35b6101ef610762565b61022061077e565b61024a6107f7565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561028e578181015183820152602001610276565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102cd5781810151838201526020016102b5565b5050505090500194505050505060405180910390f35b6101d0600480360360408110156102f957600080fd5b81019060208101813564010000000081111561031457600080fd5b82018360208201111561032657600080fd5b8035906020019184602083028401116401000000008311171561034857600080fd5b91939092909160208101903564010000000081111561036657600080fd5b82018360208201111561037857600080fd5b8035906020019184602083028401116401000000008311171561039a57600080fd5b5090925090506108aa565b610220610a40565b6101ef610a47565b6101d0600480360360408110156103cb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610a6b565b6102206004803603602081101561040657600080fd5b5035610d58565b6101d0610d76565b6102206004803603602081101561042b57600080fd5b5035610e76565b6101ef610e83565b610442610e9f565b604080519115158252519081900360200190f35b6101ef610ea8565b6101ef610ec9565b6101ef6004803603604081101561047c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610eed565b6101d0600480360360208110156104b757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611490565b6101d0600480360360208110156104ea57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115d7565b6101ef6004803603604081101561051d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611703565b61054a611736565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b6102206004803603602081101561059857600080fd5b5035611797565b6101ef611837565b6101d0600480360360208110156105bd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611853565b6101d0600480360360208110156105f057600080fd5b503515156119de565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561068557600080fd5b505afa158015610699573d6000803e3d6000fd5b505050506040513d60208110156106af57600080fd5b505161071c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b61072581611c42565b50565b6002818154811061073557fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60055481565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6000805460ff166107f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b5060055490565b606080600660078180548060200260200160405190810160405280929190818152602001828054801561084957602002820191906000526020600020905b815481526020019060010190808311610835575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561089b57602002820191906000526020600020905b815481526020019060010190808311610887575b50505050509050915091509091565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d602081101561096057600080fd5b50516109cd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b610a3a84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808802828101820190935287825290935087925086918291850190849080828437600092019190915250611d1792505050565b50505050565b6002545b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae857600080fd5b505afa158015610afc573d6000803e3d6000fd5b505050506040513d6020811015610b1257600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480610bea5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610bbd57600080fd5b505afa158015610bd1573d6000803e3d6000fd5b505050506040513d6020811015610be757600080fd5b50515b610c3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120f66021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b158015610cae57600080fd5b505af1158015610cc2573d6000803e3d6000fd5b505050508015610d125760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610d54565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b60068181548110610d6557fe5b600091825260209091200154905081565b610d7e611f5c565b60035473ffffffffffffffffffffffffffffffffffffffff908116911614610e0757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60035460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60078181548110610d6557fe5b60035473ffffffffffffffffffffffffffffffffffffffff1690565b60005460ff1681565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f8a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610fc7578385610fca565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661105157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600160209081526040808320858516845290915290205416156110f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f504149525f455849535453000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085811b821660208085019190915285821b90921660348401528351602881850301815260488401855280519083012060008054606c80870184905287518088039091018152608c909601875293850180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815295518551929691959394610100900473ffffffffffffffffffffffffffffffffffffffff169392909182918083835b6020831061121857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016111db565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114611278576040519150601f19603f3d011682016040523d82523d6000602084013e61127d565b606091505b5091509150816112ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561130357600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b15801561138157600080fd5b505af1158015611395573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff85811660008181526001602081815260408084208a87168086529083528185208054978e167fffffffffffffffffffffffff0000000000000000000000000000000000000000988916811790915584845282862087875284528286208054891682179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a3505050505092915050565b611498611f5c565b60035473ffffffffffffffffffffffffffffffffffffffff90811691161461152157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff1615611590576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806120ae6022913960400191505060405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561166357600080fd5b505afa158015611677573d6000803e3d6000fd5b505050506040513d602081101561168d57600080fd5b50516116fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b61072581611f60565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6004547f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff167f0000000000000000000000000000000000000000000000000000000000000000909192565b6006546000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81015b8181101561182f5783600682815481106117d757fe5b90600052602060002001541161180857600781815481106117f457fe5b906000526020600020015492505050611832565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016117c1565b50505b919050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b61185b611f5c565b60035473ffffffffffffffffffffffffffffffffffffffff9081169116146118e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611950576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806120d06026913960400191505060405180910390fd5b60035460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5b57600080fd5b505afa158015611a6f573d6000803e3d6000fd5b505050506040513d6020811015611a8557600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480611b5d5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015611b3057600080fd5b505afa158015611b44573d6000803e3d6000fd5b505050506040513d6020811015611b5a57600080fd5b50515b611bb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806120f66021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff1615611c16576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a1610725565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a150565b620186a0811115611cb457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6005819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b815181518114611d8857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c454e475448204e4f54204d4154434800000000000000000000000000000000604482015290519081900360640190fd5b8251611d9b906006906020860190612025565b508151611daf906007906020850190612025565b5060005b81811015610a3a57620186a0838281518110611dcb57fe5b60200260200101511115611e4057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f494e56414c4944204c4951554944495459205348415245000000000000000000604482015290519081900360640190fd5b8015611ec757838181518110611e5257fe5b6020026020010151846001830381518110611e6957fe5b602002602001015110611ec7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061208b6023913960400191505060405180910390fd5b7f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706848281518110611ef457fe5b602002602001015160001b848381518110611f0b57fe5b602090810291909101810151604080517f6c697175696469747950726f76696465725368617265000000000000000000008152928301939093528183015290519081900360600190a1600101611db3565b3390565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b828054828255906000526020600020908101928215612060579160200282015b82811115612060578251825591602001919060010190612045565b5061206c929150612070565b5090565b610a4491905b8082111561206c576000815560010161207656fe5354414b4520414d4f554e54204e4f5420494e20415343454e44494e47204f5244455252616e67654c697175696469747950726f766964657220616c7265616479207365744f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67a2646970667358221220dd90142a5de6ebf84d24792f496f612a0d5c00acbbf98f799d2f7a946a6761fc64736f6c634300060b00335354414b4520414d4f554e54204e4f5420494e20415343454e44494e47204f5244455222ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509"
};

// src/contracts/range/OSWAP_RangeFactory.ts
var OSWAP_RangeFactory = class extends import_eth_wallet23.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RangeFactory_json_default.abi, OSWAP_RangeFactory_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.oracleFactory, params.pairCreator, import_eth_wallet23.Utils.toString(params.tradeFee), import_eth_wallet23.Utils.toString(params.stakeAmount), import_eth_wallet23.Utils.toString(params.liquidityProviderShare), params.protocolFeeTo);
  }
  parseOwnershipTransferredEvent(receipt) {
    return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
  }
  decodeOwnershipTransferredEvent(event) {
    let result = event.data;
    return {
      previousOwner: result.previousOwner,
      newOwner: result.newOwner,
      _event: event
    };
  }
  parsePairCreatedEvent(receipt) {
    return this.parseEvents(receipt, "PairCreated").map((e) => this.decodePairCreatedEvent(e));
  }
  decodePairCreatedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      pair: result.pair,
      newSize: new import_eth_wallet23.BigNumber(result.newSize),
      _event: event
    };
  }
  parsePairRestartedEvent(receipt) {
    return this.parseEvents(receipt, "PairRestarted").map((e) => this.decodePairRestartedEvent(e));
  }
  decodePairRestartedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parsePairShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "PairShutdowned").map((e) => this.decodePairShutdownedEvent(e));
  }
  decodePairShutdownedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parseRestartedEvent(receipt) {
    return this.parseEvents(receipt, "Restarted").map((e) => this.decodeRestartedEvent(e));
  }
  decodeRestartedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "Shutdowned").map((e) => this.decodeShutdownedEvent(e));
  }
  decodeShutdownedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  async allPairs(param1) {
    let result = await this.call("allPairs", [import_eth_wallet23.Utils.toString(param1)]);
    return result;
  }
  async allPairsLength() {
    let result = await this.call("allPairsLength");
    return new import_eth_wallet23.BigNumber(result);
  }
  async checkAndGetSwapParams() {
    let result = await this.call("checkAndGetSwapParams");
    return new import_eth_wallet23.BigNumber(result);
  }
  async createPair_send(params) {
    let result = await this.send("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async createPair_call(params) {
    let result = await this.call("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async getAllLiquidityProviderShare() {
    let result = await this.call("getAllLiquidityProviderShare");
    return {
      _stakeAmount: result._stakeAmount.map((e) => new import_eth_wallet23.BigNumber(e)),
      _liquidityProviderShare: result._liquidityProviderShare.map((e) => new import_eth_wallet23.BigNumber(e))
    };
  }
  async getCreateAddresses() {
    let result = await this.call("getCreateAddresses");
    return {
      _governance: result._governance,
      _rangeLiquidityProvider: result._rangeLiquidityProvider,
      _oracleFactory: result._oracleFactory
    };
  }
  async getLiquidityProviderShare(stake) {
    let result = await this.call("getLiquidityProviderShare", [import_eth_wallet23.Utils.toString(stake)]);
    return new import_eth_wallet23.BigNumber(result);
  }
  async getPair(params) {
    let result = await this.call("getPair", [params.param1, params.param2]);
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async liquidityProviderShare(param1) {
    let result = await this.call("liquidityProviderShare", [import_eth_wallet23.Utils.toString(param1)]);
    return new import_eth_wallet23.BigNumber(result);
  }
  async oracleFactory() {
    let result = await this.call("oracleFactory");
    return result;
  }
  async owner() {
    let result = await this.call("owner");
    return result;
  }
  async pairCreator() {
    let result = await this.call("pairCreator");
    return result;
  }
  async protocolFeeTo() {
    let result = await this.call("protocolFeeTo");
    return result;
  }
  async rangeLiquidityProvider() {
    let result = await this.call("rangeLiquidityProvider");
    return result;
  }
  async renounceOwnership_send() {
    let result = await this.send("renounceOwnership");
    return result;
  }
  async renounceOwnership_call() {
    let result = await this.call("renounceOwnership");
    return;
  }
  async setLiquidityProviderShare_send(params) {
    let result = await this.send("setLiquidityProviderShare", [import_eth_wallet23.Utils.toString(params.stakeAmount), import_eth_wallet23.Utils.toString(params.liquidityProviderShare)]);
    return result;
  }
  async setLiquidityProviderShare_call(params) {
    let result = await this.call("setLiquidityProviderShare", [import_eth_wallet23.Utils.toString(params.stakeAmount), import_eth_wallet23.Utils.toString(params.liquidityProviderShare)]);
    return;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setLiveForPair_send(params) {
    let result = await this.send("setLiveForPair", [params.pair, params.live]);
    return result;
  }
  async setLiveForPair_call(params) {
    let result = await this.call("setLiveForPair", [params.pair, params.live]);
    return;
  }
  async setProtocolFeeTo_send(protocolFeeTo) {
    let result = await this.send("setProtocolFeeTo", [protocolFeeTo]);
    return result;
  }
  async setProtocolFeeTo_call(protocolFeeTo) {
    let result = await this.call("setProtocolFeeTo", [protocolFeeTo]);
    return;
  }
  async setRangeLiquidityProvider_send(rangeLiquidityProvider) {
    let result = await this.send("setRangeLiquidityProvider", [rangeLiquidityProvider]);
    return result;
  }
  async setRangeLiquidityProvider_call(rangeLiquidityProvider) {
    let result = await this.call("setRangeLiquidityProvider", [rangeLiquidityProvider]);
    return;
  }
  async setTradeFee_send(tradeFee) {
    let result = await this.send("setTradeFee", [import_eth_wallet23.Utils.toString(tradeFee)]);
    return result;
  }
  async setTradeFee_call(tradeFee) {
    let result = await this.call("setTradeFee", [import_eth_wallet23.Utils.toString(tradeFee)]);
    return;
  }
  async stakeAmount(param1) {
    let result = await this.call("stakeAmount", [import_eth_wallet23.Utils.toString(param1)]);
    return new import_eth_wallet23.BigNumber(result);
  }
  async tradeFee() {
    let result = await this.call("tradeFee");
    return new import_eth_wallet23.BigNumber(result);
  }
  async transferOwnership_send(newOwner) {
    let result = await this.send("transferOwnership", [newOwner]);
    return result;
  }
  async transferOwnership_call(newOwner) {
    let result = await this.call("transferOwnership", [newOwner]);
    return;
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
    this.renounceOwnership = Object.assign(this.renounceOwnership_send, { call: this.renounceOwnership_call });
    this.setLiquidityProviderShare = Object.assign(this.setLiquidityProviderShare_send, { call: this.setLiquidityProviderShare_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setLiveForPair = Object.assign(this.setLiveForPair_send, { call: this.setLiveForPair_call });
    this.setProtocolFeeTo = Object.assign(this.setProtocolFeeTo_send, { call: this.setProtocolFeeTo_call });
    this.setRangeLiquidityProvider = Object.assign(this.setRangeLiquidityProvider_send, { call: this.setRangeLiquidityProvider_call });
    this.setTradeFee = Object.assign(this.setTradeFee_send, { call: this.setTradeFee_call });
    this.transferOwnership = Object.assign(this.transferOwnership_send, { call: this.transferOwnership_call });
  }
};

// src/contracts/range/OSWAP_RangeLiquidityProvider.ts
var import_eth_wallet24 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/range/OSWAP_RangeLiquidityProvider.json.ts
var OSWAP_RangeLiquidityProvider_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "uint256", "name": "replenishAmount", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "updateProviderOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": ""
};

// src/contracts/range/OSWAP_RangeLiquidityProvider.ts
var OSWAP_RangeLiquidityProvider = class extends import_eth_wallet24.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RangeLiquidityProvider_json_default.abi, OSWAP_RangeLiquidityProvider_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.factory, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.tokenA, params.tokenB, params.addingTokenA, import_eth_wallet24.Utils.toString(params.staked), import_eth_wallet24.Utils.toString(params.amountIn), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.tokenA, params.tokenB, params.addingTokenA, import_eth_wallet24.Utils.toString(params.staked), import_eth_wallet24.Utils.toString(params.amountIn), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)]);
    return new import_eth_wallet24.BigNumber(result);
  }
  async addLiquidityETH_send(params, _value) {
    let result = await this.send("addLiquidityETH", [params.tokenA, params.addingTokenA, import_eth_wallet24.Utils.toString(params.staked), import_eth_wallet24.Utils.toString(params.amountAIn), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async addLiquidityETH_call(params, _value) {
    let result = await this.call("addLiquidityETH", [params.tokenA, params.addingTokenA, import_eth_wallet24.Utils.toString(params.staked), import_eth_wallet24.Utils.toString(params.amountAIn), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)], { value: _value });
    return new import_eth_wallet24.BigNumber(result);
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async removeAllLiquidity_send(params) {
    let result = await this.send("removeAllLiquidity", [params.tokenA, params.tokenB, params.to, import_eth_wallet24.Utils.toString(params.deadline)]);
    return result;
  }
  async removeAllLiquidity_call(params) {
    let result = await this.call("removeAllLiquidity", [params.tokenA, params.tokenB, params.to, import_eth_wallet24.Utils.toString(params.deadline)]);
    return {
      amountA: new import_eth_wallet24.BigNumber(result.amountA),
      amountB: new import_eth_wallet24.BigNumber(result.amountB)
    };
  }
  async removeAllLiquidityETH_send(params) {
    let result = await this.send("removeAllLiquidityETH", [params.tokenA, params.to, import_eth_wallet24.Utils.toString(params.deadline)]);
    return result;
  }
  async removeAllLiquidityETH_call(params) {
    let result = await this.call("removeAllLiquidityETH", [params.tokenA, params.to, import_eth_wallet24.Utils.toString(params.deadline)]);
    return {
      amountToken: new import_eth_wallet24.BigNumber(result.amountToken),
      amountETH: new import_eth_wallet24.BigNumber(result.amountETH)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.tokenA, params.tokenB, params.removingTokenA, params.to, import_eth_wallet24.Utils.toString(params.unstake), import_eth_wallet24.Utils.toString(params.amountOut), import_eth_wallet24.Utils.toString(params.reserveOut), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.tokenA, params.tokenB, params.removingTokenA, params.to, import_eth_wallet24.Utils.toString(params.unstake), import_eth_wallet24.Utils.toString(params.amountOut), import_eth_wallet24.Utils.toString(params.reserveOut), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)]);
    return;
  }
  async removeLiquidityETH_send(params) {
    let result = await this.send("removeLiquidityETH", [params.tokenA, params.removingTokenA, params.to, import_eth_wallet24.Utils.toString(params.unstake), import_eth_wallet24.Utils.toString(params.amountOut), import_eth_wallet24.Utils.toString(params.reserveOut), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidityETH_call(params) {
    let result = await this.call("removeLiquidityETH", [params.tokenA, params.removingTokenA, params.to, import_eth_wallet24.Utils.toString(params.unstake), import_eth_wallet24.Utils.toString(params.amountOut), import_eth_wallet24.Utils.toString(params.reserveOut), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), import_eth_wallet24.Utils.toString(params.deadline)]);
    return;
  }
  async updateProviderOffer_send(params) {
    let result = await this.send("updateProviderOffer", [params.tokenA, params.tokenB, import_eth_wallet24.Utils.toString(params.replenishAmount), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), params.privateReplenish, import_eth_wallet24.Utils.toString(params.deadline)]);
    return result;
  }
  async updateProviderOffer_call(params) {
    let result = await this.call("updateProviderOffer", [params.tokenA, params.tokenB, import_eth_wallet24.Utils.toString(params.replenishAmount), import_eth_wallet24.Utils.toString(params.lowerLimit), import_eth_wallet24.Utils.toString(params.upperLimit), import_eth_wallet24.Utils.toString(params.startDate), import_eth_wallet24.Utils.toString(params.expire), params.privateReplenish, import_eth_wallet24.Utils.toString(params.deadline)]);
    return;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.addLiquidityETH = Object.assign(this.addLiquidityETH_send, { call: this.addLiquidityETH_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeAllLiquidityETH = Object.assign(this.removeAllLiquidityETH_send, { call: this.removeAllLiquidityETH_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.removeLiquidityETH = Object.assign(this.removeLiquidityETH_send, { call: this.removeLiquidityETH_call });
    this.updateProviderOffer = Object.assign(this.updateProviderOffer_send, { call: this.updateProviderOffer_call });
  }
};

// src/contracts/range/OSWAP_RangePair.ts
var import_eth_wallet25 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/range/OSWAP_RangePair.json.ts
var OSWAP_RangePair_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "staked", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "NewProvider", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount1Out", "type": "uint256" }], "name": "RemoveAllLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newStakeBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }], "name": "Replenish", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newCounterReserveBalance", "type": "uint256" }], "name": "SwappedOneProvider", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "replenish", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReserveBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "name": "UpdateProviderOffer", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "end", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "uint256[]", "name": "amountAndReserve", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "lowerLimitAndUpperLimit", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }, { "internalType": "bool[]", "name": "privateReplenish", "type": "bool[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "reserve", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "providerStaking", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "rangeLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }, { "internalType": "uint256", "name": "staked", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "unstake", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "reserveOut", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "name": "replenish", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "stakeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "replenishAmount", "type": "uint256" }, { "internalType": "uint256", "name": "lowerLimit", "type": "uint256" }, { "internalType": "uint256", "name": "upperLimit", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "bool", "name": "privateReplenish", "type": "bool" }], "name": "updateProviderOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "610120604052600180553480156200001657600080fd5b5033606081811b6080526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493919263ea2ed2c19260048083019392829003018186803b1580156200006757600080fd5b505afa1580156200007c573d6000803e3d6000fd5b505050506040513d60608110156200009357600080fd5b5080516020808301516040938401516001600160601b0319606085901b1660c052845163b716d46360e01b8152945193975090955093506001600160a01b0386169263b716d4639260048083019392829003018186803b158015620000f757600080fd5b505afa1580156200010c573d6000803e3d6000fd5b505050506040513d60208110156200012357600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b031660a0816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6153766200047f60003980610ad452806112655280612206528061321552806132885280613b6152806149595250806112a552806120c452806122b25280612e5a52806138c9525080611b87525080610db852806118c15280611c7752806138195280613dc15280614b705250806117165280611d2f52806123605280612ad55280612d4552806137f5528061403752806144065280614c2852506153766000f3fe608060405234801561001057600080fd5b50600436106102765760003560e01c80637a6a5e1b11610160578063b8f7a665116100d8578063d21220a71161008c578063db13653c11610071578063db13653c14610a27578063f5ee334814610aa6578063fff6cae914610ac557610276565b8063d21220a7146109a6578063d519f64d146109ae57610276565b8063c45a0155116100bd578063c45a01551461092f578063c7f7fb9014610937578063d1b876cb1461093f57610276565b8063b8f7a6651461090b578063bebf7a611461092757610276565b806393bc9dfe1161012f578063a26651e711610114578063a26651e714610826578063a27c17f1146108aa578063b2901aa31461090357610276565b806393bc9dfe146108165780639749d2131461081e57610276565b80637a6a5e1b1461073857806380dffd7e1461076b578063835daf6c146107cd57806388952339146107d557610276565b8063485cc955116101f357806361bc221a116101c25780636b4afee1116101a75780636b4afee1146106ca5780636d813c3c146106d25780636fec7dd71461070557610276565b806361bc221a14610630578063685639a91461063857610276565b8063485cc955146105dd578063577e6d08146106185780635a6af09d146106205780635aa6e6751461062857610276565b80632c6ced381161024a5780633c1e6ff51161022f5780633c1e6ff5146104215780633c6d5c72146104295780633d0d81d61461044a57610276565b80632c6ced38146103755780633b19103b1461037d57610276565b8062113e081461027b578063022c0d9f146102a157806305268cff1461033c5780630dfe16811461036d575b600080fd5b610283610acd565b60408051938452602084019290925282820152519081900360600190f35b61033a600480360360808110156102b757600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102fb57600080fd5b82018360208201111561030d57600080fd5b8035906020019184600183028401116401000000008311171561032f57600080fd5b509092509050610ce1565b005b610344611263565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610344611287565b6103446112a3565b61040f6004803603606081101561039357600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156103d057600080fd5b8201836020820111156103e257600080fd5b8035906020019184600183028401116401000000008311171561040457600080fd5b5090925090506112c7565b60408051918252519081900360200190f35b61040f61136e565b610431611374565b6040805192835260208301919091528051918290030190f35b6104756004803603606081101561046057600080fd5b5080351515906020810135906040013561137e565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156104c55781810151838201526020016104ad565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156105045781810151838201526020016104ec565b50505050905001868103845289818151815260200191508051906020019060200280838360005b8381101561054357818101518382015260200161052b565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561058257818101518382015260200161056a565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156105c15781810151838201526020016105a9565b505050509050019a505050505050505050505060405180910390f35b61033a600480360360408110156105f357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166116fe565b61040f611b79565b61040f611b7f565b610344611b85565b61040f611ba9565b61040f6004803603606081101561064e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561068b57600080fd5b82018360208201111561069d57600080fd5b803590602001918460018302840111640100000000831117156106bf57600080fd5b509092509050611baf565b61040f612007565b61040f600480360360208110156106e857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661200d565b61040f6004803603602081101561071b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661201f565b6102836004803603602081101561074e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612031565b61033a600480360361010081101561078257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e00135151561229a565b61040f6127dd565b61033a600480360360608110156107eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604001356127e3565b61040f612a52565b61033a612a58565b6108616004803603604081101561083c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515612bd3565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e0840152151561010083015251908190036101200190f35b61040f600480360360e08110156108c057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c00135612cc8565b61040f6137c3565b6109136137c9565b604080519115158252519081900360200190f35b6109136137d2565b6103446137f3565b610344613817565b61033a600480360361012081101561095657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e081013590610100013561383b565b610344613d4b565b61040f600480360360408110156109c457600080fd5b8135151591908101906040810160208201356401000000008111156109e857600080fd5b8201836020820111156109fa57600080fd5b80359060200191846001830284011164010000000083111715610a1c57600080fd5b509092509050613d67565b610a4c60048036036040811015610a3d57600080fd5b50803515159060200135613fa6565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689526020890197909752878701959095526060870193909352608086019190915260a085015260c0840152151560e083015251908190036101000190f35b61033a60048036036020811015610abc57600080fd5b5035151561401f565b61033a6140f4565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b6f57600080fd5b505afa158015610b83573d6000803e3d6000fd5b505050506040513d6020811015610b9957600080fd5b5051600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d6020811015610c3657600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b505191945092509050909192565b600154600114610d5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553233148015610d6c5750610d6a33614178565b155b80610e2d5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b505050506040513d6020811015610e2a57600080fd5b50515b610e9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f742066726f6d2075736572206f722077686974656c697374656400000000604482015290519081900360640190fd5b60005460ff16610f0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600a54600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093610fbe93909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d6020811015610fb057600080fd5b50519063ffffffff61417e16565b600b54600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361103a939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015610f8657600080fd5b90506000808815801561104c57508715155b156111125761105f8760018689896141c9565b9092509050878210156110d357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6007546110f79073ffffffffffffffffffffffffffffffffffffffff168884614699565b600c5461110a908263ffffffff61489f16565b600c5561124c565b881580159061111f575087155b156111e5576111328760008589896141c9565b9092509050888210156111a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6006546111ca9073ffffffffffffffffffffffffffffffffffffffff168884614699565b600d546111dd908263ffffffff61489f16565b600d5561124c565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b611254614913565b50506001805550505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080841161133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6006546113619073ffffffffffffffffffffffffffffffffffffffff878116911614858585614b10565b5091979650505050505050565b60085481565b600a54600b549091565b606080606080606060025487116116c85760025486111561139f5760025495505b60006113c2886113b689600163ffffffff61489f16565b9063ffffffff61417e16565b90508067ffffffffffffffff811180156113db57600080fd5b50604051908082528060200260200182016040528015611405578160200160208202803683370190505b5095508060020267ffffffffffffffff8111801561142257600080fd5b5060405190808252806020026020018201604052801561144c578160200160208202803683370190505b5094508060020267ffffffffffffffff8111801561146957600080fd5b50604051908082528060200260200182016040528015611493578160200160208202803683370190505b5093508060020267ffffffffffffffff811180156114b057600080fd5b506040519080825280602002602001820160405280156114da578160200160208202803683370190505b5092508067ffffffffffffffff811180156114f457600080fd5b5060405190808252806020026020018201604052801561151e578160200160208202803683370190505b50915060005b818110156116c157600061153e828463ffffffff61489f16565b8b1515600090815260036020526040812091925090611563848d63ffffffff61489f16565b8154811061156d57fe5b6000918252602090912060089091020180548a5191925073ffffffffffffffffffffffffffffffffffffffff16908a90859081106115a757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548884815181106115f257fe5b602002602001018181525050806002015488838151811061160f57fe5b602002602001018181525050806003015487848151811061162c57fe5b602002602001018181525050806004015487838151811061164957fe5b602002602001018181525050806005015486848151811061166657fe5b602002602001018181525050806006015486838151811061168357fe5b60209081029190910101526007810154855160ff909116908690859081106116a757fe5b911515602092830291909101909101525050600101611524565b50506116f3565b5050604080516000808252602082018181528284019182526060830190935290945090925082915081905b939792965093509350565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146117a257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600780548583169316929092179182905590811691161061186957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600654600754604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c03916044808301926020929190829003018186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d602081101561193157600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166119b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b158015611a2257600080fd5b505afa158015611a36573d6000803e3d6000fd5b505050506040513d6020811015611a4c57600080fd5b5051600754604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b5051905060ff8281169082161415611b05576001600855611b72565b600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611b6457808203611b68565b8181035b60ff16600a0a6008555b5050505050565b600d5481565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b6000808411611c1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916395277f39916044808301926020929190829003018186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916342032856916004808301926020929190829003018186803b158015611d7557600080fd5b505afa158015611d89573d6000803e3d6000fd5b505050506040513d6020811015611d9f57600080fd5b505160075490915073ffffffffffffffffffffffffffffffffffffffff888116911614600081611de75760075473ffffffffffffffffffffffffffffffffffffffff16611e01565b60065473ffffffffffffffffffffffffffffffffffffffff165b90506000808573ffffffffffffffffffffffffffffffffffffffff1663d9da4fe6848d60008e8e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015611efb57600080fd5b505afa158015611f0f573d6000803e3d6000fd5b505050506040513d6040811015611f2557600080fd5b5080516020909101519092509050611f438a8263ffffffff614f1516565b965060016008541115611f9b57600760149054906101000a900460ff1615158415151415611f8457600854611f7f90889063ffffffff614f8816565b611f98565b600854611f9890889063ffffffff614f1516565b96505b611fbc6001611fb0898563ffffffff614f8816565b9063ffffffff61489f16565b9650611ff86001611fb0611fd9620186a08963ffffffff61417e16565b611fec8b620186a063ffffffff614f1516565b9063ffffffff614f8816565b9b9a5050505050505050505050565b600b5481565b60046020526000908152604090205481565b60056020526000908152604090205481565b60008060006001546001146120a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061210557503373ffffffffffffffffffffffffffffffffffffffff8516145b61217057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600061217d856000614fca565b9094509050612192848263ffffffff61489f16565b935060006121a1866001614fca565b90945090506121b6848263ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260056020526040812080549190559094509250821561222c57600e546121fe908463ffffffff61417e16565b600e5561222c7f00000000000000000000000000000000000000000000000000000000000000003385614699565b6040805184815260208101879052808201869052905173ffffffffffffffffffffffffffffffffffffffff8816917f3f9e361045fcac63ab779647d804207abc088499d6bc0e6983675cb509130647919081900360600190a261228d614913565b5050600180559193909250565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806122f357503373ffffffffffffffffffffffffffffffffffffffff8916145b61235e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505050506040513d60208110156123f057600080fd5b505161245d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166124ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561253d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156125ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821161261a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040902054806126ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b87151560009081526003602052604081208054839081106126c957fe5b906000526020600020906008020190506126f088826001015461489f90919063ffffffff16565b6001820155600281015461270a908963ffffffff61417e16565b60028201819055600382018890556004820187905560058201869055600682018590556007820180548515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091556001830154604080518c8152602081019290925281810193909352606081018a90526080810189905260a0810188905260c0810187905260e081019190915290518a15159133917f9766c42cdf43f771566bbf4c8146febf4292a400b0aea37b03f838f4523cc5b7918190036101000190a350505050505050505050565b600c5481565b60015460011461285457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905573ffffffffffffffffffffffffffffffffffffffff8416815260046020526040902054806128ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b821515600090815260036020526040812080548390811061290757fe5b60009182526020909120600890910201600781015490915060ff161580612943575073ffffffffffffffffffffffffffffffffffffffff851633145b6129ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b60018101546129c3908463ffffffff61489f16565b600182015560028101546129dd908463ffffffff61417e16565b6002820181905560018201546040805186815260208101929092528181019290925290518515159173ffffffffffffffffffffffffffffffffffffffff8816917f5d29877443ff1bf07abe0c891fe18d5ab9f14dab242f13ff6482995763473ed29181900360600190a3505060018055505050565b600e5481565b600154600114612ac957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3957600080fd5b505afa158015612b4d573d6000803e3d6000fd5b505050506040513d6020811015612b6357600080fd5b5051600654600c54919250612b929173ffffffffffffffffffffffffffffffffffffffff909116908390614699565b600754600d54612bba9173ffffffffffffffffffffffffffffffffffffffff16908390614699565b6000600c819055600d55612bcc614913565b5060018055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320548415158452600390925282208054919291829182918291829182918291829182918b908110612c2757fe5b9060005260206000209060080201905089600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260010154836002015484600301548560040154866005015487600601548860070160009054906101000a900460ff16995099509950995099509950995099509950509295985092959850929598565b6000600154600114612d3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b505050506040513d6020811015612dd557600080fd5b5051612e4257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480612e9b57503373ffffffffffffffffffffffffffffffffffffffff8916145b612f0657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60005460ff16612f7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816612ff957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561306857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156130d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561314657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b600080600080613154610acd565b925092509250896131706009548561417e90919063ffffffff16565b10156131dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b600e546131f0908b63ffffffff61489f16565b600e558a1561326c57600b5461320d90829063ffffffff61417e16565b6007549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561326757613264848b63ffffffff61417e16565b93505b6132da565b600a5461328090839063ffffffff61417e16565b6006549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156132da576132d7848b63ffffffff61417e16565b93505b600992909255600a55600b5573ffffffffffffffffffffffffffffffffffffffff891660009081526005602052604090205461331c908863ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526005602090815260408083208490556004909152812054935083156133c657891515600090815260036020526040812080548690811061337457fe5b9060005260206000209060080201905061339b84826001015461489f90919063ffffffff16565b60018201819055600382018a9055600482018990556005820188905560069091018690559050613731565b600280546001019081905573ffffffffffffffffffffffffffffffffffffffff8c16600090815260046020526040902081905593508261346757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600360008b1515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600081526020018a815260200189815260200188815260200187815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055505050600360008b151515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050508290508a73ffffffffffffffffffffffffffffffffffffffff167f39944be52180e3811405a754586ce476cd9d34d40e98835c2b4c77eb26426b5b856040518082815260200191505060405180910390a25b604080518a81526020810185905280820184905260608101839052608081018a905260a0810189905260c0810188905260e0810187905290518b15159173ffffffffffffffffffffffffffffffffffffffff8e16917ff77a3e29f24e88e282a2943ad511115dde07d25e5bade15adde6fcbed4c1b206918190036101000190a350506001805550979650505050505050565b60095481565b60005460ff1681565b60075474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001146138ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061390a57503373ffffffffffffffffffffffffffffffffffffffff8a16145b61397557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b818110156139e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b428111613a5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526004602052604090205480613ae457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b8715613b875773ffffffffffffffffffffffffffffffffffffffff8a16600090815260056020526040902054613b20908963ffffffff61417e16565b73ffffffffffffffffffffffffffffffffffffffff8b16600090815260056020526040902055600e54613b59908963ffffffff61417e16565b600e55613b877f0000000000000000000000000000000000000000000000000000000000000000338a614699565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600560209081526040808320548c1515845260039092528220805491929184908110613bcb57fe5b90600052602060002090600802019050613bf289826001015461417e90919063ffffffff16565b60018201556002810154613c0c908963ffffffff61417e16565b60028201556003810187905560048101869055600581018590556006810184905588151580613c3b5750600088115b15613c9657613c968b613c665760065473ffffffffffffffffffffffffffffffffffffffff16613c80565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c918c8c63ffffffff61489f16565b614699565b60018101546002820154604080518d8152602081018d90528082018c905260608101869052608081019390935260a083019190915260c0820189905260e0820188905261010082018790526101208201869052518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f1f61f8b18e403ca0f2ba9c3ff8bda4d01f0fc5d33ae806841d02dde927728132918190036101400190a3613d39614913565b50506001805550505050505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015613e0a57600080fd5b505afa158015613e1e573d6000803e3d6000fd5b505050506040513d6020811015613e3457600080fd5b5051905060008086613e655760075460065473ffffffffffffffffffffffffffffffffffffffff9182169116613e86565b60065460075473ffffffffffffffffffffffffffffffffffffffff91821691165b915091508273ffffffffffffffffffffffffffffffffffffffff1663495e4348838389896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015613f6f57600080fd5b505afa158015613f83573d6000803e3d6000fd5b505050506040513d6020811015613f9957600080fd5b5051979650505050505050565b60036020528160005260406000208181548110613fbf57fe5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff90961698509396509194909391929160ff1688565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146140c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461416557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155614172614913565b60018055565b3b151590565b60006141c083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615101565b90505b92915050565b6000806000806000606060006141df60846151b2565b90925090506141fa8b8b6141f58b85818f6152f7565b614b10565b5091985090965094508592506142189050898363ffffffff61417e16565b9250858a60005b60008311801561422f5750835181105b156145b15760025484828151811061424357fe5b602002602001015111156142b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812085518690849081106142d757fe5b6020026020010151815481106142e957fe5b9060005260206000209060080201905087816003015411158015614311575080600401548811155b8061432b5750600381015415801561432b57506004810154155b801561433b575080600501544210155b801561434b575080600601544211155b156145a85760018101546000908181871061438257614370878363ffffffff61417e16565b965060008460010181905590506143a8565b600184015487925061439a908363ffffffff61417e16565b846001018190559050600096505b835473ffffffffffffffffffffffffffffffffffffffff9081166000908152600560209081526040918290205482517fed3b638c000000000000000000000000000000000000000000000000000000008152600481019190915291517f00000000000000000000000000000000000000000000000000000000000000009093169263ed3b638c926024808201939291829003018186803b15801561444b57600080fd5b505afa15801561445f573d6000803e3d6000fd5b505050506040513d602081101561447557600080fd5b505192506144af61448f8e620186a063ffffffff614f1516565b611fec856144a38d8763ffffffff614f1516565b9063ffffffff614f1516565b92506144c18c8463ffffffff61417e16565b9b506144db83611fb08f611fec8e8763ffffffff614f1516565b861560009081526003602052604090208951919450908990879081106144fd57fe5b60200260200101518154811061450f57fe5b9060005260206000209060080201935061453683856002015461489f90919063ffffffff16565b60028501819055845460408051858152602081018790528082018590526060810193909352518815159273ffffffffffffffffffffffffffffffffffffffff909216917f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c22919081900360800190a35050505b5060010161421f565b5050801561462057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b60408051868152602081018c9052808201899052606081018590526080810188905290518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f0148b571d5049091b679cb2ccda30fb06d3aecaef641a0515a317498893d7da39181900360a00190a350505050509550959350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061479f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614762565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614801576040519150601f19603f3d011682016040523d82523d6000602084013e614806565b606091505b5091509150818015614834575080511580614834575080806020019051602081101561483157600080fd5b50515b611b7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6000828201838110156141c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561499f57600080fd5b505afa1580156149b3573d6000803e3d6000fd5b505050506040513d60208110156149c957600080fd5b5051600955600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614a3f57600080fd5b505afa158015614a53573d6000803e3d6000fd5b505050506040513d6020811015614a6957600080fd5b5051600a55600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614adf57600080fd5b505afa158015614af3573d6000803e3d6000fd5b505050506040513d6020811015614b0957600080fd5b5051600b55565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283928392839283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015614bb957600080fd5b505afa158015614bcd573d6000803e3d6000fd5b505050506040513d6020811015614be357600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634203285691600480820192602092909190829003018186803b158015614c6f57600080fd5b505afa158015614c83573d6000803e3d6000fd5b505050506040513d6020811015614c9957600080fd5b50519150614cb4620186a0611fec8a8563ffffffff614f1516565b9250614cc6888463ffffffff61417e16565b97506000808273ffffffffffffffffffffffffffffffffffffffff1663d9da4fe68c614d0a5760075473ffffffffffffffffffffffffffffffffffffffff16614d24565b60065473ffffffffffffffffffffffffffffffffffffffff165b8d614d475760065473ffffffffffffffffffffffffffffffffffffffff16614d61565b60075473ffffffffffffffffffffffffffffffffffffffff165b8d60008e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015614e3857600080fd5b505afa158015614e4c573d6000803e3d6000fd5b505050506040513d6040811015614e6257600080fd5b5080516020909101519092509050614e808a8363ffffffff614f1516565b965060016008541115614ed757600760149054906101000a900460ff1615158b151514614ec057600854614ebb90889063ffffffff614f8816565b614ed4565b600854614ed490889063ffffffff614f1516565b96505b614ee7878263ffffffff614f8816565b9650614f0581611fec84670de0b6b3a764000063ffffffff614f1516565b9550505050945094509450949050565b600082614f24575060006141c3565b82820282848281614f3157fe5b04146141c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153206021913960400191505060405180910390fd5b60006141c083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615278565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205481908061505e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b831515600090815260036020526040812080548390811061507b57fe5b60009182526020822060016008909202019081018054600283018054928590559390935591955090935090506150f8856150cd5760065473ffffffffffffffffffffffffffffffffffffffff166150e7565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c91878763ffffffff61489f16565b50509250929050565b600081848411156151aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561516f578181015183820152602001615157565b50505050905090810190601f16801561519c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b606060006151c783604063ffffffff61489f16565b36101561523557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208301356020810280604086010136101561525057600080fd5b6040516020820181016040528281528160408701602083013795602091909101945092505050565b600081836152e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815283516024840152835190928392604490910191908501908083836000831561516f578181015183820152602001615157565b5060008385816152ed57fe5b0495945050505050565b60008085851115615306578182fd5b83861115615312578182fd5b505082019391909203915056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202cd544383ecb72494d542775e93dcf375c6d972bf29ecedc786d171b78792eeb64736f6c634300060b0033"
};

// src/contracts/range/OSWAP_RangePair.ts
var OSWAP_RangePair = class extends import_eth_wallet25.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RangePair_json_default.abi, OSWAP_RangePair_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  parseAddLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "AddLiquidity").map((e) => this.decodeAddLiquidityEvent(e));
  }
  decodeAddLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      staked: new import_eth_wallet25.BigNumber(result.staked),
      amount: new import_eth_wallet25.BigNumber(result.amount),
      newStakeBalance: new import_eth_wallet25.BigNumber(result.newStakeBalance),
      newAmountBalance: new import_eth_wallet25.BigNumber(result.newAmountBalance),
      lowerLimit: new import_eth_wallet25.BigNumber(result.lowerLimit),
      upperLimit: new import_eth_wallet25.BigNumber(result.upperLimit),
      startDate: new import_eth_wallet25.BigNumber(result.startDate),
      expire: new import_eth_wallet25.BigNumber(result.expire),
      _event: event
    };
  }
  parseNewProviderEvent(receipt) {
    return this.parseEvents(receipt, "NewProvider").map((e) => this.decodeNewProviderEvent(e));
  }
  decodeNewProviderEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      index: new import_eth_wallet25.BigNumber(result.index),
      _event: event
    };
  }
  parseRemoveAllLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "RemoveAllLiquidity").map((e) => this.decodeRemoveAllLiquidityEvent(e));
  }
  decodeRemoveAllLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      unstake: new import_eth_wallet25.BigNumber(result.unstake),
      amount0Out: new import_eth_wallet25.BigNumber(result.amount0Out),
      amount1Out: new import_eth_wallet25.BigNumber(result.amount1Out),
      _event: event
    };
  }
  parseRemoveLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "RemoveLiquidity").map((e) => this.decodeRemoveLiquidityEvent(e));
  }
  decodeRemoveLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      unstake: new import_eth_wallet25.BigNumber(result.unstake),
      amountOut: new import_eth_wallet25.BigNumber(result.amountOut),
      reserveOut: new import_eth_wallet25.BigNumber(result.reserveOut),
      newStakeBalance: new import_eth_wallet25.BigNumber(result.newStakeBalance),
      newAmountBalance: new import_eth_wallet25.BigNumber(result.newAmountBalance),
      newReserveBalance: new import_eth_wallet25.BigNumber(result.newReserveBalance),
      lowerLimit: new import_eth_wallet25.BigNumber(result.lowerLimit),
      upperLimit: new import_eth_wallet25.BigNumber(result.upperLimit),
      startDate: new import_eth_wallet25.BigNumber(result.startDate),
      expire: new import_eth_wallet25.BigNumber(result.expire),
      _event: event
    };
  }
  parseReplenishEvent(receipt) {
    return this.parseEvents(receipt, "Replenish").map((e) => this.decodeReplenishEvent(e));
  }
  decodeReplenishEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      amountIn: new import_eth_wallet25.BigNumber(result.amountIn),
      newAmountBalance: new import_eth_wallet25.BigNumber(result.newAmountBalance),
      newReserveBalance: new import_eth_wallet25.BigNumber(result.newReserveBalance),
      _event: event
    };
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      to: result.to,
      direction: result.direction,
      price: new import_eth_wallet25.BigNumber(result.price),
      amountIn: new import_eth_wallet25.BigNumber(result.amountIn),
      amountOut: new import_eth_wallet25.BigNumber(result.amountOut),
      tradeFee: new import_eth_wallet25.BigNumber(result.tradeFee),
      protocolFee: new import_eth_wallet25.BigNumber(result.protocolFee),
      _event: event
    };
  }
  parseSwappedOneProviderEvent(receipt) {
    return this.parseEvents(receipt, "SwappedOneProvider").map((e) => this.decodeSwappedOneProviderEvent(e));
  }
  decodeSwappedOneProviderEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      amountOut: new import_eth_wallet25.BigNumber(result.amountOut),
      amountIn: new import_eth_wallet25.BigNumber(result.amountIn),
      newAmountBalance: new import_eth_wallet25.BigNumber(result.newAmountBalance),
      newCounterReserveBalance: new import_eth_wallet25.BigNumber(result.newCounterReserveBalance),
      _event: event
    };
  }
  parseUpdateProviderOfferEvent(receipt) {
    return this.parseEvents(receipt, "UpdateProviderOffer").map((e) => this.decodeUpdateProviderOfferEvent(e));
  }
  decodeUpdateProviderOfferEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      replenish: new import_eth_wallet25.BigNumber(result.replenish),
      newAmountBalance: new import_eth_wallet25.BigNumber(result.newAmountBalance),
      newReserveBalance: new import_eth_wallet25.BigNumber(result.newReserveBalance),
      lowerLimit: new import_eth_wallet25.BigNumber(result.lowerLimit),
      upperLimit: new import_eth_wallet25.BigNumber(result.upperLimit),
      startDate: new import_eth_wallet25.BigNumber(result.startDate),
      expire: new import_eth_wallet25.BigNumber(result.expire),
      privateReplenish: result.privateReplenish,
      _event: event
    };
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.staked), import_eth_wallet25.Utils.toString(params.lowerLimit), import_eth_wallet25.Utils.toString(params.upperLimit), import_eth_wallet25.Utils.toString(params.startDate), import_eth_wallet25.Utils.toString(params.expire)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.staked), import_eth_wallet25.Utils.toString(params.lowerLimit), import_eth_wallet25.Utils.toString(params.upperLimit), import_eth_wallet25.Utils.toString(params.startDate), import_eth_wallet25.Utils.toString(params.expire)]);
    return new import_eth_wallet25.BigNumber(result);
  }
  async counter() {
    let result = await this.call("counter");
    return new import_eth_wallet25.BigNumber(result);
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [params.tokenOut, import_eth_wallet25.Utils.toString(params.amountOut), params.data]);
    return new import_eth_wallet25.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [params.tokenIn, import_eth_wallet25.Utils.toString(params.amountIn), params.data]);
    return new import_eth_wallet25.BigNumber(result);
  }
  async getBalances() {
    let result = await this.call("getBalances");
    return {
      param1: new import_eth_wallet25.BigNumber(result[0]),
      param2: new import_eth_wallet25.BigNumber(result[1]),
      param3: new import_eth_wallet25.BigNumber(result[2])
    };
  }
  async getLastBalances() {
    let result = await this.call("getLastBalances");
    return {
      param1: new import_eth_wallet25.BigNumber(result[0]),
      param2: new import_eth_wallet25.BigNumber(result[1])
    };
  }
  async getLatestPrice(params) {
    let result = await this.call("getLatestPrice", [params.direction, params.payload]);
    return new import_eth_wallet25.BigNumber(result);
  }
  async getOffers(params) {
    let result = await this.call("getOffers", [params.direction, import_eth_wallet25.Utils.toString(params.start), import_eth_wallet25.Utils.toString(params.end)]);
    return {
      provider: result.provider,
      amountAndReserve: result.amountAndReserve.map((e) => new import_eth_wallet25.BigNumber(e)),
      lowerLimitAndUpperLimit: result.lowerLimitAndUpperLimit.map((e) => new import_eth_wallet25.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet25.BigNumber(e)),
      privateReplenish: result.privateReplenish
    };
  }
  async getProviderOffer(params) {
    let result = await this.call("getProviderOffer", [params.provider, params.direction]);
    return {
      index: new import_eth_wallet25.BigNumber(result.index),
      staked: new import_eth_wallet25.BigNumber(result.staked),
      amount: new import_eth_wallet25.BigNumber(result.amount),
      reserve: new import_eth_wallet25.BigNumber(result.reserve),
      lowerLimit: new import_eth_wallet25.BigNumber(result.lowerLimit),
      upperLimit: new import_eth_wallet25.BigNumber(result.upperLimit),
      startDate: new import_eth_wallet25.BigNumber(result.startDate),
      expire: new import_eth_wallet25.BigNumber(result.expire),
      privateReplenish: result.privateReplenish
    };
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async initialize_send(params) {
    let result = await this.send("initialize", [params.token0, params.token1]);
    return result;
  }
  async initialize_call(params) {
    let result = await this.call("initialize", [params.token0, params.token1]);
    return;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async lastGovBalance() {
    let result = await this.call("lastGovBalance");
    return new import_eth_wallet25.BigNumber(result);
  }
  async lastToken0Balance() {
    let result = await this.call("lastToken0Balance");
    return new import_eth_wallet25.BigNumber(result);
  }
  async lastToken1Balance() {
    let result = await this.call("lastToken1Balance");
    return new import_eth_wallet25.BigNumber(result);
  }
  async offers(params) {
    let result = await this.call("offers", [params.param1, import_eth_wallet25.Utils.toString(params.param2)]);
    return {
      provider: result.provider,
      amount: new import_eth_wallet25.BigNumber(result.amount),
      reserve: new import_eth_wallet25.BigNumber(result.reserve),
      lowerLimit: new import_eth_wallet25.BigNumber(result.lowerLimit),
      upperLimit: new import_eth_wallet25.BigNumber(result.upperLimit),
      startDate: new import_eth_wallet25.BigNumber(result.startDate),
      expire: new import_eth_wallet25.BigNumber(result.expire),
      privateReplenish: result.privateReplenish
    };
  }
  async oracleFactory() {
    let result = await this.call("oracleFactory");
    return result;
  }
  async protocolFeeBalance0() {
    let result = await this.call("protocolFeeBalance0");
    return new import_eth_wallet25.BigNumber(result);
  }
  async protocolFeeBalance1() {
    let result = await this.call("protocolFeeBalance1");
    return new import_eth_wallet25.BigNumber(result);
  }
  async providerOfferIndex(param1) {
    let result = await this.call("providerOfferIndex", [param1]);
    return new import_eth_wallet25.BigNumber(result);
  }
  async providerStaking(param1) {
    let result = await this.call("providerStaking", [param1]);
    return new import_eth_wallet25.BigNumber(result);
  }
  async rangeLiquidityProvider() {
    let result = await this.call("rangeLiquidityProvider");
    return result;
  }
  async redeemProtocolFee_send() {
    let result = await this.send("redeemProtocolFee");
    return result;
  }
  async redeemProtocolFee_call() {
    let result = await this.call("redeemProtocolFee");
    return;
  }
  async removeAllLiquidity_send(provider) {
    let result = await this.send("removeAllLiquidity", [provider]);
    return result;
  }
  async removeAllLiquidity_call(provider) {
    let result = await this.call("removeAllLiquidity", [provider]);
    return {
      amount0: new import_eth_wallet25.BigNumber(result.amount0),
      amount1: new import_eth_wallet25.BigNumber(result.amount1),
      staked: new import_eth_wallet25.BigNumber(result.staked)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.unstake), import_eth_wallet25.Utils.toString(params.amountOut), import_eth_wallet25.Utils.toString(params.reserveOut), import_eth_wallet25.Utils.toString(params.lowerLimit), import_eth_wallet25.Utils.toString(params.upperLimit), import_eth_wallet25.Utils.toString(params.startDate), import_eth_wallet25.Utils.toString(params.expire)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.unstake), import_eth_wallet25.Utils.toString(params.amountOut), import_eth_wallet25.Utils.toString(params.reserveOut), import_eth_wallet25.Utils.toString(params.lowerLimit), import_eth_wallet25.Utils.toString(params.upperLimit), import_eth_wallet25.Utils.toString(params.startDate), import_eth_wallet25.Utils.toString(params.expire)]);
    return;
  }
  async replenish_send(params) {
    let result = await this.send("replenish", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.amountIn)]);
    return result;
  }
  async replenish_call(params) {
    let result = await this.call("replenish", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.amountIn)]);
    return;
  }
  async scaleDirection() {
    let result = await this.call("scaleDirection");
    return result;
  }
  async scaler() {
    let result = await this.call("scaler");
    return new import_eth_wallet25.BigNumber(result);
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async stakeBalance() {
    let result = await this.call("stakeBalance");
    return new import_eth_wallet25.BigNumber(result);
  }
  async swap_send(params) {
    let result = await this.send("swap", [import_eth_wallet25.Utils.toString(params.amount0Out), import_eth_wallet25.Utils.toString(params.amount1Out), params.to, params.data]);
    return result;
  }
  async swap_call(params) {
    let result = await this.call("swap", [import_eth_wallet25.Utils.toString(params.amount0Out), import_eth_wallet25.Utils.toString(params.amount1Out), params.to, params.data]);
    return;
  }
  async sync_send() {
    let result = await this.send("sync");
    return result;
  }
  async sync_call() {
    let result = await this.call("sync");
    return;
  }
  async token0() {
    let result = await this.call("token0");
    return result;
  }
  async token1() {
    let result = await this.call("token1");
    return result;
  }
  async updateProviderOffer_send(params) {
    let result = await this.send("updateProviderOffer", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.replenishAmount), import_eth_wallet25.Utils.toString(params.lowerLimit), import_eth_wallet25.Utils.toString(params.upperLimit), import_eth_wallet25.Utils.toString(params.startDate), import_eth_wallet25.Utils.toString(params.expire), params.privateReplenish]);
    return result;
  }
  async updateProviderOffer_call(params) {
    let result = await this.call("updateProviderOffer", [params.provider, params.direction, import_eth_wallet25.Utils.toString(params.replenishAmount), import_eth_wallet25.Utils.toString(params.lowerLimit), import_eth_wallet25.Utils.toString(params.upperLimit), import_eth_wallet25.Utils.toString(params.startDate), import_eth_wallet25.Utils.toString(params.expire), params.privateReplenish]);
    return;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.initialize = Object.assign(this.initialize_send, { call: this.initialize_call });
    this.redeemProtocolFee = Object.assign(this.redeemProtocolFee_send, { call: this.redeemProtocolFee_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.replenish = Object.assign(this.replenish_send, { call: this.replenish_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.swap = Object.assign(this.swap_send, { call: this.swap_call });
    this.sync = Object.assign(this.sync_send, { call: this.sync_call });
    this.updateProviderOffer = Object.assign(this.updateProviderOffer_send, { call: this.updateProviderOffer_call });
  }
};

// src/contracts/range/OSWAP_RangePairCreator.ts
var import_eth_wallet26 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/range/OSWAP_RangePairCreator.json.ts
var OSWAP_RangePairCreator_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b506158e9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b6157f5806100bf8339019056fe610120604052600180553480156200001657600080fd5b5033606081811b6080526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493919263ea2ed2c19260048083019392829003018186803b1580156200006757600080fd5b505afa1580156200007c573d6000803e3d6000fd5b505050506040513d60608110156200009357600080fd5b5080516020808301516040938401516001600160601b0319606085901b1660c052845163b716d46360e01b8152945193975090955093506001600160a01b0386169263b716d4639260048083019392829003018186803b158015620000f757600080fd5b505afa1580156200010c573d6000803e3d6000fd5b505050506040513d60208110156200012357600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b031660a0816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff021916908315150217905550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6153766200047f60003980610ad452806112655280612206528061321552806132885280613b6152806149595250806112a552806120c452806122b25280612e5a52806138c9525080611b87525080610db852806118c15280611c7752806138195280613dc15280614b705250806117165280611d2f52806123605280612ad55280612d4552806137f5528061403752806144065280614c2852506153766000f3fe608060405234801561001057600080fd5b50600436106102765760003560e01c80637a6a5e1b11610160578063b8f7a665116100d8578063d21220a71161008c578063db13653c11610071578063db13653c14610a27578063f5ee334814610aa6578063fff6cae914610ac557610276565b8063d21220a7146109a6578063d519f64d146109ae57610276565b8063c45a0155116100bd578063c45a01551461092f578063c7f7fb9014610937578063d1b876cb1461093f57610276565b8063b8f7a6651461090b578063bebf7a611461092757610276565b806393bc9dfe1161012f578063a26651e711610114578063a26651e714610826578063a27c17f1146108aa578063b2901aa31461090357610276565b806393bc9dfe146108165780639749d2131461081e57610276565b80637a6a5e1b1461073857806380dffd7e1461076b578063835daf6c146107cd57806388952339146107d557610276565b8063485cc955116101f357806361bc221a116101c25780636b4afee1116101a75780636b4afee1146106ca5780636d813c3c146106d25780636fec7dd71461070557610276565b806361bc221a14610630578063685639a91461063857610276565b8063485cc955146105dd578063577e6d08146106185780635a6af09d146106205780635aa6e6751461062857610276565b80632c6ced381161024a5780633c1e6ff51161022f5780633c1e6ff5146104215780633c6d5c72146104295780633d0d81d61461044a57610276565b80632c6ced38146103755780633b19103b1461037d57610276565b8062113e081461027b578063022c0d9f146102a157806305268cff1461033c5780630dfe16811461036d575b600080fd5b610283610acd565b60408051938452602084019290925282820152519081900360600190f35b61033a600480360360808110156102b757600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff60408301351691908101906080810160608201356401000000008111156102fb57600080fd5b82018360208201111561030d57600080fd5b8035906020019184600183028401116401000000008311171561032f57600080fd5b509092509050610ce1565b005b610344611263565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610344611287565b6103446112a3565b61040f6004803603606081101561039357600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516916020810135918101906060810160408201356401000000008111156103d057600080fd5b8201836020820111156103e257600080fd5b8035906020019184600183028401116401000000008311171561040457600080fd5b5090925090506112c7565b60408051918252519081900360200190f35b61040f61136e565b610431611374565b6040805192835260208301919091528051918290030190f35b6104756004803603606081101561046057600080fd5b5080351515906020810135906040013561137e565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b838110156104c55781810151838201526020016104ad565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156105045781810151838201526020016104ec565b50505050905001868103845289818151815260200191508051906020019060200280838360005b8381101561054357818101518382015260200161052b565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561058257818101518382015260200161056a565b50505050905001868103825287818151815260200191508051906020019060200280838360005b838110156105c15781810151838201526020016105a9565b505050509050019a505050505050505050505060405180910390f35b61033a600480360360408110156105f357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166116fe565b61040f611b79565b61040f611b7f565b610344611b85565b61040f611ba9565b61040f6004803603606081101561064e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169160208101359181019060608101604082013564010000000081111561068b57600080fd5b82018360208201111561069d57600080fd5b803590602001918460018302840111640100000000831117156106bf57600080fd5b509092509050611baf565b61040f612007565b61040f600480360360208110156106e857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661200d565b61040f6004803603602081101561071b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661201f565b6102836004803603602081101561074e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612031565b61033a600480360361010081101561078257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e00135151561229a565b61040f6127dd565b61033a600480360360608110156107eb57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604001356127e3565b61040f612a52565b61033a612a58565b6108616004803603604081101561083c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515612bd3565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e0840152151561010083015251908190036101200190f35b61040f600480360360e08110156108c057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c00135612cc8565b61040f6137c3565b6109136137c9565b604080519115158252519081900360200190f35b6109136137d2565b6103446137f3565b610344613817565b61033a600480360361012081101561095657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a08101359060c08101359060e081013590610100013561383b565b610344613d4b565b61040f600480360360408110156109c457600080fd5b8135151591908101906040810160208201356401000000008111156109e857600080fd5b8201836020820111156109fa57600080fd5b80359060200191846001830284011164010000000083111715610a1c57600080fd5b509092509050613d67565b610a4c60048036036040811015610a3d57600080fd5b50803515159060200135613fa6565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689526020890197909752878701959095526060870193909352608086019190915260a085015260c0840152151560e083015251908190036101000190f35b61033a60048036036020811015610abc57600080fd5b5035151561401f565b61033a6140f4565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b6f57600080fd5b505afa158015610b83573d6000803e3d6000fd5b505050506040513d6020811015610b9957600080fd5b5051600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610c0c57600080fd5b505afa158015610c20573d6000803e3d6000fd5b505050506040513d6020811015610c3657600080fd5b5051600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b505191945092509050909192565b600154600114610d5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553233148015610d6c5750610d6a33614178565b155b80610e2d5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015610e0057600080fd5b505af1158015610e14573d6000803e3d6000fd5b505050506040513d6020811015610e2a57600080fd5b50515b610e9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6f742066726f6d2075736572206f722077686974656c697374656400000000604482015290519081900360640190fd5b60005460ff16610f0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600a54600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093610fbe93909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d6020811015610fb057600080fd5b50519063ffffffff61417e16565b600b54600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905193945060009361103a939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015610f8657600080fd5b90506000808815801561104c57508715155b156111125761105f8760018689896141c9565b9092509050878210156110d357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6007546110f79073ffffffffffffffffffffffffffffffffffffffff168884614699565b600c5461110a908263ffffffff61489f16565b600c5561124c565b881580159061111f575087155b156111e5576111328760008589896141c9565b9092509050888210156111a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6006546111ca9073ffffffffffffffffffffffffffffffffffffffff168884614699565b600d546111dd908263ffffffff61489f16565b600d5561124c565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b611254614913565b50506001805550505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080841161133757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6006546113619073ffffffffffffffffffffffffffffffffffffffff878116911614858585614b10565b5091979650505050505050565b60085481565b600a54600b549091565b606080606080606060025487116116c85760025486111561139f5760025495505b60006113c2886113b689600163ffffffff61489f16565b9063ffffffff61417e16565b90508067ffffffffffffffff811180156113db57600080fd5b50604051908082528060200260200182016040528015611405578160200160208202803683370190505b5095508060020267ffffffffffffffff8111801561142257600080fd5b5060405190808252806020026020018201604052801561144c578160200160208202803683370190505b5094508060020267ffffffffffffffff8111801561146957600080fd5b50604051908082528060200260200182016040528015611493578160200160208202803683370190505b5093508060020267ffffffffffffffff811180156114b057600080fd5b506040519080825280602002602001820160405280156114da578160200160208202803683370190505b5092508067ffffffffffffffff811180156114f457600080fd5b5060405190808252806020026020018201604052801561151e578160200160208202803683370190505b50915060005b818110156116c157600061153e828463ffffffff61489f16565b8b1515600090815260036020526040812091925090611563848d63ffffffff61489f16565b8154811061156d57fe5b6000918252602090912060089091020180548a5191925073ffffffffffffffffffffffffffffffffffffffff16908a90859081106115a757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548884815181106115f257fe5b602002602001018181525050806002015488838151811061160f57fe5b602002602001018181525050806003015487848151811061162c57fe5b602002602001018181525050806004015487838151811061164957fe5b602002602001018181525050806005015486848151811061166657fe5b602002602001018181525050806006015486838151811061168357fe5b60209081029190910101526007810154855160ff909116908690859081106116a757fe5b911515602092830291909101909101525050600101611524565b50506116f3565b5050604080516000808252602082018181528284019182526060830190935290945090925082915081905b939792965093509350565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146117a257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600780548583169316929092179182905590811691161061186957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600654600754604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c03916044808301926020929190829003018186803b15801561190757600080fd5b505afa15801561191b573d6000803e3d6000fd5b505050506040513d602081101561193157600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166119b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600654604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b158015611a2257600080fd5b505afa158015611a36573d6000803e3d6000fd5b505050506040513d6020811015611a4c57600080fd5b5051600754604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b158015611abf57600080fd5b505afa158015611ad3573d6000803e3d6000fd5b505050506040513d6020811015611ae957600080fd5b5051905060ff8281169082161415611b05576001600855611b72565b600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff84811684821611740100000000000000000000000000000000000000009081029290921792839055910416611b6457808203611b68565b8181035b60ff16600a0a6008555b5050505050565b600d5481565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b6000808411611c1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916395277f39916044808301926020929190829003018186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916342032856916004808301926020929190829003018186803b158015611d7557600080fd5b505afa158015611d89573d6000803e3d6000fd5b505050506040513d6020811015611d9f57600080fd5b505160075490915073ffffffffffffffffffffffffffffffffffffffff888116911614600081611de75760075473ffffffffffffffffffffffffffffffffffffffff16611e01565b60065473ffffffffffffffffffffffffffffffffffffffff165b90506000808573ffffffffffffffffffffffffffffffffffffffff1663d9da4fe6848d60008e8e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015611efb57600080fd5b505afa158015611f0f573d6000803e3d6000fd5b505050506040513d6040811015611f2557600080fd5b5080516020909101519092509050611f438a8263ffffffff614f1516565b965060016008541115611f9b57600760149054906101000a900460ff1615158415151415611f8457600854611f7f90889063ffffffff614f8816565b611f98565b600854611f9890889063ffffffff614f1516565b96505b611fbc6001611fb0898563ffffffff614f8816565b9063ffffffff61489f16565b9650611ff86001611fb0611fd9620186a08963ffffffff61417e16565b611fec8b620186a063ffffffff614f1516565b9063ffffffff614f8816565b9b9a5050505050505050505050565b600b5481565b60046020526000908152604090205481565b60056020526000908152604090205481565b60008060006001546001146120a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061210557503373ffffffffffffffffffffffffffffffffffffffff8516145b61217057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b600061217d856000614fca565b9094509050612192848263ffffffff61489f16565b935060006121a1866001614fca565b90945090506121b6848263ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260056020526040812080549190559094509250821561222c57600e546121fe908463ffffffff61417e16565b600e5561222c7f00000000000000000000000000000000000000000000000000000000000000003385614699565b6040805184815260208101879052808201869052905173ffffffffffffffffffffffffffffffffffffffff8816917f3f9e361045fcac63ab779647d804207abc088499d6bc0e6983675cb509130647919081900360600190a261228d614913565b5050600180559193909250565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806122f357503373ffffffffffffffffffffffffffffffffffffffff8916145b61235e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505050506040513d60208110156123f057600080fd5b505161245d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166124ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561253d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156125ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821161261a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040902054806126ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b87151560009081526003602052604081208054839081106126c957fe5b906000526020600020906008020190506126f088826001015461489f90919063ffffffff16565b6001820155600281015461270a908963ffffffff61417e16565b60028201819055600382018890556004820187905560058201869055600682018590556007820180548515157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091556001830154604080518c8152602081019290925281810193909352606081018a90526080810189905260a0810188905260c0810187905260e081019190915290518a15159133917f9766c42cdf43f771566bbf4c8146febf4292a400b0aea37b03f838f4523cc5b7918190036101000190a350505050505050505050565b600c5481565b60015460011461285457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905573ffffffffffffffffffffffffffffffffffffffff8416815260046020526040902054806128ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50726f7669646572206e6f7420666f756e640000000000000000000000000000604482015290519081900360640190fd5b821515600090815260036020526040812080548390811061290757fe5b60009182526020909120600890910201600781015490915060ff161580612943575073ffffffffffffffffffffffffffffffffffffffff851633145b6129ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b60018101546129c3908463ffffffff61489f16565b600182015560028101546129dd908463ffffffff61417e16565b6002820181905560018201546040805186815260208101929092528181019290925290518515159173ffffffffffffffffffffffffffffffffffffffff8816917f5d29877443ff1bf07abe0c891fe18d5ab9f14dab242f13ff6482995763473ed29181900360600190a3505060018055505050565b600e5481565b600154600114612ac957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b815260040160206040518083038186803b158015612b3957600080fd5b505afa158015612b4d573d6000803e3d6000fd5b505050506040513d6020811015612b6357600080fd5b5051600654600c54919250612b929173ffffffffffffffffffffffffffffffffffffffff909116908390614699565b600754600d54612bba9173ffffffffffffffffffffffffffffffffffffffff16908390614699565b6000600c819055600d55612bcc614913565b5060018055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600460209081526040808320548415158452600390925282208054919291829182918291829182918291829182918b908110612c2757fe5b9060005260206000209060080201905089600560008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548260010154836002015484600301548560040154866005015487600601548860070160009054906101000a900460ff16995099509950995099509950995099509950509295985092959850929598565b6000600154600114612d3b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612dab57600080fd5b505af1158015612dbf573d6000803e3d6000fd5b505050506040513d6020811015612dd557600080fd5b5051612e4257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480612e9b57503373ffffffffffffffffffffffffffffffffffffffff8916145b612f0657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60005460ff16612f7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8816612ff957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e756c6c20616464726573730000000000000000000000000000000000000000604482015290519081900360640190fd5b8385111561306857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206c696d697400000000000000000000000000000000000000604482015290519081900360640190fd5b828210156130d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b4282101561314657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b600080600080613154610acd565b925092509250896131706009548561417e90919063ffffffff16565b10156131dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c696420666565496e00000000000000000000000000000000000000604482015290519081900360640190fd5b600e546131f0908b63ffffffff61489f16565b600e558a1561326c57600b5461320d90829063ffffffff61417e16565b6007549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561326757613264848b63ffffffff61417e16565b93505b6132da565b600a5461328090839063ffffffff61417e16565b6006549094507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156132da576132d7848b63ffffffff61417e16565b93505b600992909255600a55600b5573ffffffffffffffffffffffffffffffffffffffff891660009081526005602052604090205461331c908863ffffffff61489f16565b73ffffffffffffffffffffffffffffffffffffffff8a1660009081526005602090815260408083208490556004909152812054935083156133c657891515600090815260036020526040812080548690811061337457fe5b9060005260206000209060080201905061339b84826001015461489f90919063ffffffff16565b60018201819055600382018a9055600482018990556005820188905560069091018690559050613731565b600280546001019081905573ffffffffffffffffffffffffffffffffffffffff8c16600090815260046020526040902081905593508261346757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b600360008b1515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600081526020018a815260200189815260200188815260200187815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055505050600360008b151515151581526020019081526020016000206040518061010001604052808d73ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160011515815250908060018154018082558091505060019003906000526020600020906008020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff02191690831515021790555050508290508a73ffffffffffffffffffffffffffffffffffffffff167f39944be52180e3811405a754586ce476cd9d34d40e98835c2b4c77eb26426b5b856040518082815260200191505060405180910390a25b604080518a81526020810185905280820184905260608101839052608081018a905260a0810189905260c0810188905260e0810187905290518b15159173ffffffffffffffffffffffffffffffffffffffff8e16917ff77a3e29f24e88e282a2943ad511115dde07d25e5bade15adde6fcbed4c1b206918190036101000190a350506001805550979650505050505050565b60095481565b60005460ff1681565b60075474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001146138ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061390a57503373ffffffffffffffffffffffffffffffffffffffff8a16145b61397557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b818110156139e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b428111613a5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff891660009081526004602052604090205480613ae457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b8715613b875773ffffffffffffffffffffffffffffffffffffffff8a16600090815260056020526040902054613b20908963ffffffff61417e16565b73ffffffffffffffffffffffffffffffffffffffff8b16600090815260056020526040902055600e54613b59908963ffffffff61417e16565b600e55613b877f0000000000000000000000000000000000000000000000000000000000000000338a614699565b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600560209081526040808320548c1515845260039092528220805491929184908110613bcb57fe5b90600052602060002090600802019050613bf289826001015461417e90919063ffffffff16565b60018201556002810154613c0c908963ffffffff61417e16565b60028201556003810187905560048101869055600581018590556006810184905588151580613c3b5750600088115b15613c9657613c968b613c665760065473ffffffffffffffffffffffffffffffffffffffff16613c80565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c918c8c63ffffffff61489f16565b614699565b60018101546002820154604080518d8152602081018d90528082018c905260608101869052608081019390935260a083019190915260c0820189905260e0820188905261010082018790526101208201869052518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f1f61f8b18e403ca0f2ba9c3ff8bda4d01f0fc5d33ae806841d02dde927728132918190036101400190a3613d39614913565b50506001805550505050505050505050565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015613e0a57600080fd5b505afa158015613e1e573d6000803e3d6000fd5b505050506040513d6020811015613e3457600080fd5b5051905060008086613e655760075460065473ffffffffffffffffffffffffffffffffffffffff9182169116613e86565b60065460075473ffffffffffffffffffffffffffffffffffffffff91821691165b915091508273ffffffffffffffffffffffffffffffffffffffff1663495e4348838389896040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015613f6f57600080fd5b505afa158015613f83573d6000803e3d6000fd5b505050506040513d6020811015613f9957600080fd5b5051979650505050505050565b60036020528160005260406000208181548110613fbf57fe5b60009182526020909120600890910201805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff90961698509396509194909391929160ff1688565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146140c357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461416557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155614172614913565b60018055565b3b151590565b60006141c083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615101565b90505b92915050565b6000806000806000606060006141df60846151b2565b90925090506141fa8b8b6141f58b85818f6152f7565b614b10565b5091985090965094508592506142189050898363ffffffff61417e16565b9250858a60005b60008311801561422f5750835181105b156145b15760025484828151811061424357fe5b602002602001015111156142b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812085518690849081106142d757fe5b6020026020010151815481106142e957fe5b9060005260206000209060080201905087816003015411158015614311575080600401548811155b8061432b5750600381015415801561432b57506004810154155b801561433b575080600501544210155b801561434b575080600601544211155b156145a85760018101546000908181871061438257614370878363ffffffff61417e16565b965060008460010181905590506143a8565b600184015487925061439a908363ffffffff61417e16565b846001018190559050600096505b835473ffffffffffffffffffffffffffffffffffffffff9081166000908152600560209081526040918290205482517fed3b638c000000000000000000000000000000000000000000000000000000008152600481019190915291517f00000000000000000000000000000000000000000000000000000000000000009093169263ed3b638c926024808201939291829003018186803b15801561444b57600080fd5b505afa15801561445f573d6000803e3d6000fd5b505050506040513d602081101561447557600080fd5b505192506144af61448f8e620186a063ffffffff614f1516565b611fec856144a38d8763ffffffff614f1516565b9063ffffffff614f1516565b92506144c18c8463ffffffff61417e16565b9b506144db83611fb08f611fec8e8763ffffffff614f1516565b861560009081526003602052604090208951919450908990879081106144fd57fe5b60200260200101518154811061450f57fe5b9060005260206000209060080201935061453683856002015461489f90919063ffffffff16565b60028501819055845460408051858152602081018790528082018590526060810193909352518815159273ffffffffffffffffffffffffffffffffffffffff909216917f5a4c914458527a84b907dc0c2c69173c8d117acce38a2b58e316cdad2d3c6c22919081900360800190a35050505b5060010161421f565b5050801561462057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b60408051868152602081018c9052808201899052606081018590526080810188905290518c15159173ffffffffffffffffffffffffffffffffffffffff8f16917f0148b571d5049091b679cb2ccda30fb06d3aecaef641a0515a317498893d7da39181900360a00190a350505050509550959350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b6020831061479f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614762565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614801576040519150601f19603f3d011682016040523d82523d6000602084013e614806565b606091505b5091509150818015614834575080511580614834575080806020019051602081101561483157600080fd5b50515b611b7257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b6000828201838110156141c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b15801561499f57600080fd5b505afa1580156149b3573d6000803e3d6000fd5b505050506040513d60208110156149c957600080fd5b5051600955600654604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614a3f57600080fd5b505afa158015614a53573d6000803e3d6000fd5b505050506040513d6020811015614a6957600080fd5b5051600a55600754604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015614adf57600080fd5b505afa158015614af3573d6000803e3d6000fd5b505050506040513d6020811015614b0957600080fd5b5051600b55565b600654600754604080517f95277f3900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015291831660248301525160009283928392839283927f0000000000000000000000000000000000000000000000000000000000000000909116916395277f3991604480820192602092909190829003018186803b158015614bb957600080fd5b505afa158015614bcd573d6000803e3d6000fd5b505050506040513d6020811015614be357600080fd5b5051604080517f42032856000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691634203285691600480820192602092909190829003018186803b158015614c6f57600080fd5b505afa158015614c83573d6000803e3d6000fd5b505050506040513d6020811015614c9957600080fd5b50519150614cb4620186a0611fec8a8563ffffffff614f1516565b9250614cc6888463ffffffff61417e16565b97506000808273ffffffffffffffffffffffffffffffffffffffff1663d9da4fe68c614d0a5760075473ffffffffffffffffffffffffffffffffffffffff16614d24565b60065473ffffffffffffffffffffffffffffffffffffffff165b8d614d475760065473ffffffffffffffffffffffffffffffffffffffff16614d61565b60075473ffffffffffffffffffffffffffffffffffffffff165b8d60008e8e6040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050604080518083038186803b158015614e3857600080fd5b505afa158015614e4c573d6000803e3d6000fd5b505050506040513d6040811015614e6257600080fd5b5080516020909101519092509050614e808a8363ffffffff614f1516565b965060016008541115614ed757600760149054906101000a900460ff1615158b151514614ec057600854614ebb90889063ffffffff614f8816565b614ed4565b600854614ed490889063ffffffff614f1516565b96505b614ee7878263ffffffff614f8816565b9650614f0581611fec84670de0b6b3a764000063ffffffff614f1516565b9550505050945094509450949050565b600082614f24575060006141c3565b82820282848281614f3157fe5b04146141c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153206021913960400191505060405180910390fd5b60006141c083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615278565b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205481908061505e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b831515600090815260036020526040812080548390811061507b57fe5b60009182526020822060016008909202019081018054600283018054928590559390935591955090935090506150f8856150cd5760065473ffffffffffffffffffffffffffffffffffffffff166150e7565b60075473ffffffffffffffffffffffffffffffffffffffff165b33613c91878763ffffffff61489f16565b50509250929050565b600081848411156151aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561516f578181015183820152602001615157565b50505050905090810190601f16801561519c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b606060006151c783604063ffffffff61489f16565b36101561523557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208301356020810280604086010136101561525057600080fd5b6040516020820181016040528281528160408701602083013795602091909101945092505050565b600081836152e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181815283516024840152835190928392604490910191908501908083836000831561516f578181015183820152602001615157565b5060008385816152ed57fe5b0495945050505050565b60008085851115615306578182fd5b83861115615312578182fd5b505082019391909203915056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202cd544383ecb72494d542775e93dcf375c6d972bf29ecedc786d171b78792eeb64736f6c634300060b0033a26469706673582212206a7fa57f8356cd6d37c4665c4ca64b463160c61a890d216d04ddd69f7a715a5c64736f6c634300060b0033"
};

// src/contracts/range/OSWAP_RangePairCreator.ts
var OSWAP_RangePairCreator = class extends import_eth_wallet26.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RangePairCreator_json_default.abi, OSWAP_RangePairCreator_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  async createPair_send(salt) {
    let result = await this.send("createPair", [import_eth_wallet26.Utils.stringToBytes32(salt)]);
    return result;
  }
  async createPair_call(salt) {
    let result = await this.call("createPair", [import_eth_wallet26.Utils.stringToBytes32(salt)]);
    return result;
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
  }
};

// src/contracts/range/OSWAP_VotingExecutor3.ts
var import_eth_wallet27 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/range/OSWAP_VotingExecutor3.json.ts
var OSWAP_VotingExecutor3_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_hybridRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "hybridRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60e060405234801561001057600080fd5b50604051610b99380380610b998339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606084811b821660a05283811b821660805282901b1660c0526001600160a01b039182169282169116610ae06100b96000398061012a52806108f5525080610412528061055a528061065d528061071452806107fa5280610a8852508061010652806101925250610ae06000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780635c10cd27146100825780638af7c6491461008a578063c45a0155146100fc575b600080fd5b610059610104565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610059610128565b6100fa600480360360208110156100a057600080fd5b8101906020810181356401000000008111156100bb57600080fd5b8201836020820111156100cd57600080fd5b803590602001918460208302840111640100000000831117156100ef57600080fd5b50909250905061014c565b005b610059610a86565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b15866e6916024808301926020929190829003018186803b1580156101d857600080fd5b505afa1580156101ec573d6000803e3d6000fd5b505050506040513d602081101561020257600080fd5b505161026f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600181116102de57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b6000828260008181106102ed57fe5b90506020020135905060008383600181811061030557fe5b905060200201359050817f73657450726f746f636f6c4665650000000000000000000000000000000000001415610527577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830160028106156103c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b60028104905060608060208302604051602082018101604052848152816064602083013780935060405190506020820181016040528481528182606401602083013780925050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635021804883836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156104a1578181015183820152602001610489565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104e05781810151838201526020016104c8565b50505050905001945050505050600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b50505050505050610a80565b60028314156107c757817f736574547261646546656500000000000000000000000000000000000000000014156105eb577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663106030238260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156105ce57600080fd5b505af11580156105e2573d6000803e3d6000fd5b505050506107c2565b817f73657450726f746f636f6c466565546f0000000000000000000000000000000014156106a457604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606083901c6004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e0e6799f91602480830192600092919082900301818387803b1580156105ce57600080fd5b817f7365744c69766500000000000000000000000000000000000000000000000000141561075b57604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163f5ee334891602480830192600092919082900301818387803b1580156105ce57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b610a80565b60038314156108c257817f7365744c697665466f7250616972000000000000000000000000000000000000141561075b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636883618a8260601c8686600281811061084557fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b1580156105ce57600080fd5b6006831415610a1957817f726567697374657250726f746f636f6c00000000000000000000000000000000141561075b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639c5eda84828686600281811061093d57fe5b9050602002013560601c8787600381811061095457fe5b9050602002013560001c8888600481811061096b57fe5b9050602002013560001c8989600581811061098257fe5b9050602002013560001c6040518663ffffffff1660e01b815260040180866bffffffffffffffffffffffff191681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200195505050505050600060405180830381600087803b1580156105ce57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212203f29b6b568098d65d4271646bb7fd6a4c2e8c71c063bf8a4dd9e2d7693979f4a64736f6c634300060b0033"
};

// src/contracts/range/OSWAP_VotingExecutor3.ts
var OSWAP_VotingExecutor3 = class extends import_eth_wallet27.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingExecutor3_json_default.abi, OSWAP_VotingExecutor3_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.factory, params.hybridRegistry);
  }
  async execute_send(params) {
    let result = await this.send("execute", [import_eth_wallet27.Utils.stringToBytes32(params)]);
    return result;
  }
  async execute_call(params) {
    let result = await this.call("execute", [import_eth_wallet27.Utils.stringToBytes32(params)]);
    return;
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async hybridRegistry() {
    let result = await this.call("hybridRegistry");
    return result;
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
  }
};

// src/contracts/restricted/OSWAP_ConfigStore.ts
var import_eth_wallet28 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_ConfigStore.json.ts
var OSWAP_ConfigStore_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "customParam", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "customParamNames", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "customParamNamesIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "customParamNamesLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "internalType": "bytes32", "name": "paramValue", "type": "bytes32" }], "name": "setCustomParam", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "paramName", "type": "bytes32[]" }, { "internalType": "bytes32[]", "name": "paramValue", "type": "bytes32[]" }], "name": "setMultiCustomParam", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60a060405234801561001057600080fd5b506040516106f43803806106f48339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661068361007160003980610251528061033e52806103a652506106836000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806395a57b1c1161005b57806395a57b1c1461019a578063bc14128f146101b4578063f28ea8fe146101d1578063f4a58b19146101ee5761007d565b80635332c414146100825780635aa6e675146100a75780637e9d2c31146100d8575b600080fd5b6100a56004803603604081101561009857600080fd5b508035906020013561020b565b005b6100af61033c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100a5600480360360408110156100ee57600080fd5b81019060208101813564010000000081111561010957600080fd5b82018360208201111561011b57600080fd5b8035906020019184602083028401116401000000008311171561013d57600080fd5b91939092909160208101903564010000000081111561015b57600080fd5b82018360208201111561016d57600080fd5b8035906020019184602083028401116401000000008311171561018f57600080fd5b509092509050610360565b6101a261053b565b60408051918252519081900360200190f35b6101a2600480360360208110156101ca57600080fd5b5035610541565b6101a2600480360360208110156101e757600080fd5b5035610553565b6101a26004803603602081101561020457600080fd5b5035610565565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561029757600080fd5b505afa1580156102ab573d6000803e3d6000fd5b505050506040513d60208110156102c157600080fd5b505161032e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6103388282610583565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d602081101561041657600080fd5b505161048357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b828181146104f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b60005b818110156105335761052b86868381811061050c57fe5b9050602002013585858481811061051f57fe5b90506020020135610583565b6001016104f5565b505050505050565b60015490565b60006020819052908152604090205481565b60026020526000908152604090205481565b6001818154811061057257fe5b600091825260209091200154905081565b600082815260208190526040902081905560015415806105ca57506000828152600260205260409020546001805484929081106105bc57fe5b906000526020600020015414155b15610613576001805460008481526002602052604081208290558183018355919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018290555b60408051828152905183917f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509919081900360200190a2505056fea2646970667358221220e9474db5abfeff54aca5cd1e7175987c5f3951450c1bbeacc0dc8da4150be36364736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_ConfigStore.ts
var OSWAP_ConfigStore = class extends import_eth_wallet28.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ConfigStore_json_default.abi, OSWAP_ConfigStore_json_default.bytecode);
    this.assign();
  }
  deploy(governance) {
    return this._deploy(governance);
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  async customParam(param1) {
    let result = await this.call("customParam", [import_eth_wallet28.Utils.stringToBytes32(param1)]);
    return result;
  }
  async customParamNames(param1) {
    let result = await this.call("customParamNames", [import_eth_wallet28.Utils.toString(param1)]);
    return result;
  }
  async customParamNamesIdx(param1) {
    let result = await this.call("customParamNamesIdx", [import_eth_wallet28.Utils.stringToBytes32(param1)]);
    return new import_eth_wallet28.BigNumber(result);
  }
  async customParamNamesLength() {
    let result = await this.call("customParamNamesLength");
    return new import_eth_wallet28.BigNumber(result);
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async setCustomParam_send(params) {
    let result = await this.send("setCustomParam", [import_eth_wallet28.Utils.stringToBytes32(params.paramName), import_eth_wallet28.Utils.stringToBytes32(params.paramValue)]);
    return result;
  }
  async setCustomParam_call(params) {
    let result = await this.call("setCustomParam", [import_eth_wallet28.Utils.stringToBytes32(params.paramName), import_eth_wallet28.Utils.stringToBytes32(params.paramValue)]);
    return;
  }
  async setMultiCustomParam_send(params) {
    let result = await this.send("setMultiCustomParam", [import_eth_wallet28.Utils.stringToBytes32(params.paramName), import_eth_wallet28.Utils.stringToBytes32(params.paramValue)]);
    return result;
  }
  async setMultiCustomParam_call(params) {
    let result = await this.call("setMultiCustomParam", [import_eth_wallet28.Utils.stringToBytes32(params.paramName), import_eth_wallet28.Utils.stringToBytes32(params.paramValue)]);
    return;
  }
  assign() {
    this.setCustomParam = Object.assign(this.setCustomParam_send, { call: this.setCustomParam_call });
    this.setMultiCustomParam = Object.assign(this.setMultiCustomParam_send, { call: this.setMultiCustomParam_call });
  }
};

// src/contracts/restricted/OSWAP_RestrictedFactory.ts
var import_eth_wallet29 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_RestrictedFactory.json.ts
var OSWAP_RestrictedFactory_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_whitelistFactory", "type": "address" }, { "internalType": "address", "name": "_pairCreator", "type": "address" }, { "internalType": "address", "name": "_configStore", "type": "address" }, { "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "oracle", "type": "address" }], "name": "OracleAdded", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": true, "internalType": "address", "name": "token1", "type": "address" }, { "indexed": false, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "newPairSize", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newSize", "type": "uint256" }], "name": "PairCreated", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairRestarted", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }], "name": "PairShutdowned", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Restarted", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Shutdowned", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "addOldOracleToNewPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "allPairs", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allPairsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracle", "outputs": [{ "internalType": "address", "name": "oracle", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "checkAndGetOracleSwapParams", "outputs": [{ "internalType": "address", "name": "oracle_", "type": "address" }, { "internalType": "uint256", "name": "tradeFee_", "type": "uint256" }, { "internalType": "uint256", "name": "protocolFee_", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "getCreateAddresses", "outputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_whitelistFactory", "type": "address" }, { "internalType": "address", "name": "_restrictedLiquidityProvider", "type": "address" }, { "internalType": "address", "name": "_configStore", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "getPair", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_restrictedLiquidityProvider", "type": "address" }], "name": "init", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isOracle", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "name": "isPair", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "oracles", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "pairCreator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pairIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "pairLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "bool", "name": "live", "type": "bool" }], "name": "setLiveForPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "setOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFeeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_tradeFee", "type": "uint256" }], "name": "setTradeFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "tradeFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "61010060405234801561001157600080fd5b5060405162002a2b38038062002a2b833981810160405260e081101561003657600080fd5b5080516020820151604083015160608085015160808087015160a088015160c0909801519387901b6001600160601b03191690915260008054600160ff19909116178155959694959394919390929061008d610136565b60008054610100600160a81b0319166101006001600160a01b038416908102919091178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350606095861b6001600160601b031990811660a05294861b851660c0529290941b90921660e052600191909155600291909155600380546001600160a01b0319166001600160a01b039092169190911790555061013a565b3390565b60805160601c60a05160601c60c05160601c60e05160601c612873620001b8600039806114685280611f815250806114b0528061172f525080611f485280611fc15250806107e85280610ca25280610d2c5280610e1f528061114f5280611cf65280611f2652806121955280612288528061245f52506128736000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806395277f391161010f578063e5d36ff6116100a2578063f060d13911610071578063f060d13914610666578063f2fde38b1461066e578063f5ee3348146106a1578063fd3206d2146106c0576101f0565b8063e5d36ff6146105da578063e5e31b13146105e2578063ea2ed2c114610615578063ef3692521461065e576101f0565b8063b8f7a665116100de578063b8f7a6651461055c578063c538b5d614610564578063c9c653961461056c578063e0e6799f146105a7576101f0565b806395277f39146104ca5780639d69dc4e14610505578063a97e5c931461050d578063b0e21e8a14610554576101f0565b806352a03c03116101875780636883618a116101565780636883618a14610462578063715018a61461049d578063787dce3d146104a55780638da5cb5b146104c2576101f0565b806352a03c03146103d4578063574f2ba31461040f5780635aa6e675146104175780635eced4801461041f576101f0565b80631e3dd18b116101c35780631e3dd18b146102fc5780631ee85fd21461034257806324bcdfbd14610387578063399762471461038f576101f0565b8063069d188f146101f55780630c1445811461026557806310603023146102ac57806319ab453c146102c9575b600080fd5b6102306004803603604081101561020b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166106fb565b6040805173ffffffffffffffffffffffffffffffffffffffff9094168452602084019290925282820152519081900360600190f35b6102aa6004803603606081101561027b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610792565b005b6102aa600480360360208110156102c257600080fd5b50356107a2565b6102aa600480360360208110156102df57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661099a565b6103196004803603602081101561031257600080fd5b5035610ae6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6103756004803603602081101561035857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b1a565b60408051918252519081900360200190f35b610375610b2c565b6102aa600480360360608110156103a557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610b32565b610319600480360360408110156103ea57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610c67565b610375610c9a565b610319610ca0565b6103196004803603606081101561043557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610cc4565b6102aa6004803603604081101561047857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515610d13565b6102aa611000565b6102aa600480360360208110156104bb57600080fd5b5035611109565b610319611301565b610319600480360360408110156104e057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516611322565b610319611466565b6105406004803603602081101561052357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661148a565b604080519115158252519081900360200190f35b61037561149f565b6105406114a5565b6103196114ae565b6103196004803603604081101561058257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166114d2565b6102aa600480360360208110156105bd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cb0565b610319611e98565b610540600480360360208110156105f857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611eb4565b61061d611f21565b6040805173ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841683830152909216606082015290519081900360800190f35b610319611fa3565b610319611fbf565b6102aa6004803603602081101561068457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611fe3565b6102aa600480360360208110156106b757600080fd5b5035151561217c565b610375600480360360408110156106d657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166123e1565b600080548190819060ff1661077157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b600061077d8686611322565b60015460025491955093509150509250925092565b61079d838383612419565b505050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561082e57600080fd5b505afa158015610842573d6000803e3d6000fd5b505050506040513d602081101561085857600080fd5b50516108c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a081111561093757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f494e56414c49445f54524144455f464545000000000000000000000000000000604482015290519081900360640190fd5b6001819055604080517f747261646546656500000000000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b6109a26127cb565b600054610100900473ffffffffffffffffffffffffffffffffffffffff908116911614610a3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60075473ffffffffffffffffffffffffffffffffffffffff1615610a9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806128176027913960400191505060405180910390fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60068181548110610af357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60056020526000908152604090205481565b60015481565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260086020908152604080832086851684529091529020541615610bd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6f7261636c6520616c7265616479207365740000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526009602052604090205460ff1661079257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6f7261636c65206e6f74207365656e0000000000000000000000000000000000604482015290519081900360640190fd5b600860209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b60065490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528260005260406000206020528160005260406000208181548110610ce957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9057600080fd5b505afa158015610da4573d6000803e3d6000fd5b505050506040513d6020811015610dba57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff161480610e925750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015610e6557600080fd5b505afa158015610e79573d6000803e3d6000fd5b505050506040513d6020811015610e8f57600080fd5b50515b610ee7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806127f66021913960400191505060405180910390fd5b604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff84169163f5ee334891602480830192600092919082900301818387803b158015610f5657600080fd5b505af1158015610f6a573d6000803e3d6000fd5b505050508015610fba5760405173ffffffffffffffffffffffffffffffffffffffff8316907fc96ebf6dcdf5c5e56ad8961009b9d49aa6f2d53d5ffe374048f1d603e3b2908a90600090a2610ffc565b60405173ffffffffffffffffffffffffffffffffffffffff8316907f7dc5983a5f99179c76b5bbff56fcf9e8373f1a7078dcef4537a5176b333c2bfe90600090a25b5050565b6110086127cb565b600054610100900473ffffffffffffffffffffffffffffffffffffffff90811691161461109657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405161010090910473ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffff0000000000000000000000000000000000000000ff169055565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b505161122c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b620186a081111561129e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f50524f544f434f4c5f464545000000000000000000000000604482015290519081900360640190fd5b6002819055604080517f70726f746f636f6c46656500000000000000000000000000000000000000000081526020810183905281517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509929181900390910190a150565b600054610100900473ffffffffffffffffffffffffffffffffffffffff1690565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106113be57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f41646472657373206d75737420626520736f7274656400000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff80831660009081526008602090815260408083208585168452909152902054168061146057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60096020526000908152604090205460ff1681565b60025481565b60005460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561156f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16106115ac5783856115af565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff821661163657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600460209081526040808320848616845282528083205481517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606089811b82168387015288811b909116603483015260488083019390935283518083039093018352606882018452825192850192909220608c8083018290528451808403909101815260ac909201845293810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fed25a5a20000000000000000000000000000000000000000000000000000000017815292518151949692947f0000000000000000000000000000000000000000000000000000000000000000909316939192909182918083835b6020831061179957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161175c565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146117f9576040519150601f19603f3d011682016040523d82523d6000602084013e6117fe565b606091505b50915091508161186f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4661696c656420746f2063726561746520706169720000000000000000000000604482015290519081900360640190fd5b80806020019051602081101561188457600080fd5b5051604080517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152878116602483015291519298509088169163485cc9559160448082019260009290919082900301818387803b15801561190257600080fd5b505af1158015611916573d6000803e3d6000fd5b50505050600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600680549050600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506006869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f02a388add05de2fde7b4703b9f0156d3da7cb4628368d9f98e0c1671698bbfa688600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050600680549050604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a3505050505092915050565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b158015611d3c57600080fd5b505afa158015611d50573d6000803e3d6000fd5b505050506040513d6020811015611d6657600080fd5b5051611dd357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790819055604080517f70726f746f636f6c466565546f00000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602083015280517f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff1625099281900390910190a150565b60075473ffffffffffffffffffffffffffffffffffffffff1681565b60065460009015801590611460575073ffffffffffffffffffffffffffffffffffffffff8216600081815260056020526040902054600680549091908110611ef857fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161492915050565b6007547f0000000000000000000000000000000000000000000000000000000000000000917f00000000000000000000000000000000000000000000000000000000000000009173ffffffffffffffffffffffffffffffffffffffff16907f000000000000000000000000000000000000000000000000000000000000000090565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b611feb6127cb565b600054610100900473ffffffffffffffffffffffffffffffffffffffff90811691161461207957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806127d06026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff8085169361010090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f851a4406040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f957600080fd5b505afa15801561220d573d6000803e3d6000fd5b505050506040513d602081101561222357600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614806122fb5750604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156122ce57600080fd5b505afa1580156122e2573d6000803e3d6000fd5b505050506040513d60208110156122f857600080fd5b50515b612350576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806127f66021913960400191505060405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016821515179081905560ff16156123b4576040517f71d46a587e8ae446d9442949c41f57019d17b5b4f3610941960517c9c230304790600090a16123de565b6040517fb821dc27f036017c075c6746b9e8608a15f78f90a8c03acbce13e9438ca76e1b90600090a15b50565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260046020908152604080832093909416825291909152205490565b604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163a3818b3b916024808301926020929190829003018186803b1580156124a557600080fd5b505afa1580156124b9573d6000803e3d6000fd5b505050506040513d60208110156124cf57600080fd5b505161253c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16106125d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420616464726573732070616972206f72646572000000000000604482015290519081900360640190fd5b604080517f88462c8d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301529151918316916388462c8d91604480820192602092909190829003018186803b15801561264e57600080fd5b505afa158015612662573d6000803e3d6000fd5b505050506040513d602081101561267857600080fd5b50516126e557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f50616972206e6f7420737570706f72746564206279206f7261636c6500000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260086020818152604080842088871680865290835281852080549789167fffffffffffffffffffffffff00000000000000000000000000000000000000009889168117909155938352818520868652835281852080549097168417909655828452600982529283902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055825191825291517fb4af261139740f02bdfd600c83590a7b42e71fd7798891b2b39cc7203e3de147929181900390910190a3505050565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734e6f742066726f6d2073687574646f776e2061646d696e206f7220766f74696e67526573747269637465644c697175696469747950726f766964657220616c726561647920736574a2646970667358221220ad49e209774e1cc7f3742e83ac73b0e0ed08ca52472f6003565202df7bfe85e764736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_RestrictedFactory.ts
var OSWAP_RestrictedFactory = class extends import_eth_wallet29.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RestrictedFactory_json_default.abi, OSWAP_RestrictedFactory_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.whitelistFactory, params.pairCreator, params.configStore, import_eth_wallet29.Utils.toString(params.tradeFee), import_eth_wallet29.Utils.toString(params.protocolFee), params.protocolFeeTo);
  }
  parseOracleAddedEvent(receipt) {
    return this.parseEvents(receipt, "OracleAdded").map((e) => this.decodeOracleAddedEvent(e));
  }
  decodeOracleAddedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      oracle: result.oracle,
      _event: event
    };
  }
  parseOwnershipTransferredEvent(receipt) {
    return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
  }
  decodeOwnershipTransferredEvent(event) {
    let result = event.data;
    return {
      previousOwner: result.previousOwner,
      newOwner: result.newOwner,
      _event: event
    };
  }
  parsePairCreatedEvent(receipt) {
    return this.parseEvents(receipt, "PairCreated").map((e) => this.decodePairCreatedEvent(e));
  }
  decodePairCreatedEvent(event) {
    let result = event.data;
    return {
      token0: result.token0,
      token1: result.token1,
      pair: result.pair,
      newPairSize: new import_eth_wallet29.BigNumber(result.newPairSize),
      newSize: new import_eth_wallet29.BigNumber(result.newSize),
      _event: event
    };
  }
  parsePairRestartedEvent(receipt) {
    return this.parseEvents(receipt, "PairRestarted").map((e) => this.decodePairRestartedEvent(e));
  }
  decodePairRestartedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parsePairShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "PairShutdowned").map((e) => this.decodePairShutdownedEvent(e));
  }
  decodePairShutdownedEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parseRestartedEvent(receipt) {
    return this.parseEvents(receipt, "Restarted").map((e) => this.decodeRestartedEvent(e));
  }
  decodeRestartedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownedEvent(receipt) {
    return this.parseEvents(receipt, "Shutdowned").map((e) => this.decodeShutdownedEvent(e));
  }
  decodeShutdownedEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  async addOldOracleToNewPair_send(params) {
    let result = await this.send("addOldOracleToNewPair", [params.tokenA, params.tokenB, params.oracle]);
    return result;
  }
  async addOldOracleToNewPair_call(params) {
    let result = await this.call("addOldOracleToNewPair", [params.tokenA, params.tokenB, params.oracle]);
    return;
  }
  async allPairs(param1) {
    let result = await this.call("allPairs", [import_eth_wallet29.Utils.toString(param1)]);
    return result;
  }
  async allPairsLength() {
    let result = await this.call("allPairsLength");
    return new import_eth_wallet29.BigNumber(result);
  }
  async checkAndGetOracle(params) {
    let result = await this.call("checkAndGetOracle", [params.tokenA, params.tokenB]);
    return result;
  }
  async checkAndGetOracleSwapParams(params) {
    let result = await this.call("checkAndGetOracleSwapParams", [params.tokenA, params.tokenB]);
    return {
      oracle_: result.oracle_,
      tradeFee_: new import_eth_wallet29.BigNumber(result.tradeFee_),
      protocolFee_: new import_eth_wallet29.BigNumber(result.protocolFee_)
    };
  }
  async configStore() {
    let result = await this.call("configStore");
    return result;
  }
  async createPair_send(params) {
    let result = await this.send("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async createPair_call(params) {
    let result = await this.call("createPair", [params.tokenA, params.tokenB]);
    return result;
  }
  async getCreateAddresses() {
    let result = await this.call("getCreateAddresses");
    return {
      _governance: result._governance,
      _whitelistFactory: result._whitelistFactory,
      _restrictedLiquidityProvider: result._restrictedLiquidityProvider,
      _configStore: result._configStore
    };
  }
  async getPair(params) {
    let result = await this.call("getPair", [params.param1, params.param2, import_eth_wallet29.Utils.toString(params.param3)]);
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async init_send(restrictedLiquidityProvider) {
    let result = await this.send("init", [restrictedLiquidityProvider]);
    return result;
  }
  async init_call(restrictedLiquidityProvider) {
    let result = await this.call("init", [restrictedLiquidityProvider]);
    return;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async isOracle(param1) {
    let result = await this.call("isOracle", [param1]);
    return result;
  }
  async isPair(pair) {
    let result = await this.call("isPair", [pair]);
    return result;
  }
  async oracles(params) {
    let result = await this.call("oracles", [params.param1, params.param2]);
    return result;
  }
  async owner() {
    let result = await this.call("owner");
    return result;
  }
  async pairCreator() {
    let result = await this.call("pairCreator");
    return result;
  }
  async pairIdx(param1) {
    let result = await this.call("pairIdx", [param1]);
    return new import_eth_wallet29.BigNumber(result);
  }
  async pairLength(params) {
    let result = await this.call("pairLength", [params.tokenA, params.tokenB]);
    return new import_eth_wallet29.BigNumber(result);
  }
  async protocolFee() {
    let result = await this.call("protocolFee");
    return new import_eth_wallet29.BigNumber(result);
  }
  async protocolFeeTo() {
    let result = await this.call("protocolFeeTo");
    return result;
  }
  async renounceOwnership_send() {
    let result = await this.send("renounceOwnership");
    return result;
  }
  async renounceOwnership_call() {
    let result = await this.call("renounceOwnership");
    return;
  }
  async restrictedLiquidityProvider() {
    let result = await this.call("restrictedLiquidityProvider");
    return result;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setLiveForPair_send(params) {
    let result = await this.send("setLiveForPair", [params.pair, params.live]);
    return result;
  }
  async setLiveForPair_call(params) {
    let result = await this.call("setLiveForPair", [params.pair, params.live]);
    return;
  }
  async setOracle_send(params) {
    let result = await this.send("setOracle", [params.tokenA, params.tokenB, params.oracle]);
    return result;
  }
  async setOracle_call(params) {
    let result = await this.call("setOracle", [params.tokenA, params.tokenB, params.oracle]);
    return;
  }
  async setProtocolFee_send(protocolFee) {
    let result = await this.send("setProtocolFee", [import_eth_wallet29.Utils.toString(protocolFee)]);
    return result;
  }
  async setProtocolFee_call(protocolFee) {
    let result = await this.call("setProtocolFee", [import_eth_wallet29.Utils.toString(protocolFee)]);
    return;
  }
  async setProtocolFeeTo_send(protocolFeeTo) {
    let result = await this.send("setProtocolFeeTo", [protocolFeeTo]);
    return result;
  }
  async setProtocolFeeTo_call(protocolFeeTo) {
    let result = await this.call("setProtocolFeeTo", [protocolFeeTo]);
    return;
  }
  async setTradeFee_send(tradeFee) {
    let result = await this.send("setTradeFee", [import_eth_wallet29.Utils.toString(tradeFee)]);
    return result;
  }
  async setTradeFee_call(tradeFee) {
    let result = await this.call("setTradeFee", [import_eth_wallet29.Utils.toString(tradeFee)]);
    return;
  }
  async tradeFee() {
    let result = await this.call("tradeFee");
    return new import_eth_wallet29.BigNumber(result);
  }
  async transferOwnership_send(newOwner) {
    let result = await this.send("transferOwnership", [newOwner]);
    return result;
  }
  async transferOwnership_call(newOwner) {
    let result = await this.call("transferOwnership", [newOwner]);
    return;
  }
  async whitelistFactory() {
    let result = await this.call("whitelistFactory");
    return result;
  }
  assign() {
    this.addOldOracleToNewPair = Object.assign(this.addOldOracleToNewPair_send, { call: this.addOldOracleToNewPair_call });
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
    this.init = Object.assign(this.init_send, { call: this.init_call });
    this.renounceOwnership = Object.assign(this.renounceOwnership_send, { call: this.renounceOwnership_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setLiveForPair = Object.assign(this.setLiveForPair_send, { call: this.setLiveForPair_call });
    this.setOracle = Object.assign(this.setOracle_send, { call: this.setOracle_call });
    this.setProtocolFee = Object.assign(this.setProtocolFee_send, { call: this.setProtocolFee_call });
    this.setProtocolFeeTo = Object.assign(this.setProtocolFeeTo_send, { call: this.setProtocolFeeTo_call });
    this.setTradeFee = Object.assign(this.setTradeFee_send, { call: this.setTradeFee_call });
    this.transferOwnership = Object.assign(this.transferOwnership_send, { call: this.transferOwnership_call });
  }
};

// src/contracts/restricted/OSWAP_RestrictedLiquidityProvider.ts
var import_eth_wallet30 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_RestrictedLiquidityProvider.json.ts
var OSWAP_RestrictedLiquidityProvider_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidity", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256[11]", "name": "param", "type": "uint256[11]" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "addLiquidityAndTrader", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "addingTokenA", "type": "bool" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountAIn", "type": "uint256" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "addLiquidityETH", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "_offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256[10]", "name": "param", "type": "uint256[10]" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "addLiquidityETHAndTrader", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amountA", "type": "uint256" }, { "internalType": "uint256", "name": "amountB", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeAllLiquidityETH", "outputs": [{ "internalType": "uint256", "name": "amountToken", "type": "uint256" }, { "internalType": "uint256", "name": "amountETH", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "bool", "name": "removingTokenA", "type": "bool" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }], "name": "removeLiquidityETH", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "6101006040523480156200001257600080fd5b5060405162002bc938038062002bc9833981810160405260408110156200003857600080fd5b5080516020918201516001600160601b0319606083811b821660805282901b1660a05260408051635aa6e67560e01b81529051929391926001600160a01b03851692635aa6e6759260048082019391829003018186803b1580156200009c57600080fd5b505afa158015620000b1573d6000803e3d6000fd5b505050506040513d6020811015620000c857600080fd5b50516040805163b716d46360e01b815290516001600160a01b039092169163b716d46391600480820192602092909190829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b505160601b6001600160601b03191660c05260408051634eb4ee2760e11b815290516001600160a01b03841691639d69dc4e9160048083019260209291908290030181600087803b1580156200018e57600080fd5b505af1158015620001a3573d6000803e3d6000fd5b505050506040513d6020811015620001ba57600080fd5b50516001600160601b031960609190911b1660e052505060805160601c60a05160601c60c05160601c60e05160601c61294462000285600039806106dc5280610bf9528061136452806114b352806119fa52508061079e52806108e05280610cbb52806115755280611abc52508060e8528061097a52806109a55280610ad55280610bc15280611198528061127d52806112c252806113885280611423528061144e5280611697528061171852508061190f5280611fa9528061238d52806124eb52506129446000f3fe6080604052600436106100cb5760003560e01c806398d201a411610074578063c15ab0cf1161004e578063c15ab0cf14610564578063c45a0155146105d4578063dc2e3def146105e957610176565b806398d201a4146104e45780639d69dc4e1461053a578063ad5c46481461054f57610176565b806323510927116100a5578063235109271461032d5780634b1804ee146103f55780636d025d221461046f57610176565b806301110a5d1461017b57806305268cff1461028057806309654a9b146102be57610176565b36610176573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461017457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561018757600080fd5b5061025060048036036101a081101561019f57600080fd5b81018161018081016101608201356401000000008111156101bf57600080fd5b8201836020820111156101d157600080fd5b803590602001918460208302840111640100000000831117156101f357600080fd5b91939092909160208101903564010000000081111561021157600080fd5b82018360208201111561022357600080fd5b8035906020019184602083028401116401000000008311171561024557600080fd5b509092509050610671565b6040805173ffffffffffffffffffffffffffffffffffffffff909316835260208301919091528051918290030190f35b34801561028c57600080fd5b506102956108de565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102ca57600080fd5b5061017460048036036101008110156102e257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101351515916040820135169060608101359060808101359060a08101359060c08101359060e00135610902565b610250600480360361018081101561034457600080fd5b810181610160810161014082013564010000000081111561036457600080fd5b82018360208201111561037657600080fd5b8035906020019184602083028401116401000000008311171561039857600080fd5b9193909290916020810190356401000000008111156103b657600080fd5b8201836020820111156103c857600080fd5b803590602001918460208302840111640100000000831117156103ea57600080fd5b509092509050610b77565b34801561040157600080fd5b50610174600480360361012081101561041957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604082013515159160608101359091169060808101359060a08101359060c08101359060e0810135906101000135610df5565b34801561047b57600080fd5b506104cb600480360360a081101561049257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060800135610fa1565b6040805192835260208301919091528051918290030190f35b3480156104f057600080fd5b506104cb6004803603608081101561050757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135909116906040810135906060013561111d565b34801561054657600080fd5b50610295611362565b34801561055b57600080fd5b50610295611386565b610250600480360361014081101561057b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060808101359060a081013515159060c08101359060e0810135906101008101359061012001356113aa565b3480156105e057600080fd5b5061029561190d565b3480156105f557600080fd5b50610250600480360361016081101561060d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604081013515159060608101359060808101359060a08101359060c081013515159060e08101359061010081013590610120810135906101400135611931565b60008073ffffffffffffffffffffffffffffffffffffffff873581169060208901351660408901356001146106a88383838d611c7c565b909550935073ffffffffffffffffffffffffffffffffffffffff808316908416106106d357806106d6565b80155b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561076b57600080fd5b505afa15801561077f573d6000803e3d6000fd5b505050506040513d602081101561079557600080fd5b505190506107d47f000000000000000000000000000000000000000000000000000000000000000033886107cf858e63ffffffff611cc516565b611d41565b8573ffffffffffffffffffffffffffffffffffffffff16636322fa3283878d8d8d8d6040518763ffffffff1660e01b8152600401808715151515815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b50505050505050509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b804281101561097257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600061099f8a7f000000000000000000000000000000000000000000000000000000000000000089611f11565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16106109fc57896109ff565b89155b604080517ffa69ce2b0000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018a90526064810189905260848101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163fa69ce2b9160a48082019260009290919082900301818387803b158015610a8d57600080fd5b505af1158015610aa1573d6000803e3d6000fd5b505050506000808b610ab4578688610ab7565b87875b90925090508115610acd57610acd8d8c84612028565b8015610b68577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b50505050610b688b82612205565b50505050505050505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff8735166020880135600114610ba582828b612342565b909450925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811690831610610bf05780610bf3565b80155b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d6020811015610cb257600080fd5b50519050610cec7f000000000000000000000000000000000000000000000000000000000000000033876107cf858d63ffffffff611cc516565b8473ffffffffffffffffffffffffffffffffffffffff16636322fa3283868c8c8c8c6040518763ffffffff1660e01b8152600401808715151515815260200186815260200180602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600081840152601f19601f82011690508083019250505098505050505050505050600060405180830381600087803b158015610dd057600080fd5b505af1158015610de4573d6000803e3d6000fd5b505050505050509550959350505050565b8042811015610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000610e728b8b89611f11565b905060008a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1610610eaf5789610eb2565b89155b604080517ffa69ce2b0000000000000000000000000000000000000000000000000000000081523360048201528215156024820152604481018a90526064810189905260848101889052905191925073ffffffffffffffffffffffffffffffffffffffff84169163fa69ce2b9160a48082019260009290919082900301818387803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b505050506000808b610f67578688610f6a565b87875b90925090508115610f8057610f808e8c84612028565b8015610f9157610f918d8c83612028565b5050505050505050505050505050565b600080824281101561101457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000611021898988611f11565b604080517f7a6a5e1b0000000000000000000000000000000000000000000000000000000081523360048201528151929350600092839273ffffffffffffffffffffffffffffffffffffffff861692637a6a5e1b926024808301939282900301818787803b15801561109257600080fd5b505af11580156110a6573d6000803e3d6000fd5b505050506040513d60408110156110bc57600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff808b16908c16106110f15780826110f4565b81815b90965094506111048b8a88612028565b61110f8a8a87612028565b505050509550959350505050565b600080824281101561119057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006111bd887f000000000000000000000000000000000000000000000000000000000000000088611f11565b604080517f7a6a5e1b0000000000000000000000000000000000000000000000000000000081523360048201528151929350600092839273ffffffffffffffffffffffffffffffffffffffff861692637a6a5e1b926024808301939282900301818787803b15801561122e57600080fd5b505af1158015611242573d6000803e3d6000fd5b505050506040513d604081101561125857600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116908b16106112ad5780826112b0565b81815b90965094506112c08a8a88612028565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561133357600080fd5b505af1158015611347573d6000803e3d6000fd5b505050506113558986612205565b5050505094509492505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080824281101561141d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6114488d7f00000000000000000000000000000000000000000000000000000000000000008d612388565b925060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16106114a5578c6114a8565b8c155b90508a6116645760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d602081101561156c57600080fd5b5051905061159c7f0000000000000000000000000000000000000000000000000000000000000000338784611d41565b604080517f5fd5e2fc00000000000000000000000000000000000000000000000000000000815233600482015283151560248201528b15156044820152606481018b9052608481018a905260a48101899052905173ffffffffffffffffffffffffffffffffffffffff871691635fd5e2fc9160c48083019260209291908290030181600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506040513d602081101561165957600080fd5b50519b506116739050565b61167384828d8c8c8c8c6125ee565b8c1561169057891561168b5761168b8e33868d611d41565b611856565b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156116fd57600080fd5b505af1158015611711573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156117bd57600080fd5b505af11580156117d1573d6000803e3d6000fd5b505050506040513d60208110156117e757600080fd5b505161185457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b505b60008a11806118655750600034115b156118f957604080517f767016360000000000000000000000000000000000000000000000000000000081528215156004820152602481018d9052905173ffffffffffffffffffffffffffffffffffffffff861691637670163691604480830192600092919082900301818387803b1580156118e057600080fd5b505af11580156118f4573d6000803e3d6000fd5b505050505b8a925050509a509a98505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082428110156119a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6119af8e8e8d612388565b925060008d73ffffffffffffffffffffffffffffffffffffffff168f73ffffffffffffffffffffffffffffffffffffffff16106119ec578c6119ef565b8c155b90508a611bab5760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b50519050611ae37f0000000000000000000000000000000000000000000000000000000000000000338784611d41565b604080517f5fd5e2fc00000000000000000000000000000000000000000000000000000000815233600482015283151560248201528b15156044820152606481018b9052608481018a905260a48101899052905173ffffffffffffffffffffffffffffffffffffffff871691635fd5e2fc9160c48083019260209291908290030181600087803b158015611b7657600080fd5b505af1158015611b8a573d6000803e3d6000fd5b505050506040513d6020811015611ba057600080fd5b50519b50611bba9050565b611bba84828d8c8c8c8c6125ee565b8915611c6757611bd88d611bce578e611bd0565b8f5b33868d611d41565b604080517f767016360000000000000000000000000000000000000000000000000000000081528215156004820152602481018d9052905173ffffffffffffffffffffffffffffffffffffffff861691637670163691604480830192600092919082900301818387803b158015611c4e57600080fd5b505af1158015611c62573d6000803e3d6000fd5b505050505b8a925050509b509b9950505050505050505050565b600080611cb88686866060870135608088013560a089013560c08a013560011460e08b01356101008c01356101208d01356101408e0135611931565b9097909650945050505050565b600082611cd457506000611d3b565b82820282848281611ce157fe5b0414611d38576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806128a76021913960400191505060405180910390fd5b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310611e1f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611de2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611e81576040519150601f19603f3d011682016040523d82523d6000602084013e611e86565b606091505b5091509150818015611eb4575080511580611eb45750808060200190516020811015611eb157600080fd5b50515b611f09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806128eb6024913960400191505060405180910390fd5b505050505050565b6000806000611f20868661273d565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152604880830199909952825180830390990189526068820183528851988401989098207fff0000000000000000000000000000000000000000000000000000000000000060888301527f000000000000000000000000000000000000000000000000000000000000000090941b9097166089880152609d8701929092527fc4a48a7bad5b49d5e0b31255280c8d6334bb6304569ebe7486ba297c1931e97c60bd808801919091528251808803909101815260dd909601909152845194019390932095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106120fe57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016120c1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612160576040519150601f19603f3d011682016040523d82523d6000602084013e612165565b606091505b5091509150818015612193575080511580612193575080806020019051602081101561219057600080fd5b50515b6121fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061227c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161223f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146122de576040519150601f19603f3d011682016040523d82523d6000602084013e6122e3565b606091505b505090508061233d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806128c86023913960400191505060405180910390fd5b505050565b60008061237c858560408601356060870135608088013560a089013560011460c08a013560e08b01356101008c01356101208d01356113aa565b90969095509350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fd3206d286866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561245c57600080fd5b505afa158015612470573d6000803e3d6000fd5b505050506040513d602081101561248657600080fd5b5051905082158015612496575080155b1561256957604080517fc9c6539600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152868116602483015291517f00000000000000000000000000000000000000000000000000000000000000009092169163c9c65396916044808201926020929091908290030181600087803b15801561253657600080fd5b505af115801561254a573d6000803e3d6000fd5b505050506040513d602081101561256057600080fd5b505191506125e6565b808311156125d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207061697220696e6465780000000000000000000000000000604482015290519081900360640190fd5b6125e3858585611f11565b91505b509392505050565b6000806000808a73ffffffffffffffffffffffffffffffffffffffff1663db13653c8b8b6040518363ffffffff1660e01b81526004018083151515158152602001828152602001925050506101006040518083038186803b15801561265257600080fd5b505afa158015612666573d6000803e3d6000fd5b505050506040513d61010081101561267d57600080fd5b50604081015160a082015160c083015160e090930151919650945090925090508715158415151480156126af57508287145b80156126ba57508186145b80156126c557508085145b61273057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f7264657220706172616d73206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b5050505050505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156127db57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610612815578284612818565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661289f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b925092905056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220bad85b684950c3d4d932a7e34b31044a8420dafebd9a44c9f2d6a92e43fd82e964736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_RestrictedLiquidityProvider.ts
var OSWAP_RestrictedLiquidityProvider = class extends import_eth_wallet30.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RestrictedLiquidityProvider_json_default.abi, OSWAP_RestrictedLiquidityProvider_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.factory, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.tokenA, params.tokenB, params.addingTokenA, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountIn), params.allowAll, import_eth_wallet30.Utils.toString(params.restrictedPrice), import_eth_wallet30.Utils.toString(params.startDate), import_eth_wallet30.Utils.toString(params.expire), import_eth_wallet30.Utils.toString(params.deadline)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.tokenA, params.tokenB, params.addingTokenA, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountIn), params.allowAll, import_eth_wallet30.Utils.toString(params.restrictedPrice), import_eth_wallet30.Utils.toString(params.startDate), import_eth_wallet30.Utils.toString(params.expire), import_eth_wallet30.Utils.toString(params.deadline)]);
    return {
      pair: result.pair,
      _offerIndex: new import_eth_wallet30.BigNumber(result._offerIndex)
    };
  }
  async addLiquidityAndTrader_send(params) {
    let result = await this.send("addLiquidityAndTrader", [import_eth_wallet30.Utils.toString(params.param), params.trader, import_eth_wallet30.Utils.toString(params.allocation)]);
    return result;
  }
  async addLiquidityAndTrader_call(params) {
    let result = await this.call("addLiquidityAndTrader", [import_eth_wallet30.Utils.toString(params.param), params.trader, import_eth_wallet30.Utils.toString(params.allocation)]);
    return {
      pair: result.pair,
      offerIndex: new import_eth_wallet30.BigNumber(result.offerIndex)
    };
  }
  async addLiquidityETH_send(params, _value) {
    let result = await this.send("addLiquidityETH", [params.tokenA, params.addingTokenA, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountAIn), params.allowAll, import_eth_wallet30.Utils.toString(params.restrictedPrice), import_eth_wallet30.Utils.toString(params.startDate), import_eth_wallet30.Utils.toString(params.expire), import_eth_wallet30.Utils.toString(params.deadline)], { value: _value });
    return result;
  }
  async addLiquidityETH_call(params, _value) {
    let result = await this.call("addLiquidityETH", [params.tokenA, params.addingTokenA, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountAIn), params.allowAll, import_eth_wallet30.Utils.toString(params.restrictedPrice), import_eth_wallet30.Utils.toString(params.startDate), import_eth_wallet30.Utils.toString(params.expire), import_eth_wallet30.Utils.toString(params.deadline)], { value: _value });
    return {
      pair: result.pair,
      _offerIndex: new import_eth_wallet30.BigNumber(result._offerIndex)
    };
  }
  async addLiquidityETHAndTrader_send(params, _value) {
    let result = await this.send("addLiquidityETHAndTrader", [import_eth_wallet30.Utils.toString(params.param), params.trader, import_eth_wallet30.Utils.toString(params.allocation)], { value: _value });
    return result;
  }
  async addLiquidityETHAndTrader_call(params, _value) {
    let result = await this.call("addLiquidityETHAndTrader", [import_eth_wallet30.Utils.toString(params.param), params.trader, import_eth_wallet30.Utils.toString(params.allocation)], { value: _value });
    return {
      pair: result.pair,
      offerIndex: new import_eth_wallet30.BigNumber(result.offerIndex)
    };
  }
  async configStore() {
    let result = await this.call("configStore");
    return result;
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async removeAllLiquidity_send(params) {
    let result = await this.send("removeAllLiquidity", [params.tokenA, params.tokenB, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.deadline)]);
    return result;
  }
  async removeAllLiquidity_call(params) {
    let result = await this.call("removeAllLiquidity", [params.tokenA, params.tokenB, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.deadline)]);
    return {
      amountA: new import_eth_wallet30.BigNumber(result.amountA),
      amountB: new import_eth_wallet30.BigNumber(result.amountB)
    };
  }
  async removeAllLiquidityETH_send(params) {
    let result = await this.send("removeAllLiquidityETH", [params.tokenA, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.deadline)]);
    return result;
  }
  async removeAllLiquidityETH_call(params) {
    let result = await this.call("removeAllLiquidityETH", [params.tokenA, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.deadline)]);
    return {
      amountToken: new import_eth_wallet30.BigNumber(result.amountToken),
      amountETH: new import_eth_wallet30.BigNumber(result.amountETH)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.tokenA, params.tokenB, params.removingTokenA, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountOut), import_eth_wallet30.Utils.toString(params.receivingOut), import_eth_wallet30.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.tokenA, params.tokenB, params.removingTokenA, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountOut), import_eth_wallet30.Utils.toString(params.receivingOut), import_eth_wallet30.Utils.toString(params.deadline)]);
    return;
  }
  async removeLiquidityETH_send(params) {
    let result = await this.send("removeLiquidityETH", [params.tokenA, params.removingTokenA, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountOut), import_eth_wallet30.Utils.toString(params.receivingOut), import_eth_wallet30.Utils.toString(params.deadline)]);
    return result;
  }
  async removeLiquidityETH_call(params) {
    let result = await this.call("removeLiquidityETH", [params.tokenA, params.removingTokenA, params.to, import_eth_wallet30.Utils.toString(params.pairIndex), import_eth_wallet30.Utils.toString(params.offerIndex), import_eth_wallet30.Utils.toString(params.amountOut), import_eth_wallet30.Utils.toString(params.receivingOut), import_eth_wallet30.Utils.toString(params.deadline)]);
    return;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.addLiquidityAndTrader = Object.assign(this.addLiquidityAndTrader_send, { call: this.addLiquidityAndTrader_call });
    this.addLiquidityETH = Object.assign(this.addLiquidityETH_send, { call: this.addLiquidityETH_call });
    this.addLiquidityETHAndTrader = Object.assign(this.addLiquidityETHAndTrader_send, { call: this.addLiquidityETHAndTrader_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeAllLiquidityETH = Object.assign(this.removeAllLiquidityETH_send, { call: this.removeAllLiquidityETH_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.removeLiquidityETH = Object.assign(this.removeLiquidityETH_send, { call: this.removeLiquidityETH_call });
  }
};

// src/contracts/restricted/OSWAP_RestrictedPairOracle.ts
var import_eth_wallet31 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_RestrictedPairOracle.json.ts
var OSWAP_RestrictedPairOracle_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WEI", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "payload", "type": "bytes" }], "name": "getRatio", "outputs": [{ "internalType": "uint256", "name": "numerator", "type": "uint256" }, { "internalType": "uint256", "name": "denominator", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isSupported", "outputs": [{ "internalType": "bool", "name": "supported", "type": "bool" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b506104a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806388462c8d1161005057806388462c8d14610168578063b80333ed146101b7578063b845c9a2146102b057610067565b8063313ce5671461006c578063495e43481461008a575b600080fd5b6100746102b8565b6040805160ff9092168252519081900360200190f35b610156600480360360608110156100a057600080fd5b73ffffffffffffffffffffffffffffffffffffffff82358116926020810135909116918101906060810160408201356401000000008111156100e157600080fd5b8201836020820111156100f357600080fd5b8035906020019184600183028401116401000000008311171561011557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506102bd945050505050565b60408051918252519081900360200190f35b6101a36004803603604081101561017e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610381565b604080519115158252519081900360200190f35b610297600480360360c08110156101cd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013582169260408201359260608301359260808101359091169181019060c0810160a082013564010000000081111561022257600080fd5b82018360208201111561023457600080fd5b8035906020019184600183028401116401000000008311171561025657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610389945050505050565b6040805192835260208301919091528051918290030190f35b61015661045e565b601290565b6020810151604080517fdb13653c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086169087161060048201819052602482018490529151600093339390929091849163db13653c91604480830192610100929190829003018186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d61010081101561037157600080fd5b5060a00151979650505050505050565b600192915050565b6020810151604080517fdb13653c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916908a16106004820181905260248201849052915160009384939233928591849163db13653c9160448082019261010092909190829003018186803b15801561041457600080fd5b505afa158015610428573d6000803e3d6000fd5b505050506040513d61010081101561043f57600080fd5b5060a001519c670de0b6b3a76400009c509a5050505050505050505050565b670de0b6b3a76400008156fea26469706673582212206ebddc2d94907e0370f6b7fd90c0e3fc98c7a7705cd0b222e36775297756d8b764736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_RestrictedPairOracle.ts
var OSWAP_RestrictedPairOracle = class extends import_eth_wallet31.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RestrictedPairOracle_json_default.abi, OSWAP_RestrictedPairOracle_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  async WEI() {
    let result = await this.call("WEI");
    return new import_eth_wallet31.BigNumber(result);
  }
  async decimals() {
    let result = await this.call("decimals");
    return new import_eth_wallet31.BigNumber(result);
  }
  async getLatestPrice(params) {
    let result = await this.call("getLatestPrice", [params.from, params.to, params.payload]);
    return new import_eth_wallet31.BigNumber(result);
  }
  async getRatio(params) {
    let result = await this.call("getRatio", [params.from, params.to, import_eth_wallet31.Utils.toString(params.param3), import_eth_wallet31.Utils.toString(params.param4), params.param5, params.payload]);
    return {
      numerator: new import_eth_wallet31.BigNumber(result.numerator),
      denominator: new import_eth_wallet31.BigNumber(result.denominator)
    };
  }
  async isSupported(params) {
    let result = await this.call("isSupported", [params.param1, params.param2]);
    return result;
  }
  assign() {
  }
};

// src/contracts/restricted/OSWAP_VotingExecutor4.ts
var import_eth_wallet32 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_VotingExecutor4.json.ts
var OSWAP_VotingExecutor4_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }, { "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_configStore", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60e060405234801561001057600080fd5b50604051610d35380380610d358339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606084811b821660a05283811b821660805282901b1660c0526001600160a01b039182169282169116610c6d6100c8600039806103ee5280610af65280610bf15250806105365280610665528061074f52806107ed52806108d3528061098a5280610a045280610c15525080610106528061016e5250610c6d6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635aa6e675146100515780638af7c649146100825780639d69dc4e146100f4578063c45a0155146100fc575b600080fd5b610059610104565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100f26004803603602081101561009857600080fd5b8101906020810181356401000000008111156100b357600080fd5b8201836020820111156100c557600080fd5b803590602001918460208302840111640100000000831117156100e757600080fd5b509092509050610128565b005b610059610bef565b610059610c13565b7f000000000000000000000000000000000000000000000000000000000000000081565b604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b15866e6916024808301926020929190829003018186803b1580156101b457600080fd5b505afa1580156101c8573d6000803e3d6000fd5b505050506040513d60208110156101de57600080fd5b505161024b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b600181116102ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b6000828260008181106102c957fe5b9050602002013590506000838360018181106102e157fe5b905060200201359050817f6d756c7469437573746f6d506172616d000000000000000000000000000000001415610503577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830160028106156103a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b60028104905060608060208302604051602082018101604052848152816064602083013780935060405190506020820181016040528481528182606401602083013780925050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637e9d2c3183836040518363ffffffff1660e01b8152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561047d578181015183820152602001610465565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156104bc5781810151838201526020016104a4565b50505050905001945050505050600060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b50505050505050610be9565b600483141561071c57817f7365744f7261636c650000000000000000000000000000000000000000000000141561063b577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630c1445818260601c8686600281811061058157fe5b9050602002013560601c8787600381811061059857fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815273ffffffffffffffffffffffffffffffffffffffff9687166004820152949095166024850152602002919091013560601c6044830152509051606480830192600092919082900301818387803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b50505050610717565b817f6164644f6c644f7261636c65546f4e657750616972000000000000000000000014156106b0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663399762478260601c8686600281811061058157fe5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f556e6b6e6f776e20636f6d6d616e640000000000000000000000000000000000604482015290519081900360640190fd5b610be9565b60028314156109d157817f736574547261646546656500000000000000000000000000000000000000000014156107c3577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663106030238260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561061e57600080fd5b817f73657450726f746f636f6c4665650000000000000000000000000000000000001415610861577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663787dce3d8260001c6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561061e57600080fd5b817f73657450726f746f636f6c466565546f00000000000000000000000000000000141561091a57604080517fe0e6799f000000000000000000000000000000000000000000000000000000008152606083901c6004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163e0e6799f91602480830192600092919082900301818387803b15801561061e57600080fd5b817f7365744c6976650000000000000000000000000000000000000000000000000014156106b057604080517ff5ee33480000000000000000000000000000000000000000000000000000000081528215156004820152905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163f5ee334891602480830192600092919082900301818387803b15801561061e57600080fd5b6003831415610b8257817f7365744c697665466f72506169720000000000000000000000000000000000001415610acc577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636883618a8260601c86866002818110610a4f57fe5b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff909516600486015260209091029290920135151560248401525051604480830192600092919082900301818387803b15801561061e57600080fd5b817f637573746f6d506172616d00000000000000000000000000000000000000000014156106b0577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635332c4148286866002818110610b3e57fe5b905060200201356040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561061e57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212200b632bf0aa257ae294d1e7de0ebf30b0153ae4bc685e9f2de612d1f00afea7be64736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_VotingExecutor4.ts
var OSWAP_VotingExecutor4 = class extends import_eth_wallet32.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingExecutor4_json_default.abi, OSWAP_VotingExecutor4_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.governance, params.factory, params.configStore);
  }
  async configStore() {
    let result = await this.call("configStore");
    return result;
  }
  async execute_send(params) {
    let result = await this.send("execute", [import_eth_wallet32.Utils.stringToBytes32(params)]);
    return result;
  }
  async execute_call(params) {
    let result = await this.call("execute", [import_eth_wallet32.Utils.stringToBytes32(params)]);
    return;
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
  }
};

// src/contracts/router/OSWAP_HybridRouter.ts
var import_eth_wallet33 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/router/OSWAP_HybridRouter.json.ts
var OSWAP_HybridRouter_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_oracleFactory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsIn", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOut", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenA", "type": "address" }, { "internalType": "address", "name": "tokenB", "type": "address" }], "name": "pairFor", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "uint24[]", "name": "fee", "type": "uint24[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "60c060405234801561001057600080fd5b50604051620052d3380380620052d38339818101604052604081101561003557600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c6151fe620000d56000398060fe5280611e545280611fac528061202d528061240352806125fe52806126e452806129055280612b125280612bd55280612ca4528061300e52806131bb5280613250528061396f5280613b1f5280613bb45250806128035280612bf952506151fe6000f3fe6080604052600436106100e15760003560e01c8063ad5c46481161007f578063d60b54b311610059578063d60b54b314610ce9578063dce6af5e14610e8b578063e7739c271461101a578063f5ced7e6146111c65761018c565b8063ad5c464814610b1d578063c7f7fb9014610b32578063cead050d14610b475761018c565b806392d0dd03116100bb57806392d0dd031461067e5780639359d253146107bb57806396ed28f91461090a578063ab9c05df1461097b5761018c565b80630b4d932d146101915780631e3f5d1f146102e0578063250c8e4c146104d25761018c565b3661018c573373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461018a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b34801561019d57600080fd5b5061018a600480360360e08110156101b457600080fd5b8135916020810135918101906060810160408201356401000000008111156101db57600080fd5b8201836020820111156101ed57600080fd5b8035906020019184602083028401116401000000008311171561020f57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561024f57600080fd5b82018360208201111561026157600080fd5b8035906020019184602083028401116401000000008311171561028357600080fd5b9193909290916020810190356401000000008111156102a157600080fd5b8201836020820111156102b357600080fd5b803590602001918460208302840111640100000000831117156102d557600080fd5b509092509050611355565b3480156102ec57600080fd5b50610482600480360361010081101561030457600080fd5b81359160208101359181019060608101604082013564010000000081111561032b57600080fd5b82018360208201111561033d57600080fd5b8035906020019184602083028401116401000000008311171561035f57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561039f57600080fd5b8201836020820111156103b157600080fd5b803590602001918460208302840111640100000000831117156103d357600080fd5b9193909290916020810190356401000000008111156103f157600080fd5b82018360208201111561040357600080fd5b8035906020019184602083028401116401000000008311171561042557600080fd5b91939092909160208101903564010000000081111561044357600080fd5b82018360208201111561045557600080fd5b8035906020019184600183028401116401000000008311171561047757600080fd5b50909250905061177b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104be5781810151838201526020016104a6565b505050509050019250505060405180910390f35b3480156104de57600080fd5b50610482600480360360a08110156104f557600080fd5b8135919081019060408101602082013564010000000081111561051757600080fd5b82018360208201111561052957600080fd5b8035906020019184602083028401116401000000008311171561054b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561059b57600080fd5b8201836020820111156105ad57600080fd5b803590602001918460208302840111640100000000831117156105cf57600080fd5b9193909290916020810190356401000000008111156105ed57600080fd5b8201836020820111156105ff57600080fd5b8035906020019184602083028401116401000000008311171561062157600080fd5b91939092909160208101903564010000000081111561063f57600080fd5b82018360208201111561065157600080fd5b8035906020019184600183028401116401000000008311171561067357600080fd5b509092509050611981565b61018a600480360360c081101561069457600080fd5b813591908101906040810160208201356401000000008111156106b657600080fd5b8201836020820111156106c857600080fd5b803590602001918460208302840111640100000000831117156106ea57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561072a57600080fd5b82018360208201111561073c57600080fd5b8035906020019184602083028401116401000000008311171561075e57600080fd5b91939092909160208101903564010000000081111561077c57600080fd5b82018360208201111561078e57600080fd5b803590602001918460208302840111640100000000831117156107b057600080fd5b509092509050611de2565b3480156107c757600080fd5b5061018a600480360360e08110156107de57600080fd5b81359160208101359181019060608101604082013564010000000081111561080557600080fd5b82018360208201111561081757600080fd5b8035906020019184602083028401116401000000008311171561083957600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561087957600080fd5b82018360208201111561088b57600080fd5b803590602001918460208302840111640100000000831117156108ad57600080fd5b9193909290916020810190356401000000008111156108cb57600080fd5b8201836020820111156108dd57600080fd5b803590602001918460208302840111640100000000831117156108ff57600080fd5b50909250905061237c565b34801561091657600080fd5b506109526004803603604081101561092d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612777565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561098757600080fd5b50610482600480360361010081101561099f57600080fd5b8135916020810135918101906060810160408201356401000000008111156109c657600080fd5b8201836020820111156109d857600080fd5b803590602001918460208302840111640100000000831117156109fa57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610a3a57600080fd5b820183602082011115610a4c57600080fd5b80359060200191846020830284011164010000000083111715610a6e57600080fd5b919390929091602081019035640100000000811115610a8c57600080fd5b820183602082011115610a9e57600080fd5b80359060200191846020830284011164010000000083111715610ac057600080fd5b919390929091602081019035640100000000811115610ade57600080fd5b820183602082011115610af057600080fd5b80359060200191846001830284011164010000000083111715610b1257600080fd5b50909250905061287c565b348015610b2957600080fd5b50610952612bd3565b348015610b3e57600080fd5b50610952612bf7565b348015610b5357600080fd5b506104826004803603610100811015610b6b57600080fd5b813591602081013591810190606081016040820135640100000000811115610b9257600080fd5b820183602082011115610ba457600080fd5b80359060200191846020830284011164010000000083111715610bc657600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610c0657600080fd5b820183602082011115610c1857600080fd5b80359060200191846020830284011164010000000083111715610c3a57600080fd5b919390929091602081019035640100000000811115610c5857600080fd5b820183602082011115610c6a57600080fd5b80359060200191846020830284011164010000000083111715610c8c57600080fd5b919390929091602081019035640100000000811115610caa57600080fd5b820183602082011115610cbc57600080fd5b80359060200191846001830284011164010000000083111715610cde57600080fd5b509092509050612c1b565b348015610cf557600080fd5b506104826004803603610100811015610d0d57600080fd5b813591602081013591810190606081016040820135640100000000811115610d3457600080fd5b820183602082011115610d4657600080fd5b80359060200191846020830284011164010000000083111715610d6857600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610da857600080fd5b820183602082011115610dba57600080fd5b80359060200191846020830284011164010000000083111715610ddc57600080fd5b919390929091602081019035640100000000811115610dfa57600080fd5b820183602082011115610e0c57600080fd5b80359060200191846020830284011164010000000083111715610e2e57600080fd5b919390929091602081019035640100000000811115610e4c57600080fd5b820183602082011115610e5e57600080fd5b80359060200191846001830284011164010000000083111715610e8057600080fd5b509092509050612e5e565b610482600480360360e0811015610ea157600080fd5b81359190810190604081016020820135640100000000811115610ec357600080fd5b820183602082011115610ed557600080fd5b80359060200191846020830284011164010000000083111715610ef757600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610f3757600080fd5b820183602082011115610f4957600080fd5b80359060200191846020830284011164010000000083111715610f6b57600080fd5b919390929091602081019035640100000000811115610f8957600080fd5b820183602082011115610f9b57600080fd5b80359060200191846020830284011164010000000083111715610fbd57600080fd5b919390929091602081019035640100000000811115610fdb57600080fd5b820183602082011115610fed57600080fd5b8035906020019184600183028401116401000000008311171561100f57600080fd5b509092509050612f9a565b34801561102657600080fd5b50610482600480360360a081101561103d57600080fd5b8135919081019060408101602082013564010000000081111561105f57600080fd5b82018360208201111561107157600080fd5b8035906020019184602083028401116401000000008311171561109357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156110e357600080fd5b8201836020820111156110f557600080fd5b8035906020019184602083028401116401000000008311171561111757600080fd5b91939092909160208101903564010000000081111561113557600080fd5b82018360208201111561114757600080fd5b8035906020019184602083028401116401000000008311171561116957600080fd5b91939092909160208101903564010000000081111561118757600080fd5b82018360208201111561119957600080fd5b803590602001918460018302840111640100000000831117156111bb57600080fd5b509092509050613459565b610482600480360360e08110156111dc57600080fd5b813591908101906040810160208201356401000000008111156111fe57600080fd5b82018360208201111561121057600080fd5b8035906020019184602083028401116401000000008311171561123257600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561127257600080fd5b82018360208201111561128457600080fd5b803590602001918460208302840111640100000000831117156112a657600080fd5b9193909290916020810190356401000000008111156112c457600080fd5b8201836020820111156112d657600080fd5b803590602001918460208302840111640100000000831117156112f857600080fd5b91939092909160208101903564010000000081111561131657600080fd5b82018360208201111561132857600080fd5b8035906020019184600183028401116401000000008311171561134a57600080fd5b5090925090506138fb565b84428110156113c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600288101561143557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6114938989600081811061144557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16338787600081811061147057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168e613d71565b600089897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181106114c357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561155c57600080fd5b505afa158015611570573d6000803e3d6000fd5b505050506040513d602081101561158657600080fd5b50516040805160208c810282810182019093528c82529293506115fc9290918d918d91829185019084908082843760009201829052508d93508b92508a915089908990805b506040519080825280601f01601f1916602001820160405280156115f6576020820181803683370190505b50613f41565b8a611700828c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061162f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156116c857600080fd5b505afa1580156116dc573d6000803e3d6000fd5b505050506040513d60208110156116f257600080fd5b50519063ffffffff61461516565b101561176d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b505050505050505050505050565b606087428110156117ed57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6118328e8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a8a611981565b91508c8260018451038151811061184557fe5b602002602001015110156118ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61192c8c8c60008181106118ca57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16338a8a60008181106118f557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168560008151811061191f57fe5b6020026020010151613d71565b611970828d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508f92508d91508c90508989614660565b509c9b505050505050505050505050565b60606002885110156119f457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b87517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018614611a8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f504149525300000000000000000000000000000000000000604482015290519081900360640190fd5b858414611af357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f494e56414c49445f464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b875167ffffffffffffffff81118015611b0b57600080fd5b50604051908082528060200260200182016040528015611b35578160200160208202803683370190505b5090508881600081518110611b4657fe5b60200260200101818152505060005b6001895103811015611dd557611bbd888883818110611b7057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8381518110611b9957fe5b60200260200101518b8460010181518110611bb057fe5b6020026020010151614869565b611c7c57600080611c208a8a85818110611bd357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8581518110611bfc57fe5b60200260200101518d8660010181518110611c1357fe5b60200260200101516148ac565b91509150611c5a848481518110611c3357fe5b602002602001015183838b8b88818110611c4957fe5b9050602002013562ffffff1661498a565b848460010181518110611c6957fe5b6020026020010181815250505050611dcd565b878782818110611c8857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b19103b8a8381518110611ccc57fe5b6020026020010151848481518110611ce057fe5b602002602001015187876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b158015611d8357600080fd5b505afa158015611d97573d6000803e3d6000fd5b505050506040513d6020811015611dad57600080fd5b50518251839060018401908110611dc057fe5b6020026020010181815250505b600101611b55565b5098975050505050505050565b8442811015611e5257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1689896000818110611e9657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6002881015611fa557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561201257600080fd5b505af1158015612026573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8787600081811061207457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156120fb57600080fd5b505af115801561210f573d6000803e3d6000fd5b505050506040513d602081101561212557600080fd5b505161219257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50600089897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81018181106121c357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561225c57600080fd5b505afa158015612270573d6000803e3d6000fd5b505050506040513d602081101561228657600080fd5b50516040805160208c810282810182019093528c82529293506122cf9290918d918d91829185019084908082843760009201829052508d93508b92508a915089908990806115cb565b8a612302828c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061162f57fe5b101561236f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b5050505050505050505050565b84428110156123ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001689897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061245157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b600288101561256057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6125708989600081811061144557fe5b6125b589898080602002602001604051908101604052809392919081815260200183836020028082843760009201829052503093508a925089915088908890806115cb565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561264557600080fd5b505afa158015612659573d6000803e3d6000fd5b505050506040513d602081101561266f57600080fd5b505190508a8110156126e257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561275557600080fd5b505af1158015612769573d6000803e3d6000fd5b5050505061176d8882614b56565b60008060006127868585614c93565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401527f000000000000000000000000000000000000000000000000000000000000000090951b166069820152607d8101939093527ff16ce672144451d138eed853d57e4616c66cace4e953a121899bbd6e5643ca03609d808501919091528151808503909101815260bd9093019052815191012095945050505050565b606087428110156128ee57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061295357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146129f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b612a378e8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a8a613459565b91508c82600081518110612a4757fe5b60200260200101511115612abc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b612acc8c8c60008181106118ca57fe5b612b10828d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092508d91508c90508989614660565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d83600185510381518110612b5c57fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612b9a57600080fd5b505af1158015612bae573d6000803e3d6000fd5b505050506119708a83600185510381518110612bc657fe5b6020026020010151614b56565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608742811015612c8d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612cf257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612d9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b612dd68e8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a8a611981565b91508c82600184510381518110612de957fe5b60200260200101511015612abc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b60608742811015612ed057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b612f158e8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a8a613459565b91508c82600081518110612f2557fe5b602002602001015111156118ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b6060874281101561300c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c8c600081811061305057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146130ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6131348d8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a8a613459565b9150348260008151811061314457fe5b602002602001015111156131b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061320257fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561323557600080fd5b505af1158015613249573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8989600081811061329757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16846000815181106132c157fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561333257600080fd5b505af1158015613346573d6000803e3d6000fd5b505050506040513d602081101561335c57600080fd5b50516133c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b61340d828d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508f92508d91508c90508989614660565b8160008151811061341a57fe5b602002602001015134111561344957613449338360008151811061343a57fe5b60200260200101513403614b56565b509b9a5050505050505050505050565b60606002885110156134cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b87517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01861461355d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f504149525300000000000000000000000000000000000000604482015290519081900360640190fd5b8584146135cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f494e56414c49445f464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b875167ffffffffffffffff811180156135e357600080fd5b5060405190808252806020026020018201604052801561360d578160200160208202803683370190505b509050888160018351038151811061362157fe5b602090810291909101015287517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b8015611dd5576136a988886001840381811061366957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a600184038151811061369557fe5b60200260200101518b8481518110611bb057fe5b613761576000806137028a8a600186038181106136c257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c60018603815181106136ee57fe5b60200260200101518d8681518110611c1357fe5b9150915061373f84848151811061371557fe5b602002602001015183838b8b6001890381811061372e57fe5b9050602002013562ffffff16614dfc565b84600185038151811061374e57fe5b60200260200101818152505050506138d4565b87876001830381811061377057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663685639a98a83815181106137b457fe5b60200260200101518484815181106137c857fe5b602002602001015187876040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b15801561386b57600080fd5b505afa15801561387f573d6000803e3d6000fd5b505050506040513d602081101561389557600080fd5b5051825183907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84019081106138c757fe5b6020026020010181815250505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01613651565b6060874281101561396d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c8c60008181106139b157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613a5057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b613a95348d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a8a611981565b91508c82600184510381518110613aa857fe5b60200260200101511015613b1d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db083600081518110613b6657fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015613b9957600080fd5b505af1158015613bad573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89896000818110613bfb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684600081518110613c2557fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613c9657600080fd5b505af1158015613caa573d6000803e3d6000fd5b505050506040513d6020811015613cc057600080fd5b5051613d2d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b613449828d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508f92508d91508c90508989614660565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b60208310613e4f57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613e12565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613eb1576040519150601f19603f3d011682016040523d82523d6000602084013e613eb6565b606091505b5091509150818015613ee4575080511580613ee45750808060200190516020811015613ee157600080fd5b50515b613f39576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806151a56024913960400191505060405180910390fd5b505050505050565b60005b600188510381101561460b57613f83888281518110613f5f57fe5b6020026020010151898360010181518110613f7657fe5b6020026020010151614c93565b50506000888260010181518110613f9657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16898381518110613fc057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161090506000878784818110613fef57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008a848151811061401c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a082318a8a8781811061404b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156140c857600080fd5b505afa1580156140dc573d6000803e3d6000fd5b505050506040513d60208110156140f257600080fd5b5051905060006141478a8a8781811061410757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d878151811061413057fe5b60200260200101518e8860010181518110611bb057fe5b614224576000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561419457600080fd5b505afa1580156141a8573d6000803e3d6000fd5b505050506040513d60608110156141be57600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169350169050600080876141ed5782846141f0565b83835b9092509050614205868363ffffffff61461516565b95506142198683838f8f8e818110611c4957fe5b945050505050614489565b6000808b8b8881811061423357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c6d5c726040518163ffffffff1660e01b8152600401604080518083038186803b15801561429457600080fd5b505afa1580156142a8573d6000803e3d6000fd5b505050506040513d60408110156142be57600080fd5b50805160209091015190925090506142e9866142da57816142dc565b825b859063ffffffff61461516565b93508b8b888181106142f757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b19103b8f898151811061433b57fe5b602002602001015186600067ffffffffffffffff8111801561435c57600080fd5b506040519080825280601f01601f191660200182016040528015614387576020820181803683370190505b506040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561440c5781810151838201526020016143f4565b50505050905090810190601f1680156144395780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561445857600080fd5b505afa15801561446c573d6000803e3d6000fd5b505050506040513d602081101561448257600080fd5b5051925050505b600080856144995782600061449d565b6000835b91509150600060028f510388106144b4578d6144e1565b8c8c896001018181106144c357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff165b60408051600080825260208201928390527f022c0d9f000000000000000000000000000000000000000000000000000000008352602482018781526044830187905273ffffffffffffffffffffffffffffffffffffffff8086166064850152608060848501908152845160a48601819052969750908c169563022c0d9f958a958a958a9591949193919260c486019290918190849084905b83811015614591578181015183820152602001614579565b50505050905090810190601f1680156145be5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156145e057600080fd5b505af11580156145f4573d6000803e3d6000fd5b505060019099019850613f44975050505050505050565b5050505050505050565b600061465783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614fc8565b90505b92915050565b60005b600187510381101561460b5760008088838151811061467e57fe5b602002602001015189846001018151811061469557fe5b60200260200101519150915060006146ad8383614c93565b50905060008b85600101815181106146c157fe5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146147095782600061470d565b6000835b91509150600060028e51038810614724578c614751565b8b8b8960010181811061473357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff165b90508b8b8981811061475f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8484848e8e6040518663ffffffff1660e01b8152600401808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b15801561483e57600080fd5b505af1158015614852573d6000803e3d6000fd5b505060019099019850614663975050505050505050565b60006148758383612777565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161490509392505050565b60008060006148bb8585614c93565b5090506000808773ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561490757600080fd5b505afa15801561491b573d6000803e3d6000fd5b505050506040513d606081101561493157600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff8781169084161461497857808261497b565b81815b90999098509650505050505050565b60008085116149fa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b600084118015614a0a5750600083115b614a7557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b620f42408262ffffff161115614aec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f494e56414c494420464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000614b038662ffffff851663ffffffff61507916565b90506000614b17828663ffffffff61507916565b90506000614b3e83614b3289620f424063ffffffff61507916565b9063ffffffff6150ec16565b9050808281614b4957fe5b0498975050505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b60208310614bcd57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614b90565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614c2f576040519150601f19603f3d011682016040523d82523d6000602084013e614c34565b606091505b5050905080614c8e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806151826023913960400191505060405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614d3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614d6b578284614d6e565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614df557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b6000808511614e6c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b600084118015614e7c5750600083115b614ee757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b620f42408262ffffff161115614f5e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f494e56414c494420464545000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000614f83620f4240614f77878963ffffffff61507916565b9063ffffffff61507916565b90506000614fa062ffffff8516614f77878a63ffffffff61461516565b9050614fbd6001828481614fb057fe5b049063ffffffff6150ec16565b979650505050505050565b60008184841115615071576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561503657818101518382015260200161501e565b50505050905090810190601f1680156150635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000826150885750600061465a565b8282028284828161509557fe5b0414614657576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806151616021913960400191505060405180910390fd5b60008282018381101561465757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220a15ff5bcae50da36421d9cb52a7861aa1e24b0bb81654f61be9301932ea9328d64736f6c634300060b0033"
};

// src/contracts/router/OSWAP_HybridRouter.ts
var OSWAP_HybridRouter = class extends import_eth_wallet33.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_HybridRouter_json_default.abi, OSWAP_HybridRouter_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.oracleFactory, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async getAmountsIn(params) {
    let result = await this.call("getAmountsIn", [import_eth_wallet33.Utils.toString(params.amountOut), params.path, params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async getAmountsOut(params) {
    let result = await this.call("getAmountsOut", [import_eth_wallet33.Utils.toString(params.amountIn), params.path, params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async oracleFactory() {
    let result = await this.call("oracleFactory");
    return result;
  }
  async pairFor(params) {
    let result = await this.call("pairFor", [params.tokenA, params.tokenB]);
    return result;
  }
  async swapETHForExactTokens_send(params, _value) {
    let result = await this.send("swapETHForExactTokens", [import_eth_wallet33.Utils.toString(params.amountOut), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data], { value: _value });
    return result;
  }
  async swapETHForExactTokens_call(params, _value) {
    let result = await this.call("swapETHForExactTokens", [import_eth_wallet33.Utils.toString(params.amountOut), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data], { value: _value });
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async swapExactETHForTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokens", [import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data], { value: _value });
    return result;
  }
  async swapExactETHForTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokens", [import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data], { value: _value });
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee)], { value: _value });
    return result;
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee)], { value: _value });
    return;
  }
  async swapExactTokensForETH_send(params) {
    let result = await this.send("swapExactTokensForETH", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result;
  }
  async swapExactTokensForETH_call(params) {
    let result = await this.call("swapExactTokensForETH", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee)]);
    return result;
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee)]);
    return;
  }
  async swapExactTokensForTokens_send(params) {
    let result = await this.send("swapExactTokensForTokens", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result;
  }
  async swapExactTokensForTokens_call(params) {
    let result = await this.call("swapExactTokensForTokens", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee)]);
    return result;
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet33.Utils.toString(params.amountIn), import_eth_wallet33.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee)]);
    return;
  }
  async swapTokensForExactETH_send(params) {
    let result = await this.send("swapTokensForExactETH", [import_eth_wallet33.Utils.toString(params.amountOut), import_eth_wallet33.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result;
  }
  async swapTokensForExactETH_call(params) {
    let result = await this.call("swapTokensForExactETH", [import_eth_wallet33.Utils.toString(params.amountOut), import_eth_wallet33.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  async swapTokensForExactTokens_send(params) {
    let result = await this.send("swapTokensForExactTokens", [import_eth_wallet33.Utils.toString(params.amountOut), import_eth_wallet33.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result;
  }
  async swapTokensForExactTokens_call(params) {
    let result = await this.call("swapTokensForExactTokens", [import_eth_wallet33.Utils.toString(params.amountOut), import_eth_wallet33.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet33.Utils.toString(params.deadline), params.pair, import_eth_wallet33.Utils.toString(params.fee), params.data]);
    return result.map((e) => new import_eth_wallet33.BigNumber(e));
  }
  assign() {
    this.swapETHForExactTokens = Object.assign(this.swapETHForExactTokens_send, { call: this.swapETHForExactTokens_call });
    this.swapExactETHForTokens = Object.assign(this.swapExactETHForTokens_send, { call: this.swapExactETHForTokens_call });
    this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactETHForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactETHForTokensSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForETH = Object.assign(this.swapExactTokensForETH_send, { call: this.swapExactTokensForETH_call });
    this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForETHSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForETHSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForTokens = Object.assign(this.swapExactTokensForTokens_send, { call: this.swapExactTokensForTokens_call });
    this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForTokensSupportingFeeOnTransferTokens_call });
    this.swapTokensForExactETH = Object.assign(this.swapTokensForExactETH_send, { call: this.swapTokensForExactETH_call });
    this.swapTokensForExactTokens = Object.assign(this.swapTokensForExactTokens_send, { call: this.swapTokensForExactTokens_call });
  }
};

// src/contracts/router/OSWAP_HybridRouter2.ts
var import_eth_wallet34 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/router/OSWAP_HybridRouter2.json.ts
var OSWAP_HybridRouter2_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_registry", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsInEndsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsInStartsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOutEndsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOutStartsWith", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }], "name": "getPathIn", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }], "name": "getPathOut", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "registry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "60c06040523480156200001157600080fd5b5060405162005f9538038062005f95833981810160405260408110156200003757600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c615ea4620000f16000398061012f5280611155528061118252806112035280611b455280611c7a528061211752806121d152806127b8528061286552806128fa5280612b775280612ca15280612d715280612e7e5280612f4c5280612fe15250806117ab5280611e4d528061238252806133285280613ae55280615019528061558a5250615ea46000f3fe6080604052600436106101125760003560e01c8063aec5c92c116100a5578063e76c597511610074578063ed3b11ce11610059578063ed3b11ce14610de6578063eed476ea14610ed1578063f5181b7514610fc1576101bd565b8063e76c597514610bfe578063ed16c0b414610ce9576101bd565b8063aec5c92c14610877578063b132b5e114610967578063b66bd67c14610a64578063c1385f2414610af7576101bd565b80638164890f116100e15780638164890f146105cb5780638af13937146106d2578063ac8d3879146107cf578063ad5c464814610862576101bd565b8063127afa49146101c2578063274b96a51461030257806365d9e64b146103ed5780637b1039991461058d576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b3480156101ce57600080fd5b506102b2600480360360808110156101e557600080fd5b8135919081019060408101602082013564010000000081111561020757600080fd5b82018360208201111561021957600080fd5b8035906020019184602083028401116401000000008311171561023b57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335169260408101906020013564010000000081111561027357600080fd5b82018360208201111561028557600080fd5b803590602001918460018302840111640100000000831117156102a757600080fd5b5090925090506110b1565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102ee5781810151838201526020016102d6565b505050509050019250505060405180910390f35b6101bb600480360360a081101561031857600080fd5b8135919081019060408101602082013564010000000081111561033a57600080fd5b82018360208201111561034c57600080fd5b8035906020019184602083028401116401000000008311171561036e57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335169260208101359291906060810190604001356401000000008111156103ae57600080fd5b8201836020820111156103c057600080fd5b803590602001918460018302840111640100000000831117156103e257600080fd5b5090925090506110dc565b3480156103f957600080fd5b506104f4600480360360e081101561041057600080fd5b81359160208101359181019060608101604082013564010000000081111561043757600080fd5b82018360208201111561044957600080fd5b8035906020019184602083028401116401000000008311171561046b57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833581169360208101359091169260408201359290916080810190606001356401000000008111156104b557600080fd5b8201836020820111156104c757600080fd5b803590602001918460018302840111640100000000831117156104e957600080fd5b5090925090506115d5565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610538578181015183820152602001610520565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561057757818101518382015260200161055f565b5050505090500194505050505060405180910390f35b34801561059957600080fd5b506105a26117a9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156105d757600080fd5b506101bb600480360360e08110156105ee57600080fd5b81359160208101359181019060608101604082013564010000000081111561061557600080fd5b82018360208201111561062757600080fd5b8035906020019184602083028401116401000000008311171561064957600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335811693602081013590911692604082013592909160808101906060013564010000000081111561069357600080fd5b8201836020820111156106a557600080fd5b803590602001918460018302840111640100000000831117156106c757600080fd5b5090925090506117cd565b3480156106de57600080fd5b506104f4600480360360c08110156106f557600080fd5b81359160208101359181019060608101604082013564010000000081111561071c57600080fd5b82018360208201111561072e57600080fd5b8035906020019184602083028401116401000000008311171561075057600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561079057600080fd5b8201836020820111156107a257600080fd5b803590602001918460018302840111640100000000831117156107c457600080fd5b509092509050611acb565b3480156107db57600080fd5b506102b2600480360360408110156107f257600080fd5b81019060208101813564010000000081111561080d57600080fd5b82018360208201111561081f57600080fd5b8035906020019184602083028401116401000000008311171561084157600080fd5b91935091503573ffffffffffffffffffffffffffffffffffffffff16611d4a565b34801561086e57600080fd5b506105a2612115565b34801561088357600080fd5b506102b26004803603608081101561089a57600080fd5b813591908101906040810160208201356401000000008111156108bc57600080fd5b8201836020820111156108ce57600080fd5b803590602001918460208302840111640100000000831117156108f057600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335169260408101906020013564010000000081111561092857600080fd5b82018360208201111561093a57600080fd5b8035906020019184600183028401116401000000008311171561095c57600080fd5b509092509050612139565b34801561097357600080fd5b506104f4600480360360c081101561098a57600080fd5b8135916020810135918101906060810160408201356401000000008111156109b157600080fd5b8201836020820111156109c357600080fd5b803590602001918460208302840111640100000000831117156109e557600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610a2557600080fd5b820183602082011115610a3757600080fd5b80359060200191846001830284011164010000000083111715610a5957600080fd5b509092509050612157565b348015610a7057600080fd5b506102b260048036036040811015610a8757600080fd5b810190602081018135640100000000811115610aa257600080fd5b820183602082011115610ab457600080fd5b80359060200191846020830284011164010000000083111715610ad657600080fd5b91935091503573ffffffffffffffffffffffffffffffffffffffff1661227c565b348015610b0357600080fd5b506104f4600480360360e0811015610b1a57600080fd5b813591602081013591810190606081016040820135640100000000811115610b4157600080fd5b820183602082011115610b5357600080fd5b80359060200191846020830284011164010000000083111715610b7557600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83358116936020810135909116926040820135929091608081019060600135640100000000811115610bbf57600080fd5b820183602082011115610bd157600080fd5b80359060200191846001830284011164010000000083111715610bf357600080fd5b509092509050612639565b6104f4600480360360a0811015610c1457600080fd5b81359190810190604081016020820135640100000000811115610c3657600080fd5b820183602082011115610c4857600080fd5b80359060200191846020830284011164010000000083111715610c6a57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610caa57600080fd5b820183602082011115610cbc57600080fd5b80359060200191846001830284011164010000000083111715610cde57600080fd5b50909250905061273e565b348015610cf557600080fd5b506101bb600480360360c0811015610d0c57600080fd5b813591602081013591810190606081016040820135640100000000811115610d3357600080fd5b820183602082011115610d4557600080fd5b80359060200191846020830284011164010000000083111715610d6757600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610da757600080fd5b820183602082011115610db957600080fd5b80359060200191846001830284011164010000000083111715610ddb57600080fd5b509092509050612afe565b6104f4600480360360a0811015610dfc57600080fd5b81359190810190604081016020820135640100000000811115610e1e57600080fd5b820183602082011115610e3057600080fd5b80359060200191846020830284011164010000000083111715610e5257600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610e9257600080fd5b820183602082011115610ea457600080fd5b80359060200191846001830284011164010000000083111715610ec657600080fd5b509092509050612e04565b348015610edd57600080fd5b506102b260048036036080811015610ef457600080fd5b81359190810190604081016020820135640100000000811115610f1657600080fd5b820183602082011115610f2857600080fd5b80359060200191846020830284011164010000000083111715610f4a57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692604081019060200135640100000000811115610f8257600080fd5b820183602082011115610f9457600080fd5b80359060200191846001830284011164010000000083111715610fb657600080fd5b50909250905061319b565b348015610fcd57600080fd5b506102b260048036036080811015610fe457600080fd5b8135919081019060408101602082013564010000000081111561100657600080fd5b82018360208201111561101857600080fd5b8035906020019184602083028401116401000000008311171561103a57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335169260408101906020013564010000000081111561107257600080fd5b82018360208201111561108457600080fd5b803590602001918460018302840111640100000000831117156110a657600080fd5b5090925090506131a9565b6060806110bf878787611d4a565b90506110cf8882898988886131b7565b5098975050505050505050565b824281101561114c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b606061117988887f0000000000000000000000000000000000000000000000000000000000000000611d4a565b905060003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111e857600080fd5b505af11580156111fc573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a8a600081811061124a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156112d157600080fd5b505af11580156112e5573d6000803e3d6000fd5b505050506040513d60208110156112fb57600080fd5b505161136857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b60008260018451038151811061137a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d602081101561142857600080fd5b50516040805160208c810282810182019093528c82529293506114a09286928c92918f918f9182919085019084908082843760009201919091525050604080516020601f8e018190048102820181019092528c815292508c91508b908190840183828082843760009201919091525061383092505050565b8a61157182856001875103815181106114b557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561153957600080fd5b505afa15801561154d573d6000803e3d6000fd5b505050506040513d602081101561156357600080fd5b50519063ffffffff61445e16565b10156115c8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b5050505050505050505050565b606080844281101561164857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6116538a8a8a611d4a565b925060606116658d858d8d8a8a6131b7565b815191945091508c9084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061169c57fe5b602002602001015110156116fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b6117588460008151811061170b57fe5b6020026020010151338d8d600081811061172157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168660008151811061174b57fe5b60200260200101516144a9565b61179983858a8e8e80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250614671915050565b5050995099975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b824281101561183d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b606061184a898989611d4a565b90506118958160008151811061185c57fe5b6020026020010151338b8b600081811061187257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168e6144a9565b6000816001835103815181106118a757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d602081101561195557600080fd5b50516040805160208c810282810182019093528c82529293506119cd9285928b92918f918f9182919085019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061383092505050565b8a611a6682846001865103815181106119e257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a082318b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561153957600080fd5b1015611abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b505050505050505050505050565b6060808442811015611b3e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611b6989897f000000000000000000000000000000000000000000000000000000000000000061227c565b92506060611b7b8c858c8c8a8a6131b7565b815191945091508b9084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110611bb257fe5b60200260200101511015611c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b611c3784600081518110611c2157fe5b6020026020010151338c8c600081811061172157fe5b611c788385308d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250614671915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d84600186510381518110611cc457fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611d0257600080fd5b505af1158015611d16573d6000803e3d6000fd5b50505050611d3b8884600186510381518110611d2e57fe5b6020026020010151614be9565b50509850989650505050505050565b60608280611db957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b8060010167ffffffffffffffff81118015611dd357600080fd5b50604051908082528060200260200182016040528015611dfd578160200160208202803683370190505b5091508282600081518110611e0e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f2a1a2b88886040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050935050505060006040518083038186803b158015611eeb57600080fd5b505afa158015611eff573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040908152811015611f4657600080fd5b8101908080516040519392919084640100000000821115611f6657600080fd5b908301906020820185811115611f7b57600080fd5b8251866020820283011164010000000082111715611f9857600080fd5b82525081516020918201928201910280838360005b83811015611fc5578181015183820152602001611fad565b5050505090500160405260200180516040519392919084640100000000821115611fee57600080fd5b90830190602082018581111561200357600080fd5b825186602082028301116401000000008211171561202057600080fd5b82525081516020918201928201910280838360005b8381101561204d578181015183820152602001612035565b505050509050016040525050509150915060008090505b8381101561210a5761209d83828151811061207b57fe5b602002602001015183838151811061208f57fe5b602002602001015188614d26565b8582600101815181106120ac57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481600101815181106120f557fe5b60209081029190910101519550600101612064565b505050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608061214787878761227c565b90506110cf888289898888614eb1565b60608084428110156121ca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6121f589897f000000000000000000000000000000000000000000000000000000000000000061227c565b925060606122078c858c8c8a8a614eb1565b80925081945050508a8360008151811061221d57fe5b60200260200101511115611c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615e046024913960400191505060405180910390fd5b606082806122eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b8060010167ffffffffffffffff8111801561230557600080fd5b5060405190808252806020026020018201604052801561232f578160200160208202803683370190505b509150828260018451038151811061234357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506060807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631f2a1a2b88886040518363ffffffff1660e01b815260040180806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050935050505060006040518083038186803b15801561242057600080fd5b505afa158015612434573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604090815281101561247b57600080fd5b810190808051604051939291908464010000000082111561249b57600080fd5b9083019060208201858111156124b057600080fd5b82518660208202830111640100000000821117156124cd57600080fd5b82525081516020918201928201910280838360005b838110156124fa5781810151838201526020016124e2565b505050509050016040526020018051604051939291908464010000000082111561252357600080fd5b90830190602082018581111561253857600080fd5b825186602082028301116401000000008211171561255557600080fd5b82525081516020918201928201910280838360005b8381101561258257818101518382015260200161256a565b505050509050016040525050509150915060006001840390505b8381101561210a576125b383828151811061207b57fe5b8582815181106125bf57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084818151811061260557fe5b602090810291909101015195507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0161259c565b60608084428110156126ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6126b78a8a8a61227c565b925060606126c98d858d8d8a8a614eb1565b80925081945050508b836000815181106126df57fe5b602002602001015111156116fb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615e046024913960400191505060405180910390fd5b60608084428110156127b157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6127dc89897f0000000000000000000000000000000000000000000000000000000000000000611d4a565b925060606127ee8b858c8c8a8a614eb1565b8092508194505050348360008151811061280457fe5b60200260200101511115612863576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615e046024913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846000815181106128ac57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128df57600080fd5b505af11580156128f3573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8b600081811061294157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168560008151811061296b57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156129dc57600080fd5b505af11580156129f0573d6000803e3d6000fd5b505050506040513d6020811015612a0657600080fd5b5051612a7357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b612ab483858a8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250614671915050565b82600081518110612ac157fe5b6020026020010151341115612af057612af03384600081518110612ae157fe5b60200260200101513403614be9565b505097509795505050505050565b8242811015612b6e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6060612b9b88887f000000000000000000000000000000000000000000000000000000000000000061227c565b9050612be681600081518110612bad57fe5b6020026020010151338a8a6000818110612bc357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d6144a9565b612c5881308a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061383092505050565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b158015612ce857600080fd5b505afa158015612cfc573d6000803e3d6000fd5b505050506040513d6020811015612d1257600080fd5b5051905089811015612d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015612de257600080fd5b505af1158015612df6573d6000803e3d6000fd5b505050506115c88782614be9565b6060808442811015612e7757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b612ea289897f0000000000000000000000000000000000000000000000000000000000000000611d4a565b92506060612eb434858c8c8a8a6131b7565b815191945091508b9084907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908110612eeb57fe5b60200260200101511015612f4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db084600081518110612f9357fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612fc657600080fd5b505af1158015612fda573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8b600081811061302857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168560008151811061305257fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156130c357600080fd5b505af11580156130d7573d6000803e3d6000fd5b505050506040513d60208110156130ed57600080fd5b505161315a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b612af083858a8d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250889250614671915050565b606080612147878787611d4a565b6060806110bf87878761227c565b606080865167ffffffffffffffff811180156131d257600080fd5b506040519080825280602002602001820160405280156131fc578160200160208202803683370190505b5091508467ffffffffffffffff8111801561321657600080fd5b5060405190808252806020026020018201604052801561324a57816020015b60608152602001906001900390816132355790505b509050878260008151811061325b57fe5b6020026020010181815250506000805b60018951038110156138235760006132aa89898481811061328857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16615586565b905080600114806132bb5750806004145b156134695760008061331f8b8b868181106132d257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d86815181106132fb57fe5b60200260200101518e876001018151811061331257fe5b60200260200101516156d2565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88c91488e8e8981811061336e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156133ea57600080fd5b505afa1580156133fe573d6000803e3d6000fd5b505050506040513d604081101561341457600080fd5b5080516020909101518a519193509150613445908a908890811061343457fe5b6020026020010151858585856157b0565b89876001018151811061345457fe5b6020026020010181815250505050505061381a565b60606134ac88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892506158fe915050565b90945090506002821415613645578989848181106134c657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b19103b8c858151811061350a57fe5b602002602001015188868151811061351e57fe5b6020026020010151846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156135ab578181015183820152602001613593565b50505050905090810190601f1680156135d85780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156135f757600080fd5b505afa15801561360b573d6000803e3d6000fd5b505050506040513d602081101561362157600080fd5b5051865187906001860190811061363457fe5b602002602001018181525050613800565b89898481811061365157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166372ca73728c858151811061369557fe5b60200260200101518886815181106136a957fe5b602002602001015133856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613769578181015183820152602001613751565b50505050905090810190601f1680156137965780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b1580156137b657600080fd5b505afa1580156137ca573d6000803e3d6000fd5b505050506040513d60208110156137e057600080fd5b505186518790600186019081106137f357fe5b6020026020010181815250505b8085848151811061380d57fe5b6020026020010181905250505b5060010161326b565b5050965096945050505050565b6000805b60018651038110156144565761387386828151811061384f57fe5b602002602001015187836001018151811061386657fe5b6020026020010151615981565b5050600086826001018151811061388657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168783815181106138b057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1610905060008783815181106138df57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a0823187858151811061390e57fe5b60200260200101516040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561397657600080fd5b505afa15801561398a573d6000803e3d6000fd5b505050506040513d60208110156139a057600080fd5b5051865190915060009081906139c9908990879081106139bc57fe5b6020026020010151615586565b9050600060028b510386106139de57896139f6565b8886600101815181106139ed57fe5b60200260200101515b90508160011480613a075750816004145b15613e1c576000898781518110613a1a57fe5b602002602001015190506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613a6d57600080fd5b505afa158015613a81573d6000803e3d6000fd5b505050506040513d6060811015613a9757600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905060008089613ac6578284613ac9565b83835b9092509050613ade898363ffffffff61445e16565b98506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88c9148886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015613b7f57600080fd5b505afa158015613b93573d6000803e3d6000fd5b505050506040513d6040811015613ba957600080fd5b5080516020909101519092509050613bc48b858585856157b0565b99505050505050505060008086613bdd57846000613be1565b6000855b915091508360041415613cad578a8881518110613bfa57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636d9a640a8383866040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015613c9057600080fd5b505af1158015613ca4573d6000803e3d6000fd5b50505050613e15565b8a8881518110613cb957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f838386600067ffffffffffffffff81118015613cf757600080fd5b506040519080825280601f01601f191660200182016040528015613d22576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613dad578181015183820152602001613d95565b50505050905090810190601f168015613dda5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015613dfc57600080fd5b505af1158015613e10573d6000803e3d6000fd5b505050505b5050614445565b6060613e2889896158fe565b80925081995050506000808b8981518110613e3f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16633c6d5c726040518163ffffffff1660e01b8152600401604080518083038186803b158015613e8b57600080fd5b505afa158015613e9f573d6000803e3d6000fd5b505050506040513d6040811015613eb557600080fd5b5080516020909101519092509050613ee088613ed15781613ed3565b825b889063ffffffff61445e16565b9650505082600214156141665760008a8881518110613efb57fe5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff16633b19103b8e8a81518110613f2d57fe5b602002602001015188856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613fbb578181015183820152602001613fa3565b50505050905090810190601f168015613fe85780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b15801561400757600080fd5b505afa15801561401b573d6000803e3d6000fd5b505050506040513d602081101561403157600080fd5b505194506000808861404557866000614049565b6000875b915091508273ffffffffffffffffffffffffffffffffffffffff1663022c0d9f838388886040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156140f75781810151838201526020016140df565b50505050905090810190601f1680156141245780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561414657600080fd5b505af115801561415a573d6000803e3d6000fd5b50505050505050614443565b60008a888151811061417457fe5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff166372ca73728e8a815181106141a657fe5b60200260200101518833866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561426757818101518382015260200161424f565b50505050905090810190601f1680156142945780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b1580156142b457600080fd5b505afa1580156142c8573d6000803e3d6000fd5b505050506040513d60208110156142de57600080fd5b50519450600080886142f2578660006142f6565b6000875b915091508273ffffffffffffffffffffffffffffffffffffffff1663d7dc4e4383838833896040518663ffffffff1660e01b8152600401808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156143d75781810151838201526020016143bf565b50505050905090810190601f1680156144045780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801561442757600080fd5b505af115801561443b573d6000803e3d6000fd5b505050505050505b505b505060019093019250613834915050565b505050505050565b60006144a083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250615aea565b90505b92915050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061458757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161454a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146145e9576040519150601f19603f3d011682016040523d82523d6000602084013e6145ee565b606091505b509150915081801561461c57508051158061461c575080806020019051602081101561461957600080fd5b50515b614456576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180615e4b6024913960400191505060405180910390fd5b60005b600185510381101561445657600080600087848151811061469157fe5b60200260200101518885600101815181106146a857fe5b60200260200101519150915060006146c08383615981565b5090508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16149350505050600087836001018151811061470857fe5b602002602001015190506000808361472257826000614726565b6000835b91509150600060028a5103861061473d5788614755565b87866001018151811061474c57fe5b60200260200101515b905060006147688988815181106139bc57fe5b905080600114156148df5788878151811061477f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f858585600067ffffffffffffffff811180156147bd57600080fd5b506040519080825280601f01601f1916602001820160405280156147e8576020820181803683370190505b506040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561487357818101518382015260200161485b565b50505050905090810190601f1680156148a05780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156148c257600080fd5b505af11580156148d6573d6000803e3d6000fd5b50505050614bd7565b80600214156149b7578887815181106148f457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8585858c8c8151811061492657fe5b60200260200101516040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360008381101561487357818101518382015260200161485b565b8060031415614b13578887815181106149cc57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663d7dc4e43858585338d8d815181106149ff57fe5b60200260200101516040518663ffffffff1660e01b8152600401808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614ac3578181015183820152602001614aab565b50505050905090810190601f168015614af05780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156148c257600080fd5b8060041415614bd757888781518110614b2857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16636d9a640a8585856040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015614bbe57600080fd5b505af1158015614bd2573d6000803e3d6000fd5b505050505b50506001909401935061467492505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b60208310614c6057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614c23565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614cc2576040519150601f19603f3d011682016040523d82523d6000602084013e614cc7565b606091505b5050905080614d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180615e286023913960400191505060405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff841615801590614d62575073ffffffffffffffffffffffffffffffffffffffff831615155b614dcd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f504149525f4e4f545f444546494e454400000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614e08575081614eaa565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614e43575082614eaa565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f504149525f4e4f545f4d41544348000000000000000000000000000000000000604482015290519081900360640190fd5b9392505050565b606080865167ffffffffffffffff81118015614ecc57600080fd5b50604051908082528060200260200182016040528015614ef6578160200160208202803683370190505b5091508467ffffffffffffffff81118015614f1057600080fd5b50604051908082528060200260200182016040528015614f4457816020015b6060815260200190600190039081614f2f5790505b5090508782600184510381518110614f5857fe5b602090810291909101015286516000907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b8015613823576000614fa589896001850381811061328857fe5b90508060011480614fb65750806004145b1561515d576000806150108b8b60018703818110614fd057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d6001870381518110614ffc57fe5b60200260200101518e878151811061331257fe5b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b88c91488e8e60018a0381811061506257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b1580156150de57600080fd5b505afa1580156150f2573d6000803e3d6000fd5b505050506040513d604081101561510857600080fd5b5080516020909101518a519193509150615139908a908890811061512857fe5b602002602001015185858585615b9b565b89600188038151811061514857fe5b6020026020010181815250505050505061555e565b60606151a088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892506158fe915050565b9094509050600282141561535b578989600185038181106151bd57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663685639a98c858151811061520157fe5b602002602001015188868151811061521557fe5b6020026020010151846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156152a257818101518382015260200161528a565b50505050905090810190601f1680156152cf5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156152ee57600080fd5b505afa158015615302573d6000803e3d6000fd5b505050506040513d602081101561531857600080fd5b5051865187907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860190811061534a57fe5b602002602001018181525050615541565b81600314156155415789896001850381811061537357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea5dbbc48c85815181106153b757fe5b60200260200101518886815181106153cb57fe5b602002602001015133856040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561548b578181015183820152602001615473565b50505050905090810190601f1680156154b85780820380516001836020036101000a031916815260200191505b509550505050505060206040518083038186803b1580156154d857600080fd5b505afa1580156154ec573d6000803e3d6000fd5b505050506040513d602081101561550257600080fd5b5051865187907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860190811061553457fe5b6020026020010181815250505b8085600185038151811061555157fe5b6020026020010181905250505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01614f8b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d8a7c8a836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561562557600080fd5b505afa158015615639573d6000803e3d6000fd5b505050506040513d602081101561564f57600080fd5b5051905080158015906156625750600581105b6156cd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f504149525f4e4f545f524547434f4e495a454400000000000000000000000000604482015290519081900360640190fd5b919050565b60008060006156e18585615981565b5090506000808773ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561572d57600080fd5b505afa158015615741573d6000803e3d6000fd5b505050506040513d606081101561575757600080fd5b5080516020909101516dffffffffffffffffffffffffffff918216935016905073ffffffffffffffffffffffffffffffffffffffff8781169084161461579e5780826157a1565b81815b90999098509650505050505050565b600080861161582057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6000851180156158305750600084115b61589b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b60006158ad878563ffffffff615cd316565b905060006158c1828763ffffffff615cd316565b905060006158e5836158d98a8863ffffffff615cd316565b9063ffffffff615d4616565b90508082816158f057fe5b049998505050505050505050565b6000606083516020840193508084148185101715615979578385015181818601111561592957600080fd5b604051602082018101604052818152818601945080935060208101905060208688010160005b8381101561596757818101518382015260200161594f565b50602083038082015181840152505050505b509250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415615a1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610615a59578284615a5c565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216615ae357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b60008184841115615b93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615b58578181015183820152602001615b40565b50505050905090810190601f168015615b855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000808611615bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180615dbb6028913960400191505060405180910390fd5b600085118015615c055750600084115b615c7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f4c495155494449545900000000000000000000604482015290519081900360640190fd5b6000615c9283615c86888a63ffffffff615cd316565b9063ffffffff615cd316565b90506000615caa85615c86888b63ffffffff61445e16565b9050615cc76001828481615cba57fe5b049063ffffffff615d4616565b98975050505050505050565b600082615ce2575060006144a3565b82820282848281615cef57fe5b04146144a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180615de36021913960400191505060405180910390fd5b6000828201838110156144a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe487962726964526f757465723a20494e53554646494349454e545f4f55545055545f414d4f554e54536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77487962726964526f757465723a204558434553534956455f494e5055545f414d4f554e545472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212207f51fcbc56eb0977fa10ea1fc721b64dd63aef18983ca273bcc8f95c1794edc764736f6c634300060b0033"
};

// src/contracts/router/OSWAP_HybridRouter2.ts
var OSWAP_HybridRouter2 = class extends import_eth_wallet34.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_HybridRouter2_json_default.abi, OSWAP_HybridRouter2_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.registry, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async getAmountsInEndsWith(params) {
    let result = await this.call("getAmountsInEndsWith", [import_eth_wallet34.Utils.toString(params.amountOut), params.pair, params.tokenOut, params.data]);
    return result.map((e) => new import_eth_wallet34.BigNumber(e));
  }
  async getAmountsInStartsWith(params) {
    let result = await this.call("getAmountsInStartsWith", [import_eth_wallet34.Utils.toString(params.amountOut), params.pair, params.tokenIn, params.data]);
    return result.map((e) => new import_eth_wallet34.BigNumber(e));
  }
  async getAmountsOutEndsWith(params) {
    let result = await this.call("getAmountsOutEndsWith", [import_eth_wallet34.Utils.toString(params.amountIn), params.pair, params.tokenOut, params.data]);
    return result.map((e) => new import_eth_wallet34.BigNumber(e));
  }
  async getAmountsOutStartsWith(params) {
    let result = await this.call("getAmountsOutStartsWith", [import_eth_wallet34.Utils.toString(params.amountIn), params.pair, params.tokenIn, params.data]);
    return result.map((e) => new import_eth_wallet34.BigNumber(e));
  }
  async getPathIn(params) {
    let result = await this.call("getPathIn", [params.pair, params.tokenIn]);
    return result;
  }
  async getPathOut(params) {
    let result = await this.call("getPathOut", [params.pair, params.tokenOut]);
    return result;
  }
  async registry() {
    let result = await this.call("registry");
    return result;
  }
  async swapETHForExactTokens_send(params, _value) {
    let result = await this.send("swapETHForExactTokens", [import_eth_wallet34.Utils.toString(params.amountOut), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data], { value: _value });
    return result;
  }
  async swapETHForExactTokens_call(params, _value) {
    let result = await this.call("swapETHForExactTokens", [import_eth_wallet34.Utils.toString(params.amountOut), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data], { value: _value });
    return {
      path: result.path,
      amounts: result.amounts.map((e) => new import_eth_wallet34.BigNumber(e))
    };
  }
  async swapExactETHForTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokens", [import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data], { value: _value });
    return result;
  }
  async swapExactETHForTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokens", [import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data], { value: _value });
    return {
      path: result.path,
      amounts: result.amounts.map((e) => new import_eth_wallet34.BigNumber(e))
    };
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data], { value: _value });
    return result;
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data], { value: _value });
    return;
  }
  async swapExactTokensForETH_send(params) {
    let result = await this.send("swapExactTokensForETH", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return result;
  }
  async swapExactTokensForETH_call(params) {
    let result = await this.call("swapExactTokensForETH", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return {
      path: result.path,
      amounts: result.amounts.map((e) => new import_eth_wallet34.BigNumber(e))
    };
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return result;
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return;
  }
  async swapExactTokensForTokens_send(params) {
    let result = await this.send("swapExactTokensForTokens", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return result;
  }
  async swapExactTokensForTokens_call(params) {
    let result = await this.call("swapExactTokensForTokens", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return {
      path: result.path,
      amounts: result.amounts.map((e) => new import_eth_wallet34.BigNumber(e))
    };
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return result;
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet34.Utils.toString(params.amountIn), import_eth_wallet34.Utils.toString(params.amountOutMin), params.pair, params.tokenIn, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return;
  }
  async swapTokensForExactETH_send(params) {
    let result = await this.send("swapTokensForExactETH", [import_eth_wallet34.Utils.toString(params.amountOut), import_eth_wallet34.Utils.toString(params.amountInMax), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return result;
  }
  async swapTokensForExactETH_call(params) {
    let result = await this.call("swapTokensForExactETH", [import_eth_wallet34.Utils.toString(params.amountOut), import_eth_wallet34.Utils.toString(params.amountInMax), params.pair, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return {
      path: result.path,
      amounts: result.amounts.map((e) => new import_eth_wallet34.BigNumber(e))
    };
  }
  async swapTokensForExactTokens_send(params) {
    let result = await this.send("swapTokensForExactTokens", [import_eth_wallet34.Utils.toString(params.amountOut), import_eth_wallet34.Utils.toString(params.amountInMax), params.pair, params.tokenOut, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return result;
  }
  async swapTokensForExactTokens_call(params) {
    let result = await this.call("swapTokensForExactTokens", [import_eth_wallet34.Utils.toString(params.amountOut), import_eth_wallet34.Utils.toString(params.amountInMax), params.pair, params.tokenOut, params.to, import_eth_wallet34.Utils.toString(params.deadline), params.data]);
    return {
      path: result.path,
      amounts: result.amounts.map((e) => new import_eth_wallet34.BigNumber(e))
    };
  }
  assign() {
    this.swapETHForExactTokens = Object.assign(this.swapETHForExactTokens_send, { call: this.swapETHForExactTokens_call });
    this.swapExactETHForTokens = Object.assign(this.swapExactETHForTokens_send, { call: this.swapExactETHForTokens_call });
    this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactETHForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactETHForTokensSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForETH = Object.assign(this.swapExactTokensForETH_send, { call: this.swapExactTokensForETH_call });
    this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForETHSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForETHSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForTokens = Object.assign(this.swapExactTokensForTokens_send, { call: this.swapExactTokensForTokens_call });
    this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForTokensSupportingFeeOnTransferTokens_call });
    this.swapTokensForExactETH = Object.assign(this.swapTokensForExactETH_send, { call: this.swapTokensForExactETH_call });
    this.swapTokensForExactTokens = Object.assign(this.swapTokensForExactTokens_send, { call: this.swapTokensForExactTokens_call });
  }
};

// src/contracts/router/OSWAP_HybridRouterRegistry.ts
var import_eth_wallet35 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/router/OSWAP_HybridRouterRegistry.json.ts
var OSWAP_HybridRouterRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_governance", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "fee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "name": "CustomPairRegister", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": true, "internalType": "address", "name": "pair", "type": "address" }, { "indexed": false, "internalType": "address", "name": "token0", "type": "address" }, { "indexed": false, "internalType": "address", "name": "token1", "type": "address" }], "name": "PairRegister", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "factory", "type": "address" }, { "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "fee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "name": "ProtocolRegister", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "customPairs", "outputs": [{ "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pairAddress", "type": "address" }], "name": "getFee", "outputs": [{ "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pairAddress", "type": "address[]" }], "name": "getPairTokens", "outputs": [{ "internalType": "address[]", "name": "token0", "type": "address[]" }, { "internalType": "address[]", "name": "token1", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "pairAddress", "type": "address" }], "name": "getTypeCode", "outputs": [{ "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "_name", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_factory", "type": "address[]" }, { "internalType": "uint256[]", "name": "_fee", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_feeBase", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_typeCode", "type": "uint256[]" }], "name": "init", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pairs", "outputs": [{ "internalType": "address", "name": "factory", "type": "address" }, { "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "protocolList", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolListLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "protocols", "outputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "token0", "type": "address" }, { "internalType": "address", "name": "token1", "type": "address" }, { "internalType": "address", "name": "pairAddress", "type": "address" }, { "internalType": "uint256", "name": "fee", "type": "uint256" }, { "internalType": "uint256", "name": "feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "typeCode", "type": "uint256" }], "name": "registerPair", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "pairAddress", "type": "address" }], "name": "registerPairByAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "registerPairByIndex", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "registerPairByTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }, { "internalType": "uint256", "name": "pairIndex", "type": "uint256" }], "name": "registerPairByTokensV3", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address[]", "name": "pairAddress", "type": "address[]" }], "name": "registerPairsByAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "_factory", "type": "address[]" }, { "internalType": "address[]", "name": "pairAddress", "type": "address[]" }], "name": "registerPairsByAddress2", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "uint256[]", "name": "index", "type": "uint256[]" }], "name": "registerPairsByIndex", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address[]", "name": "_token0", "type": "address[]" }, { "internalType": "address[]", "name": "_token1", "type": "address[]" }], "name": "registerPairsByTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "address[]", "name": "_token0", "type": "address[]" }, { "internalType": "address[]", "name": "_token1", "type": "address[]" }, { "internalType": "uint256[]", "name": "_pairIndex", "type": "uint256[]" }], "name": "registerPairsByTokensV3", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "_name", "type": "bytes32" }, { "internalType": "address", "name": "_factory", "type": "address" }, { "internalType": "uint256", "name": "_fee", "type": "uint256" }, { "internalType": "uint256", "name": "_feeBase", "type": "uint256" }, { "internalType": "uint256", "name": "_typeCode", "type": "uint256" }], "name": "registerProtocol", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60806040523480156200001157600080fd5b50604051620032b0380380620032b0833981810160405260208110156200003757600080fd5b505160006200004e6001600160e01b03620000be16565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600580546001600160a01b0319166001600160a01b0392909216919091179055620000c2565b3390565b6131de80620000d26000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063715018a6116100ee5780639c5eda8411610097578063ed706dbd11610071578063ed706dbd14610ba7578063edf30da914610c67578063f2fde38b14610ca2578063fe33b30214610cd5576101a3565b80639c5eda8414610ad7578063b88c914814610b22578063d52f6d0214610b6e576101a3565b80638d8a7c8a116100c85780638d8a7c8a14610a0f5780638da5cb5b14610a425780639179f07814610a4a576101a3565b8063715018a61461097d578063837cd3fa146109855780638af7c6491461099f576101a3565b806326638a0a1161015057806346079b881161012a57806346079b881461085157806353ec54ae146108965780635aa6e67514610975576101a3565b806326638a0a146105eb5780632dc014b31461064457806330f802e5146107fc576101a3565b80630d36c409116101815780630d36c4091461028a57806314406f66146103b15780631f2a1a2b146104e2576101a3565b806307742f44146101a857806307b1d728146101f357806307c28c2614610244575b600080fd5b6101f1600480360360808110156101be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060600135610d40565b005b6102266004803603602081101561020957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610e96565b60408051938452602084019290925282820152519081900360600190f35b6102616004803603602081101561025a57600080fd5b5035610eb6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101f1600480360360408110156102a057600080fd5b8101906020810181356401000000008111156102bb57600080fd5b8201836020820111156102cd57600080fd5b803590602001918460208302840111640100000000831117156102ef57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561033f57600080fd5b82018360208201111561035157600080fd5b8035906020019184602083028401116401000000008311171561037357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610eea945050505050565b6101f1600480360360808110156103c757600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156103ff57600080fd5b82018360208201111561041157600080fd5b8035906020019184602083028401116401000000008311171561043357600080fd5b91939092909160208101903564010000000081111561045157600080fd5b82018360208201111561046357600080fd5b8035906020019184602083028401116401000000008311171561048557600080fd5b9193909290916020810190356401000000008111156104a357600080fd5b8201836020820111156104b557600080fd5b803590602001918460208302840111640100000000831117156104d757600080fd5b509092509050611069565b610552600480360360208110156104f857600080fd5b81019060208101813564010000000081111561051357600080fd5b82018360208201111561052557600080fd5b8035906020019184602083028401116401000000008311171561054757600080fd5b5090925090506112e3565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561059657818101518382015260200161057e565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105d55781810151838201526020016105bd565b5050505090500194505050505060405180910390f35b61061e6004803603602081101561060157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611486565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6101f1600480360360a081101561065a57600080fd5b81019060208101813564010000000081111561067557600080fd5b82018360208201111561068757600080fd5b803590602001918460208302840111640100000000831117156106a957600080fd5b9193909290916020810190356401000000008111156106c757600080fd5b8201836020820111156106d957600080fd5b803590602001918460208302840111640100000000831117156106fb57600080fd5b91939092909160208101903564010000000081111561071957600080fd5b82018360208201111561072b57600080fd5b8035906020019184602083028401116401000000008311171561074d57600080fd5b91939092909160208101903564010000000081111561076b57600080fd5b82018360208201111561077d57600080fd5b8035906020019184602083028401116401000000008311171561079f57600080fd5b9193909290916020810190356401000000008111156107bd57600080fd5b8201836020820111156107cf57600080fd5b803590602001918460208302840111640100000000831117156107f157600080fd5b5090925090506114af565b6101f1600480360360c081101561081257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101358216916040820135169060608101359060808101359060a001356116d2565b6101f16004803603606081101561086757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135821691604090910135166117f0565b6101f1600480360360608110156108ac57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156108e457600080fd5b8201836020820111156108f657600080fd5b8035906020019184602083028401116401000000008311171561091857600080fd5b91939092909160208101903564010000000081111561093657600080fd5b82018360208201111561094857600080fd5b8035906020019184602083028401116401000000008311171561096a57600080fd5b50909250905061196c565b610261611bfe565b6101f1611c1a565b61098d611d1a565b60408051918252519081900360200190f35b6101f1600480360360208110156109b557600080fd5b8101906020810181356401000000008111156109d057600080fd5b8201836020820111156109e257600080fd5b80359060200191846020830284011164010000000083111715610a0457600080fd5b509092509050611d20565b61098d60048036036020811015610a2557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612093565b610261612127565b6101f160048036036040811015610a6057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169190810190604081016020820135640100000000811115610a9857600080fd5b820183602082011115610aaa57600080fd5b80359060200191846020830284011164010000000083111715610acc57600080fd5b509092509050612143565b6101f1600480360360a0811015610aed57600080fd5b5080359073ffffffffffffffffffffffffffffffffffffffff602082013516906040810135906060810135906080013561228a565b610b5560048036036020811015610b3857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661239f565b6040805192835260208301919091528051918290030190f35b6101f160048036036040811015610b8457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612442565b6101f160048036036040811015610bbd57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235169190810190604081016020820135640100000000811115610bf557600080fd5b820183602082011115610c0757600080fd5b80359060200191846020830284011164010000000083111715610c2957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612567945050505050565b6101f160048036036040811015610c7d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516612624565b6101f160048036036020811015610cb857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166126c6565b610d0860048036036020811015610ceb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612850565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020819052604090912081015414610dd757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517f5eced48000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490529151600092871691635eced480916064808301926020929190829003018186803b158015610e5757600080fd5b505afa158015610e6b573d6000803e3d6000fd5b505050506040513d6020811015610e8157600080fd5b50519050610e8f858261288e565b5050505050565b600260208190526000918252604090912080546001820154919092015483565b60048181548110610ec357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b805182518114610f5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b60005b818110156110635760036000858381518110610f7657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301546003141561102b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b61105b84828151811061103a57fe5b602002602001015184838151811061104e57fe5b602002602001015161288e565b600101610f5e565b50505050565b73ffffffffffffffffffffffffffffffffffffffff871660009081526003602081905260409091208101541461110057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b8483811461116f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b60005b818110156112d85760008973ffffffffffffffffffffffffffffffffffffffff16635eced4808a8a858181106111a457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168989868181106111cd57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168888878181106111f657fe5b905060200201356040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561129757600080fd5b505afa1580156112ab573d6000803e3d6000fd5b505050506040513d60208110156112c157600080fd5b505190506112cf8a8261288e565b50600101611172565b505050505050505050565b606080828067ffffffffffffffff811180156112fe57600080fd5b50604051908082528060200260200182016040528015611328578160200160208202803683370190505b5092508067ffffffffffffffff8111801561134257600080fd5b5060405190808252806020026020018201604052801561136c578160200160208202803683370190505b50915060005b8181101561147d5760006001600088888581811061138c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685838151811061141657fe5b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526002820154855191169085908490811061144f57fe5b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015250600101611372565b50509250929050565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b6114b7612b4e565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161461154057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600454156115af57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f416c726561647920696e69740000000000000000000000000000000000000000604482015290519081900360640190fd5b8887811480156115be57508786145b80156115c957508582145b61163457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b60005b818110156116c4576116bc8c8c8381811061164e57fe5b905060200201358b8b8481811061166157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a8581811061168a57fe5b9050602002013589898681811061169d57fe5b905060200201358888878181106116b057fe5b90506020020135612b52565b600101611637565b505050505050505050505050565b600554604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a3818b3b91602480820192602092909190829003018186803b15801561174357600080fd5b505afa158015611757573d6000803e3d6000fd5b505050506040513d602081101561176d57600080fd5b50516117da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b6117e8868686868686612dbd565b505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360208190526040909120015415801590611850575073ffffffffffffffffffffffffffffffffffffffff83166000908152600360208190526040909120810154105b6118bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b604080517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152915160009286169163e6a43905916044808301926020929190829003018186803b15801561193457600080fd5b505afa158015611948573d6000803e3d6000fd5b505050506040513d602081101561195e57600080fd5b50519050611063848261288e565b73ffffffffffffffffffffffffffffffffffffffff851660009081526003602081905260409091200154158015906119cc575073ffffffffffffffffffffffffffffffffffffffff85166000908152600360208190526040909120810154105b611a3757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c696420747970650000000000000000000000000000000000000000604482015290519081900360640190fd5b82818114611aa657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6172726179206c656e677468206e6f74206d6174636800000000000000000000604482015290519081900360640190fd5b60005b81811015611bf55760008773ffffffffffffffffffffffffffffffffffffffff1663e6a43905888885818110611adb57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16878786818110611b0457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611bb457600080fd5b505afa158015611bc8573d6000803e3d6000fd5b505050506040513d6020811015611bde57600080fd5b50519050611bec888261288e565b50600101611aa9565b50505050505050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b611c22612b4e565b60005473ffffffffffffffffffffffffffffffffffffffff908116911614611cab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60045490565b600554604080517fb15866e6000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163b15866e691602480820192602092909190829003018186803b158015611d9157600080fd5b505afa158015611da5573d6000803e3d6000fd5b505050506040513d6020811015611dbb57600080fd5b5051611e2857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b60018111611e9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c6964206c656e677468000000000000000000000000000000000000604482015290519081900360640190fd5b600082826000818110611ea657fe5b60200291909101359150506006821415611f6557807f726567697374657250726f746f636f6c000000000000000000000000000000001415611f6057611f5a83836001818110611ef257fe5b9050602002013584846002818110611f0657fe5b9050602002013560601c85856003818110611f1d57fe5b9050602002013560001c86866004818110611f3457fe5b9050602002013560001c87876005818110611f4b57fe5b9050602002013560001c612b52565b5061208f565b612028565b600782141561202857807f7265676973746572506169720000000000000000000000000000000000000000141561202857611f5a83836001818110611fa657fe5b9050602002013560601c84846002818110611fbd57fe5b9050602002013560601c85856003818110611fd457fe5b9050602002013560601c86866004818110611feb57fe5b9050602002013560001c8787600581811061200257fe5b9050602002013560001c8888600681811061201957fe5b9050602002013560001c612dbd565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d65746572730000000000000000000000000000604482015290519081900360640190fd5b5050565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526001602052604081205490911680156120f45773ffffffffffffffffffffffffffffffffffffffff8116600090815260036020819052604090912001549150612121565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260208190526040909120015491505b50919050565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020819052604090912001546121d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b8060005b81811015610e8f5760008573ffffffffffffffffffffffffffffffffffffffff16631e3dd18b86868581811061220e57fe5b905060200201356040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561224957600080fd5b505afa15801561225d573d6000803e3d6000fd5b505050506040513d602081101561227357600080fd5b50519050612281868261288e565b506001016121dc565b600554604080517fa3818b3b000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163a3818b3b91602480820192602092909190829003018186803b1580156122fb57600080fd5b505afa15801561230f573d6000803e3d6000fd5b505050506040513d602081101561232557600080fd5b505161239257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f742066726f6d20766f74696e670000000000000000000000000000000000604482015290519081900360640190fd5b610e8f8585858585612b52565b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600160205260408120549091829116801561240b5773ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090206001810154600290910154909350915061243c565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040902060018101549054935091505b50915091565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912001546124d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff16631e3dd18b836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561252a57600080fd5b505afa15801561253e573d6000803e3d6000fd5b505050506040513d602081101561255457600080fd5b50519050612562838261288e565b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912081015414156125ff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b805160005b818110156110635761261c8484838151811061104e57fe5b600101612604565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020819052604090912081015414156126bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b61208f828261288e565b6126ce612b4e565b60005473ffffffffffffffffffffffffffffffffffffffff90811691161461275757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166127c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806131606026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600160208190526000918252604090912080549181015460029091015473ffffffffffffffffffffffffffffffffffffffff92831692918216911683565b73ffffffffffffffffffffffffffffffffffffffff81166128fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806131866023913960400191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561294457600080fd5b505af1158015612958573d6000803e3d6000fd5b505050506040513d602081101561296e57600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff85169163d21220a791600480830192602092919082900301818787803b1580156129dd57600080fd5b505af11580156129f1573d6000803e3d6000fd5b505050506040513d6020811015612a0757600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff80821690831610612a9257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420746f6b656e73206f72646572000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600160208181526040928390208054868b167fffffffffffffffffffffffff00000000000000000000000000000000000000009182168117835593820180548a891690831681179091556002909201805497891697909116871790558351908152908101949094528151929390927f07860c96452446c5761a5adeb8371913b7cdcadcae0b6de6a2185692d0abcd19929181900390910190a350505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8416612bd457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c69642070726f746f636f6c20616464726573730000000000000000604482015290519081900360640190fd5b81831115612c4357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f46656520746f6f206c6172676500000000000000000000000000000000000000604482015290519081900360640190fd5b60008211612cb257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b60408051608080820183528782526020808301878152838501878152606080860188815273ffffffffffffffffffffffffffffffffffffffff8c16600081815260038088528a822099518a5595516001808b0191909155945160028a0155915197909401969096556004805492830181559095527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168217905584518a8152918201889052818501879052928101859052925191927f4647302d46fbbda75aa1966c4e2d24de38981639223ee539cc8409190780c192929081900390910190a25050505050565b73ffffffffffffffffffffffffffffffffffffffff8616612e3f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420746f6b656e20616464726573730000000000000000000000604482015290519081900360640190fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1610612ed957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c696420746f6b656e206f7264657200000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8416612f5b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420706169722061646472657373000000000000000000000000604482015290519081900360640190fd5b81831115612fca57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f46656520746f6f206c6172676500000000000000000000000000000000000000604482015290519081900360640190fd5b6000821161303957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50726f746f636f6c206e6f7420726567636f6e697a6564000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808516600081815260016020818152604080842080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825581850180548f8a16908316811790915560029283018054998f169990921689179091558184528286208b81559485018a905593018790558051928352908201949094528351929391927f07860c96452446c5761a5adeb8371913b7cdcadcae0b6de6a2185692d0abcd19929181900390910190a36040805184815260208101849052808201839052905173ffffffffffffffffffffffffffffffffffffffff8616917f468d5e8323e9769eda1c0370b2f3c84ea8e2424256a85fd5fb8cf06653c5ad75919081900360600190a250505050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e76616c6964207061697220616464726573732f50616972206e6f7420666f756e64a2646970667358221220cd1f7a0b4bfe8f1b9cda09ff0bd16017faafcde7d5b18fb1f3adb07bd4689d8a64736f6c634300060b0033"
};

// src/contracts/router/OSWAP_HybridRouterRegistry.ts
var OSWAP_HybridRouterRegistry = class extends import_eth_wallet35.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_HybridRouterRegistry_json_default.abi, OSWAP_HybridRouterRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(governance) {
    return this._deploy(governance);
  }
  parseCustomPairRegisterEvent(receipt) {
    return this.parseEvents(receipt, "CustomPairRegister").map((e) => this.decodeCustomPairRegisterEvent(e));
  }
  decodeCustomPairRegisterEvent(event) {
    let result = event.data;
    return {
      pair: result.pair,
      fee: new import_eth_wallet35.BigNumber(result.fee),
      feeBase: new import_eth_wallet35.BigNumber(result.feeBase),
      typeCode: new import_eth_wallet35.BigNumber(result.typeCode),
      _event: event
    };
  }
  parseOwnershipTransferredEvent(receipt) {
    return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
  }
  decodeOwnershipTransferredEvent(event) {
    let result = event.data;
    return {
      previousOwner: result.previousOwner,
      newOwner: result.newOwner,
      _event: event
    };
  }
  parsePairRegisterEvent(receipt) {
    return this.parseEvents(receipt, "PairRegister").map((e) => this.decodePairRegisterEvent(e));
  }
  decodePairRegisterEvent(event) {
    let result = event.data;
    return {
      factory: result.factory,
      pair: result.pair,
      token0: result.token0,
      token1: result.token1,
      _event: event
    };
  }
  parseProtocolRegisterEvent(receipt) {
    return this.parseEvents(receipt, "ProtocolRegister").map((e) => this.decodeProtocolRegisterEvent(e));
  }
  decodeProtocolRegisterEvent(event) {
    let result = event.data;
    return {
      factory: result.factory,
      name: result.name,
      fee: new import_eth_wallet35.BigNumber(result.fee),
      feeBase: new import_eth_wallet35.BigNumber(result.feeBase),
      typeCode: new import_eth_wallet35.BigNumber(result.typeCode),
      _event: event
    };
  }
  async customPairs(param1) {
    let result = await this.call("customPairs", [param1]);
    return {
      fee: new import_eth_wallet35.BigNumber(result.fee),
      feeBase: new import_eth_wallet35.BigNumber(result.feeBase),
      typeCode: new import_eth_wallet35.BigNumber(result.typeCode)
    };
  }
  async execute_send(params) {
    let result = await this.send("execute", [import_eth_wallet35.Utils.stringToBytes32(params)]);
    return result;
  }
  async execute_call(params) {
    let result = await this.call("execute", [import_eth_wallet35.Utils.stringToBytes32(params)]);
    return;
  }
  async getFee(pairAddress) {
    let result = await this.call("getFee", [pairAddress]);
    return {
      fee: new import_eth_wallet35.BigNumber(result.fee),
      feeBase: new import_eth_wallet35.BigNumber(result.feeBase)
    };
  }
  async getPairTokens(pairAddress) {
    let result = await this.call("getPairTokens", [pairAddress]);
    return {
      token0: result.token0,
      token1: result.token1
    };
  }
  async getTypeCode(pairAddress) {
    let result = await this.call("getTypeCode", [pairAddress]);
    return new import_eth_wallet35.BigNumber(result);
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async init_send(params) {
    let result = await this.send("init", [import_eth_wallet35.Utils.stringToBytes32(params.name), params.factory, import_eth_wallet35.Utils.toString(params.fee), import_eth_wallet35.Utils.toString(params.feeBase), import_eth_wallet35.Utils.toString(params.typeCode)]);
    return result;
  }
  async init_call(params) {
    let result = await this.call("init", [import_eth_wallet35.Utils.stringToBytes32(params.name), params.factory, import_eth_wallet35.Utils.toString(params.fee), import_eth_wallet35.Utils.toString(params.feeBase), import_eth_wallet35.Utils.toString(params.typeCode)]);
    return;
  }
  async owner() {
    let result = await this.call("owner");
    return result;
  }
  async pairs(param1) {
    let result = await this.call("pairs", [param1]);
    return {
      factory: result.factory,
      token0: result.token0,
      token1: result.token1
    };
  }
  async protocolList(param1) {
    let result = await this.call("protocolList", [import_eth_wallet35.Utils.toString(param1)]);
    return result;
  }
  async protocolListLength() {
    let result = await this.call("protocolListLength");
    return new import_eth_wallet35.BigNumber(result);
  }
  async protocols(param1) {
    let result = await this.call("protocols", [param1]);
    return {
      name: result.name,
      fee: new import_eth_wallet35.BigNumber(result.fee),
      feeBase: new import_eth_wallet35.BigNumber(result.feeBase),
      typeCode: new import_eth_wallet35.BigNumber(result.typeCode)
    };
  }
  async registerPair_send(params) {
    let result = await this.send("registerPair", [params.token0, params.token1, params.pairAddress, import_eth_wallet35.Utils.toString(params.fee), import_eth_wallet35.Utils.toString(params.feeBase), import_eth_wallet35.Utils.toString(params.typeCode)]);
    return result;
  }
  async registerPair_call(params) {
    let result = await this.call("registerPair", [params.token0, params.token1, params.pairAddress, import_eth_wallet35.Utils.toString(params.fee), import_eth_wallet35.Utils.toString(params.feeBase), import_eth_wallet35.Utils.toString(params.typeCode)]);
    return;
  }
  async registerPairByAddress_send(params) {
    let result = await this.send("registerPairByAddress", [params.factory, params.pairAddress]);
    return result;
  }
  async registerPairByAddress_call(params) {
    let result = await this.call("registerPairByAddress", [params.factory, params.pairAddress]);
    return;
  }
  async registerPairByIndex_send(params) {
    let result = await this.send("registerPairByIndex", [params.factory, import_eth_wallet35.Utils.toString(params.index)]);
    return result;
  }
  async registerPairByIndex_call(params) {
    let result = await this.call("registerPairByIndex", [params.factory, import_eth_wallet35.Utils.toString(params.index)]);
    return;
  }
  async registerPairByTokens_send(params) {
    let result = await this.send("registerPairByTokens", [params.factory, params.token0, params.token1]);
    return result;
  }
  async registerPairByTokens_call(params) {
    let result = await this.call("registerPairByTokens", [params.factory, params.token0, params.token1]);
    return;
  }
  async registerPairByTokensV3_send(params) {
    let result = await this.send("registerPairByTokensV3", [params.factory, params.token0, params.token1, import_eth_wallet35.Utils.toString(params.pairIndex)]);
    return result;
  }
  async registerPairByTokensV3_call(params) {
    let result = await this.call("registerPairByTokensV3", [params.factory, params.token0, params.token1, import_eth_wallet35.Utils.toString(params.pairIndex)]);
    return;
  }
  async registerPairsByAddress_send(params) {
    let result = await this.send("registerPairsByAddress", [params.factory, params.pairAddress]);
    return result;
  }
  async registerPairsByAddress_call(params) {
    let result = await this.call("registerPairsByAddress", [params.factory, params.pairAddress]);
    return;
  }
  async registerPairsByAddress2_send(params) {
    let result = await this.send("registerPairsByAddress2", [params.factory, params.pairAddress]);
    return result;
  }
  async registerPairsByAddress2_call(params) {
    let result = await this.call("registerPairsByAddress2", [params.factory, params.pairAddress]);
    return;
  }
  async registerPairsByIndex_send(params) {
    let result = await this.send("registerPairsByIndex", [params.factory, import_eth_wallet35.Utils.toString(params.index)]);
    return result;
  }
  async registerPairsByIndex_call(params) {
    let result = await this.call("registerPairsByIndex", [params.factory, import_eth_wallet35.Utils.toString(params.index)]);
    return;
  }
  async registerPairsByTokens_send(params) {
    let result = await this.send("registerPairsByTokens", [params.factory, params.token0, params.token1]);
    return result;
  }
  async registerPairsByTokens_call(params) {
    let result = await this.call("registerPairsByTokens", [params.factory, params.token0, params.token1]);
    return;
  }
  async registerPairsByTokensV3_send(params) {
    let result = await this.send("registerPairsByTokensV3", [params.factory, params.token0, params.token1, import_eth_wallet35.Utils.toString(params.pairIndex)]);
    return result;
  }
  async registerPairsByTokensV3_call(params) {
    let result = await this.call("registerPairsByTokensV3", [params.factory, params.token0, params.token1, import_eth_wallet35.Utils.toString(params.pairIndex)]);
    return;
  }
  async registerProtocol_send(params) {
    let result = await this.send("registerProtocol", [import_eth_wallet35.Utils.stringToBytes32(params.name), params.factory, import_eth_wallet35.Utils.toString(params.fee), import_eth_wallet35.Utils.toString(params.feeBase), import_eth_wallet35.Utils.toString(params.typeCode)]);
    return result;
  }
  async registerProtocol_call(params) {
    let result = await this.call("registerProtocol", [import_eth_wallet35.Utils.stringToBytes32(params.name), params.factory, import_eth_wallet35.Utils.toString(params.fee), import_eth_wallet35.Utils.toString(params.feeBase), import_eth_wallet35.Utils.toString(params.typeCode)]);
    return;
  }
  async renounceOwnership_send() {
    let result = await this.send("renounceOwnership");
    return result;
  }
  async renounceOwnership_call() {
    let result = await this.call("renounceOwnership");
    return;
  }
  async transferOwnership_send(newOwner) {
    let result = await this.send("transferOwnership", [newOwner]);
    return result;
  }
  async transferOwnership_call(newOwner) {
    let result = await this.call("transferOwnership", [newOwner]);
    return;
  }
  assign() {
    this.execute = Object.assign(this.execute_send, { call: this.execute_call });
    this.init = Object.assign(this.init_send, { call: this.init_call });
    this.registerPair = Object.assign(this.registerPair_send, { call: this.registerPair_call });
    this.registerPairByAddress = Object.assign(this.registerPairByAddress_send, { call: this.registerPairByAddress_call });
    this.registerPairByIndex = Object.assign(this.registerPairByIndex_send, { call: this.registerPairByIndex_call });
    this.registerPairByTokens = Object.assign(this.registerPairByTokens_send, { call: this.registerPairByTokens_call });
    this.registerPairByTokensV3 = Object.assign(this.registerPairByTokensV3_send, { call: this.registerPairByTokensV3_call });
    this.registerPairsByAddress = Object.assign(this.registerPairsByAddress_send, { call: this.registerPairsByAddress_call });
    this.registerPairsByAddress2 = Object.assign(this.registerPairsByAddress2_send, { call: this.registerPairsByAddress2_call });
    this.registerPairsByIndex = Object.assign(this.registerPairsByIndex_send, { call: this.registerPairsByIndex_call });
    this.registerPairsByTokens = Object.assign(this.registerPairsByTokens_send, { call: this.registerPairsByTokens_call });
    this.registerPairsByTokensV3 = Object.assign(this.registerPairsByTokensV3_send, { call: this.registerPairsByTokensV3_call });
    this.registerProtocol = Object.assign(this.registerProtocol_send, { call: this.registerProtocol_call });
    this.renounceOwnership = Object.assign(this.renounceOwnership_send, { call: this.renounceOwnership_call });
    this.transferOwnership = Object.assign(this.transferOwnership_send, { call: this.transferOwnership_call });
  }
};

// src/contracts/router/OSWAP_OracleRouter.ts
var import_eth_wallet36 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/router/OSWAP_OracleRouter.json.ts
var OSWAP_OracleRouter_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_ammFactory", "type": "address" }, { "internalType": "address", "name": "_oracleFactory", "type": "address" }, { "internalType": "address", "name": "_WETH", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [], "name": "WETH", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "ammFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsIn", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getAmountsOut", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "getLatestPrice", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "oracleFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactETHForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForETHSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "amountOutMin", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapExactTokensForTokensSupportingFeeOnTransferTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactETH", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "amountInMax", "type": "uint256" }, { "internalType": "address[]", "name": "path", "type": "address[]" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "internalType": "bool[]", "name": "useOracle", "type": "bool[]" }, { "internalType": "bytes", "name": "data", "type": "bytes" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "60e060405234801561001057600080fd5b5060405162004ccb38038062004ccb8339818101604052606081101561003557600080fd5b50805160208201516040909201516001600160601b0319606092831b811660805292821b831660a052901b1660c05260805160601c60a05160601c60c05160601c614bcd620000fe6000398061012f52806112d8528061145252806114e75280611cb55280611ee35280611fc9528061272552806128cb52806129fe5280612b565280612bd75280612f115280612fbc528061357e52806136f5528061378a5250806134c45280613a7b5280613cc852806141ea5250806134e85280613a555250614bcd6000f3fe6080604052600436106101125760003560e01c80636e20a8ac116100a5578063c4f1be6111610074578063dacda92f11610059578063dacda92f14610fc3578063eef56c7614610fd8578063f39db2c614611115576101bd565b8063c4f1be6114610e86578063c7f7fb9014610fae576101bd565b80636e20a8ac14610a6d5780638e933c4c14610bbc578063ad5c464814610cf9578063b890b39714610d37576101bd565b8063495e4348116100e1578063495e43481461071557806350ab4df6146107ca5780635594e318146108745780636b1c9d50146109c3576101bd565b806311308430146101c257806323f2f4d31461034f578063315deba61461049e5780633feeb15a146105c6576101bd565b366101bd573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b005b600080fd5b6102ff600480360360c08110156101d857600080fd5b813591908101906040810160208201356401000000008111156101fa57600080fd5b82018360208201111561020c57600080fd5b8035906020019184602083028401116401000000008311171561022e57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561026e57600080fd5b82018360208201111561028057600080fd5b803590602001918460208302840111640100000000831117156102a257600080fd5b9193909290916020810190356401000000008111156102c057600080fd5b8201836020820111156102d257600080fd5b803590602001918460018302840111640100000000831117156102f457600080fd5b509092509050611264565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033b578181015183820152602001610323565b505050509050019250505060405180910390f35b34801561035b57600080fd5b506102ff600480360360e081101561037257600080fd5b81359160208101359181019060608101604082013564010000000081111561039957600080fd5b8201836020820111156103ab57600080fd5b803590602001918460208302840111640100000000831117156103cd57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561040d57600080fd5b82018360208201111561041f57600080fd5b8035906020019184602083028401116401000000008311171561044157600080fd5b91939092909160208101903564010000000081111561045f57600080fd5b82018360208201111561047157600080fd5b8035906020019184600183028401116401000000008311171561049357600080fd5b5090925090506116c6565b3480156104aa57600080fd5b506102ff600480360360808110156104c157600080fd5b813591908101906040810160208201356401000000008111156104e357600080fd5b8201836020820111156104f557600080fd5b8035906020019184602083028401116401000000008311171561051757600080fd5b91939092909160208101903564010000000081111561053557600080fd5b82018360208201111561054757600080fd5b8035906020019184602083028401116401000000008311171561056957600080fd5b91939092909160208101903564010000000081111561058757600080fd5b82018360208201111561059957600080fd5b803590602001918460018302840111640100000000831117156105bb57600080fd5b50909250905061189a565b3480156105d257600080fd5b506101bb600480360360e08110156105e957600080fd5b81359160208101359181019060608101604082013564010000000081111561061057600080fd5b82018360208201111561062257600080fd5b8035906020019184602083028401116401000000008311171561064457600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561068457600080fd5b82018360208201111561069657600080fd5b803590602001918460208302840111640100000000831117156106b857600080fd5b9193909290916020810190356401000000008111156106d657600080fd5b8201836020820111156106e857600080fd5b8035906020019184600183028401116401000000008311171561070a57600080fd5b509092509050611c2e565b34801561072157600080fd5b506107b86004803603606081101561073857600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359091169181019060608101604082013564010000000081111561077957600080fd5b82018360208201111561078b57600080fd5b803590602001918460018302840111640100000000831117156107ad57600080fd5b50909250905061206a565b60408051918252519081900360200190f35b3480156107d657600080fd5b506107b8600480360360808110156107ed57600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff60208201358116926040830135909116919081019060808101606082013564010000000081111561083557600080fd5b82018360208201111561084757600080fd5b8035906020019184600183028401116401000000008311171561086957600080fd5b509092509050612170565b34801561088057600080fd5b506101bb600480360360e081101561089757600080fd5b8135916020810135918101906060810160408201356401000000008111156108be57600080fd5b8201836020820111156108d057600080fd5b803590602001918460208302840111640100000000831117156108f257600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561093257600080fd5b82018360208201111561094457600080fd5b8035906020019184602083028401116401000000008311171561096657600080fd5b91939092909160208101903564010000000081111561098457600080fd5b82018360208201111561099657600080fd5b803590602001918460018302840111640100000000831117156109b857600080fd5b509092509050612236565b3480156109cf57600080fd5b506107b8600480360360808110156109e657600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff602082013581169260408301359091169190810190608081016060820135640100000000811115610a2e57600080fd5b820183602082011115610a4057600080fd5b80359060200191846001830284011164010000000083111715610a6257600080fd5b5090925090506125d6565b348015610a7957600080fd5b506102ff600480360360e0811015610a9057600080fd5b813591602081013591810190606081016040820135640100000000811115610ab757600080fd5b820183602082011115610ac957600080fd5b80359060200191846020830284011164010000000083111715610aeb57600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610b2b57600080fd5b820183602082011115610b3d57600080fd5b80359060200191846020830284011164010000000083111715610b5f57600080fd5b919390929091602081019035640100000000811115610b7d57600080fd5b820183602082011115610b8f57600080fd5b80359060200191846001830284011164010000000083111715610bb157600080fd5b50909250905061269c565b6101bb600480360360c0811015610bd257600080fd5b81359190810190604081016020820135640100000000811115610bf457600080fd5b820183602082011115610c0657600080fd5b80359060200191846020830284011164010000000083111715610c2857600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610c6857600080fd5b820183602082011115610c7a57600080fd5b80359060200191846020830284011164010000000083111715610c9c57600080fd5b919390929091602081019035640100000000811115610cba57600080fd5b820183602082011115610ccc57600080fd5b80359060200191846001830284011164010000000083111715610cee57600080fd5b50909250905061298c565b348015610d0557600080fd5b50610d0e612f0f565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b348015610d4357600080fd5b506102ff600480360360e0811015610d5a57600080fd5b813591602081013591810190606081016040820135640100000000811115610d8157600080fd5b820183602082011115610d9357600080fd5b80359060200191846020830284011164010000000083111715610db557600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff833516926020810135929190606081019060400135640100000000811115610df557600080fd5b820183602082011115610e0757600080fd5b80359060200191846020830284011164010000000083111715610e2957600080fd5b919390929091602081019035640100000000811115610e4757600080fd5b820183602082011115610e5957600080fd5b80359060200191846001830284011164010000000083111715610e7b57600080fd5b509092509050612f33565b348015610e9257600080fd5b506102ff60048036036080811015610ea957600080fd5b81359190810190604081016020820135640100000000811115610ecb57600080fd5b820183602082011115610edd57600080fd5b80359060200191846020830284011164010000000083111715610eff57600080fd5b919390929091602081019035640100000000811115610f1d57600080fd5b820183602082011115610f2f57600080fd5b80359060200191846020830284011164010000000083111715610f5157600080fd5b919390929091602081019035640100000000811115610f6f57600080fd5b820183602082011115610f8157600080fd5b80359060200191846001830284011164010000000083111715610fa357600080fd5b50909250905061313d565b348015610fba57600080fd5b50610d0e6134c2565b348015610fcf57600080fd5b50610d0e6134e6565b6102ff600480360360c0811015610fee57600080fd5b8135919081019060408101602082013564010000000081111561101057600080fd5b82018360208201111561102257600080fd5b8035906020019184602083028401116401000000008311171561104457600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff83351692602081013592919060608101906040013564010000000081111561108457600080fd5b82018360208201111561109657600080fd5b803590602001918460208302840111640100000000831117156110b857600080fd5b9193909290916020810190356401000000008111156110d657600080fd5b8201836020820111156110e857600080fd5b8035906020019184600183028401116401000000008311171561110a57600080fd5b50909250905061350a565b34801561112157600080fd5b506102ff600480360360e081101561113857600080fd5b81359160208101359181019060608101604082013564010000000081111561115f57600080fd5b82018360208201111561117157600080fd5b8035906020019184602083028401116401000000008311171561119357600080fd5b9193909273ffffffffffffffffffffffffffffffffffffffff8335169260208101359291906060810190604001356401000000008111156111d357600080fd5b8201836020820111156111e557600080fd5b8035906020019184602083028401116401000000008311171561120757600080fd5b91939092909160208101903564010000000081111561122557600080fd5b82018360208201111561123757600080fd5b8035906020019184600183028401116401000000008311171561125957600080fd5b509092509050613935565b606085428110156112d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a8a600081811061131a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6113c8348b8b8989898961189a565b91508a826001845103815181106113db57fe5b6020026020010151101561145057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061149957fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b1580156114cc57600080fd5b505af11580156114e0573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6115938c8c600081811061153157fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168d8d600181811061155b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a600081811061158557fe5b905060200201351515613a3b565b846000815181106115a057fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561161157600080fd5b505af1158015611625573d6000803e3d6000fd5b505050506040513d602081101561163b57600080fd5b50516116a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6116b8828b8b8b8a8a8a8a613c67565b509998505050505050505050565b6060854281101561173857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6117478c8b8b8989898961189a565b91508a8260018451038151811061175a57fe5b602002602001015110156117cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b61187b8a8a60008181106117df57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16336118618d8d600081811061180d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168e8e600181811061183757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b600081811061158557fe5b8560008151811061186e57fe5b6020026020010151613fb9565b61188b828b8b8b8a8a8a8a613c67565b509a9950505050505050505050565b6060600286101561190c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601841461199c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604482015290519081900360640190fd5b8567ffffffffffffffff811180156119b357600080fd5b506040519080825280602002602001820160405280156119dd578160200160208202803683370190505b50905087816000815181106119ee57fe5b60200260200101818152505060005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8701811015611c2257858582818110611a3357fe5b90506020020135611b8d57611a9d888883818110611a4d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16898984600101818110611a7957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff166000613a3b565b73ffffffffffffffffffffffffffffffffffffffff1663ca706bcf898984818110611ac457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16848481518110611aed57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611b5c57600080fd5b505afa158015611b70573d6000803e3d6000fd5b505050506040513d6020811015611b8657600080fd5b5051611c00565b611c00828281518110611b9c57fe5b6020026020010151898984818110611bb057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a85600101818110611bdc57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168787612170565b828260010181518110611c0f57fe5b60209081029190910101526001016119fd565b50979650505050505050565b8442811015611c9e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001689897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110611d0357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611da257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6002881015611e1257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b611e5689896000818110611e2257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1633611e508c8c600081811061153157fe5b8e613fb9565b611e9a898930888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061418992505050565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b158015611f2a57600080fd5b505afa158015611f3e573d6000803e3d6000fd5b505050506040513d6020811015611f5457600080fd5b505190508a811015611fc757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b5050505061205c88826147aa565b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8085169086161061209486866001613a3b565b73ffffffffffffffffffffffffffffffffffffffff1663d519f64d8286866040518463ffffffff1660e01b81526004018084151515158152602001806020018281038252848482818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561213a57600080fd5b505afa15801561214e573d6000803e3d6000fd5b505050506040513d602081101561216457600080fd5b50519695505050505050565b600061217e85856001613a3b565b73ffffffffffffffffffffffffffffffffffffffff16633b19103b868886866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b15801561213a57600080fd5b84428110156122a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600288101561231657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b61232689896000818110611e2257fe5b600089897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061235657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123ef57600080fd5b505afa158015612403573d6000803e3d6000fd5b505050506040513d602081101561241957600080fd5b5051604080516020601f8701819004810282018101909252858152919250612465918c918c918c918b918b918b908b908190840183828082843760009201919091525061418992505050565b8a612569828c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061249857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318c6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561253157600080fd5b505afa158015612545573d6000803e3d6000fd5b505050506040513d602081101561255b57600080fd5b50519063ffffffff6148e716565b101561205c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b60006125e485856001613a3b565b73ffffffffffffffffffffffffffffffffffffffff1663685639a9858886866040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060206040518083038186803b15801561213a57600080fd5b6060854281101561270e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061277357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461281257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6128218c8b8b8989898961189a565b91508a8260018451038151811061283457fe5b602002602001015110156128a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b6128b98a8a60008181106117df57fe5b6128c9828b8b308a8a8a8a613c67565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8360018551038151811061291557fe5b60200260200101516040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561295357600080fd5b505af1158015612967573d6000803e3d6000fd5b5050505061188b888360018551038151811061297f57fe5b60200260200101516147aa565b84428110156129fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1689896000818110612a4057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612adf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6002881015612b4f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b60003490507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612bbc57600080fd5b505af1158015612bd0573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612c218c8c600081811061153157fe5b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612c8b57600080fd5b505af1158015612c9f573d6000803e3d6000fd5b505050506040513d6020811015612cb557600080fd5b5051612d2257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b50600089897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101818110612d5357fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612dec57600080fd5b505afa158015612e00573d6000803e3d6000fd5b505050506040513d6020811015612e1657600080fd5b5051604080516020601f8701819004810282018101909252858152919250612e62918c918c918c918b918b918b908b908190840183828082843760009201919091525061418992505050565b8a612e95828c8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061249857fe5b1015612f0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b5050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608542811015612fa557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168a8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061300a57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146130a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b6130b88c8b8b8989898961313d565b91508a826000815181106130c857fe5b602002602001015111156128a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b606060028610156131af57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601841461323f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604482015290519081900360640190fd5b8567ffffffffffffffff8111801561325657600080fd5b50604051908082528060200260200182016040528015613280578160200160208202803683370190505b509050878160018351038151811061329457fe5b60209081029190910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86015b8015611c22578585600183038181106132d857fe5b9050602002013561340e5761331e8888600184038181106132f557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16898984818110611a7957fe5b73ffffffffffffffffffffffffffffffffffffffff1663632db21c89898481811061334557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684848151811061336e57fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156133dd57600080fd5b505afa1580156133f1573d6000803e3d6000fd5b505050506040513d602081101561340757600080fd5b5051613481565b61348182828151811061341d57fe5b602002602001015189896001850381811061343457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a8581811061345d57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1687876125d6565b82600183038151811061349057fe5b60209081029190910101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016132c3565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060854281101561357c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a8a60008181106135c057fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461365f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f494e56414c49445f504154480000000000000000000000000000000000000000604482015290519081900360640190fd5b61366e8b8b8b8989898961313d565b9150348260008151811061367e57fe5b602002602001015111156136f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061373c57fe5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561376f57600080fd5b505af1158015613783573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6137d48c8c600081811061153157fe5b846000815181106137e157fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561385257600080fd5b505af1158015613866573d6000803e3d6000fd5b505050506040513d602081101561387c57600080fd5b50516138e957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015290519081900360640190fd5b6138f9828b8b8b8a8a8a8a613c67565b8160008151811061390657fe5b60200260200101513411156116b8576116b8338360008151811061392657fe5b602002602001015134036147aa565b606085428110156139a757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4558504952454400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6139b68c8b8b8989898961313d565b91508a826000815181106139c657fe5b602002602001015111156117cf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4558434553534956455f494e5055545f414d4f554e5400000000000000000000604482015290519081900360640190fd5b6000806000613a4a8686614930565b9150915083613a79577f0000000000000000000000000000000000000000000000000000000000000000613a9b565b7f00000000000000000000000000000000000000000000000000000000000000005b60408051606085811b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009081166020808501919091529186901b166034830152825180830360280181526048909201909252805191012085613b32576040518060400160405280602081526020017f5c193265bc1f16117085a454b86f04b786de5c40d54a45dc24869043eb75f155815250613b69565b6040518060400160405280602081526020017ff16ce672144451d138eed853d57e4616c66cace4e953a121899bbd6e5643ca038152505b60405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b60208310613c1c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613bdf565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040528051906020012060001c925050509392505050565b3233148015613c7c5750613c7a33614a99565b155b80613d3d5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b158015613d1057600080fd5b505af1158015613d24573d6000803e3d6000fd5b505050506040513d6020811015613d3a57600080fd5b50515b613d4657600080fd5b60005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8701811015613fae57600080898984818110613d8257fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a85600101818110613dae57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff169150915060008b8460010181518110613de057fe5b60200260200101519050600080613df78585614930565b5090508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614613e3557826000613e39565b6000835b9093509150600090507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8c018610613e71578a613eb0565b613eb0848e8e89600201818110613e8457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168c8c8a60010181811061158557fe5b9050613ec385858c8c8a81811061158557fe5b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f8484848c8c6040518663ffffffff1660e01b8152600401808681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015613f8557600080fd5b505af1158015613f99573d6000803e3d6000fd5b505060019097019650613d4995505050505050565b505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b6020831061409757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161405a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146140f9576040519150601f19603f3d011682016040523d82523d6000602084013e6140fe565b606091505b509150915081801561412c57508051158061412c575080806020019051602081101561412957600080fd5b50515b614181576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180614b746024913960400191505060405180910390fd5b505050505050565b323314801561419e575061419c33614a99565b155b8061425f5750604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691633af32abf9160248083019260209291908290030181600087803b15801561423257600080fd5b505af1158015614246573d6000803e3d6000fd5b505050506040513d602081101561425c57600080fd5b50515b61426857600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850182146142f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604482015290519081900360640190fd5b60005b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86018110156147a157600087878360010181811061433657fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000806000808b8b8781811061436757fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060006143928287614930565b50905073ffffffffffffffffffffffffffffffffffffffff828116908216146143c283888d8d8c81811061158557fe5b955060008060008873ffffffffffffffffffffffffffffffffffffffff16633c6d5c726040518163ffffffff1660e01b8152600401604080518083038186803b15801561440e57600080fd5b505afa158015614422573d6000803e3d6000fd5b505050506040513d604081101561443857600080fd5b5080516020909101519092509050600084614454578183614457565b82825b5090506144db818873ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561253157600080fd5b9350508873ffffffffffffffffffffffffffffffffffffffff16633b19103b87858f6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614581578181015183820152602001614569565b50505050905090810190601f1680156145ae5780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b1580156145cd57600080fd5b505afa1580156145e1573d6000803e3d6000fd5b505050506040513d60208110156145f757600080fd5b5051975083925061460d91505057846000614611565b6000855b90955093506000925050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8b01861061464b578961468a565b61468a858d8d8960020181811061465e57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b8b8a60010181811061158557fe5b6040517f022c0d9f000000000000000000000000000000000000000000000000000000008152600481018581526024820185905273ffffffffffffffffffffffffffffffffffffffff80841660448401526080606484019081528b5160848501528b519495509088169363022c0d9f938893889388938f9360a40190602085019080838360005b83811015614729578181015183820152602001614711565b50505050905090810190601f1680156147565780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561477857600080fd5b505af115801561478c573d6000803e3d6000fd5b5050600190970196506142fb95505050505050565b50505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061482157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016147e4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614883576040519150601f19603f3d011682016040523d82523d6000602084013e614888565b606091505b50509050806148e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614b516023913960400191505060405180910390fd5b505050565b600061492983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614a9f565b9392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156149ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4944454e544943414c5f41444452455353455300000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610614a08578284614a0b565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff8216614a9257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5a45524f5f414444524553530000000000000000000000000000000000000000604482015290519081900360640190fd5b9250929050565b3b151590565b60008184841115614b48576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614b0d578181015183820152602001614af5565b50505050905090810190601f168015614b3a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220218a11e804ce8d2df4dc16d5c7449fceb1d5f3ec1d4ed6c465615f6dea0de5ac64736f6c634300060b0033"
};

// src/contracts/router/OSWAP_OracleRouter.ts
var OSWAP_OracleRouter = class extends import_eth_wallet36.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_OracleRouter_json_default.abi, OSWAP_OracleRouter_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this._deploy(params.ammFactory, params.oracleFactory, params.WETH);
  }
  async WETH() {
    let result = await this.call("WETH");
    return result;
  }
  async ammFactory() {
    let result = await this.call("ammFactory");
    return result;
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [import_eth_wallet36.Utils.toString(params.amountOut), params.tokenIn, params.tokenOut, params.data]);
    return new import_eth_wallet36.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [import_eth_wallet36.Utils.toString(params.amountIn), params.tokenIn, params.tokenOut, params.data]);
    return new import_eth_wallet36.BigNumber(result);
  }
  async getAmountsIn(params) {
    let result = await this.call("getAmountsIn", [import_eth_wallet36.Utils.toString(params.amountOut), params.path, params.useOracle, params.data]);
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async getAmountsOut(params) {
    let result = await this.call("getAmountsOut", [import_eth_wallet36.Utils.toString(params.amountIn), params.path, params.useOracle, params.data]);
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async getLatestPrice(params) {
    let result = await this.call("getLatestPrice", [params.tokenIn, params.tokenOut, params.data]);
    return new import_eth_wallet36.BigNumber(result);
  }
  async oracleFactory() {
    let result = await this.call("oracleFactory");
    return result;
  }
  async swapETHForExactTokens_send(params, _value) {
    let result = await this.send("swapETHForExactTokens", [import_eth_wallet36.Utils.toString(params.amountOut), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data], { value: _value });
    return result;
  }
  async swapETHForExactTokens_call(params, _value) {
    let result = await this.call("swapETHForExactTokens", [import_eth_wallet36.Utils.toString(params.amountOut), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data], { value: _value });
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async swapExactETHForTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokens", [import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data], { value: _value });
    return result;
  }
  async swapExactETHForTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokens", [import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data], { value: _value });
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_send(params, _value) {
    let result = await this.send("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data], { value: _value });
    return result;
  }
  async swapExactETHForTokensSupportingFeeOnTransferTokens_call(params, _value) {
    let result = await this.call("swapExactETHForTokensSupportingFeeOnTransferTokens", [import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data], { value: _value });
    return;
  }
  async swapExactTokensForETH_send(params) {
    let result = await this.send("swapExactTokensForETH", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result;
  }
  async swapExactTokensForETH_call(params) {
    let result = await this.call("swapExactTokensForETH", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result;
  }
  async swapExactTokensForETHSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForETHSupportingFeeOnTransferTokens", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return;
  }
  async swapExactTokensForTokens_send(params) {
    let result = await this.send("swapExactTokensForTokens", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result;
  }
  async swapExactTokensForTokens_call(params) {
    let result = await this.call("swapExactTokensForTokens", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_send(params) {
    let result = await this.send("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result;
  }
  async swapExactTokensForTokensSupportingFeeOnTransferTokens_call(params) {
    let result = await this.call("swapExactTokensForTokensSupportingFeeOnTransferTokens", [import_eth_wallet36.Utils.toString(params.amountIn), import_eth_wallet36.Utils.toString(params.amountOutMin), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return;
  }
  async swapTokensForExactETH_send(params) {
    let result = await this.send("swapTokensForExactETH", [import_eth_wallet36.Utils.toString(params.amountOut), import_eth_wallet36.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result;
  }
  async swapTokensForExactETH_call(params) {
    let result = await this.call("swapTokensForExactETH", [import_eth_wallet36.Utils.toString(params.amountOut), import_eth_wallet36.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  async swapTokensForExactTokens_send(params) {
    let result = await this.send("swapTokensForExactTokens", [import_eth_wallet36.Utils.toString(params.amountOut), import_eth_wallet36.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result;
  }
  async swapTokensForExactTokens_call(params) {
    let result = await this.call("swapTokensForExactTokens", [import_eth_wallet36.Utils.toString(params.amountOut), import_eth_wallet36.Utils.toString(params.amountInMax), params.path, params.to, import_eth_wallet36.Utils.toString(params.deadline), params.useOracle, params.data]);
    return result.map((e) => new import_eth_wallet36.BigNumber(e));
  }
  assign() {
    this.swapETHForExactTokens = Object.assign(this.swapETHForExactTokens_send, { call: this.swapETHForExactTokens_call });
    this.swapExactETHForTokens = Object.assign(this.swapExactETHForTokens_send, { call: this.swapExactETHForTokens_call });
    this.swapExactETHForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactETHForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactETHForTokensSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForETH = Object.assign(this.swapExactTokensForETH_send, { call: this.swapExactTokensForETH_call });
    this.swapExactTokensForETHSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForETHSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForETHSupportingFeeOnTransferTokens_call });
    this.swapExactTokensForTokens = Object.assign(this.swapExactTokensForTokens_send, { call: this.swapExactTokensForTokens_call });
    this.swapExactTokensForTokensSupportingFeeOnTransferTokens = Object.assign(this.swapExactTokensForTokensSupportingFeeOnTransferTokens_send, { call: this.swapExactTokensForTokensSupportingFeeOnTransferTokens_call });
    this.swapTokensForExactETH = Object.assign(this.swapTokensForExactETH_send, { call: this.swapTokensForExactETH_call });
    this.swapTokensForExactTokens = Object.assign(this.swapTokensForExactTokens_send, { call: this.swapTokensForExactTokens_call });
  }
};

// src/contracts/restricted/OSWAP_RestrictedPair.ts
var import_eth_wallet37 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_RestrictedPair.json.ts
var OSWAP_RestrictedPair_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "removeAllLiquidity1D", "outputs": [{ "internalType": "uint256", "name": "totalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "totalReceiving", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "setApprovedTrader", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "setMultipleApprovedTraders", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/restricted/OSWAP_RestrictedPair.ts
var OSWAP_RestrictedPair = class extends import_eth_wallet37.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RestrictedPair_json_default.abi, OSWAP_RestrictedPair_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  parseAddLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "AddLiquidity").map((e) => this.decodeAddLiquidityEvent(e));
  }
  decodeAddLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet37.BigNumber(result.index),
      amount: new import_eth_wallet37.BigNumber(result.amount),
      newAmountBalance: new import_eth_wallet37.BigNumber(result.newAmountBalance),
      _event: event
    };
  }
  parseApprovedTraderEvent(receipt) {
    return this.parseEvents(receipt, "ApprovedTrader").map((e) => this.decodeApprovedTraderEvent(e));
  }
  decodeApprovedTraderEvent(event) {
    let result = event.data;
    return {
      direction: result.direction,
      offerIndex: new import_eth_wallet37.BigNumber(result.offerIndex),
      trader: result.trader,
      allocation: new import_eth_wallet37.BigNumber(result.allocation),
      _event: event
    };
  }
  parseLockEvent(receipt) {
    return this.parseEvents(receipt, "Lock").map((e) => this.decodeLockEvent(e));
  }
  decodeLockEvent(event) {
    let result = event.data;
    return {
      direction: result.direction,
      index: new import_eth_wallet37.BigNumber(result.index),
      _event: event
    };
  }
  parseNewProviderOfferEvent(receipt) {
    return this.parseEvents(receipt, "NewProviderOffer").map((e) => this.decodeNewProviderOfferEvent(e));
  }
  decodeNewProviderOfferEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet37.BigNumber(result.index),
      allowAll: result.allowAll,
      restrictedPrice: new import_eth_wallet37.BigNumber(result.restrictedPrice),
      startDate: new import_eth_wallet37.BigNumber(result.startDate),
      expire: new import_eth_wallet37.BigNumber(result.expire),
      _event: event
    };
  }
  parseRemoveLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "RemoveLiquidity").map((e) => this.decodeRemoveLiquidityEvent(e));
  }
  decodeRemoveLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet37.BigNumber(result.index),
      amountOut: new import_eth_wallet37.BigNumber(result.amountOut),
      receivingOut: new import_eth_wallet37.BigNumber(result.receivingOut),
      newAmountBalance: new import_eth_wallet37.BigNumber(result.newAmountBalance),
      newReceivingBalance: new import_eth_wallet37.BigNumber(result.newReceivingBalance),
      _event: event
    };
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      to: result.to,
      direction: result.direction,
      amountIn: new import_eth_wallet37.BigNumber(result.amountIn),
      amountOut: new import_eth_wallet37.BigNumber(result.amountOut),
      tradeFee: new import_eth_wallet37.BigNumber(result.tradeFee),
      protocolFee: new import_eth_wallet37.BigNumber(result.protocolFee),
      _event: event
    };
  }
  parseSwappedOneOfferEvent(receipt) {
    return this.parseEvents(receipt, "SwappedOneOffer").map((e) => this.decodeSwappedOneOfferEvent(e));
  }
  decodeSwappedOneOfferEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet37.BigNumber(result.index),
      price: new import_eth_wallet37.BigNumber(result.price),
      amountOut: new import_eth_wallet37.BigNumber(result.amountOut),
      amountIn: new import_eth_wallet37.BigNumber(result.amountIn),
      newAmountBalance: new import_eth_wallet37.BigNumber(result.newAmountBalance),
      newReceivingBalance: new import_eth_wallet37.BigNumber(result.newReceivingBalance),
      _event: event
    };
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.direction, import_eth_wallet37.Utils.toString(params.index)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.direction, import_eth_wallet37.Utils.toString(params.index)]);
    return;
  }
  async approvedTrader(params) {
    let result = await this.call("approvedTrader", [params.param1, import_eth_wallet37.Utils.toString(params.param2), import_eth_wallet37.Utils.toString(params.param3)]);
    return result;
  }
  async configStore() {
    let result = await this.call("configStore");
    return result;
  }
  async counter(param1) {
    let result = await this.call("counter", [param1]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async createOrder_send(params) {
    let result = await this.send("createOrder", [params.provider, params.direction, params.allowAll, import_eth_wallet37.Utils.toString(params.restrictedPrice), import_eth_wallet37.Utils.toString(params.startDate), import_eth_wallet37.Utils.toString(params.expire)]);
    return result;
  }
  async createOrder_call(params) {
    let result = await this.call("createOrder", [params.provider, params.direction, params.allowAll, import_eth_wallet37.Utils.toString(params.restrictedPrice), import_eth_wallet37.Utils.toString(params.startDate), import_eth_wallet37.Utils.toString(params.expire)]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async feeBalance() {
    let result = await this.call("feeBalance");
    return new import_eth_wallet37.BigNumber(result);
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [params.param1, import_eth_wallet37.Utils.toString(params.param2), params.param3, params.param4]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [params.tokenIn, import_eth_wallet37.Utils.toString(params.amountIn), params.trader, params.param4]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async getApprovedTrader(params) {
    let result = await this.call("getApprovedTrader", [params.direction, import_eth_wallet37.Utils.toString(params.offerIndex), import_eth_wallet37.Utils.toString(params.start), import_eth_wallet37.Utils.toString(params.length)]);
    return {
      trader: result.trader,
      allocation: result.allocation.map((e) => new import_eth_wallet37.BigNumber(e))
    };
  }
  async getApprovedTraderLength(params) {
    let result = await this.call("getApprovedTraderLength", [params.direction, import_eth_wallet37.Utils.toString(params.offerIndex)]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async getBalances() {
    let result = await this.call("getBalances");
    return {
      param1: new import_eth_wallet37.BigNumber(result[0]),
      param2: new import_eth_wallet37.BigNumber(result[1]),
      param3: new import_eth_wallet37.BigNumber(result[2])
    };
  }
  async getLastBalances() {
    let result = await this.call("getLastBalances");
    return {
      param1: new import_eth_wallet37.BigNumber(result[0]),
      param2: new import_eth_wallet37.BigNumber(result[1])
    };
  }
  async getOffers(params) {
    let result = await this.call("getOffers", [params.direction, import_eth_wallet37.Utils.toString(params.start), import_eth_wallet37.Utils.toString(params.length)]);
    return {
      index: result.index.map((e) => new import_eth_wallet37.BigNumber(e)),
      provider: result.provider,
      lockedAndAllowAll: result.lockedAndAllowAll,
      receiving: result.receiving.map((e) => new import_eth_wallet37.BigNumber(e)),
      amountAndPrice: result.amountAndPrice.map((e) => new import_eth_wallet37.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet37.BigNumber(e))
    };
  }
  async getProviderOffer(params) {
    let result = await this.call("getProviderOffer", [params.provider, params.direction, import_eth_wallet37.Utils.toString(params.start), import_eth_wallet37.Utils.toString(params.length)]);
    return {
      index: result.index.map((e) => new import_eth_wallet37.BigNumber(e)),
      provider: result.provider,
      lockedAndAllowAll: result.lockedAndAllowAll,
      receiving: result.receiving.map((e) => new import_eth_wallet37.BigNumber(e)),
      amountAndPrice: result.amountAndPrice.map((e) => new import_eth_wallet37.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet37.BigNumber(e))
    };
  }
  async getProviderOfferIndexLength(params) {
    let result = await this.call("getProviderOfferIndexLength", [params.provider, params.direction]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async getTraderOffer(params) {
    let result = await this.call("getTraderOffer", [params.trader, params.direction, import_eth_wallet37.Utils.toString(params.start), import_eth_wallet37.Utils.toString(params.length)]);
    return {
      index: result.index.map((e) => new import_eth_wallet37.BigNumber(e)),
      provider: result.provider,
      lockedAndAllowAll: result.lockedAndAllowAll,
      receiving: result.receiving.map((e) => new import_eth_wallet37.BigNumber(e)),
      amountAndPrice: result.amountAndPrice.map((e) => new import_eth_wallet37.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet37.BigNumber(e))
    };
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async initialize_send(params) {
    let result = await this.send("initialize", [params.token0, params.token1]);
    return result;
  }
  async initialize_call(params) {
    let result = await this.call("initialize", [params.token0, params.token1]);
    return;
  }
  async isApprovedTrader(params) {
    let result = await this.call("isApprovedTrader", [params.param1, import_eth_wallet37.Utils.toString(params.param2), params.param3]);
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async lastGovBalance() {
    let result = await this.call("lastGovBalance");
    return new import_eth_wallet37.BigNumber(result);
  }
  async lastToken0Balance() {
    let result = await this.call("lastToken0Balance");
    return new import_eth_wallet37.BigNumber(result);
  }
  async lastToken1Balance() {
    let result = await this.call("lastToken1Balance");
    return new import_eth_wallet37.BigNumber(result);
  }
  async lockOffer_send(params) {
    let result = await this.send("lockOffer", [params.direction, import_eth_wallet37.Utils.toString(params.index)]);
    return result;
  }
  async lockOffer_call(params) {
    let result = await this.call("lockOffer", [params.direction, import_eth_wallet37.Utils.toString(params.index)]);
    return;
  }
  async offers(params) {
    let result = await this.call("offers", [params.param1, import_eth_wallet37.Utils.toString(params.param2)]);
    return {
      provider: result.provider,
      locked: result.locked,
      allowAll: result.allowAll,
      amount: new import_eth_wallet37.BigNumber(result.amount),
      receiving: new import_eth_wallet37.BigNumber(result.receiving),
      restrictedPrice: new import_eth_wallet37.BigNumber(result.restrictedPrice),
      startDate: new import_eth_wallet37.BigNumber(result.startDate),
      expire: new import_eth_wallet37.BigNumber(result.expire)
    };
  }
  async protocolFeeBalance0() {
    let result = await this.call("protocolFeeBalance0");
    return new import_eth_wallet37.BigNumber(result);
  }
  async protocolFeeBalance1() {
    let result = await this.call("protocolFeeBalance1");
    return new import_eth_wallet37.BigNumber(result);
  }
  async providerOfferIndex(params) {
    let result = await this.call("providerOfferIndex", [params.param1, params.param2, import_eth_wallet37.Utils.toString(params.param3)]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async redeemProtocolFee_send() {
    let result = await this.send("redeemProtocolFee");
    return result;
  }
  async redeemProtocolFee_call() {
    let result = await this.call("redeemProtocolFee");
    return;
  }
  async removeAllLiquidity_send(provider) {
    let result = await this.send("removeAllLiquidity", [provider]);
    return result;
  }
  async removeAllLiquidity_call(provider) {
    let result = await this.call("removeAllLiquidity", [provider]);
    return {
      amount0: new import_eth_wallet37.BigNumber(result.amount0),
      amount1: new import_eth_wallet37.BigNumber(result.amount1)
    };
  }
  async removeAllLiquidity1D_send(params) {
    let result = await this.send("removeAllLiquidity1D", [params.provider, params.direction]);
    return result;
  }
  async removeAllLiquidity1D_call(params) {
    let result = await this.call("removeAllLiquidity1D", [params.provider, params.direction]);
    return {
      totalAmount: new import_eth_wallet37.BigNumber(result.totalAmount),
      totalReceiving: new import_eth_wallet37.BigNumber(result.totalReceiving)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.provider, params.direction, import_eth_wallet37.Utils.toString(params.index), import_eth_wallet37.Utils.toString(params.amountOut), import_eth_wallet37.Utils.toString(params.receivingOut)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.provider, params.direction, import_eth_wallet37.Utils.toString(params.index), import_eth_wallet37.Utils.toString(params.amountOut), import_eth_wallet37.Utils.toString(params.receivingOut)]);
    return;
  }
  async restrictedLiquidityProvider() {
    let result = await this.call("restrictedLiquidityProvider");
    return result;
  }
  async scaleDirection() {
    let result = await this.call("scaleDirection");
    return result;
  }
  async scaler() {
    let result = await this.call("scaler");
    return new import_eth_wallet37.BigNumber(result);
  }
  async setApprovedTrader_send(params) {
    let result = await this.send("setApprovedTrader", [params.direction, import_eth_wallet37.Utils.toString(params.offerIndex), params.trader, import_eth_wallet37.Utils.toString(params.allocation)]);
    return result;
  }
  async setApprovedTrader_call(params) {
    let result = await this.call("setApprovedTrader", [params.direction, import_eth_wallet37.Utils.toString(params.offerIndex), params.trader, import_eth_wallet37.Utils.toString(params.allocation)]);
    return;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setMultipleApprovedTraders_send(params) {
    let result = await this.send("setMultipleApprovedTraders", [params.direction, import_eth_wallet37.Utils.toString(params.offerIndex), params.trader, import_eth_wallet37.Utils.toString(params.allocation)]);
    return result;
  }
  async setMultipleApprovedTraders_call(params) {
    let result = await this.call("setMultipleApprovedTraders", [params.direction, import_eth_wallet37.Utils.toString(params.offerIndex), params.trader, import_eth_wallet37.Utils.toString(params.allocation)]);
    return;
  }
  async swap_send(params) {
    let result = await this.send("swap", [import_eth_wallet37.Utils.toString(params.amount0Out), import_eth_wallet37.Utils.toString(params.amount1Out), params.to, params.trader, params.param5]);
    return result;
  }
  async swap_call(params) {
    let result = await this.call("swap", [import_eth_wallet37.Utils.toString(params.amount0Out), import_eth_wallet37.Utils.toString(params.amount1Out), params.to, params.trader, params.param5]);
    return;
  }
  async sync_send() {
    let result = await this.send("sync");
    return result;
  }
  async sync_call() {
    let result = await this.call("sync");
    return;
  }
  async token0() {
    let result = await this.call("token0");
    return result;
  }
  async token1() {
    let result = await this.call("token1");
    return result;
  }
  async traderAllocation(params) {
    let result = await this.call("traderAllocation", [params.param1, import_eth_wallet37.Utils.toString(params.param2), params.param3]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async traderOffer(params) {
    let result = await this.call("traderOffer", [params.param1, params.param2, import_eth_wallet37.Utils.toString(params.param3)]);
    return new import_eth_wallet37.BigNumber(result);
  }
  async whitelistFactory() {
    let result = await this.call("whitelistFactory");
    return result;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.createOrder = Object.assign(this.createOrder_send, { call: this.createOrder_call });
    this.initialize = Object.assign(this.initialize_send, { call: this.initialize_call });
    this.lockOffer = Object.assign(this.lockOffer_send, { call: this.lockOffer_call });
    this.redeemProtocolFee = Object.assign(this.redeemProtocolFee_send, { call: this.redeemProtocolFee_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeAllLiquidity1D = Object.assign(this.removeAllLiquidity1D_send, { call: this.removeAllLiquidity1D_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.setApprovedTrader = Object.assign(this.setApprovedTrader_send, { call: this.setApprovedTrader_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setMultipleApprovedTraders = Object.assign(this.setMultipleApprovedTraders_send, { call: this.setMultipleApprovedTraders_call });
    this.swap = Object.assign(this.swap_send, { call: this.swap_call });
    this.sync = Object.assign(this.sync_send, { call: this.sync_call });
  }
};

// src/contracts/restricted/OSWAP_RestrictedPair2.ts
var import_eth_wallet38 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_RestrictedPair2.json.ts
var OSWAP_RestrictedPair2_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "trader", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "ApprovedTrader", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "Lock", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "allowAll", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "NewProviderOffer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "receivingOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "tradeFee", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": true, "internalType": "bool", "name": "direction", "type": "bool" }, { "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "price", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmountBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newReceivingBalance", "type": "uint256" }], "name": "SwappedOneOffer", "type": "event" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "approvedTrader", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "name": "createOrder", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "factory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "feeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenOut", "type": "address" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountIn", "outputs": [{ "internalType": "uint256", "name": "amountIn", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "tokenIn", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "getAmountOut", "outputs": [{ "internalType": "uint256", "name": "amountOut", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getApprovedTrader", "outputs": [{ "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }], "name": "getApprovedTraderLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getLastBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOffers", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getProviderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "getProviderOfferIndexLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTraderOffer", "outputs": [{ "internalType": "uint256[]", "name": "index", "type": "uint256[]" }, { "internalType": "address[]", "name": "provider", "type": "address[]" }, { "internalType": "bool[]", "name": "lockedAndAllowAll", "type": "bool[]" }, { "internalType": "uint256[]", "name": "receiving", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "amountAndPrice", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "startDateAndExpire", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "governance", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_token0", "type": "address" }, { "internalType": "address", "name": "_token1", "type": "address" }], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedTrader", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "isLive", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastGovBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken0Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lastToken1Balance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "lockOffer", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "offers", "outputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "locked", "type": "bool" }, { "internalType": "bool", "name": "allowAll", "type": "bool" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "receiving", "type": "uint256" }, { "internalType": "uint256", "name": "restrictedPrice", "type": "uint256" }, { "internalType": "uint256", "name": "startDate", "type": "uint256" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance0", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "providerOfferIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "redeemProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }], "name": "removeAllLiquidity", "outputs": [{ "internalType": "uint256", "name": "amount0", "type": "uint256" }, { "internalType": "uint256", "name": "amount1", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }], "name": "removeAllLiquidity1D", "outputs": [{ "internalType": "uint256", "name": "totalAmount", "type": "uint256" }, { "internalType": "uint256", "name": "totalReceiving", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "amountOut", "type": "uint256" }, { "internalType": "uint256", "name": "receivingOut", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "restrictedLiquidityProvider", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "scaleDirection", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "scaler", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "uint256", "name": "allocation", "type": "uint256" }], "name": "setApprovedTrader", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "_isLive", "type": "bool" }], "name": "setLive", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "direction", "type": "bool" }, { "internalType": "uint256", "name": "offerIndex", "type": "uint256" }, { "internalType": "address[]", "name": "trader", "type": "address[]" }, { "internalType": "uint256[]", "name": "allocation", "type": "uint256[]" }], "name": "setMultipleApprovedTraders", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount0Out", "type": "uint256" }, { "internalType": "uint256", "name": "amount1Out", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "address", "name": "trader", "type": "address" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "swap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "token0", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "token1", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "traderAllocation", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "traderOffer", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "whitelistFactory", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c615df8620004e860003980611b165280611e225280612b93528061442b525080610e50528061105f5280612ace5280613f6d5280613fc5528061402052806140c452806141c852806142125250806119d65280612422528061271c528061323952806137db52806142895280614966525080612d15528061368a5250806115e952508061117652806112ed5280611884528061213152806125b35280612a305280612c1c528061332252806136c45280614dc05250615df86000f3fe608060405234801561001057600080fd5b50600436106103145760003560e01c806376701636116101a7578063d21220a7116100ee578063ea5dbbc411610097578063f5ee334811610071578063f5ee334814610dd5578063fa69ce2b14610df4578063fff6cae914610e4157610314565b8063ea5dbbc414610cf6578063ee13b84114610d92578063f060d13914610dcd57610314565b8063db13653c116100c8578063db13653c14610c2a578063db47533e14610ca7578063e5d36ff614610cee57610314565b8063d21220a714610b39578063d38550a714610b41578063d7dc4e4314610b8857610314565b80639f0a3cc111610150578063b8f7a6651161012a578063b8f7a66514610b21578063bebf7a6114610b29578063c45a015514610b3157610314565b80639f0a3cc114610ab9578063a878769314610afa578063b2901aa314610b1957610314565b80639749d213116101815780639749d21314610a625780639cac76ac14610a6a5780639d69dc4e14610ab157610314565b80637670163614610a025780637a6a5e1b14610a27578063835daf6c14610a5a57610314565b8063577e6d081161026b578063625b6ced1161021457806372ca7372116101ee57806372ca7372146108ec5780637401342414610988578063752bc9dc146109dd57610314565b8063625b6ced146107d95780636322fa32146108145780636b4afee1146108e457610314565b80635eff2d01116102455780635eff2d01146106b25780635fd5e2fc1461077c57806360b71d4e146107d157610314565b8063577e6d081461069a5780635a6af09d146106a25780635aa6e675146106aa57610314565b8063364aed84116102cd5780633d0d81d6116102a75780633d0d81d61461045a578063485cc9551461063257806348c0902f1461066f57610314565b8063364aed84146103f05780633c1e6ff5146104315780633c6d5c721461043957610314565b80630dfe1681116102fe5780630dfe1681146103705780631da9a2bd146103785780631deb4995146103af57610314565b8062113e081461031957806305268cff1461033f575b600080fd5b610321610e49565b60408051938452602084019290925282820152519081900360600190f35b61034761105d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610347611081565b61039d6004803603604081101561038e57600080fd5b5080351515906020013561109d565b60408051918252519081900360200190f35b61039d600480360360608110156103c557600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356110c1565b61039d6004803603606081101561040657600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356110fc565b61039d611121565b610441611127565b6040805192835260208301919091528051918290030190f35b6104856004803603606081101561047057600080fd5b50803515159060208101359060400135611131565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156104d95781810151838201526020016104c1565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b83811015610518578181015183820152602001610500565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b8381101561055757818101518382015260200161053f565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561059657818101518382015260200161057e565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156105d55781810151838201526020016105bd565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156106145781810151838201526020016105fc565b505050509050019c5050505050505050505050505060405180910390f35b61066d6004803603604081101561064857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661115e565b005b6103476004803603606081101561068557600080fd5b5080351515906020810135906040013561158c565b61039d6115db565b61039d6115e1565b6103476115e7565b6106e3600480360360808110156106c857600080fd5b5080351515906020810135906040810135906060013561160b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561072757818101518382015260200161070f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561076657818101518382015260200161074e565b5050505090500194505050505060405180910390f35b61039d600480360360c081101561079257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604081013515159060608101359060808101359060a00135611821565b61039d611f63565b61039d600480360360408110156107ef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611f69565b61066d6004803603608081101561082a57600080fd5b813515159160208101359181019060608101604082013564010000000081111561085357600080fd5b82018360208201111561086557600080fd5b8035906020019184602083028401116401000000008311171561088757600080fd5b9193909290916020810190356401000000008111156108a557600080fd5b8201836020820111156108b757600080fd5b803590602001918460208302840111640100000000831117156108d957600080fd5b509092509050611f9f565b61039d612062565b61039d6004803603608081101561090257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359260408201359092169181019060808101606082013564010000000081111561094957600080fd5b82018360208201111561095b57600080fd5b8035906020019184600183028401116401000000008311171561097d57600080fd5b509092509050612068565b6109c96004803603606081101561099e57600080fd5b5080351515906020810135906040013573ffffffffffffffffffffffffffffffffffffffff166123cd565b604080519115158252519081900360200190f35b61066d600480360360408110156109f357600080fd5b508035151590602001356123f3565b61066d60048036036040811015610a1857600080fd5b50803515159060200135612552565b61044160048036036020811015610a3d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612912565b61039d6129c7565b61066d6129cd565b61048560048036036080811015610a8057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060600135612b63565b610347612b91565b61039d60048036036060811015610acf57600080fd5b5080351515906020810135906040013573ffffffffffffffffffffffffffffffffffffffff16612bb5565b61039d60048036036020811015610b1057600080fd5b50351515612bd8565b61039d612bea565b6109c9612bf0565b6109c9612bf9565b610347612c1a565b610347612c3e565b61048560048036036080811015610b5757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060600135612c5a565b61066d600480360360a0811015610b9e57600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013581169260608101359091169181019060a081016080820135640100000000811115610beb57600080fd5b820183602082011115610bfd57600080fd5b80359060200191846001830284011164010000000083111715610c1f57600080fd5b509092509050612c71565b610c4f60048036036040811015610c4057600080fd5b50803515159060200135613176565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b61066d60048036036080811015610cbd57600080fd5b50803515159060208101359073ffffffffffffffffffffffffffffffffffffffff6040820135169060600135613219565b610347613237565b61039d60048036036080811015610d0c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013590921691810190608081016060820135640100000000811115610d5357600080fd5b820183602082011115610d6557600080fd5b80359060200191846001830284011164010000000083111715610d8757600080fd5b50909250905061325b565b61044160048036036040811015610da857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515613610565b610347613688565b61066d60048036036020811015610deb57600080fd5b503515156136ac565b61066d600480360360a0811015610e0a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060608101359060800135613767565b61066d6138f7565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d6020811015610f1557600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d6020811015610fb257600080fd5b5051600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b81151560009081526005602090815260408083208484529091529020545b92915050565b600460205282600052604060002060205281600052604060002081815481106110e657fe5b9060005260206000200160009250925050505481565b600860205282600052604060002060205281600052604060002081815481106110e657fe5b600b5481565b600d54600e549091565b6060806060806060806111486000808b8b8b613961565b949e939d50919b50995097509095509350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146111e8576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6009805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a805485831693169290921791829055908116911610611295576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b15801561133457600080fd5b505af1158015611348573d6000803e3d6000fd5b505050506040513d602081101561135e57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166113ca576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d602081101561145f57600080fd5b5051600a54604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b1580156114d257600080fd5b505afa1580156114e6573d6000803e3d6000fd5b505050506040513d60208110156114fc57600080fd5b5051905060ff8281169082161415611518576001600b55611585565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff848116848216117401000000000000000000000000000000000000000090810292909217928390559104166115775780820361157b565b8181035b60ff16600a0a600b555b5050505050565b600560205282600052604060002060205281600052604060002081815481106115b157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b8315156000908152600560209081526040808320868452909152902080546060918291808610156117fb5780611647878763ffffffff613ea716565b11156116605761165d818763ffffffff613f0816565b94505b8467ffffffffffffffff8111801561167757600080fd5b506040519080825280602002602001820160405280156116a1578160200160208202803683370190505b5093508467ffffffffffffffff811180156116bb57600080fd5b506040519080825280602002602001820160405280156116e5578160200160208202803683370190505b50925060005b858110156117f55788151560009081526007602090815260408083208b845290915281209084611721848b63ffffffff613ea716565b8154811061172b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687848151811061176257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548482815181106117e257fe5b60209081029190910101526001016116eb565b50611816565b60408051600080825260208201908152818301909252945092505b505094509492505050565b600060015460011461187a576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118ea57600080fd5b505af11580156118fe573d6000803e3d6000fd5b505050506040513d602081101561191457600080fd5b5051611967576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166119be576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611a1757503373ffffffffffffffffffffffffffffffffffffffff8816145b611a68576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b82821015611abd576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821015611b12576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611ba557600080fd5b505afa158015611bb9573d6000803e3d6000fd5b505050506040513d6020811015611bcf57600080fd5b50519050428101831115611c2a576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b506002600087151515158152602001908152602001600020600081546001019190508190559050600460008715151515815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505560036000871515151581526020019081526020016000206040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611eb157600080fd5b505afa158015611ec5573d6000803e3d6000fd5b505050506040513d6020811015611edb57600080fd5b50519050611ee98882613f4a565b604080518381528715156020820152808201879052606081018690526080810185905290518815159173ffffffffffffffffffffffffffffffffffffffff8b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b1515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff949094168352929052205490565b82818114611ff4576040805162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b611fff87878361425a565b60005b8181101561205857612050888888888581811061201b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1687878681811061204457fe5b9050602002013561451a565b600101612002565b5050505050505050565b600e5481565b60008085116120be576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b60606120ca60846146a8565b600954600a54604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201819052928416602482015290519394508a83169091149260009283927f00000000000000000000000000000000000000000000000000000000000000009091169163069d188f91604480820192606092909190829003018186803b15801561217a57600080fd5b505afa15801561218e573d6000803e3d6000fd5b505050506040513d60608110156121a457600080fd5b50805160209091015185519193509150600090815b8181101561236a578681815181106121cd57fe5b60200260200101519250600260008715151515815260200190815260200160002054831115612243576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b851515600090815260036020526040902080548490811061226057fe5b60009182526020909120600690910201547501000000000000000000000000000000000000000000900460ff16806122d257508515156000908152600660209081526040808320868452825280832073ffffffffffffffffffffffffffffffffffffffff8f16845290915290205460ff165b612323576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b6000806123348e8e8a888b8b614812565b50919350915061234c90508e8363ffffffff613f0816565b9d5061235e8a8263ffffffff613ea716565b995050506001016121b9565b508a156123be576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b50505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b811515600090815260036020526040812080548390811061241057fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806124905750805473ffffffffffffffffffffffffffffffffffffffff1633145b6124e1576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b6001546001146125a9576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561261957600080fd5b505af115801561262d573d6000803e3d6000fd5b505050506040513d602081101561264357600080fd5b5051612696576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166126ed576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b811515600090815260036020526040812080548390811061270a57fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061278a5750805473ffffffffffffffffffffffffffffffffffffffff1633145b6127db576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60008060006127e8610e49565b9250925092506000861561281157600e5461280a90839063ffffffff613f0816565b9050612828565b600d5461282590849063ffffffff613f0816565b90505b6000811161287d576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b6001850154612892908263ffffffff613ea716565b60018601908155600c859055600d849055600e83905585549054604080518481526020810192909252805189938b15159373ffffffffffffffffffffffffffffffffffffffff909116927ffb32bd9fa1413efecfb3f4b7ef2a5b60f1b61b33bb3bcd74970cb23fb2762d1992918290030190a45050600180555050505050565b60008060015460011461296c576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555061297f83600061494b565b909250905060008061299285600161494b565b90925090506129a7848263ffffffff613ea716565b93506129b9838363ffffffff613ea716565b600180559395939450505050565b600f5481565b600154600114612a24576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612a9657600080fd5b505af1158015612aaa573d6000803e3d6000fd5b505050506040513d6020811015612ac057600080fd5b5051601154909150612af5907f0000000000000000000000000000000000000000000000000000000000000000908390614b4a565b600954600f54612b1d9173ffffffffffffffffffffffffffffffffffffffff16908390614b4a565b600a54601054612b459173ffffffffffffffffffffffffffffffffffffffff16908390614b4a565b60006011819055600f819055601055612b5c614d36565b5060018055565b606080606080606080612b7a60018b8b8b8b613961565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b606080606080606080612b7a60028b8b8b8b613961565b600154600114612cc8576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b158015612d5f57600080fd5b505af1158015612d73573d6000803e3d6000fd5b505050506040513d6020811015612d8957600080fd5b5051612e16573233148015612da45750612da233614d49565b155b8015612dc5575073ffffffffffffffffffffffffffffffffffffffff831633145b612e16576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612e6d576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612f2293909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015612eea57600080fd5b505afa158015612efe573d6000803e3d6000fd5b505050506040513d6020811015612f1457600080fd5b50519063ffffffff613f0816565b600e54600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051939450600093612f9e939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015612eea57600080fd5b905060008089158015612fb057508815155b1561305a57612fc160018589614d4f565b90925090508882101561301b576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a5461303f9073ffffffffffffffffffffffffffffffffffffffff168984614b4a565b600f54613052908263ffffffff613ea716565b600f5561315e565b8915801590613067575088155b156131115761307860008489614d4f565b9092509050898210156130d2576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b6009546130f69073ffffffffffffffffffffffffffffffffffffffff168984614b4a565b601054613109908263ffffffff613ea716565b60105561315e565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b613166614d36565b5050600180555050505050505050565b6003602052816000526040600020818154811061318f57fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff8516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b6132258484600161425a565b6132318484848461451a565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008085116132b1576040805162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e54000000000000604482015290519081900360640190fd5b60606132bd60846146a8565b600a54600954604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201529282166024840181905290519394508a8216149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b15801561336957600080fd5b505afa15801561337d573d6000803e3d6000fd5b505050506040513d606081101561339357600080fd5b508051602090910151855191935091506000805b82811015613574578681815181106133bb57fe5b60200260200101519150600260008715151515815260200190815260200160002054821115613431576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b851515600090815260036020526040902080548390811061344e57fe5b60009182526020909120600690910201547501000000000000000000000000000000000000000000900460ff16806134c057508515156000908152600660209081526040808320858452825280832073ffffffffffffffffffffffffffffffffffffffff8f16845290915290205460ff165b613511576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b600061351e87848e614f8b565b9050808d1161352d578c61352f565b805b905061353e8c88888685615062565b5090945090915061355790508d8463ffffffff613f0816565b9c50613569898263ffffffff613ea716565b9850506001016133a7565b506135bb60016135af613590620186a08763ffffffff613f0816565b6135a38b620186a063ffffffff61539b16565b9063ffffffff6153f416565b9063ffffffff613ea716565b96508a156123be576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b60008060015460011461366a576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600155613679848461494b565b60018055909590945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614613736576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6001546001146137be576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061381c57503373ffffffffffffffffffffffffffffffffffffffff8616145b61386d576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b61387a8585858585615436565b600080856138a757600954600a5473ffffffffffffffffffffffffffffffffffffffff91821691166138c8565b600a5460095473ffffffffffffffffffffffffffffffffffffffff91821691165b915091506138d7823386614b4a565b6138e2813385614b4a565b6138ea614d36565b5050600180555050505050565b60015460011461394e576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060015561395b614d36565b60018055565b606080808080806000808c61399f57505088151560008181526004602090815260408083208380528252808320938352600390915290205490613a76565b8c600114156139e4575050881515600090815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e1684529091529020805490613a76565b8c60021415613a29575050881515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e1684529091529020805490613a76565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c1015613e6a5783613aa28d8d63ffffffff613ea716565b1115613abb57613ab8848d63ffffffff613f0816565b9a505b8a67ffffffffffffffff81118015613ad257600080fd5b50604051908082528060200260200182016040528015613afc578160200160208202803683370190505b5099508a67ffffffffffffffff81118015613b1657600080fd5b50604051908082528060200260200182016040528015613b40578160200160208202803683370190505b5098508a67ffffffffffffffff81118015613b5a57600080fd5b50604051908082528060200260200182016040528015613b84578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff81118015613ba457600080fd5b50604051908082528060200260200182016040528015613bce578160200160208202803683370190505b5097508367ffffffffffffffff81118015613be857600080fd5b50604051908082528060200260200182016040528015613c12578160200160208202803683370190505b5095508367ffffffffffffffff81118015613c2c57600080fd5b50604051908082528060200260200182016040528015613c56578160200160208202803683370190505b50945060005b8b811015613e6457613c74818e63ffffffff613ea716565b94508215613cbd5782600114613ca057838581548110613c9057fe5b9060005260206000200154613cb8565b838581548110613cac57fe5b90600052602060002001545b613cbf565b845b94506000828681548110613ccf57fe5b90600052602060002090600602019050858c8381518110613cec57fe5b6020908102919091010152613d07828e63ffffffff613ea716565b81548c5191975073ffffffffffffffffffffffffffffffffffffffff16908c9084908110613d3157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060000160149054906101000a900460ff168a8381518110613d8957fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a8781518110613db957fe5b6020026020010190151590811515815250508060020154898381518110613ddc57fe5b6020026020010181815250508060010154888381518110613df957fe5b6020026020010181815250508060030154888781518110613e1657fe5b6020026020010181815250508060040154878381518110613e3357fe5b6020026020010181815250508060050154878781518110613e5057fe5b602090810291909101015250600101613c5c565b50613e96565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b600082820183811015613f01576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000613f0183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061565a565b3373ffffffffffffffffffffffffffffffffffffffff8316141561407b57613f947f00000000000000000000000000000000000000000000000000000000000000008330846156f1565b601154613fa7908263ffffffff613ea716565b601155600c54613fbd908263ffffffff613ea716565b600c556009547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561401b57600d54614017908263ffffffff613ea716565b600d555b600a547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561407657600e54614072908263ffffffff613ea716565b600e555b614256565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b15801561410b57600080fd5b505afa15801561411f573d6000803e3d6000fd5b505050506040513d602081101561413557600080fd5b5051600c5490915060009061415190839063ffffffff613f0816565b9050828110156141a8576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b6011546141bb908263ffffffff613ea716565b601155600c8290556009547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff9081169116141561420d57600d8290555b600a547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156132315750600e555b5050565b821515600090815260036020526040812080548490811061427757fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806142f75750805473ffffffffffffffffffffffffffffffffffffffff1633145b614348576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff16156143b7576040805162461bcd60e51b815260206004820152600c60248201527f4f66666572206c6f636b65640000000000000000000000000000000000000000604482015290519081900360640190fd5b80547501000000000000000000000000000000000000000000900460ff1615614427576040805162461bcd60e51b815260206004820152601a60248201527f4f66666572207761732073657420746f20616c6c6f7720616c6c000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156144ba57600080fd5b505afa1580156144ce573d6000803e3d6000fd5b505050506040513d60208110156144e457600080fd5b505182549091506115859073ffffffffffffffffffffffffffffffffffffffff16614515838663ffffffff61539b16565b613f4a565b8315156000908152600660209081526040808320868452825280832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661462d57831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916908117909155858552600684528285208986528452828520818652845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831790559484526008835281842094845293825282208054938401815582529020018390555b8315156000818152600760209081526040808320878452825280832073ffffffffffffffffffffffffffffffffffffffff871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b606060006146bc838363ffffffff613ea716565b361015614710576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b60208301356020810280604086010136101561472b57600080fd5b60405160208201810160405282815281604087016020830137935060209081019250369150614764906135af868563ffffffff613ea716565b146147b6576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b600082511161480c576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50919050565b60008060008061482388888b614f8b565b92506000806148358b8b8a8c89615062565b92985090965092509050614865614855620186a08963ffffffff613f0816565b6135a3888a63ffffffff61539b16565b9350614877868563ffffffff613ea716565b9550858c101561491e578b955061489d620186a06135a3888a830363ffffffff61539b16565b9b508b860393506148b48c8363ffffffff61539b16565b94506001600b54111561490b57600a60149054906101000a900460ff1615158a1515146148f457600b546148ef90869063ffffffff6153f416565b614908565b600b5461490890869063ffffffff61539b16565b94505b61491b858263ffffffff6153f416565b94505b61493a816135a384670de0b6b3a764000063ffffffff61539b16565b925050509650965096509692505050565b6000803373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806149a757503373ffffffffffffffffffffffffffffffffffffffff8516145b6149f8576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b821515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120805490915b81811015614ad7576000838281548110614a4557fe5b90600052602060002001549050600060036000891515151581526020019081526020016000208281548110614a7657fe5b90600052602060002090600602019050614a9d816001015488613ea790919063ffffffff16565b9650614ab6816002015487613ea790919063ffffffff16565b9550614acd89898484600101548560020154615436565b5050600101614a2f565b5060008086614ae7578585614aea565b84865b6009549193509150614b139073ffffffffffffffffffffffffffffffffffffffff163384614b4a565b600a54614b379073ffffffffffffffffffffffffffffffffffffffff163383614b4a565b614b3f614d36565b505050509250929050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310614c5057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614c13565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614cb2576040519150601f19603f3d011682016040523d82523d6000602084013e614cb7565b606091505b5091509150818015614ce5575080511580614ce55750808060200190516020811015614ce257600080fd5b50515b611585576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b614d3e610e49565b600e55600d55600c55565b3b151590565b6000806060614d5e60a46146a8565b9050846000614d6b615d83565b600954600a54604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614e0957600080fd5b505afa158015614e1d573d6000803e3d6000fd5b505050506040513d6060811015614e3357600080fd5b5080516020808301516040909301519084015290825291506000808080805b8851811015614ec457614e7c8e8d8b8481518110614e6c57fe5b60200260200101518b8b8b6158bd565b929a5090955093509150614e968b8563ffffffff613ea716565b9a50614ea8858463ffffffff613ea716565b9450614eba8a8363ffffffff613ea716565b9950600101614e52565b508615614f18576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b604080518d8152602081018c9052808201869052606081018b905290518e15159173ffffffffffffffffffffffffffffffffffffffff8e16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a35050505050505050935093915050565b8215156000908152600360205260408120805484908110614fa857fe5b906000526020600020906006020160010154905060036000851515151581526020019081526020016000208381548110614fde57fe5b60009182526020909120600690910201547501000000000000000000000000000000000000000000900460ff16613f01578315156000908152600760209081526040808320868452825280832073ffffffffffffffffffffffffffffffffffffffff861684529091529020548181106150575781615059565b805b95945050505050565b6000806000806060866040516020018082815260200191505060405160208183030381529060405290508773ffffffffffffffffffffffffffffffffffffffff1663b80333ed8a6150cb57600a5473ffffffffffffffffffffffffffffffffffffffff166150e5565b60095473ffffffffffffffffffffffffffffffffffffffff165b8b6151085760095473ffffffffffffffffffffffffffffffffffffffff16615122565b600a5473ffffffffffffffffffffffffffffffffffffffff165b60008a8f876040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156152155781810151838201526020016151fd565b50505050905090810190601f1680156152425780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b15801561526357600080fd5b505afa158015615277573d6000803e3d6000fd5b505050506040513d604081101561528d57600080fd5b50805160209091015190935091506152ab868363ffffffff61539b16565b94506001600b54111561530357600a60149054906101000a900460ff16151589151514156152ec57600b546152e790869063ffffffff6153f416565b615300565b600b5461530090869063ffffffff61539b16565b94505b615313858463ffffffff6153f416565b9450615325858463ffffffff61539b16565b93506001600b54111561537c57600a60149054906101000a900460ff1615158915151461536557600b5461536090859063ffffffff6153f416565b615379565b600b5461537990859063ffffffff61539b16565b93505b61538c848363ffffffff6153f416565b93505095509550955095915050565b6000826153aa575060006110bb565b828202828482816153b757fe5b0414613f015760405162461bcd60e51b8152600401808060200182810382526021815260200180615da26021913960400191505060405180910390fd5b6000613f0183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250615d1e565b6000831161548b576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b83151560009081526003602052604081208054859081106154a857fe5b60009182526020909120600690910201805490915073ffffffffffffffffffffffffffffffffffffffff878116911614615529576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1680156155525750600083115b156155af57428160050154106155af576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018101546155c4908463ffffffff613f0816565b600182015560028101546155de908363ffffffff613f0816565b6002820181905560018201546040805186815260208101869052808201929092526060820192909252905185918715159173ffffffffffffffffffffffffffffffffffffffff8a16917f4036cb0ba867fe695e855b2d73d97fe96c1ff8c45e6490c12181cb5650be546e919081900360800190a4505050505050565b600081848411156156e95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156156ae578181015183820152602001615696565b50505050905090810190601f1680156156db5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106157cf57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615792565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114615831576040519150601f19603f3d011682016040523d82523d6000602084013e615836565b606091505b5091509150818015615864575080511580615864575080806020019051602081101561586157600080fd5b50515b6158b5576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b851515600090815260026020526040812054819081908190881115615929576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b891515600090815260036020526040812080548a90811061594657fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff16806159bc57508a151560009081526006602090815260408083208c8452825280832073ffffffffffffffffffffffffffffffffffffffff8e16845290915290205460ff165b615a0d576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b8060040154421015615a66576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b8060050154421115615abf576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b600080615ad68a8d8f8e8d8d876020020151614812565b865492995090975093509091507501000000000000000000000000000000000000000000900460ff16615be857600760008e15151515815260200190815260200160002060008c815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549650615b7e8688613f0890919063ffffffff16565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b615bf88a8263ffffffff613f0816565b602089015190975015615c3957615c24620186a06135a38a60016020020151889063ffffffff61539b16565b9350615c36818563ffffffff613f0816565b90505b6001830154615c4e908763ffffffff613f0816565b60018401556002830154615c68908263ffffffff613ea716565b83600201819055508a8d15158460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e858a8689600101548a60020154604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a45050509650965096509692505050565b60008183615d6d5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156156ae578181015183820152602001615696565b506000838581615d7957fe5b0495945050505050565b6040518060400160405280600290602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220fec8045d67c328923a443742e315a947b402ff743d74dd0f0dad376a69fb135e64736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_RestrictedPair2.ts
var OSWAP_RestrictedPair2 = class extends import_eth_wallet38.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RestrictedPair2_json_default.abi, OSWAP_RestrictedPair2_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  parseAddLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "AddLiquidity").map((e) => this.decodeAddLiquidityEvent(e));
  }
  decodeAddLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet38.BigNumber(result.index),
      amount: new import_eth_wallet38.BigNumber(result.amount),
      newAmountBalance: new import_eth_wallet38.BigNumber(result.newAmountBalance),
      _event: event
    };
  }
  parseApprovedTraderEvent(receipt) {
    return this.parseEvents(receipt, "ApprovedTrader").map((e) => this.decodeApprovedTraderEvent(e));
  }
  decodeApprovedTraderEvent(event) {
    let result = event.data;
    return {
      direction: result.direction,
      offerIndex: new import_eth_wallet38.BigNumber(result.offerIndex),
      trader: result.trader,
      allocation: new import_eth_wallet38.BigNumber(result.allocation),
      _event: event
    };
  }
  parseLockEvent(receipt) {
    return this.parseEvents(receipt, "Lock").map((e) => this.decodeLockEvent(e));
  }
  decodeLockEvent(event) {
    let result = event.data;
    return {
      direction: result.direction,
      index: new import_eth_wallet38.BigNumber(result.index),
      _event: event
    };
  }
  parseNewProviderOfferEvent(receipt) {
    return this.parseEvents(receipt, "NewProviderOffer").map((e) => this.decodeNewProviderOfferEvent(e));
  }
  decodeNewProviderOfferEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet38.BigNumber(result.index),
      allowAll: result.allowAll,
      restrictedPrice: new import_eth_wallet38.BigNumber(result.restrictedPrice),
      startDate: new import_eth_wallet38.BigNumber(result.startDate),
      expire: new import_eth_wallet38.BigNumber(result.expire),
      _event: event
    };
  }
  parseRemoveLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "RemoveLiquidity").map((e) => this.decodeRemoveLiquidityEvent(e));
  }
  decodeRemoveLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet38.BigNumber(result.index),
      amountOut: new import_eth_wallet38.BigNumber(result.amountOut),
      receivingOut: new import_eth_wallet38.BigNumber(result.receivingOut),
      newAmountBalance: new import_eth_wallet38.BigNumber(result.newAmountBalance),
      newReceivingBalance: new import_eth_wallet38.BigNumber(result.newReceivingBalance),
      _event: event
    };
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      to: result.to,
      direction: result.direction,
      amountIn: new import_eth_wallet38.BigNumber(result.amountIn),
      amountOut: new import_eth_wallet38.BigNumber(result.amountOut),
      tradeFee: new import_eth_wallet38.BigNumber(result.tradeFee),
      protocolFee: new import_eth_wallet38.BigNumber(result.protocolFee),
      _event: event
    };
  }
  parseSwappedOneOfferEvent(receipt) {
    return this.parseEvents(receipt, "SwappedOneOffer").map((e) => this.decodeSwappedOneOfferEvent(e));
  }
  decodeSwappedOneOfferEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      direction: result.direction,
      index: new import_eth_wallet38.BigNumber(result.index),
      price: new import_eth_wallet38.BigNumber(result.price),
      amountOut: new import_eth_wallet38.BigNumber(result.amountOut),
      amountIn: new import_eth_wallet38.BigNumber(result.amountIn),
      newAmountBalance: new import_eth_wallet38.BigNumber(result.newAmountBalance),
      newReceivingBalance: new import_eth_wallet38.BigNumber(result.newReceivingBalance),
      _event: event
    };
  }
  async addLiquidity_send(params) {
    let result = await this.send("addLiquidity", [params.direction, import_eth_wallet38.Utils.toString(params.index)]);
    return result;
  }
  async addLiquidity_call(params) {
    let result = await this.call("addLiquidity", [params.direction, import_eth_wallet38.Utils.toString(params.index)]);
    return;
  }
  async approvedTrader(params) {
    let result = await this.call("approvedTrader", [params.param1, import_eth_wallet38.Utils.toString(params.param2), import_eth_wallet38.Utils.toString(params.param3)]);
    return result;
  }
  async configStore() {
    let result = await this.call("configStore");
    return result;
  }
  async counter(param1) {
    let result = await this.call("counter", [param1]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async createOrder_send(params) {
    let result = await this.send("createOrder", [params.provider, params.direction, params.allowAll, import_eth_wallet38.Utils.toString(params.restrictedPrice), import_eth_wallet38.Utils.toString(params.startDate), import_eth_wallet38.Utils.toString(params.expire)]);
    return result;
  }
  async createOrder_call(params) {
    let result = await this.call("createOrder", [params.provider, params.direction, params.allowAll, import_eth_wallet38.Utils.toString(params.restrictedPrice), import_eth_wallet38.Utils.toString(params.startDate), import_eth_wallet38.Utils.toString(params.expire)]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async factory() {
    let result = await this.call("factory");
    return result;
  }
  async feeBalance() {
    let result = await this.call("feeBalance");
    return new import_eth_wallet38.BigNumber(result);
  }
  async getAmountIn(params) {
    let result = await this.call("getAmountIn", [params.tokenOut, import_eth_wallet38.Utils.toString(params.amountOut), params.trader, params.param4]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async getAmountOut(params) {
    let result = await this.call("getAmountOut", [params.tokenIn, import_eth_wallet38.Utils.toString(params.amountIn), params.trader, params.param4]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async getApprovedTrader(params) {
    let result = await this.call("getApprovedTrader", [params.direction, import_eth_wallet38.Utils.toString(params.offerIndex), import_eth_wallet38.Utils.toString(params.start), import_eth_wallet38.Utils.toString(params.length)]);
    return {
      trader: result.trader,
      allocation: result.allocation.map((e) => new import_eth_wallet38.BigNumber(e))
    };
  }
  async getApprovedTraderLength(params) {
    let result = await this.call("getApprovedTraderLength", [params.direction, import_eth_wallet38.Utils.toString(params.offerIndex)]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async getBalances() {
    let result = await this.call("getBalances");
    return {
      param1: new import_eth_wallet38.BigNumber(result[0]),
      param2: new import_eth_wallet38.BigNumber(result[1]),
      param3: new import_eth_wallet38.BigNumber(result[2])
    };
  }
  async getLastBalances() {
    let result = await this.call("getLastBalances");
    return {
      param1: new import_eth_wallet38.BigNumber(result[0]),
      param2: new import_eth_wallet38.BigNumber(result[1])
    };
  }
  async getOffers(params) {
    let result = await this.call("getOffers", [params.direction, import_eth_wallet38.Utils.toString(params.start), import_eth_wallet38.Utils.toString(params.length)]);
    return {
      index: result.index.map((e) => new import_eth_wallet38.BigNumber(e)),
      provider: result.provider,
      lockedAndAllowAll: result.lockedAndAllowAll,
      receiving: result.receiving.map((e) => new import_eth_wallet38.BigNumber(e)),
      amountAndPrice: result.amountAndPrice.map((e) => new import_eth_wallet38.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet38.BigNumber(e))
    };
  }
  async getProviderOffer(params) {
    let result = await this.call("getProviderOffer", [params.provider, params.direction, import_eth_wallet38.Utils.toString(params.start), import_eth_wallet38.Utils.toString(params.length)]);
    return {
      index: result.index.map((e) => new import_eth_wallet38.BigNumber(e)),
      provider: result.provider,
      lockedAndAllowAll: result.lockedAndAllowAll,
      receiving: result.receiving.map((e) => new import_eth_wallet38.BigNumber(e)),
      amountAndPrice: result.amountAndPrice.map((e) => new import_eth_wallet38.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet38.BigNumber(e))
    };
  }
  async getProviderOfferIndexLength(params) {
    let result = await this.call("getProviderOfferIndexLength", [params.provider, params.direction]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async getTraderOffer(params) {
    let result = await this.call("getTraderOffer", [params.trader, params.direction, import_eth_wallet38.Utils.toString(params.start), import_eth_wallet38.Utils.toString(params.length)]);
    return {
      index: result.index.map((e) => new import_eth_wallet38.BigNumber(e)),
      provider: result.provider,
      lockedAndAllowAll: result.lockedAndAllowAll,
      receiving: result.receiving.map((e) => new import_eth_wallet38.BigNumber(e)),
      amountAndPrice: result.amountAndPrice.map((e) => new import_eth_wallet38.BigNumber(e)),
      startDateAndExpire: result.startDateAndExpire.map((e) => new import_eth_wallet38.BigNumber(e))
    };
  }
  async govToken() {
    let result = await this.call("govToken");
    return result;
  }
  async governance() {
    let result = await this.call("governance");
    return result;
  }
  async initialize_send(params) {
    let result = await this.send("initialize", [params.token0, params.token1]);
    return result;
  }
  async initialize_call(params) {
    let result = await this.call("initialize", [params.token0, params.token1]);
    return;
  }
  async isApprovedTrader(params) {
    let result = await this.call("isApprovedTrader", [params.param1, import_eth_wallet38.Utils.toString(params.param2), params.param3]);
    return result;
  }
  async isLive() {
    let result = await this.call("isLive");
    return result;
  }
  async lastGovBalance() {
    let result = await this.call("lastGovBalance");
    return new import_eth_wallet38.BigNumber(result);
  }
  async lastToken0Balance() {
    let result = await this.call("lastToken0Balance");
    return new import_eth_wallet38.BigNumber(result);
  }
  async lastToken1Balance() {
    let result = await this.call("lastToken1Balance");
    return new import_eth_wallet38.BigNumber(result);
  }
  async lockOffer_send(params) {
    let result = await this.send("lockOffer", [params.direction, import_eth_wallet38.Utils.toString(params.index)]);
    return result;
  }
  async lockOffer_call(params) {
    let result = await this.call("lockOffer", [params.direction, import_eth_wallet38.Utils.toString(params.index)]);
    return;
  }
  async offers(params) {
    let result = await this.call("offers", [params.param1, import_eth_wallet38.Utils.toString(params.param2)]);
    return {
      provider: result.provider,
      locked: result.locked,
      allowAll: result.allowAll,
      amount: new import_eth_wallet38.BigNumber(result.amount),
      receiving: new import_eth_wallet38.BigNumber(result.receiving),
      restrictedPrice: new import_eth_wallet38.BigNumber(result.restrictedPrice),
      startDate: new import_eth_wallet38.BigNumber(result.startDate),
      expire: new import_eth_wallet38.BigNumber(result.expire)
    };
  }
  async protocolFeeBalance0() {
    let result = await this.call("protocolFeeBalance0");
    return new import_eth_wallet38.BigNumber(result);
  }
  async protocolFeeBalance1() {
    let result = await this.call("protocolFeeBalance1");
    return new import_eth_wallet38.BigNumber(result);
  }
  async providerOfferIndex(params) {
    let result = await this.call("providerOfferIndex", [params.param1, params.param2, import_eth_wallet38.Utils.toString(params.param3)]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async redeemProtocolFee_send() {
    let result = await this.send("redeemProtocolFee");
    return result;
  }
  async redeemProtocolFee_call() {
    let result = await this.call("redeemProtocolFee");
    return;
  }
  async removeAllLiquidity_send(provider) {
    let result = await this.send("removeAllLiquidity", [provider]);
    return result;
  }
  async removeAllLiquidity_call(provider) {
    let result = await this.call("removeAllLiquidity", [provider]);
    return {
      amount0: new import_eth_wallet38.BigNumber(result.amount0),
      amount1: new import_eth_wallet38.BigNumber(result.amount1)
    };
  }
  async removeAllLiquidity1D_send(params) {
    let result = await this.send("removeAllLiquidity1D", [params.provider, params.direction]);
    return result;
  }
  async removeAllLiquidity1D_call(params) {
    let result = await this.call("removeAllLiquidity1D", [params.provider, params.direction]);
    return {
      totalAmount: new import_eth_wallet38.BigNumber(result.totalAmount),
      totalReceiving: new import_eth_wallet38.BigNumber(result.totalReceiving)
    };
  }
  async removeLiquidity_send(params) {
    let result = await this.send("removeLiquidity", [params.provider, params.direction, import_eth_wallet38.Utils.toString(params.index), import_eth_wallet38.Utils.toString(params.amountOut), import_eth_wallet38.Utils.toString(params.receivingOut)]);
    return result;
  }
  async removeLiquidity_call(params) {
    let result = await this.call("removeLiquidity", [params.provider, params.direction, import_eth_wallet38.Utils.toString(params.index), import_eth_wallet38.Utils.toString(params.amountOut), import_eth_wallet38.Utils.toString(params.receivingOut)]);
    return;
  }
  async restrictedLiquidityProvider() {
    let result = await this.call("restrictedLiquidityProvider");
    return result;
  }
  async scaleDirection() {
    let result = await this.call("scaleDirection");
    return result;
  }
  async scaler() {
    let result = await this.call("scaler");
    return new import_eth_wallet38.BigNumber(result);
  }
  async setApprovedTrader_send(params) {
    let result = await this.send("setApprovedTrader", [params.direction, import_eth_wallet38.Utils.toString(params.offerIndex), params.trader, import_eth_wallet38.Utils.toString(params.allocation)]);
    return result;
  }
  async setApprovedTrader_call(params) {
    let result = await this.call("setApprovedTrader", [params.direction, import_eth_wallet38.Utils.toString(params.offerIndex), params.trader, import_eth_wallet38.Utils.toString(params.allocation)]);
    return;
  }
  async setLive_send(isLive) {
    let result = await this.send("setLive", [isLive]);
    return result;
  }
  async setLive_call(isLive) {
    let result = await this.call("setLive", [isLive]);
    return;
  }
  async setMultipleApprovedTraders_send(params) {
    let result = await this.send("setMultipleApprovedTraders", [params.direction, import_eth_wallet38.Utils.toString(params.offerIndex), params.trader, import_eth_wallet38.Utils.toString(params.allocation)]);
    return result;
  }
  async setMultipleApprovedTraders_call(params) {
    let result = await this.call("setMultipleApprovedTraders", [params.direction, import_eth_wallet38.Utils.toString(params.offerIndex), params.trader, import_eth_wallet38.Utils.toString(params.allocation)]);
    return;
  }
  async swap_send(params) {
    let result = await this.send("swap", [import_eth_wallet38.Utils.toString(params.amount0Out), import_eth_wallet38.Utils.toString(params.amount1Out), params.to, params.trader, params.param5]);
    return result;
  }
  async swap_call(params) {
    let result = await this.call("swap", [import_eth_wallet38.Utils.toString(params.amount0Out), import_eth_wallet38.Utils.toString(params.amount1Out), params.to, params.trader, params.param5]);
    return;
  }
  async sync_send() {
    let result = await this.send("sync");
    return result;
  }
  async sync_call() {
    let result = await this.call("sync");
    return;
  }
  async token0() {
    let result = await this.call("token0");
    return result;
  }
  async token1() {
    let result = await this.call("token1");
    return result;
  }
  async traderAllocation(params) {
    let result = await this.call("traderAllocation", [params.param1, import_eth_wallet38.Utils.toString(params.param2), params.param3]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async traderOffer(params) {
    let result = await this.call("traderOffer", [params.param1, params.param2, import_eth_wallet38.Utils.toString(params.param3)]);
    return new import_eth_wallet38.BigNumber(result);
  }
  async whitelistFactory() {
    let result = await this.call("whitelistFactory");
    return result;
  }
  assign() {
    this.addLiquidity = Object.assign(this.addLiquidity_send, { call: this.addLiquidity_call });
    this.createOrder = Object.assign(this.createOrder_send, { call: this.createOrder_call });
    this.initialize = Object.assign(this.initialize_send, { call: this.initialize_call });
    this.lockOffer = Object.assign(this.lockOffer_send, { call: this.lockOffer_call });
    this.redeemProtocolFee = Object.assign(this.redeemProtocolFee_send, { call: this.redeemProtocolFee_call });
    this.removeAllLiquidity = Object.assign(this.removeAllLiquidity_send, { call: this.removeAllLiquidity_call });
    this.removeAllLiquidity1D = Object.assign(this.removeAllLiquidity1D_send, { call: this.removeAllLiquidity1D_call });
    this.removeLiquidity = Object.assign(this.removeLiquidity_send, { call: this.removeLiquidity_call });
    this.setApprovedTrader = Object.assign(this.setApprovedTrader_send, { call: this.setApprovedTrader_call });
    this.setLive = Object.assign(this.setLive_send, { call: this.setLive_call });
    this.setMultipleApprovedTraders = Object.assign(this.setMultipleApprovedTraders_send, { call: this.setMultipleApprovedTraders_call });
    this.swap = Object.assign(this.swap_send, { call: this.swap_call });
    this.sync = Object.assign(this.sync_send, { call: this.sync_call });
  }
};

// src/contracts/restricted/OSWAP_RestrictedPairCreator.ts
var import_eth_wallet39 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/restricted/OSWAP_RestrictedPairCreator.json.ts
var OSWAP_RestrictedPairCreator_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "bytes32", "name": "salt", "type": "bytes32" }], "name": "createPair", "outputs": [{ "internalType": "address", "name": "pair", "type": "address" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50615e0f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ed25a5a214610030575b600080fd5b61004d6004803603602081101561004657600080fd5b5035610076565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600060606040518060200161008a906100b1565b6020820181038252601f19601f820116604052509050828151602083016000f59392505050565b615d1b806100bf8339019056fe610140604052600180553480156200001657600080fd5b5033606081901b60809081526000805460ff191660011781556040805163ea2ed2c160e01b81529051919384938493849363ea2ed2c1926004808301939192829003018186803b1580156200006a57600080fd5b505afa1580156200007f573d6000803e3d6000fd5b505050506040513d60808110156200009657600080fd5b5080516020808301516040808501516060958601516001600160601b031986881b811660a0529684901b90961660c052815163b716d46360e01b815291519499509197509095509293506001600160a01b0387169263b716d4639260048083019392829003018186803b1580156200010d57600080fd5b505afa15801562000122573d6000803e3d6000fd5b505050506040513d60208110156200013957600080fd5b81019080805190602001909291905050506001600160a01b0316610100816001600160a01b031660601b81525050816001600160a01b031660e0816001600160a01b031660601b81525050806001600160a01b0316610120816001600160a01b031660601b81525050600360006001151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550506003600080151515158152602001908152602001600020604051806101000160405280306001600160a01b03168152602001600115158152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e0820151816005015550505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c615838620004e360003980611b165280611e225280612a885280613fba525080610e50528061105f52806129c35280613afc5280613b545280613baf5280613c535280613d575280613da15250806119d652806123175280612611528061312e528061336a5280613e18528061478c525080612c0a52806132195250806115e952508061117652806112ed5280611884528061213352806124a852806129255280612b1152806132535280614be852506158386000f3fe608060405234801561001057600080fd5b50600436106103145760003560e01c806376701636116101a7578063d21220a7116100ee578063ea5dbbc411610097578063f5ee334811610071578063f5ee334814610dd5578063fa69ce2b14610df4578063fff6cae914610e4157610314565b8063ea5dbbc414610cf6578063ee13b84114610d92578063f060d13914610dcd57610314565b8063db13653c116100c8578063db13653c14610c2a578063db47533e14610ca7578063e5d36ff614610cee57610314565b8063d21220a714610b39578063d38550a714610b41578063d7dc4e4314610b8857610314565b80639f0a3cc111610150578063b8f7a6651161012a578063b8f7a66514610b21578063bebf7a6114610b29578063c45a015514610b3157610314565b80639f0a3cc114610ab9578063a878769314610afa578063b2901aa314610b1957610314565b80639749d213116101815780639749d21314610a625780639cac76ac14610a6a5780639d69dc4e14610ab157610314565b80637670163614610a025780637a6a5e1b14610a27578063835daf6c14610a5a57610314565b8063577e6d081161026b578063625b6ced1161021457806372ca7372116101ee57806372ca7372146108ec5780637401342414610988578063752bc9dc146109dd57610314565b8063625b6ced146107d95780636322fa32146108145780636b4afee1146108e457610314565b80635eff2d01116102455780635eff2d01146106b25780635fd5e2fc1461077c57806360b71d4e146107d157610314565b8063577e6d081461069a5780635a6af09d146106a25780635aa6e675146106aa57610314565b8063364aed84116102cd5780633d0d81d6116102a75780633d0d81d61461045a578063485cc9551461063257806348c0902f1461066f57610314565b8063364aed84146103f05780633c1e6ff5146104315780633c6d5c721461043957610314565b80630dfe1681116102fe5780630dfe1681146103705780631da9a2bd146103785780631deb4995146103af57610314565b8062113e081461031957806305268cff1461033f575b600080fd5b610321610e49565b60408051938452602084019290925282820152519081900360600190f35b61034761105d565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b610347611081565b61039d6004803603604081101561038e57600080fd5b5080351515906020013561109d565b60408051918252519081900360200190f35b61039d600480360360608110156103c557600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356110c1565b61039d6004803603606081101561040657600080fd5b50803515159073ffffffffffffffffffffffffffffffffffffffff60208201351690604001356110fc565b61039d611121565b610441611127565b6040805192835260208301919091528051918290030190f35b6104856004803603606081101561047057600080fd5b50803515159060208101359060400135611131565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b838110156104d95781810151838201526020016104c1565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b83811015610518578181015183820152602001610500565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b8381101561055757818101518382015260200161053f565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b8381101561059657818101518382015260200161057e565b50505050905001878103835289818151815260200191508051906020019060200280838360005b838110156105d55781810151838201526020016105bd565b50505050905001878103825288818151815260200191508051906020019060200280838360005b838110156106145781810151838201526020016105fc565b505050509050019c5050505050505050505050505060405180910390f35b61066d6004803603604081101561064857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661115e565b005b6103476004803603606081101561068557600080fd5b5080351515906020810135906040013561158c565b61039d6115db565b61039d6115e1565b6103476115e7565b6106e3600480360360808110156106c857600080fd5b5080351515906020810135906040810135906060013561160b565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561072757818101518382015260200161070f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561076657818101518382015260200161074e565b5050505090500194505050505060405180910390f35b61039d600480360360c081101561079257600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604081013515159060608101359060808101359060a00135611821565b61039d611f63565b61039d600480360360408110156107ef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611f69565b61066d6004803603608081101561082a57600080fd5b813515159160208101359181019060608101604082013564010000000081111561085357600080fd5b82018360208201111561086557600080fd5b8035906020019184602083028401116401000000008311171561088757600080fd5b9193909290916020810190356401000000008111156108a557600080fd5b8201836020820111156108b757600080fd5b803590602001918460208302840111640100000000831117156108d957600080fd5b509092509050611f9f565b61039d612062565b61039d6004803603608081101561090257600080fd5b73ffffffffffffffffffffffffffffffffffffffff823581169260208101359260408201359092169181019060808101606082013564010000000081111561094957600080fd5b82018360208201111561095b57600080fd5b8035906020019184600183028401116401000000008311171561097d57600080fd5b509092509050612068565b6109c96004803603606081101561099e57600080fd5b5080351515906020810135906040013573ffffffffffffffffffffffffffffffffffffffff166122c2565b604080519115158252519081900360200190f35b61066d600480360360408110156109f357600080fd5b508035151590602001356122e8565b61066d60048036036040811015610a1857600080fd5b50803515159060200135612447565b61044160048036036020811015610a3d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612807565b61039d6128bc565b61066d6128c2565b61048560048036036080811015610a8057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060600135612a58565b610347612a86565b61039d60048036036060811015610acf57600080fd5b5080351515906020810135906040013573ffffffffffffffffffffffffffffffffffffffff16612aaa565b61039d60048036036020811015610b1057600080fd5b50351515612acd565b61039d612adf565b6109c9612ae5565b6109c9612aee565b610347612b0f565b610347612b33565b61048560048036036080811015610b5757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602081013515159060408101359060600135612b4f565b61066d600480360360a0811015610b9e57600080fd5b81359160208101359173ffffffffffffffffffffffffffffffffffffffff604083013581169260608101359091169181019060a081016080820135640100000000811115610beb57600080fd5b820183602082011115610bfd57600080fd5b80359060200191846001830284011164010000000083111715610c1f57600080fd5b509092509050612b66565b610c4f60048036036040811015610c4057600080fd5b5080351515906020013561306b565b6040805173ffffffffffffffffffffffffffffffffffffffff90991689529615156020890152941515878701526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b61066d60048036036080811015610cbd57600080fd5b50803515159060208101359073ffffffffffffffffffffffffffffffffffffffff604082013516906060013561310e565b61034761312c565b61039d60048036036080811015610d0c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8235811692602081013592604082013590921691810190608081016060820135640100000000811115610d5357600080fd5b820183602082011115610d6557600080fd5b80359060200191846001830284011164010000000083111715610d8757600080fd5b509092509050613150565b61044160048036036040811015610da857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135151561319f565b610347613217565b61066d60048036036020811015610deb57600080fd5b5035151561323b565b61066d600480360360a0811015610e0a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020810135151590604081013590606081013590608001356132f6565b61066d613486565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d6020811015610f1557600080fd5b5051600954604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b158015610f8857600080fd5b505afa158015610f9c573d6000803e3d6000fd5b505050506040513d6020811015610fb257600080fd5b5051600a54604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905173ffffffffffffffffffffffffffffffffffffffff909216916370a0823191602480820192602092909190829003018186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b505191945092509050909192565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b81151560009081526005602090815260408083208484529091529020545b92915050565b600460205282600052604060002060205281600052604060002081815481106110e657fe5b9060005260206000200160009250925050505481565b600860205282600052604060002060205281600052604060002081815481106110e657fe5b600b5481565b600d54600e549091565b6060806060806060806111486000808b8b8b6134f0565b949e939d50919b50995097509095509350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146111e8576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6009805473ffffffffffffffffffffffffffffffffffffffff8085167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161792839055600a805485831693169290921791829055908116911610611295576040805162461bcd60e51b815260206004820152601860248201527f496e76616c696420746f6b656e2070616972206f726465720000000000000000604482015290519081900360640190fd5b600954600a54604080517f52a03c0300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152516000927f000000000000000000000000000000000000000000000000000000000000000016916352a03c0391604480830192602092919082900301818787803b15801561133457600080fd5b505af1158015611348573d6000803e3d6000fd5b505050506040513d602081101561135e57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81166113ca576040805162461bcd60e51b815260206004820152600f60248201527f4e6f206f7261636c6520666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600954604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163313ce567916004808301926020929190829003018186803b15801561143557600080fd5b505afa158015611449573d6000803e3d6000fd5b505050506040513d602081101561145f57600080fd5b5051600a54604080517f313ce567000000000000000000000000000000000000000000000000000000008152905192935060009273ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b1580156114d257600080fd5b505afa1580156114e6573d6000803e3d6000fd5b505050506040513d60208110156114fc57600080fd5b5051905060ff8281169082161415611518576001600b55611585565b600a80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1660ff848116848216117401000000000000000000000000000000000000000090810292909217928390559104166115775780820361157b565b8181035b60ff16600a0a600b555b5050505050565b600560205282600052604060002060205281600052604060002081815481106115b157fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16925083915050565b60105481565b600d5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b8315156000908152600560209081526040808320868452909152902080546060918291808610156117fb5780611647878763ffffffff613a3616565b11156116605761165d818763ffffffff613a9716565b94505b8467ffffffffffffffff8111801561167757600080fd5b506040519080825280602002602001820160405280156116a1578160200160208202803683370190505b5093508467ffffffffffffffff811180156116bb57600080fd5b506040519080825280602002602001820160405280156116e5578160200160208202803683370190505b50925060005b858110156117f55788151560009081526007602090815260408083208b845290915281209084611721848b63ffffffff613a3616565b8154811061172b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687848151811061176257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548482815181106117e257fe5b60209081029190910101526001016116eb565b50611816565b60408051600080825260208201908152818301909252945092505b505094509492505050565b600060015460011461187a576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156118ea57600080fd5b505af11580156118fe573d6000803e3d6000fd5b505050506040513d602081101561191457600080fd5b5051611967576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166119be576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611a1757503373ffffffffffffffffffffffffffffffffffffffff8816145b611a68576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b82821015611abd576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b42821015611b12576040805162461bcd60e51b815260206004820152600f60248201527f416c726561647920657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6d617844757200000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611ba557600080fd5b505afa158015611bb9573d6000803e3d6000fd5b505050506040513d6020811015611bcf57600080fd5b50519050428101831115611c2a576040805162461bcd60e51b815260206004820152601360248201527f45787069726520746f6f20666172206177617900000000000000000000000000604482015290519081900360640190fd5b506002600087151515158152602001908152602001600020600081546001019190508190559050600460008715151515815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505560036000871515151581526020019081526020016000206040518061010001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018715158152602001600081526020016000815260200186815260200185815260200184815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690831515021790555060408201518160000160156101000a81548160ff021916908315150217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e6665655065724f726465720000000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611eb157600080fd5b505afa158015611ec5573d6000803e3d6000fd5b505050506040513d6020811015611edb57600080fd5b50519050611ee98882613ad9565b604080518381528715156020820152808201879052606081018690526080810185905290518815159173ffffffffffffffffffffffffffffffffffffffff8b16917f528317aa3a915641ec93963a99c0ef7d64d16e351d258904238e941a5af151da9181900360a00190a350600180559695505050505050565b60115481565b1515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff949094168352929052205490565b82818114611ff4576040805162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d6174636800000000000000000000000000000000604482015290519081900360640190fd5b611fff878783613de9565b60005b8181101561205857612050888888888581811061201b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1687878681811061204457fe5b905060200201356140a9565b600101612002565b5050505050505050565b600e5481565b60008085116120be576040805162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e5400000000000000604482015290519081900360640190fd5b6060806120cb6084614237565b600954600a54604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820181905292841660248201529051949650929450818c16149260009283927f0000000000000000000000000000000000000000000000000000000000000000169163069d188f91604480820192606092909190829003018186803b15801561217a57600080fd5b505afa15801561218e573d6000803e3d6000fd5b505050506040513d60608110156121a457600080fd5b50805160209091015190925090506000805b86518110156122b25760008782815181106121cd57fe5b60200260200101519050600260008715151515815260200190815260200160002054811115612243576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b612281670de0b6b3a76400006122758f8a868151811061225f57fe5b60200260200101516143d190919063ffffffff16565b9063ffffffff61442a16565b925061229186848e84898961446c565b509093506122a79050898463ffffffff613a3616565b9850506001016121b6565b5050505050505095945050505050565b600660209081526000938452604080852082529284528284209052825290205460ff1681565b811515600090815260036020526040812080548390811061230557fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806123855750805473ffffffffffffffffffffffffffffffffffffffff1633145b6123d6576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001781556040518290841515907f108c7d3c4d8ad208c92f4064bac678f032a0ac5bdbaaa1c0fdbd240b23b445ea90600090a3505050565b60015460011461249e576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b8f7a6656040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561250e57600080fd5b505af1158015612522573d6000803e3d6000fd5b505050506040513d602081101561253857600080fd5b505161258b576040805162461bcd60e51b815260206004820152600f60248201527f474c4f42414c4c59205041555345440000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff166125e2576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b81151560009081526003602052604081208054839081106125ff57fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061267f5750805473ffffffffffffffffffffffffffffffffffffffff1633145b6126d0576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b60008060006126dd610e49565b9250925092506000861561270657600e546126ff90839063ffffffff613a9716565b905061271d565b600d5461271a90849063ffffffff613a9716565b90505b60008111612772576040805162461bcd60e51b815260206004820152600c60248201527f4e6f20616d6f756e7420696e0000000000000000000000000000000000000000604482015290519081900360640190fd5b6001850154612787908263ffffffff613a3616565b60018601908155600c859055600d849055600e83905585549054604080518481526020810192909252805189938b15159373ffffffffffffffffffffffffffffffffffffffff909116927ffb32bd9fa1413efecfb3f4b7ef2a5b60f1b61b33bb3bcd74970cb23fb2762d1992918290030190a45050600180555050505050565b600080600154600114612861576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600181905550612874836000614771565b9092509050600080612887856001614771565b909250905061289c848263ffffffff613a3616565b93506128ae838363ffffffff613a3616565b600180559395939450505050565b600f5481565b600154600114612919576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ef3692526040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561298b57600080fd5b505af115801561299f573d6000803e3d6000fd5b505050506040513d60208110156129b557600080fd5b50516011549091506129ea907f0000000000000000000000000000000000000000000000000000000000000000908390614970565b600954600f54612a129173ffffffffffffffffffffffffffffffffffffffff16908390614970565b600a54601054612a3a9173ffffffffffffffffffffffffffffffffffffffff16908390614970565b60006011819055600f819055601055612a51614b5c565b5060018055565b606080606080606080612a6f60018b8b8b8b6134f0565b949f939e50919c509a509850909650945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600760209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205481565b600c5481565b60005460ff1681565b600a5474010000000000000000000000000000000000000000900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5473ffffffffffffffffffffffffffffffffffffffff1681565b606080606080606080612a6f60028b8b8b8b6134f0565b600154600114612bbd576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001819055604080517f3af32abf000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692633af32abf92602480820193602093909283900390910190829087803b158015612c5457600080fd5b505af1158015612c68573d6000803e3d6000fd5b505050506040513d6020811015612c7e57600080fd5b5051612d0b573233148015612c995750612c9733614b6f565b155b8015612cba575073ffffffffffffffffffffffffffffffffffffffff831633145b612d0b576040805162461bcd60e51b815260206004820152600e60248201527f496e76616c696420747261646572000000000000000000000000000000000000604482015290519081900360640190fd5b60005460ff16612d62576040805162461bcd60e51b815260206004820152600660248201527f5041555345440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600d54600954604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600093612e1793909273ffffffffffffffffffffffffffffffffffffffff909116916370a0823191602480820192602092909190829003018186803b158015612ddf57600080fd5b505afa158015612df3573d6000803e3d6000fd5b505050506040513d6020811015612e0957600080fd5b50519063ffffffff613a9716565b600e54600a54604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051939450600093612e93939273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b158015612ddf57600080fd5b905060008089158015612ea557508815155b15612f4f57612eb660018589614b75565b909250905088821015612f10576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600a54612f349073ffffffffffffffffffffffffffffffffffffffff168984614970565b600f54612f47908263ffffffff613a3616565b600f55613053565b8915801590612f5c575088155b1561300657612f6d60008489614b75565b909250905089821015612fc7576040805162461bcd60e51b815260206004820152601360248201527f494e53554646494349454e545f414d4f554e5400000000000000000000000000604482015290519081900360640190fd5b600954612feb9073ffffffffffffffffffffffffffffffffffffffff168984614970565b601054612ffe908263ffffffff613a3616565b601055613053565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b61305b614b5c565b5050600180555050505050505050565b6003602052816000526040600020818154811061308457fe5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015473ffffffffffffffffffffffffffffffffffffffff8516975060ff7401000000000000000000000000000000000000000086048116975075010000000000000000000000000000000000000000009095049094169492939192909188565b61311a84846001613de9565b613126848484846140a9565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805162461bcd60e51b815260206004820152600d60248201527f4e6f7420737570706f72746564000000000000000000000000000000000000006044820152905160009181900360640190fd5b6000806001546001146131f9576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001556132088484614771565b60018055909590945092505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146132c5576040805162461bcd60e51b815260206004820152600960248201527f464f5242494444454e0000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60015460011461334d576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001553373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806133ab57503373ffffffffffffffffffffffffffffffffffffffff8616145b6133fc576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b6134098585858585614e18565b6000808561343657600954600a5473ffffffffffffffffffffffffffffffffffffffff9182169116613457565b600a5460095473ffffffffffffffffffffffffffffffffffffffff91821691165b91509150613466823386614970565b613471813385614970565b613479614b5c565b5050600180555050505050565b6001546001146134dd576040805162461bcd60e51b815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60006001556134ea614b5c565b60018055565b606080808080806000808c61352e57505088151560008181526004602090815260408083208380528252808320938352600390915290205490613605565b8c60011415613573575050881515600090815260086020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e1684529091529020805490613605565b8c600214156135b8575050881515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8e1684529091529020805490613605565b6040805162461bcd60e51b815260206004820152600c60248201527f556e6b6e6f776e206c6973740000000000000000000000000000000000000000604482015290519081900360640190fd5b8a151560009081526003602052604090208d90838c10156139f957836136318d8d63ffffffff613a3616565b111561364a57613647848d63ffffffff613a9716565b9a505b8a67ffffffffffffffff8111801561366157600080fd5b5060405190808252806020026020018201604052801561368b578160200160208202803683370190505b5099508a67ffffffffffffffff811180156136a557600080fd5b506040519080825280602002602001820160405280156136cf578160200160208202803683370190505b5098508a67ffffffffffffffff811180156136e957600080fd5b50604051908082528060200260200182016040528015613713578160200160208202803683370190505b5096508a60020293508367ffffffffffffffff8111801561373357600080fd5b5060405190808252806020026020018201604052801561375d578160200160208202803683370190505b5097508367ffffffffffffffff8111801561377757600080fd5b506040519080825280602002602001820160405280156137a1578160200160208202803683370190505b5095508367ffffffffffffffff811180156137bb57600080fd5b506040519080825280602002602001820160405280156137e5578160200160208202803683370190505b50945060005b8b8110156139f357613803818e63ffffffff613a3616565b9450821561384c578260011461382f5783858154811061381f57fe5b9060005260206000200154613847565b83858154811061383b57fe5b90600052602060002001545b61384e565b845b9450600082868154811061385e57fe5b90600052602060002090600602019050858c838151811061387b57fe5b6020908102919091010152613896828e63ffffffff613a3616565b81548c5191975073ffffffffffffffffffffffffffffffffffffffff16908c90849081106138c057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060000160149054906101000a900460ff168a838151811061391857fe5b6020026020010190151590811515815250508060000160159054906101000a900460ff168a878151811061394857fe5b602002602001019015159081151581525050806002015489838151811061396b57fe5b602002602001018181525050806001015488838151811061398857fe5b60200260200101818152505080600301548887815181106139a557fe5b60200260200101818152505080600401548783815181106139c257fe5b60200260200101818152505080600501548787815181106139df57fe5b6020908102919091010152506001016137eb565b50613a25565b6040805160008082526020820181815282840191825260608301909352909a5090985096508695508594505b505050509550955095509550955095565b600082820183811015613a90576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000613a9083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061503c565b3373ffffffffffffffffffffffffffffffffffffffff83161415613c0a57613b237f00000000000000000000000000000000000000000000000000000000000000008330846150d3565b601154613b36908263ffffffff613a3616565b601155600c54613b4c908263ffffffff613a3616565b600c556009547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415613baa57600d54613ba6908263ffffffff613a3616565b600d555b600a547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415613c0557600e54613c01908263ffffffff613a3616565b600e555b613de5565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916370a0823191602480820192602092909190829003018186803b158015613c9a57600080fd5b505afa158015613cae573d6000803e3d6000fd5b505050506040513d6020811015613cc457600080fd5b5051600c54909150600090613ce090839063ffffffff613a9716565b905082811015613d37576040805162461bcd60e51b815260206004820152600e60248201527f4e6f7420656e6f75676820666565000000000000000000000000000000000000604482015290519081900360640190fd5b601154613d4a908263ffffffff613a3616565b601155600c8290556009547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161415613d9c57600d8290555b600a547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff908116911614156131265750600e555b5050565b8215156000908152600360205260408120805484908110613e0657fe5b906000526020600020906006020190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613e865750805473ffffffffffffffffffffffffffffffffffffffff1633145b613ed7576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff1615613f46576040805162461bcd60e51b815260206004820152600c60248201527f4f66666572206c6f636b65640000000000000000000000000000000000000000604482015290519081900360640190fd5b80547501000000000000000000000000000000000000000000900460ff1615613fb6576040805162461bcd60e51b815260206004820152601a60248201527f4f66666572207761732073657420746f20616c6c6f7720616c6c000000000000604482015290519081900360640190fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bc14128f7f52657374726963746564506169722e66656550657254726164657200000000006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561404957600080fd5b505afa15801561405d573d6000803e3d6000fd5b505050506040513d602081101561407357600080fd5b505182549091506115859073ffffffffffffffffffffffffffffffffffffffff166140a4838663ffffffff6143d116565b613ad9565b8315156000908152600660209081526040808320868452825280832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166141bc57831515600081815260056020908152604080832087845282528083208054600180820183559185528385200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916908117909155858552600684528285208986528452828520818652845282852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831790559484526008835281842094845293825282208054938401815582529020018390555b8315156000818152600760209081526040808320878452825280832073ffffffffffffffffffffffffffffffffffffffff871680855290835292819020859055805185815290519293879390927fe51457e789313604d11150ac77eade7d4c00b796eb6429e2de5bd9a6a9716a48928290030190a450505050565b606080600061424c848363ffffffff613a3616565b3610156142a0576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b6020840135602081028060020260408701013610156142be57600080fd5b60405160208201600202810160405282815281604088016020830137809550816020018101905082815281826040890101602083013793506002026020908101925036915061432390614317878563ffffffff613a3616565b9063ffffffff613a3616565b14614375576040805162461bcd60e51b815260206004820152601360248201527f496e76616c69642064617461206c656e67746800000000000000000000000000604482015290519081900360640190fd5b60008351116143cb576040805162461bcd60e51b815260206004820152601260248201527f496e76616c6964206f66666572206c6973740000000000000000000000000000604482015290519081900360640190fd5b50915091565b6000826143e0575060006110bb565b828202828482816143ed57fe5b0414613a905760405162461bcd60e51b81526004018080602001828103825260218152602001806157e26021913960400191505060405180910390fd5b6000613a9083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061529f565b60008080614487620186a06122758a8763ffffffff6143d116565b9050614499888263ffffffff613a9716565b97506000808673ffffffffffffffffffffffffffffffffffffffff1663b80333ed8c6144dd57600a5473ffffffffffffffffffffffffffffffffffffffff166144f7565b60095473ffffffffffffffffffffffffffffffffffffffff165b8d61451a5760095473ffffffffffffffffffffffffffffffffffffffff16614534565b600a5473ffffffffffffffffffffffffffffffffffffffff165b8d60008e8e604051602001808281526020019150506040516020818303038152906040526040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561464657818101518382015260200161462e565b50505050905090810190601f1680156146735780820380516001836020036101000a031916815260200191505b50975050505050505050604080518083038186803b15801561469457600080fd5b505afa1580156146a8573d6000803e3d6000fd5b505050506040513d60408110156146be57600080fd5b50805160209091015190925090506146dc8a8363ffffffff6143d116565b94506001600b54111561473357600a60149054906101000a900460ff1615158b15151461471c57600b5461471790869063ffffffff61442a16565b614730565b600b5461473090869063ffffffff6143d116565b94505b614743858263ffffffff61442a16565b94506147618161227584670de0b6b3a764000063ffffffff6143d116565b9350505096509650969350505050565b6000803373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806147cd57503373ffffffffffffffffffffffffffffffffffffffff8516145b61481e576040805162461bcd60e51b815260206004820152601860248201527f4e6f742066726f6d20726f75746572206f72206f776e65720000000000000000604482015290519081900360640190fd5b821515600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120805490915b818110156148fd57600083828154811061486b57fe5b9060005260206000200154905060006003600089151515158152602001908152602001600020828154811061489c57fe5b906000526020600020906006020190506148c3816001015488613a3690919063ffffffff16565b96506148dc816002015487613a3690919063ffffffff16565b95506148f389898484600101548560020154614e18565b5050600101614855565b506000808661490d578585614910565b84865b60095491935091506149399073ffffffffffffffffffffffffffffffffffffffff163384614970565b600a5461495d9073ffffffffffffffffffffffffffffffffffffffff163383614970565b614965614b5c565b505050509250929050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781529251815160009460609489169392918291908083835b60208310614a7657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101614a39565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614ad8576040519150601f19603f3d011682016040523d82523d6000602084013e614add565b606091505b5091509150818015614b0b575080511580614b0b5750808060200190516020811015614b0857600080fd5b50515b611585576040805162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015290519081900360640190fd5b614b64610e49565b600e55600d55600c55565b3b151590565b600080606080614b8560a4614237565b915091506000614b936157a5565b600954600a54604080517f069d188f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529183166024830152517f00000000000000000000000000000000000000000000000000000000000000009092169163069d188f91604480820192606092909190829003018186803b158015614c3157600080fd5b505afa158015614c45573d6000803e3d6000fd5b505050506040513d6060811015614c5b57600080fd5b508051602080830151604090930151908401529082529150600080805b8651811015614d4a57614ca7868281518110614c9057fe5b602002602001015184613a3690919063ffffffff16565b9250614cb16157c3565b6000614ccf670de0b6b3a76400006122758f8b878151811061225f57fe5b9050614cf28e8d8b8681518110614ce257fe5b6020026020010151848b8b615304565b60408501526020840152808352614d0a908c90613a36565b9a50614d248260016020020151859063ffffffff613a3616565b9350614d3e82600260200201518b9063ffffffff613a3616565b99505050600101614c78565b5081670de0b6b3a764000014614da7576040805162461bcd60e51b815260206004820152600d60248201527f496e76616c696420696e70757400000000000000000000000000000000000000604482015290519081900360640190fd5b604080518b8152602081018a90528082018390526060810189905290518c15159173ffffffffffffffffffffffffffffffffffffffff8c16917fd55848f048ca7d5fd9869d414bb60a426c2b0125c8adb982fee123da3f841ed89181900360800190a3505050505050935093915050565b60008311614e6d576040805162461bcd60e51b815260206004820152601c60248201527f50726f7669646572206c6971756964697479206e6f7420666f756e6400000000604482015290519081900360640190fd5b8315156000908152600360205260408120805485908110614e8a57fe5b60009182526020909120600690910201805490915073ffffffffffffffffffffffffffffffffffffffff878116911614614f0b576040805162461bcd60e51b815260206004820152601160248201527f4e6f742066726f6d2070726f7669646572000000000000000000000000000000604482015290519081900360640190fd5b805474010000000000000000000000000000000000000000900460ff168015614f345750600083115b15614f915742816005015410614f91576040805162461bcd60e51b815260206004820152600b60248201527f4e6f742065787069726564000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001810154614fa6908463ffffffff613a9716565b60018201556002810154614fc0908363ffffffff613a9716565b6002820181905560018201546040805186815260208101869052808201929092526060820192909252905185918715159173ffffffffffffffffffffffffffffffffffffffff8a16917f4036cb0ba867fe695e855b2d73d97fe96c1ff8c45e6490c12181cb5650be546e919081900360800190a4505050505050565b600081848411156150cb5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615090578181015183820152602001615078565b50505050905090810190601f1680156150bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017815292518251600094606094938a169392918291908083835b602083106151b157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615174565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114615213576040519150601f19603f3d011682016040523d82523d6000602084013e615218565b606091505b5091509150818015615246575080511580615246575080806020019051602081101561524357600080fd5b50515b615297576040805162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c4544000000000000000000000000604482015290519081900360640190fd5b505050505050565b600081836152ee5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315615090578181015183820152602001615078565b5060008385816152fa57fe5b0495945050505050565b8515156000908152600260205260408120548190819087111561536e576040805162461bcd60e51b815260206004820152600f60248201527f4f66666572206e6f742065786973740000000000000000000000000000000000604482015290519081900360640190fd5b881515600090815260036020526040812080548990811061538b57fe5b6000918252602090912060069091020180549091507501000000000000000000000000000000000000000000900460ff1680615401575089151560009081526006602090815260408083208b8452825280832073ffffffffffffffffffffffffffffffffffffffff8d16845290915290205460ff165b615452576040805162461bcd60e51b815260206004820152601560248201527f4e6f74206120617070726f766564207472616465720000000000000000000000604482015290519081900360640190fd5b80600401544210156154ab576040805162461bcd60e51b815260206004820152601360248201527f4f66666572206e6f7420626567696e2079657400000000000000000000000000604482015290519081900360640190fd5b8060050154421115615504576040805162461bcd60e51b815260206004820152600d60248201527f4f66666572206578706972656400000000000000000000000000000000000000604482015290519081900360640190fd5b60008061551b8c8a8d8d8c8c87602002015161446c565b60208a015192985096509250615532575087615566565b615551620186a06122758960016020020151889063ffffffff6143d116565b9350615563898563ffffffff613a9716565b90505b82547501000000000000000000000000000000000000000000900460ff16615693578b151560009081526007602090815260408083208d8452825280832073ffffffffffffffffffffffffffffffffffffffff8f16845290915290205480871115615618576040805162461bcd60e51b815260206004820152601a60248201527f416d6f756e7420657863656564656420616c6c6f636174696f6e000000000000604482015290519081900360640190fd5b615628818863ffffffff613a9716565b600760008f15151515815260200190815260200160002060008d815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b82600101548611156156ec576040805162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206578636565647320617661696c61626c652066756e64000000604482015290519081900360640190fd5b6001830154615701908763ffffffff613a9716565b6001840155600283015461571b908263ffffffff613a3616565b600284018190558354600185015460408051868152602081018b90528082018690526060810192909252608082019390935291518c928f15159273ffffffffffffffffffffffffffffffffffffffff16917f2f27f755766c13db5798f9a3fa7501574d60c8d73dd30849515c312b0bf9cc7e9181900360a00190a450505096509650969350505050565b60405180604001604052806002906020820280368337509192915050565b6040518060600160405280600390602082028036833750919291505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212205d9c193156e6d450b965ae9ccfedfa9d5e2b8b4a00cbe32104c92bef1deef39964736f6c634300060b0033a2646970667358221220f2102e7e936b09318aa4f5e6a95d507da226d7179c12260a4b283cb00a66250864736f6c634300060b0033"
};

// src/contracts/restricted/OSWAP_RestrictedPairCreator.ts
var OSWAP_RestrictedPairCreator = class extends import_eth_wallet39.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RestrictedPairCreator_json_default.abi, OSWAP_RestrictedPairCreator_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this._deploy();
  }
  async createPair_send(salt) {
    let result = await this.send("createPair", [import_eth_wallet39.Utils.stringToBytes32(salt)]);
    return result;
  }
  async createPair_call(salt) {
    let result = await this.call("createPair", [import_eth_wallet39.Utils.stringToBytes32(salt)]);
    return result;
  }
  assign() {
    this.createPair = Object.assign(this.createPair_send, { call: this.createPair_call });
  }
};

// src/deploy.ts
var import_eth_wallet41 = __toModule(require("@ijstech/eth-wallet"));

// src/OpenSwap.ts
var import_eth_wallet40 = __toModule(require("@ijstech/eth-wallet"));
var OpenSwap2 = class {
  constructor(wallet, address) {
    this.address = address;
    this._oswap = new OpenSwap(wallet, address);
  }
  async deploy(params) {
    params.initSupply = import_eth_wallet40.Utils.toDecimals(params.initSupply);
    params.totalSupply = import_eth_wallet40.Utils.toDecimals(params.totalSupply);
    this.address = await this._oswap.deploy(params);
    return this.address;
  }
  async allowance(params) {
    return import_eth_wallet40.Utils.fromDecimals(await this._oswap.allowance(params));
  }
  async approve(params) {
    params.amount = import_eth_wallet40.Utils.toDecimals(params.amount);
    let receipt = await this._oswap.approve(params);
    let event = this._oswap.parseApprovalEvent(receipt)[0];
    event.value = import_eth_wallet40.Utils.fromDecimals(event.value);
    return event;
  }
  async balanceOf(account) {
    return import_eth_wallet40.Utils.fromDecimals(await this._oswap.balanceOf(account));
  }
  get cap() {
    return (async () => {
      return import_eth_wallet40.Utils.fromDecimals(await this._oswap.cap());
    })();
  }
  get decimals() {
    return (async () => {
      return (await this._oswap.decimals()).toNumber();
    })();
  }
  async decreaseAllowance(params) {
    params.subtractedValue = import_eth_wallet40.Utils.toDecimals(params.subtractedValue);
    let receipt = await this._oswap.decreaseAllowance(params);
    let event = this._oswap.parseApprovalEvent(receipt)[0];
    event.value = import_eth_wallet40.Utils.fromDecimals(event.value);
    return event;
  }
  async increaseAllowance(params) {
    params.addedValue = import_eth_wallet40.Utils.toDecimals(params.addedValue);
    let receipt = await this._oswap.increaseAllowance(params);
    let event = this._oswap.parseApprovalEvent(receipt)[0];
    event.value = import_eth_wallet40.Utils.fromDecimals(event.value);
    return event;
  }
  async mint(params) {
    let receipt = await this._oswap.mint({ account: params.address, amount: import_eth_wallet40.Utils.toDecimals(params.amount) });
    let event = this._oswap.parseTransferEvent(receipt)[0];
    event.value = import_eth_wallet40.Utils.fromDecimals(event.value);
    return event;
  }
  get minter() {
    return this._oswap.minter();
  }
  get name() {
    return this._oswap.name();
  }
  get symbol() {
    return this._oswap.symbol();
  }
  get totalSupply() {
    return (async () => {
      return import_eth_wallet40.Utils.fromDecimals(await this._oswap.totalSupply());
    })();
  }
  async transfer(params) {
    let receipt = await this._oswap.transfer({ recipient: params.address, amount: import_eth_wallet40.Utils.toDecimals(params.amount) });
    let event = this._oswap.parseTransferEvent(receipt)[0];
    event.value = import_eth_wallet40.Utils.fromDecimals(event.value);
    return event;
  }
  async transferFrom(params) {
    params.amount = import_eth_wallet40.Utils.toDecimals(params.amount);
    let receipt = await this._oswap.transferFrom(params);
    let transfer = this._oswap.parseTransferEvent(receipt)[0];
    transfer.value = import_eth_wallet40.Utils.fromDecimals(transfer.value);
    let approval = this._oswap.parseApprovalEvent(receipt)[0];
    approval.value = import_eth_wallet40.Utils.fromDecimals(approval.value);
    return { transfer, approval };
  }
};

// src/deploy.ts
var DefaultGovOptions = {
  minStakePeriod: 1,
  tradeFee: 0.2,
  protocolFee: 0,
  protocolFeeTo: "",
  profiles: {
    name: ["poll", "vote", "addOldOracleToNewPair"],
    minExeDelay: [1, 1, 1],
    minVoteDuration: [0, 0, 0],
    maxVoteDuration: [1209600, 1209600, 1209600],
    minGovTokenToCreateVote: [import_eth_wallet41.Utils.toDecimals(1e5), import_eth_wallet41.Utils.toDecimals(1e5), import_eth_wallet41.Utils.toDecimals(1e5)],
    minQuorum: [import_eth_wallet41.Utils.toDecimals(0), import_eth_wallet41.Utils.toDecimals(1e7), import_eth_wallet41.Utils.toDecimals(100)]
  }
};
var DefaultGovTokenOptions = {
  initSupply: 0,
  initSupplyTo: "",
  minter: "",
  totalSupply: 1e9
};
function toDeploymentContracts(wallet, result) {
  return {
    openSwap: new OpenSwap2(wallet, result.oswap),
    governance: new OAXDEX_Governance(wallet, result.governance),
    administrator: new OAXDEX_Administrator(wallet, result.administrator),
    registry: new OAXDEX_VotingRegistry(wallet, result.votingRegistry),
    pairCreator: new OSWAP_PairCreator(wallet, result.pairCreator),
    factory: new OSWAP_Factory(wallet, result.factory),
    oraclePairCreator: new OSWAP_OraclePairCreator(wallet, result.oraclePairCreator),
    router: new OSWAP_Router(wallet, result.router),
    oracleFactory: new OSWAP_OracleFactory(wallet, result.oracleFactory),
    oracleRouter: new OSWAP_OracleRouter(wallet, result.oracleRouter),
    oracleLiquidityProvider: new OSWAP_OracleLiquidityProvider(wallet, result.oracleLiquidityProvider),
    hybridRouterRegistry: new OSWAP_HybridRouterRegistry(wallet, result.hybridRouterRegistry),
    hybridRouter: new OSWAP_HybridRouter2(wallet, result.hybridRouter),
    executor: new OAXDEX_VotingExecutor(wallet, result.votingExecutor),
    executor1: new OSWAP_VotingExecutor1(wallet, result.votingExecutor1),
    executor2: new OSWAP_VotingExecutor2(wallet, result.votingExecutor2)
  };
}
async function deployCoreContracts(wallet, options) {
  let result = {};
  if (!options.tokens.oswap) {
    let oswap = new OpenSwap2(wallet);
    result.oswap = await oswap.deploy(options.govTokenOptions);
  } else
    result.oswap = options.tokens.oswap;
  if (!options.tokens.votingToken) {
    result.votingToken = result.oswap;
  } else {
    result.votingToken = options.tokens.votingToken;
  }
  if (options.tokens.weth)
    result.weth = options.tokens.weth;
  let governance = new OAXDEX_Governance(wallet);
  result.governance = await governance.deploy({
    names: options.govOptions.profiles.name,
    maxVoteDuration: options.govOptions.profiles.maxVoteDuration,
    minExeDelay: options.govOptions.profiles.minExeDelay,
    minOaxTokenToCreateVote: options.govOptions.profiles.minGovTokenToCreateVote,
    minQuorum: options.govOptions.profiles.minQuorum,
    minStakePeriod: options.govOptions.minStakePeriod,
    minVoteDuration: options.govOptions.profiles.minVoteDuration,
    oaxToken: result.oswap,
    votingToken: result.votingToken
  });
  let administrator = new OAXDEX_Administrator(wallet);
  result.administrator = await administrator.deploy(governance.address);
  await governance.initAdmin(result.administrator);
  let votingRegistry = new OAXDEX_VotingRegistry(wallet);
  result.votingRegistry = await votingRegistry.deploy(result.governance);
  await governance.setVotingRegister(result.votingRegistry);
  let pairCreator = new OSWAP_PairCreator(wallet);
  result.pairCreator = await pairCreator.deploy();
  let factory = new OSWAP_Factory(wallet);
  result.factory = await factory.deploy({
    governance: options.amm.governance || result.governance,
    pairCreator: result.pairCreator,
    protocolFee: 0,
    protocolFeeTo: options.amm.protocolFeeTo || import_eth_wallet41.Utils.nullAddress,
    tradeFee: 0
  });
  let router = new OSWAP_Router(wallet);
  result.router = await router.deploy({
    WETH: result.weth,
    factory: result.factory
  });
  let votingExecutor = new OAXDEX_VotingExecutor(wallet);
  result.votingExecutor = await votingExecutor.deploy({
    admin: result.administrator,
    governance: result.governance
  });
  await governance.initVotingExecutor([result.votingExecutor]);
  let votingExecutor1 = new OSWAP_VotingExecutor1(wallet);
  result.votingExecutor1 = await votingExecutor1.deploy(factory.address);
  return result;
}
async function deployOracleContracts(wallet, options, coreContractsResult) {
  let result = {};
  let oraclePairCreator = new OSWAP_OraclePairCreator(wallet);
  result.oraclePairCreator = await oraclePairCreator.deploy();
  let oracleFactory = new OSWAP_OracleFactory(wallet);
  result.oracleFactory = await oracleFactory.deploy({
    feePerDelegator: options.feePerDelegator || 0,
    governance: options.governance || coreContractsResult.governance,
    pairCreator: options.pairCreator || result.oraclePairCreator,
    protocolFee: options.protocolFee || 0,
    protocolFeeTo: options.protocolFeeTo || import_eth_wallet41.Utils.nullAddress,
    tradeFee: options.tradeFee || 0
  });
  let oracleRouter = new OSWAP_OracleRouter(wallet);
  result.oracleRouter = await oracleRouter.deploy({
    WETH: coreContractsResult.weth,
    ammFactory: coreContractsResult.factory,
    oracleFactory: result.oracleFactory
  });
  let oracleLiquidityProvider = new OSWAP_OracleLiquidityProvider(wallet);
  result.oracleLiquidityProvider = await oracleLiquidityProvider.deploy({
    WETH: coreContractsResult.weth,
    factory: result.oracleFactory
  });
  await oracleFactory.setOracleLiquidityProvider({
    oracleLiquidityProvider: result.oracleLiquidityProvider,
    oracleRouter: result.oracleRouter
  });
  let votingExecutor2 = new OSWAP_VotingExecutor2(wallet);
  result.votingExecutor2 = await votingExecutor2.deploy(oracleFactory.address);
  return result;
}
async function deployRangeContracts(wallet, options, weth, hybridRegistry) {
  let result = {};
  let rangePairCreator = new OSWAP_RangePairCreator(wallet);
  result.rangePairCreator = await rangePairCreator.deploy();
  let rangeFactory = new OSWAP_RangeFactory(wallet);
  result.rangeFactory = await rangeFactory.deploy({
    governance: options.governance,
    oracleFactory: options.oracleFactory,
    pairCreator: options.pairCreator || result.rangePairCreator,
    tradeFee: options.tradeFee || 0,
    stakeAmount: options.stakeAmount || [],
    liquidityProviderShare: options.liquidityProviderShare || [],
    protocolFeeTo: options.protocolFeeTo || import_eth_wallet41.Utils.nullAddress
  });
  let rangeLiquidityProvider = new OSWAP_RangeLiquidityProvider(wallet);
  result.rangeLiquidityProvider = await rangeLiquidityProvider.deploy({
    WETH: weth,
    factory: result.rangeFactory
  });
  await rangeFactory.setRangeLiquidityProvider(result.rangeLiquidityProvider);
  let votingExecutor3 = new OSWAP_VotingExecutor3(wallet);
  result.votingExecutor3 = await votingExecutor3.deploy({
    governance: options.governance,
    factory: rangeFactory.address,
    hybridRegistry
  });
  return result;
}
async function deployRestrictedContracts(wallet, options, weth) {
  let result = {};
  if (!options.configStore) {
    let configStore = new OSWAP_ConfigStore(wallet);
    result.configStore = await configStore.deploy(options.governance);
    options.configStore = result.configStore;
  }
  let restrictedPairCreator = new OSWAP_RestrictedPairCreator(wallet);
  result.restrictedPairCreator = await restrictedPairCreator.deploy();
  let restrictedFactory = new OSWAP_RestrictedFactory(wallet);
  result.restrictedFactory = await restrictedFactory.deploy({
    governance: options.governance,
    whitelistFactory: options.whitelistFactory,
    pairCreator: options.pairCreator || result.restrictedPairCreator,
    tradeFee: options.tradeFee || 0,
    configStore: options.configStore,
    protocolFee: options.protocolFee || 0,
    protocolFeeTo: options.protocolFeeTo || import_eth_wallet41.Utils.nullAddress
  });
  let restrictedLiquidityProvider = new OSWAP_RestrictedLiquidityProvider(wallet);
  result.restrictedLiquidityProvider = await restrictedLiquidityProvider.deploy({
    WETH: weth,
    factory: result.restrictedFactory
  });
  await restrictedFactory.init(result.restrictedLiquidityProvider);
  let votingExecutor4 = new OSWAP_VotingExecutor4(wallet);
  result.votingExecutor4 = await votingExecutor4.deploy({
    governance: options.governance,
    factory: restrictedFactory.address,
    configStore: options.configStore
  });
  return result;
}
async function deployRestrictedPairOracle(wallet) {
  let restrictedPairOracle = new OSWAP_RestrictedPairOracle(wallet);
  let result = await restrictedPairOracle.deploy();
  return result;
}
async function initHybridRouterRegistry(wallet, options) {
  let hybridRouterRegistry = new OSWAP_HybridRouterRegistry(wallet, options.registryAddress);
  let { name, factory, fee, feeBase, typeCode } = options;
  await hybridRouterRegistry.init({
    name,
    factory,
    fee,
    feeBase,
    typeCode
  });
}
async function deployHybridRouter(wallet, options) {
  let result = {};
  if (!options.registryAddress) {
    let hybridRouterRegistry = new OSWAP_HybridRouterRegistry(wallet);
    result.hybridRouterRegistry = await hybridRouterRegistry.deploy(options.governance);
  } else {
    result.hybridRouterRegistry = options.registryAddress;
  }
  let hybridRouter = new OSWAP_HybridRouter2(wallet);
  result.hybridRouter = await hybridRouter.deploy({
    WETH: options.weth,
    registry: result.hybridRouterRegistry
  });
  return result;
}
function deploy(wallet, options) {
  options = options || {};
  if (!options.govOptions)
    options.govOptions = DefaultGovOptions;
  if (!options.govTokenOptions) {
    options.govTokenOptions = DefaultGovTokenOptions;
    options.govTokenOptions.initSupplyTo = wallet.defaultAccount;
    options.govTokenOptions.minter = wallet.defaultAccount;
  }
  if (!options.tokens)
    options.tokens = {};
  if (!options.amm)
    options.amm = {};
  if (!options.oracle)
    options.oracle = {};
  return new Promise(async function(resolve, reject) {
    try {
      let coreContractsResult = await deployCoreContracts(wallet, options);
      let oracleContractsResult = await deployOracleContracts(wallet, options.oracle, coreContractsResult);
      let result = __spreadValues(__spreadValues({}, coreContractsResult), oracleContractsResult);
      if (options.hybridRouter) {
        options.hybridRouter.governance = coreContractsResult.governance;
        options.hybridRouter.weth = coreContractsResult.weth;
        let hybridRouterResult = await deployHybridRouter(wallet, options.hybridRouter);
        result = __spreadValues(__spreadValues({}, result), hybridRouterResult);
        if (options.range) {
          options.range.governance = coreContractsResult.governance;
          options.range.oracleFactory = oracleContractsResult.oracleFactory;
          let rangeContractsResult = await deployRangeContracts(wallet, options.range, coreContractsResult.weth, hybridRouterResult.hybridRouterRegistry);
          result = __spreadValues(__spreadValues({}, result), rangeContractsResult);
        }
        if (options.restricted) {
          options.restricted.governance = coreContractsResult.governance;
          options.restricted.whitelistFactory = oracleContractsResult.oracleFactory;
          let restrictedContractsResult = await deployRestrictedContracts(wallet, options.restricted, coreContractsResult.weth);
          result = __spreadValues(__spreadValues({}, result), restrictedContractsResult);
        }
      }
      console.dir(result);
      resolve(result);
    } catch (err) {
      reject(err);
    }
  });
}

});define('@openswap/troll-nft-sdk', (require, exports)=>{
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  Contracts: () => contracts_exports
});

// src/contracts/index.ts
var contracts_exports = {};
__export(contracts_exports, {
  Authorization: () => Authorization,
  ERC721: () => ERC721,
  TrollNFT: () => TrollNFT,
  TrollNFTV2: () => TrollNFTV2,
  TrollNFT_VRF: () => TrollNFT_VRF,
  TrollNFT_VRFV2: () => TrollNFT_VRFV2
});

// src/contracts/@openzeppelin/contracts/token/ERC721/ERC721.ts
var import_eth_wallet = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/@openzeppelin/contracts/token/ERC721/ERC721.json.ts
var ERC721_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60806040523480156200001157600080fd5b5060405162001baf38038062001baf8339810160408190526200003491620001c1565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611924806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d0578063b88d4fde146101e3578063c87b56dd146101f6578063e985e9c51461020957600080fd5b80636352211e1461019457806370a08231146101a757806395d89b41146101c857600080fd5b8063095ea7b3116100bd578063095ea7b31461015957806323b872dd1461016e57806342842e0e1461018157600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f23660046115fb565b610252565b60405190151581526020015b60405180910390f35b610114610337565b604051610103919061170d565b61013461012f366004611633565b6103c9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016c6101673660046115d2565b6104a8565b005b61016c61017c36600461146a565b610635565b61016c61018f36600461146a565b6106d6565b6101346101a2366004611633565b6106f1565b6101ba6101b536600461141e565b6107a3565b604051908152602001610103565b610114610871565b61016c6101de366004611598565b610880565b61016c6101f13660046114a5565b610997565b610114610204366004611633565b610a3f565b6100f7610217366004611438565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806102e557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061033157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546103469061178f565b80601f01602080910402602001604051908101604052809291908181526020018280546103729061178f565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006104b3826106f1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610476565b3373ffffffffffffffffffffffffffffffffffffffff8216148061059a575061059a8133610217565b610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610476565b6106308383610b5c565b505050565b61063f3382610bfc565b6106cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610476565b610630838383610d6c565b61063083838360405180602001604052806000815250610997565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610476565b600073ffffffffffffffffffffffffffffffffffffffff8216610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610476565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6060600180546103469061178f565b73ffffffffffffffffffffffffffffffffffffffff8216331415610900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610476565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6109a13383610bfc565b610a2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610476565b610a3984848484610fd3565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610476565b6000610b0a60408051602081019091526000815290565b90506000815111610b2a5760405180602001604052806000815250610b55565b80610b3484611076565b604051602001610b45929190611695565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190610bb6826106f1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610476565b6000610cb8836106f1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d2757508373ffffffffffffffffffffffffffffffffffffffff16610d0f846103c9565b73ffffffffffffffffffffffffffffffffffffffff16145b80610d64575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610d8c826106f1565b73ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610476565b73ffffffffffffffffffffffffffffffffffffffff8216610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610476565b610edc600082610b5c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805460019290610f1290849061174c565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290610f4d908490611720565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610fde848484610d6c565b610fea848484846111f6565b610a39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610476565b6060816110b657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156110e057806110ca816117e3565b91506110d99050600a83611738565b91506110ba565b60008167ffffffffffffffff811115611122577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561114c576020820181803683370190505b5090505b8415610d645761116160018361174c565b915061116e600a8661181c565b611179906030611720565b60f81b8183815181106111b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506111ef600a86611738565b9450611150565b600073ffffffffffffffffffffffffffffffffffffffff84163b156113ea576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a029061126d9033908990889088906004016116c4565b602060405180830381600087803b15801561128757600080fd5b505af19250505080156112d5575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526112d291810190611617565b60015b61139f573d808015611303576040519150601f19603f3d011682016040523d82523d6000602084013e611308565b606091505b508051611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610476565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610d64565b506001949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461141957600080fd5b919050565b60006020828403121561142f578081fd5b610b55826113f5565b6000806040838503121561144a578081fd5b611453836113f5565b9150611461602084016113f5565b90509250929050565b60008060006060848603121561147e578081fd5b611487846113f5565b9250611495602085016113f5565b9150604084013590509250925092565b600080600080608085870312156114ba578081fd5b6114c3856113f5565b93506114d1602086016113f5565b925060408501359150606085013567ffffffffffffffff808211156114f4578283fd5b818701915087601f830112611507578283fd5b8135818111156115195761151961188e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561155f5761155f61188e565b816040528281528a6020848701011115611577578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156115aa578182fd5b6115b3836113f5565b9150602083013580151581146115c7578182fd5b809150509250929050565b600080604083850312156115e4578182fd5b6115ed836113f5565b946020939093013593505050565b60006020828403121561160c578081fd5b8135610b55816118bd565b600060208284031215611628578081fd5b8151610b55816118bd565b600060208284031215611644578081fd5b5035919050565b60008151808452611663816020860160208601611763565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600083516116a7818460208801611763565b8351908301906116bb818360208801611763565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152611703608083018461164b565b9695505050505050565b602081526000610b55602083018461164b565b6000821982111561173357611733611830565b500190565b6000826117475761174761185f565b500490565b60008282101561175e5761175e611830565b500390565b60005b8381101561177e578181015183820152602001611766565b83811115610a395750506000910152565b600181811c908216806117a357607f821691505b602082108114156117dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561181557611815611830565b5060010190565b60008261182b5761182b61185f565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000811681146118eb57600080fd5b5056fea2646970667358221220922699f7c61e9b59c1ba3a3a99dc263bcead3505e4e1bbea0f6393ce5e03c2e064736f6c63430008040033"
};

// src/contracts/@openzeppelin/contracts/token/ERC721/ERC721.ts
var ERC721 = class extends import_eth_wallet.Contract {
  constructor(wallet, address) {
    super(wallet, address, ERC721_json_default.abi, ERC721_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol]);
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      approved: result.approved,
      tokenId: new import_eth_wallet.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseApprovalForAllEvent(receipt) {
    return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
  }
  decodeApprovalForAllEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      operator: result.operator,
      approved: result.approved,
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      tokenId: new import_eth_wallet.BigNumber(result.tokenId),
      _event: event
    };
  }
  assign() {
    let balanceOf_call = async (owner) => {
      let result = await this.call("balanceOf", [owner]);
      return new import_eth_wallet.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let getApproved_call = async (tokenId) => {
      let result = await this.call("getApproved", [import_eth_wallet.Utils.toString(tokenId)]);
      return result;
    };
    this.getApproved = getApproved_call;
    let isApprovedForAllParams = (params) => [params.owner, params.operator];
    let isApprovedForAll_call = async (params) => {
      let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
      return result;
    };
    this.isApprovedForAll = isApprovedForAll_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let ownerOf_call = async (tokenId) => {
      let result = await this.call("ownerOf", [import_eth_wallet.Utils.toString(tokenId)]);
      return result;
    };
    this.ownerOf = ownerOf_call;
    let supportsInterface_call = async (interfaceId) => {
      let result = await this.call("supportsInterface", [interfaceId]);
      return result;
    };
    this.supportsInterface = supportsInterface_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let tokenURI_call = async (tokenId) => {
      let result = await this.call("tokenURI", [import_eth_wallet.Utils.toString(tokenId)]);
      return result;
    };
    this.tokenURI = tokenURI_call;
    let approveParams = (params) => [params.to, import_eth_wallet.Utils.toString(params.tokenId)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let safeTransferFromParams = (params) => [params.from, params.to, import_eth_wallet.Utils.toString(params.tokenId)];
    let safeTransferFrom_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
      call: safeTransferFrom_call
    });
    let safeTransferFrom_1Params = (params) => [params.from, params.to, import_eth_wallet.Utils.toString(params.tokenId), import_eth_wallet.Utils.stringToBytes(params.data)];
    let safeTransferFrom_1_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_1_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
      call: safeTransferFrom_1_call
    });
    let setApprovalForAllParams = (params) => [params.operator, params.approved];
    let setApprovalForAll_send = async (params) => {
      let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
      return result;
    };
    let setApprovalForAll_call = async (params) => {
      let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
      return;
    };
    this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
      call: setApprovalForAll_call
    });
    let transferFromParams = (params) => [params.from, params.to, import_eth_wallet.Utils.toString(params.tokenId)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
  }
};

// src/contracts/Authorization.ts
var import_eth_wallet2 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/Authorization.json.ts
var Authorization_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556104e2806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c52a7f11161005b5780639c52a7f114610109578063a2f55ae51461011c578063d4ee1d901461012f578063f2fde38b1461014f57600080fd5b80633fd8cc4e1461008257806360536172146100ba5780638da5cb5b146100c4575b600080fd5b6100a5610090366004610471565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100c2610162565b005b6000546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b1565b6100c2610117366004610471565b610290565b6100c261012a366004610471565b610337565b6001546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b6100c261015d366004610471565b6103da565b60015473ffffffffffffffffffffffffffffffffffffffff16331461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e0000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461035b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf5910161032c565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103fe57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b9060200161032c565b600060208284031215610482578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a5578182fd5b939250505056fea2646970667358221220969fcce27c06d496b8d77895f68979df4ff3898826245c8afd2d61cb3763b7e064736f6c63430008040033"
};

// src/contracts/Authorization.ts
var Authorization = class extends import_eth_wallet2.Contract {
  constructor(wallet, address) {
    super(wallet, address, Authorization_json_default.abi, Authorization_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this.__deploy();
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  assign() {
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
  }
};

// src/contracts/TrollNFT.ts
var import_eth_wallet3 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/TrollNFT.json.ts
var TrollNFT_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/TrollNFT.ts
var TrollNFT = class extends import_eth_wallet3.Contract {
  constructor(wallet, address) {
    super(wallet, address, TrollNFT_json_default.abi, TrollNFT_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol, params.baseURI, import_eth_wallet3.Utils.toString(params.cap), params.stakeToken, params.requireApproval, import_eth_wallet3.Utils.toString(params.minimumStake), import_eth_wallet3.Utils.toString(params.protocolFee), params.protocolFeeTo]);
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      approved: result.approved,
      tokenId: new import_eth_wallet3.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseApprovalForAllEvent(receipt) {
    return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
  }
  decodeApprovalForAllEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      operator: result.operator,
      approved: result.approved,
      _event: event
    };
  }
  parseApprovedStakerEvent(receipt) {
    return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
  }
  decodeApprovedStakerEvent(event) {
    let result = event.data;
    return {
      staker: result.staker,
      allow: result.allow,
      _event: event
    };
  }
  parseAttributeEvent(receipt) {
    return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
  }
  decodeAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet3.BigNumber(result.tokenId),
      attribute: new import_eth_wallet3.BigNumber(result.attribute),
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseBaseURIEvent(receipt) {
    return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
  }
  decodeBaseURIEvent(event) {
    let result = event.data;
    return {
      baseURI: result.baseURI,
      _event: event
    };
  }
  parseCapEvent(receipt) {
    return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
  }
  decodeCapEvent(event) {
    let result = event.data;
    return {
      cap: new import_eth_wallet3.BigNumber(result.cap),
      _event: event
    };
  }
  parseCustomAttributeEvent(receipt) {
    return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
  }
  decodeCustomAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet3.BigNumber(result.tokenId),
      attribute: new import_eth_wallet3.BigNumber(result.attribute),
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseMinimumStakeEvent(receipt) {
    return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
  }
  decodeMinimumStakeEvent(event) {
    let result = event.data;
    return {
      minimumStake: new import_eth_wallet3.BigNumber(result.minimumStake),
      _event: event
    };
  }
  parseProtocolFeeEvent(receipt) {
    return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
  }
  decodeProtocolFeeEvent(event) {
    let result = event.data;
    return {
      protocolFee: new import_eth_wallet3.BigNumber(result.protocolFee),
      protocolFeeTo: result.protocolFeeTo,
      _event: event
    };
  }
  parseStakeEvent(receipt) {
    return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
  }
  decodeStakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet3.BigNumber(result.tokenId),
      amount: new import_eth_wallet3.BigNumber(result.amount),
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      tokenId: new import_eth_wallet3.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnstakeEvent(receipt) {
    return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
  }
  decodeUnstakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet3.BigNumber(result.tokenId),
      amount: new import_eth_wallet3.BigNumber(result.amount),
      _event: event
    };
  }
  assign() {
    let _attributes_call = async (param1) => {
      let result = await this.call("_attributes", [import_eth_wallet3.Utils.toString(param1)]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this._attributes = _attributes_call;
    let _customAttributes_call = async (param1) => {
      let result = await this.call("_customAttributes", [import_eth_wallet3.Utils.toString(param1)]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this._customAttributes = _customAttributes_call;
    let approvedStaker_call = async (param1) => {
      let result = await this.call("approvedStaker", [param1]);
      return result;
    };
    this.approvedStaker = approvedStaker_call;
    let balanceOf_call = async (owner) => {
      let result = await this.call("balanceOf", [owner]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let baseURI_call = async () => {
      let result = await this.call("baseURI");
      return result;
    };
    this.baseURI = baseURI_call;
    let cap_call = async () => {
      let result = await this.call("cap");
      return new import_eth_wallet3.BigNumber(result);
    };
    this.cap = cap_call;
    let counter_call = async () => {
      let result = await this.call("counter");
      return new import_eth_wallet3.BigNumber(result);
    };
    this.counter = counter_call;
    let creationTime_call = async (param1) => {
      let result = await this.call("creationTime", [import_eth_wallet3.Utils.toString(param1)]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this.creationTime = creationTime_call;
    let getApproved_call = async (tokenId) => {
      let result = await this.call("getApproved", [import_eth_wallet3.Utils.toString(tokenId)]);
      return result;
    };
    this.getApproved = getApproved_call;
    let getAttributes1Params = (params) => [import_eth_wallet3.Utils.toString(params.tokenId), import_eth_wallet3.Utils.toString(params.base), import_eth_wallet3.Utils.toString(params.offset), import_eth_wallet3.Utils.toString(params.digits)];
    let getAttributes1_call = async (params) => {
      let result = await this.call("getAttributes1", getAttributes1Params(params));
      return new import_eth_wallet3.BigNumber(result);
    };
    this.getAttributes1 = getAttributes1_call;
    let getAttributes2Params = (params) => [import_eth_wallet3.Utils.toString(params.tokenId), import_eth_wallet3.Utils.toString(params.base), import_eth_wallet3.Utils.toString(params.digits)];
    let getAttributes2_call = async (params) => {
      let result = await this.call("getAttributes2", getAttributes2Params(params));
      return result.map((e) => new import_eth_wallet3.BigNumber(e));
    };
    this.getAttributes2 = getAttributes2_call;
    let isApprovedForAllParams = (params) => [params.owner, params.operator];
    let isApprovedForAll_call = async (params) => {
      let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
      return result;
    };
    this.isApprovedForAll = isApprovedForAll_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let minimumStake_call = async () => {
      let result = await this.call("minimumStake");
      return new import_eth_wallet3.BigNumber(result);
    };
    this.minimumStake = minimumStake_call;
    let minted_call = async (param1) => {
      let result = await this.call("minted", [param1]);
      return result;
    };
    this.minted = minted_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let ownerOf_call = async (tokenId) => {
      let result = await this.call("ownerOf", [import_eth_wallet3.Utils.toString(tokenId)]);
      return result;
    };
    this.ownerOf = ownerOf_call;
    let protocolFee_call = async () => {
      let result = await this.call("protocolFee");
      return new import_eth_wallet3.BigNumber(result);
    };
    this.protocolFee = protocolFee_call;
    let protocolFeeBalance_call = async () => {
      let result = await this.call("protocolFeeBalance");
      return new import_eth_wallet3.BigNumber(result);
    };
    this.protocolFeeBalance = protocolFeeBalance_call;
    let protocolFeeTo_call = async () => {
      let result = await this.call("protocolFeeTo");
      return result;
    };
    this.protocolFeeTo = protocolFeeTo_call;
    let requireApproval_call = async () => {
      let result = await this.call("requireApproval");
      return result;
    };
    this.requireApproval = requireApproval_call;
    let stakeToken_call = async () => {
      let result = await this.call("stakeToken");
      return result;
    };
    this.stakeToken = stakeToken_call;
    let stakingBalance_call = async (param1) => {
      let result = await this.call("stakingBalance", [import_eth_wallet3.Utils.toString(param1)]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this.stakingBalance = stakingBalance_call;
    let supportsInterface_call = async (interfaceId) => {
      let result = await this.call("supportsInterface", [interfaceId]);
      return result;
    };
    this.supportsInterface = supportsInterface_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let tokenByIndex_call = async (index) => {
      let result = await this.call("tokenByIndex", [import_eth_wallet3.Utils.toString(index)]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this.tokenByIndex = tokenByIndex_call;
    let tokenOfOwnerByIndexParams = (params) => [params.owner, import_eth_wallet3.Utils.toString(params.index)];
    let tokenOfOwnerByIndex_call = async (params) => {
      let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
      return new import_eth_wallet3.BigNumber(result);
    };
    this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
    let tokenURI_call = async (tokenId) => {
      let result = await this.call("tokenURI", [import_eth_wallet3.Utils.toString(tokenId)]);
      return result;
    };
    this.tokenURI = tokenURI_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet3.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let approveParams = (params) => [params.to, import_eth_wallet3.Utils.toString(params.tokenId)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let batchApprove_send = async (stakers) => {
      let result = await this.send("batchApprove", [stakers]);
      return result;
    };
    let batchApprove_call = async (stakers) => {
      let result = await this.call("batchApprove", [stakers]);
      return;
    };
    this.batchApprove = Object.assign(batchApprove_send, {
      call: batchApprove_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let safeTransferFromParams = (params) => [params.from, params.to, import_eth_wallet3.Utils.toString(params.tokenId)];
    let safeTransferFrom_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
      call: safeTransferFrom_call
    });
    let safeTransferFrom_1Params = (params) => [params.from, params.to, import_eth_wallet3.Utils.toString(params.tokenId), import_eth_wallet3.Utils.stringToBytes(params.data)];
    let safeTransferFrom_1_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_1_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
      call: safeTransferFrom_1_call
    });
    let setApprovalForAllParams = (params) => [params.operator, params.approved];
    let setApprovalForAll_send = async (params) => {
      let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
      return result;
    };
    let setApprovalForAll_call = async (params) => {
      let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
      return;
    };
    this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
      call: setApprovalForAll_call
    });
    let setApprovedStakerParams = (params) => [params.staker, params.allow];
    let setApprovedStaker_send = async (params) => {
      let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
      return result;
    };
    let setApprovedStaker_call = async (params) => {
      let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
      return;
    };
    this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
      call: setApprovedStaker_call
    });
    let setBaseURI_send = async (baseURI) => {
      let result = await this.send("setBaseURI", [baseURI]);
      return result;
    };
    let setBaseURI_call = async (baseURI) => {
      let result = await this.call("setBaseURI", [baseURI]);
      return;
    };
    this.setBaseURI = Object.assign(setBaseURI_send, {
      call: setBaseURI_call
    });
    let setCap_send = async (cap) => {
      let result = await this.send("setCap", [import_eth_wallet3.Utils.toString(cap)]);
      return result;
    };
    let setCap_call = async (cap) => {
      let result = await this.call("setCap", [import_eth_wallet3.Utils.toString(cap)]);
      return;
    };
    this.setCap = Object.assign(setCap_send, {
      call: setCap_call
    });
    let setCustomAttributeParams = (params) => [import_eth_wallet3.Utils.toString(params.tokenId), import_eth_wallet3.Utils.toString(params.attribute)];
    let setCustomAttribute_send = async (params) => {
      let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
      return result;
    };
    let setCustomAttribute_call = async (params) => {
      let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
      return;
    };
    this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
      call: setCustomAttribute_call
    });
    let setMinimumStake_send = async (minimumStake) => {
      let result = await this.send("setMinimumStake", [import_eth_wallet3.Utils.toString(minimumStake)]);
      return result;
    };
    let setMinimumStake_call = async (minimumStake) => {
      let result = await this.call("setMinimumStake", [import_eth_wallet3.Utils.toString(minimumStake)]);
      return;
    };
    this.setMinimumStake = Object.assign(setMinimumStake_send, {
      call: setMinimumStake_call
    });
    let setProtocolFeeParams = (params) => [import_eth_wallet3.Utils.toString(params.protocolFee), params.protocolFeeTo];
    let setProtocolFee_send = async (params) => {
      let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
      return result;
    };
    let setProtocolFee_call = async (params) => {
      let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
      return;
    };
    this.setProtocolFee = Object.assign(setProtocolFee_send, {
      call: setProtocolFee_call
    });
    let stake_send = async (amount) => {
      let result = await this.send("stake", [import_eth_wallet3.Utils.toString(amount)]);
      return result;
    };
    let stake_call = async (amount) => {
      let result = await this.call("stake", [import_eth_wallet3.Utils.toString(amount)]);
      return new import_eth_wallet3.BigNumber(result);
    };
    this.stake = Object.assign(stake_send, {
      call: stake_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferFromParams = (params) => [params.from, params.to, import_eth_wallet3.Utils.toString(params.tokenId)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let transferProtocolFee_send = async () => {
      let result = await this.send("transferProtocolFee");
      return result;
    };
    let transferProtocolFee_call = async () => {
      let result = await this.call("transferProtocolFee");
      return;
    };
    this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
      call: transferProtocolFee_call
    });
    let unstake_send = async (tokenId) => {
      let result = await this.send("unstake", [import_eth_wallet3.Utils.toString(tokenId)]);
      return result;
    };
    let unstake_call = async (tokenId) => {
      let result = await this.call("unstake", [import_eth_wallet3.Utils.toString(tokenId)]);
      return;
    };
    this.unstake = Object.assign(unstake_send, {
      call: unstake_call
    });
  }
};

// src/contracts/TrollNFTV2.ts
var import_eth_wallet4 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/TrollNFTV2.json.ts
var TrollNFTV2_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }, { "components": [{ "internalType": "contract IERC721[]", "name": "listValidNFTs", "type": "address[]" }, { "internalType": "uint256", "name": "maximumValidNFTs", "type": "uint256" }], "internalType": "struct TrollNFTV2.NFTInfo", "name": "_nftInfo", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountAdded", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmount", "type": "uint256" }], "name": "AddStakes", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }], "name": "AddValidNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "EquipNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesApproval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "toTokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "UnequipNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "_stakesTransferAllowances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakes", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC721[]", "name": "nfts", "type": "address[]" }], "name": "addValidNFTs", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "destoryDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "equipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "extraStakes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "isValidNFT", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "lastStakeDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "listValidNFTs", "outputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "maximumValidNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "nftsEquipped", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "trollOwnedNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "unequipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "validNFTsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/TrollNFTV2.ts
var TrollNFTV2 = class extends import_eth_wallet4.Contract {
  constructor(wallet, address) {
    super(wallet, address, TrollNFTV2_json_default.abi, TrollNFTV2_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol, params.baseURI, import_eth_wallet4.Utils.toString(params.cap), params.stakeToken, params.requireApproval, import_eth_wallet4.Utils.toString(params.minimumStake), import_eth_wallet4.Utils.toString(params.protocolFee), params.protocolFeeTo, [params.nftInfo.listValidNFTs, import_eth_wallet4.Utils.toString(params.nftInfo.maximumValidNFTs)]]);
  }
  parseAddStakesEvent(receipt) {
    return this.parseEvents(receipt, "AddStakes").map((e) => this.decodeAddStakesEvent(e));
  }
  decodeAddStakesEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      amountAdded: new import_eth_wallet4.BigNumber(result.amountAdded),
      newAmount: new import_eth_wallet4.BigNumber(result.newAmount),
      _event: event
    };
  }
  parseAddValidNFTEvent(receipt) {
    return this.parseEvents(receipt, "AddValidNFT").map((e) => this.decodeAddValidNFTEvent(e));
  }
  decodeAddValidNFTEvent(event) {
    let result = event.data;
    return {
      nft: result.nft,
      _event: event
    };
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      approved: result.approved,
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseApprovalForAllEvent(receipt) {
    return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
  }
  decodeApprovalForAllEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      operator: result.operator,
      approved: result.approved,
      _event: event
    };
  }
  parseApprovedStakerEvent(receipt) {
    return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
  }
  decodeApprovedStakerEvent(event) {
    let result = event.data;
    return {
      staker: result.staker,
      allow: result.allow,
      _event: event
    };
  }
  parseAttributeEvent(receipt) {
    return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
  }
  decodeAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      attribute: new import_eth_wallet4.BigNumber(result.attribute),
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseBaseURIEvent(receipt) {
    return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
  }
  decodeBaseURIEvent(event) {
    let result = event.data;
    return {
      baseURI: result.baseURI,
      _event: event
    };
  }
  parseCapEvent(receipt) {
    return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
  }
  decodeCapEvent(event) {
    let result = event.data;
    return {
      cap: new import_eth_wallet4.BigNumber(result.cap),
      _event: event
    };
  }
  parseCustomAttributeEvent(receipt) {
    return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
  }
  decodeCustomAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      attribute: new import_eth_wallet4.BigNumber(result.attribute),
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseEquipNFTEvent(receipt) {
    return this.parseEvents(receipt, "EquipNFT").map((e) => this.decodeEquipNFTEvent(e));
  }
  decodeEquipNFTEvent(event) {
    let result = event.data;
    return {
      trollId: new import_eth_wallet4.BigNumber(result.trollId),
      nft: result.nft,
      nftId: new import_eth_wallet4.BigNumber(result.nftId),
      _event: event
    };
  }
  parseMinimumStakeEvent(receipt) {
    return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
  }
  decodeMinimumStakeEvent(event) {
    let result = event.data;
    return {
      minimumStake: new import_eth_wallet4.BigNumber(result.minimumStake),
      _event: event
    };
  }
  parseProtocolFeeEvent(receipt) {
    return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
  }
  decodeProtocolFeeEvent(event) {
    let result = event.data;
    return {
      protocolFee: new import_eth_wallet4.BigNumber(result.protocolFee),
      protocolFeeTo: result.protocolFeeTo,
      _event: event
    };
  }
  parseStakeEvent(receipt) {
    return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
  }
  decodeStakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      amount: new import_eth_wallet4.BigNumber(result.amount),
      _event: event
    };
  }
  parseStakesApprovalEvent(receipt) {
    return this.parseEvents(receipt, "StakesApproval").map((e) => this.decodeStakesApprovalEvent(e));
  }
  decodeStakesApprovalEvent(event) {
    let result = event.data;
    return {
      fromTokenId: new import_eth_wallet4.BigNumber(result.fromTokenId),
      spender: result.spender,
      amount: new import_eth_wallet4.BigNumber(result.amount),
      _event: event
    };
  }
  parseStakesTransferEvent(receipt) {
    return this.parseEvents(receipt, "StakesTransfer").map((e) => this.decodeStakesTransferEvent(e));
  }
  decodeStakesTransferEvent(event) {
    let result = event.data;
    return {
      fromTokenId: new import_eth_wallet4.BigNumber(result.fromTokenId),
      toTokenId: new import_eth_wallet4.BigNumber(result.toTokenId),
      amount: new import_eth_wallet4.BigNumber(result.amount),
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnequipNFTEvent(receipt) {
    return this.parseEvents(receipt, "UnequipNFT").map((e) => this.decodeUnequipNFTEvent(e));
  }
  decodeUnequipNFTEvent(event) {
    let result = event.data;
    return {
      trollId: new import_eth_wallet4.BigNumber(result.trollId),
      nft: result.nft,
      nftId: new import_eth_wallet4.BigNumber(result.nftId),
      _event: event
    };
  }
  parseUnstakeEvent(receipt) {
    return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
  }
  decodeUnstakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet4.BigNumber(result.tokenId),
      amount: new import_eth_wallet4.BigNumber(result.amount),
      _event: event
    };
  }
  assign() {
    let _attributes_call = async (param1) => {
      let result = await this.call("_attributes", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this._attributes = _attributes_call;
    let _customAttributes_call = async (param1) => {
      let result = await this.call("_customAttributes", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this._customAttributes = _customAttributes_call;
    let _stakesTransferAllowancesParams = (params) => [import_eth_wallet4.Utils.toString(params.param1), params.param2];
    let _stakesTransferAllowances_call = async (params) => {
      let result = await this.call("_stakesTransferAllowances", _stakesTransferAllowancesParams(params));
      return new import_eth_wallet4.BigNumber(result);
    };
    this._stakesTransferAllowances = _stakesTransferAllowances_call;
    let approvedStaker_call = async (param1) => {
      let result = await this.call("approvedStaker", [param1]);
      return result;
    };
    this.approvedStaker = approvedStaker_call;
    let balanceOf_call = async (owner) => {
      let result = await this.call("balanceOf", [owner]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let baseURI_call = async () => {
      let result = await this.call("baseURI");
      return result;
    };
    this.baseURI = baseURI_call;
    let cap_call = async () => {
      let result = await this.call("cap");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.cap = cap_call;
    let counter_call = async () => {
      let result = await this.call("counter");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.counter = counter_call;
    let creationDate_call = async (param1) => {
      let result = await this.call("creationDate", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.creationDate = creationDate_call;
    let destoryDate_call = async (param1) => {
      let result = await this.call("destoryDate", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.destoryDate = destoryDate_call;
    let extraStakes_call = async (param1) => {
      let result = await this.call("extraStakes", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.extraStakes = extraStakes_call;
    let getApproved_call = async (tokenId) => {
      let result = await this.call("getApproved", [import_eth_wallet4.Utils.toString(tokenId)]);
      return result;
    };
    this.getApproved = getApproved_call;
    let getAttributes1Params = (params) => [import_eth_wallet4.Utils.toString(params.tokenId), import_eth_wallet4.Utils.toString(params.base), import_eth_wallet4.Utils.toString(params.offset), import_eth_wallet4.Utils.toString(params.digits)];
    let getAttributes1_call = async (params) => {
      let result = await this.call("getAttributes1", getAttributes1Params(params));
      return new import_eth_wallet4.BigNumber(result);
    };
    this.getAttributes1 = getAttributes1_call;
    let getAttributes2Params = (params) => [import_eth_wallet4.Utils.toString(params.tokenId), import_eth_wallet4.Utils.toString(params.base), import_eth_wallet4.Utils.toString(params.digits)];
    let getAttributes2_call = async (params) => {
      let result = await this.call("getAttributes2", getAttributes2Params(params));
      return result.map((e) => new import_eth_wallet4.BigNumber(e));
    };
    this.getAttributes2 = getAttributes2_call;
    let isApprovedForAllParams = (params) => [params.owner, params.operator];
    let isApprovedForAll_call = async (params) => {
      let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
      return result;
    };
    this.isApprovedForAll = isApprovedForAll_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let isValidNFT_call = async (param1) => {
      let result = await this.call("isValidNFT", [param1]);
      return result;
    };
    this.isValidNFT = isValidNFT_call;
    let lastStakeDate_call = async (param1) => {
      let result = await this.call("lastStakeDate", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.lastStakeDate = lastStakeDate_call;
    let listValidNFTs_call = async (param1) => {
      let result = await this.call("listValidNFTs", [import_eth_wallet4.Utils.toString(param1)]);
      return result;
    };
    this.listValidNFTs = listValidNFTs_call;
    let maximumValidNFTs_call = async () => {
      let result = await this.call("maximumValidNFTs");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.maximumValidNFTs = maximumValidNFTs_call;
    let minimumStake_call = async () => {
      let result = await this.call("minimumStake");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.minimumStake = minimumStake_call;
    let minted_call = async (param1) => {
      let result = await this.call("minted", [param1]);
      return result;
    };
    this.minted = minted_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let nftsEquippedParams = (params) => [params.param1, import_eth_wallet4.Utils.toString(params.param2)];
    let nftsEquipped_call = async (params) => {
      let result = await this.call("nftsEquipped", nftsEquippedParams(params));
      return new import_eth_wallet4.BigNumber(result);
    };
    this.nftsEquipped = nftsEquipped_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let ownerOf_call = async (tokenId) => {
      let result = await this.call("ownerOf", [import_eth_wallet4.Utils.toString(tokenId)]);
      return result;
    };
    this.ownerOf = ownerOf_call;
    let protocolFee_call = async () => {
      let result = await this.call("protocolFee");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.protocolFee = protocolFee_call;
    let protocolFeeBalance_call = async () => {
      let result = await this.call("protocolFeeBalance");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.protocolFeeBalance = protocolFeeBalance_call;
    let protocolFeeTo_call = async () => {
      let result = await this.call("protocolFeeTo");
      return result;
    };
    this.protocolFeeTo = protocolFeeTo_call;
    let requireApproval_call = async () => {
      let result = await this.call("requireApproval");
      return result;
    };
    this.requireApproval = requireApproval_call;
    let stakeToken_call = async () => {
      let result = await this.call("stakeToken");
      return result;
    };
    this.stakeToken = stakeToken_call;
    let stakingBalance_call = async (param1) => {
      let result = await this.call("stakingBalance", [import_eth_wallet4.Utils.toString(param1)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.stakingBalance = stakingBalance_call;
    let supportsInterface_call = async (interfaceId) => {
      let result = await this.call("supportsInterface", [interfaceId]);
      return result;
    };
    this.supportsInterface = supportsInterface_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let tokenByIndex_call = async (index) => {
      let result = await this.call("tokenByIndex", [import_eth_wallet4.Utils.toString(index)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.tokenByIndex = tokenByIndex_call;
    let tokenOfOwnerByIndexParams = (params) => [params.owner, import_eth_wallet4.Utils.toString(params.index)];
    let tokenOfOwnerByIndex_call = async (params) => {
      let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
      return new import_eth_wallet4.BigNumber(result);
    };
    this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
    let tokenURI_call = async (tokenId) => {
      let result = await this.call("tokenURI", [import_eth_wallet4.Utils.toString(tokenId)]);
      return result;
    };
    this.tokenURI = tokenURI_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let trollOwnedNFTsParams = (params) => [import_eth_wallet4.Utils.toString(params.param1), params.param2];
    let trollOwnedNFTs_call = async (params) => {
      let result = await this.call("trollOwnedNFTs", trollOwnedNFTsParams(params));
      return new import_eth_wallet4.BigNumber(result);
    };
    this.trollOwnedNFTs = trollOwnedNFTs_call;
    let validNFTsLength_call = async () => {
      let result = await this.call("validNFTsLength");
      return new import_eth_wallet4.BigNumber(result);
    };
    this.validNFTsLength = validNFTsLength_call;
    let addStakesParams = (params) => [import_eth_wallet4.Utils.toString(params.tokenId), import_eth_wallet4.Utils.toString(params.amount)];
    let addStakes_send = async (params) => {
      let result = await this.send("addStakes", addStakesParams(params));
      return result;
    };
    let addStakes_call = async (params) => {
      let result = await this.call("addStakes", addStakesParams(params));
      return;
    };
    this.addStakes = Object.assign(addStakes_send, {
      call: addStakes_call
    });
    let addValidNFTs_send = async (nfts) => {
      let result = await this.send("addValidNFTs", [nfts]);
      return result;
    };
    let addValidNFTs_call = async (nfts) => {
      let result = await this.call("addValidNFTs", [nfts]);
      return;
    };
    this.addValidNFTs = Object.assign(addValidNFTs_send, {
      call: addValidNFTs_call
    });
    let approveParams = (params) => [params.to, import_eth_wallet4.Utils.toString(params.tokenId)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let batchApprove_send = async (stakers) => {
      let result = await this.send("batchApprove", [stakers]);
      return result;
    };
    let batchApprove_call = async (stakers) => {
      let result = await this.call("batchApprove", [stakers]);
      return;
    };
    this.batchApprove = Object.assign(batchApprove_send, {
      call: batchApprove_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let equipNFTParams = (params) => [import_eth_wallet4.Utils.toString(params.trollId), params.nft, import_eth_wallet4.Utils.toString(params.nftId)];
    let equipNFT_send = async (params) => {
      let result = await this.send("equipNFT", equipNFTParams(params));
      return result;
    };
    let equipNFT_call = async (params) => {
      let result = await this.call("equipNFT", equipNFTParams(params));
      return;
    };
    this.equipNFT = Object.assign(equipNFT_send, {
      call: equipNFT_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let safeTransferFromParams = (params) => [params.from, params.to, import_eth_wallet4.Utils.toString(params.tokenId)];
    let safeTransferFrom_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
      call: safeTransferFrom_call
    });
    let safeTransferFrom_1Params = (params) => [params.from, params.to, import_eth_wallet4.Utils.toString(params.tokenId), import_eth_wallet4.Utils.stringToBytes(params.data)];
    let safeTransferFrom_1_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_1_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
      call: safeTransferFrom_1_call
    });
    let setApprovalForAllParams = (params) => [params.operator, params.approved];
    let setApprovalForAll_send = async (params) => {
      let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
      return result;
    };
    let setApprovalForAll_call = async (params) => {
      let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
      return;
    };
    this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
      call: setApprovalForAll_call
    });
    let setApprovedStakerParams = (params) => [params.staker, params.allow];
    let setApprovedStaker_send = async (params) => {
      let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
      return result;
    };
    let setApprovedStaker_call = async (params) => {
      let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
      return;
    };
    this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
      call: setApprovedStaker_call
    });
    let setBaseURI_send = async (baseURI) => {
      let result = await this.send("setBaseURI", [baseURI]);
      return result;
    };
    let setBaseURI_call = async (baseURI) => {
      let result = await this.call("setBaseURI", [baseURI]);
      return;
    };
    this.setBaseURI = Object.assign(setBaseURI_send, {
      call: setBaseURI_call
    });
    let setCap_send = async (cap) => {
      let result = await this.send("setCap", [import_eth_wallet4.Utils.toString(cap)]);
      return result;
    };
    let setCap_call = async (cap) => {
      let result = await this.call("setCap", [import_eth_wallet4.Utils.toString(cap)]);
      return;
    };
    this.setCap = Object.assign(setCap_send, {
      call: setCap_call
    });
    let setCustomAttributeParams = (params) => [import_eth_wallet4.Utils.toString(params.tokenId), import_eth_wallet4.Utils.toString(params.attribute)];
    let setCustomAttribute_send = async (params) => {
      let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
      return result;
    };
    let setCustomAttribute_call = async (params) => {
      let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
      return;
    };
    this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
      call: setCustomAttribute_call
    });
    let setMinimumStake_send = async (minimumStake) => {
      let result = await this.send("setMinimumStake", [import_eth_wallet4.Utils.toString(minimumStake)]);
      return result;
    };
    let setMinimumStake_call = async (minimumStake) => {
      let result = await this.call("setMinimumStake", [import_eth_wallet4.Utils.toString(minimumStake)]);
      return;
    };
    this.setMinimumStake = Object.assign(setMinimumStake_send, {
      call: setMinimumStake_call
    });
    let setProtocolFeeParams = (params) => [import_eth_wallet4.Utils.toString(params.protocolFee), params.protocolFeeTo];
    let setProtocolFee_send = async (params) => {
      let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
      return result;
    };
    let setProtocolFee_call = async (params) => {
      let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
      return;
    };
    this.setProtocolFee = Object.assign(setProtocolFee_send, {
      call: setProtocolFee_call
    });
    let stake_send = async (amount) => {
      let result = await this.send("stake", [import_eth_wallet4.Utils.toString(amount)]);
      return result;
    };
    let stake_call = async (amount) => {
      let result = await this.call("stake", [import_eth_wallet4.Utils.toString(amount)]);
      return new import_eth_wallet4.BigNumber(result);
    };
    this.stake = Object.assign(stake_send, {
      call: stake_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferFromParams = (params) => [params.from, params.to, import_eth_wallet4.Utils.toString(params.tokenId)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let transferProtocolFee_send = async () => {
      let result = await this.send("transferProtocolFee");
      return result;
    };
    let transferProtocolFee_call = async () => {
      let result = await this.call("transferProtocolFee");
      return;
    };
    this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
      call: transferProtocolFee_call
    });
    let unequipNFTParams = (params) => [import_eth_wallet4.Utils.toString(params.trollId), params.nft, import_eth_wallet4.Utils.toString(params.nftId)];
    let unequipNFT_send = async (params) => {
      let result = await this.send("unequipNFT", unequipNFTParams(params));
      return result;
    };
    let unequipNFT_call = async (params) => {
      let result = await this.call("unequipNFT", unequipNFTParams(params));
      return;
    };
    this.unequipNFT = Object.assign(unequipNFT_send, {
      call: unequipNFT_call
    });
    let unstake_send = async (tokenId) => {
      let result = await this.send("unstake", [import_eth_wallet4.Utils.toString(tokenId)]);
      return result;
    };
    let unstake_call = async (tokenId) => {
      let result = await this.call("unstake", [import_eth_wallet4.Utils.toString(tokenId)]);
      return;
    };
    this.unstake = Object.assign(unstake_send, {
      call: unstake_call
    });
  }
};

// src/contracts/TrollNFT_VRF.ts
var import_eth_wallet5 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/TrollNFT_VRF.json.ts
var TrollNFT_VRF_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }, { "internalType": "address[2]", "name": "vrfAddresses", "type": "address[2]" }, { "internalType": "bytes32[2]", "name": "vrfParams", "type": "bytes32[2]" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "requestId", "type": "bytes32" }, { "internalType": "uint256", "name": "randomness", "type": "uint256" }], "name": "rawFulfillRandomness", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "_vrfKeyHash", "type": "bytes32" }, { "internalType": "uint256", "name": "_vrfFee", "type": "uint256" }], "name": "setVrfParams", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawLink", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/TrollNFT_VRF.ts
var TrollNFT_VRF = class extends import_eth_wallet5.Contract {
  constructor(wallet, address) {
    super(wallet, address, TrollNFT_VRF_json_default.abi, TrollNFT_VRF_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol, params.baseURI, import_eth_wallet5.Utils.toString(params.cap), params.stakeToken, params.requireApproval, import_eth_wallet5.Utils.toString(params.minimumStake), import_eth_wallet5.Utils.toString(params.protocolFee), params.protocolFeeTo, params.vrfAddresses, import_eth_wallet5.Utils.stringToBytes32(params.vrfParams)]);
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      approved: result.approved,
      tokenId: new import_eth_wallet5.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseApprovalForAllEvent(receipt) {
    return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
  }
  decodeApprovalForAllEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      operator: result.operator,
      approved: result.approved,
      _event: event
    };
  }
  parseApprovedStakerEvent(receipt) {
    return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
  }
  decodeApprovedStakerEvent(event) {
    let result = event.data;
    return {
      staker: result.staker,
      allow: result.allow,
      _event: event
    };
  }
  parseAttributeEvent(receipt) {
    return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
  }
  decodeAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet5.BigNumber(result.tokenId),
      attribute: new import_eth_wallet5.BigNumber(result.attribute),
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseBaseURIEvent(receipt) {
    return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
  }
  decodeBaseURIEvent(event) {
    let result = event.data;
    return {
      baseURI: result.baseURI,
      _event: event
    };
  }
  parseCapEvent(receipt) {
    return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
  }
  decodeCapEvent(event) {
    let result = event.data;
    return {
      cap: new import_eth_wallet5.BigNumber(result.cap),
      _event: event
    };
  }
  parseCustomAttributeEvent(receipt) {
    return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
  }
  decodeCustomAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet5.BigNumber(result.tokenId),
      attribute: new import_eth_wallet5.BigNumber(result.attribute),
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseMinimumStakeEvent(receipt) {
    return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
  }
  decodeMinimumStakeEvent(event) {
    let result = event.data;
    return {
      minimumStake: new import_eth_wallet5.BigNumber(result.minimumStake),
      _event: event
    };
  }
  parseProtocolFeeEvent(receipt) {
    return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
  }
  decodeProtocolFeeEvent(event) {
    let result = event.data;
    return {
      protocolFee: new import_eth_wallet5.BigNumber(result.protocolFee),
      protocolFeeTo: result.protocolFeeTo,
      _event: event
    };
  }
  parseStakeEvent(receipt) {
    return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
  }
  decodeStakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet5.BigNumber(result.tokenId),
      amount: new import_eth_wallet5.BigNumber(result.amount),
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      tokenId: new import_eth_wallet5.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnstakeEvent(receipt) {
    return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
  }
  decodeUnstakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet5.BigNumber(result.tokenId),
      amount: new import_eth_wallet5.BigNumber(result.amount),
      _event: event
    };
  }
  assign() {
    let _attributes_call = async (param1) => {
      let result = await this.call("_attributes", [import_eth_wallet5.Utils.toString(param1)]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this._attributes = _attributes_call;
    let _customAttributes_call = async (param1) => {
      let result = await this.call("_customAttributes", [import_eth_wallet5.Utils.toString(param1)]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this._customAttributes = _customAttributes_call;
    let approvedStaker_call = async (param1) => {
      let result = await this.call("approvedStaker", [param1]);
      return result;
    };
    this.approvedStaker = approvedStaker_call;
    let balanceOf_call = async (owner) => {
      let result = await this.call("balanceOf", [owner]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let baseURI_call = async () => {
      let result = await this.call("baseURI");
      return result;
    };
    this.baseURI = baseURI_call;
    let cap_call = async () => {
      let result = await this.call("cap");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.cap = cap_call;
    let counter_call = async () => {
      let result = await this.call("counter");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.counter = counter_call;
    let creationTime_call = async (param1) => {
      let result = await this.call("creationTime", [import_eth_wallet5.Utils.toString(param1)]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.creationTime = creationTime_call;
    let getApproved_call = async (tokenId) => {
      let result = await this.call("getApproved", [import_eth_wallet5.Utils.toString(tokenId)]);
      return result;
    };
    this.getApproved = getApproved_call;
    let getAttributes1Params = (params) => [import_eth_wallet5.Utils.toString(params.tokenId), import_eth_wallet5.Utils.toString(params.base), import_eth_wallet5.Utils.toString(params.offset), import_eth_wallet5.Utils.toString(params.digits)];
    let getAttributes1_call = async (params) => {
      let result = await this.call("getAttributes1", getAttributes1Params(params));
      return new import_eth_wallet5.BigNumber(result);
    };
    this.getAttributes1 = getAttributes1_call;
    let getAttributes2Params = (params) => [import_eth_wallet5.Utils.toString(params.tokenId), import_eth_wallet5.Utils.toString(params.base), import_eth_wallet5.Utils.toString(params.digits)];
    let getAttributes2_call = async (params) => {
      let result = await this.call("getAttributes2", getAttributes2Params(params));
      return result.map((e) => new import_eth_wallet5.BigNumber(e));
    };
    this.getAttributes2 = getAttributes2_call;
    let isApprovedForAllParams = (params) => [params.owner, params.operator];
    let isApprovedForAll_call = async (params) => {
      let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
      return result;
    };
    this.isApprovedForAll = isApprovedForAll_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let minimumStake_call = async () => {
      let result = await this.call("minimumStake");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.minimumStake = minimumStake_call;
    let minted_call = async (param1) => {
      let result = await this.call("minted", [param1]);
      return result;
    };
    this.minted = minted_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let ownerOf_call = async (tokenId) => {
      let result = await this.call("ownerOf", [import_eth_wallet5.Utils.toString(tokenId)]);
      return result;
    };
    this.ownerOf = ownerOf_call;
    let protocolFee_call = async () => {
      let result = await this.call("protocolFee");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.protocolFee = protocolFee_call;
    let protocolFeeBalance_call = async () => {
      let result = await this.call("protocolFeeBalance");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.protocolFeeBalance = protocolFeeBalance_call;
    let protocolFeeTo_call = async () => {
      let result = await this.call("protocolFeeTo");
      return result;
    };
    this.protocolFeeTo = protocolFeeTo_call;
    let requireApproval_call = async () => {
      let result = await this.call("requireApproval");
      return result;
    };
    this.requireApproval = requireApproval_call;
    let stakeToken_call = async () => {
      let result = await this.call("stakeToken");
      return result;
    };
    this.stakeToken = stakeToken_call;
    let stakingBalance_call = async (param1) => {
      let result = await this.call("stakingBalance", [import_eth_wallet5.Utils.toString(param1)]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.stakingBalance = stakingBalance_call;
    let supportsInterface_call = async (interfaceId) => {
      let result = await this.call("supportsInterface", [interfaceId]);
      return result;
    };
    this.supportsInterface = supportsInterface_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let tokenByIndex_call = async (index) => {
      let result = await this.call("tokenByIndex", [import_eth_wallet5.Utils.toString(index)]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.tokenByIndex = tokenByIndex_call;
    let tokenOfOwnerByIndexParams = (params) => [params.owner, import_eth_wallet5.Utils.toString(params.index)];
    let tokenOfOwnerByIndex_call = async (params) => {
      let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
      return new import_eth_wallet5.BigNumber(result);
    };
    this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
    let tokenURI_call = async (tokenId) => {
      let result = await this.call("tokenURI", [import_eth_wallet5.Utils.toString(tokenId)]);
      return result;
    };
    this.tokenURI = tokenURI_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let approveParams = (params) => [params.to, import_eth_wallet5.Utils.toString(params.tokenId)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let batchApprove_send = async (stakers) => {
      let result = await this.send("batchApprove", [stakers]);
      return result;
    };
    let batchApprove_call = async (stakers) => {
      let result = await this.call("batchApprove", [stakers]);
      return;
    };
    this.batchApprove = Object.assign(batchApprove_send, {
      call: batchApprove_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let rawFulfillRandomnessParams = (params) => [import_eth_wallet5.Utils.stringToBytes32(params.requestId), import_eth_wallet5.Utils.toString(params.randomness)];
    let rawFulfillRandomness_send = async (params) => {
      let result = await this.send("rawFulfillRandomness", rawFulfillRandomnessParams(params));
      return result;
    };
    let rawFulfillRandomness_call = async (params) => {
      let result = await this.call("rawFulfillRandomness", rawFulfillRandomnessParams(params));
      return;
    };
    this.rawFulfillRandomness = Object.assign(rawFulfillRandomness_send, {
      call: rawFulfillRandomness_call
    });
    let safeTransferFromParams = (params) => [params.from, params.to, import_eth_wallet5.Utils.toString(params.tokenId)];
    let safeTransferFrom_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
      call: safeTransferFrom_call
    });
    let safeTransferFrom_1Params = (params) => [params.from, params.to, import_eth_wallet5.Utils.toString(params.tokenId), import_eth_wallet5.Utils.stringToBytes(params.data)];
    let safeTransferFrom_1_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_1_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
      call: safeTransferFrom_1_call
    });
    let setApprovalForAllParams = (params) => [params.operator, params.approved];
    let setApprovalForAll_send = async (params) => {
      let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
      return result;
    };
    let setApprovalForAll_call = async (params) => {
      let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
      return;
    };
    this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
      call: setApprovalForAll_call
    });
    let setApprovedStakerParams = (params) => [params.staker, params.allow];
    let setApprovedStaker_send = async (params) => {
      let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
      return result;
    };
    let setApprovedStaker_call = async (params) => {
      let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
      return;
    };
    this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
      call: setApprovedStaker_call
    });
    let setBaseURI_send = async (baseURI) => {
      let result = await this.send("setBaseURI", [baseURI]);
      return result;
    };
    let setBaseURI_call = async (baseURI) => {
      let result = await this.call("setBaseURI", [baseURI]);
      return;
    };
    this.setBaseURI = Object.assign(setBaseURI_send, {
      call: setBaseURI_call
    });
    let setCap_send = async (cap) => {
      let result = await this.send("setCap", [import_eth_wallet5.Utils.toString(cap)]);
      return result;
    };
    let setCap_call = async (cap) => {
      let result = await this.call("setCap", [import_eth_wallet5.Utils.toString(cap)]);
      return;
    };
    this.setCap = Object.assign(setCap_send, {
      call: setCap_call
    });
    let setCustomAttributeParams = (params) => [import_eth_wallet5.Utils.toString(params.tokenId), import_eth_wallet5.Utils.toString(params.attribute)];
    let setCustomAttribute_send = async (params) => {
      let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
      return result;
    };
    let setCustomAttribute_call = async (params) => {
      let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
      return;
    };
    this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
      call: setCustomAttribute_call
    });
    let setMinimumStake_send = async (minimumStake) => {
      let result = await this.send("setMinimumStake", [import_eth_wallet5.Utils.toString(minimumStake)]);
      return result;
    };
    let setMinimumStake_call = async (minimumStake) => {
      let result = await this.call("setMinimumStake", [import_eth_wallet5.Utils.toString(minimumStake)]);
      return;
    };
    this.setMinimumStake = Object.assign(setMinimumStake_send, {
      call: setMinimumStake_call
    });
    let setProtocolFeeParams = (params) => [import_eth_wallet5.Utils.toString(params.protocolFee), params.protocolFeeTo];
    let setProtocolFee_send = async (params) => {
      let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
      return result;
    };
    let setProtocolFee_call = async (params) => {
      let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
      return;
    };
    this.setProtocolFee = Object.assign(setProtocolFee_send, {
      call: setProtocolFee_call
    });
    let setVrfParamsParams = (params) => [import_eth_wallet5.Utils.stringToBytes32(params.vrfKeyHash), import_eth_wallet5.Utils.toString(params.vrfFee)];
    let setVrfParams_send = async (params) => {
      let result = await this.send("setVrfParams", setVrfParamsParams(params));
      return result;
    };
    let setVrfParams_call = async (params) => {
      let result = await this.call("setVrfParams", setVrfParamsParams(params));
      return;
    };
    this.setVrfParams = Object.assign(setVrfParams_send, {
      call: setVrfParams_call
    });
    let stake_send = async (amount) => {
      let result = await this.send("stake", [import_eth_wallet5.Utils.toString(amount)]);
      return result;
    };
    let stake_call = async (amount) => {
      let result = await this.call("stake", [import_eth_wallet5.Utils.toString(amount)]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.stake = Object.assign(stake_send, {
      call: stake_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferFromParams = (params) => [params.from, params.to, import_eth_wallet5.Utils.toString(params.tokenId)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let transferProtocolFee_send = async () => {
      let result = await this.send("transferProtocolFee");
      return result;
    };
    let transferProtocolFee_call = async () => {
      let result = await this.call("transferProtocolFee");
      return;
    };
    this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
      call: transferProtocolFee_call
    });
    let unstake_send = async (tokenId) => {
      let result = await this.send("unstake", [import_eth_wallet5.Utils.toString(tokenId)]);
      return result;
    };
    let unstake_call = async (tokenId) => {
      let result = await this.call("unstake", [import_eth_wallet5.Utils.toString(tokenId)]);
      return;
    };
    this.unstake = Object.assign(unstake_send, {
      call: unstake_call
    });
    let withdrawLink_send = async (amount) => {
      let result = await this.send("withdrawLink", [import_eth_wallet5.Utils.toString(amount)]);
      return result;
    };
    let withdrawLink_call = async (amount) => {
      let result = await this.call("withdrawLink", [import_eth_wallet5.Utils.toString(amount)]);
      return;
    };
    this.withdrawLink = Object.assign(withdrawLink_send, {
      call: withdrawLink_call
    });
  }
};

// src/contracts/TrollNFT_VRFV2.ts
var import_eth_wallet6 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/TrollNFT_VRFV2.json.ts
var TrollNFT_VRFV2_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }, { "components": [{ "internalType": "contract IERC721[]", "name": "listValidNFTs", "type": "address[]" }, { "internalType": "uint256", "name": "maximumValidNFTs", "type": "uint256" }], "internalType": "struct TrollNFTV2.NFTInfo", "name": "_nftInfo", "type": "tuple" }, { "components": [{ "internalType": "address[2]", "name": "vrfAddresses", "type": "address[2]" }, { "internalType": "bytes32[2]", "name": "vrfParams", "type": "bytes32[2]" }], "internalType": "struct TrollNFT_VRFV2.VRFInfo", "name": "_vrfInfo", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountAdded", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmount", "type": "uint256" }], "name": "AddStakes", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }], "name": "AddValidNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "EquipNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesApproval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "toTokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "UnequipNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "_stakesTransferAllowances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakes", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC721[]", "name": "nfts", "type": "address[]" }], "name": "addValidNFTs", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "destoryDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "equipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "extraStakes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "isValidNFT", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "lastStakeDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "listValidNFTs", "outputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "maximumValidNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "nftsEquipped", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "requestId", "type": "bytes32" }, { "internalType": "uint256", "name": "randomness", "type": "uint256" }], "name": "rawFulfillRandomness", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "_vrfKeyHash", "type": "bytes32" }, { "internalType": "uint256", "name": "_vrfFee", "type": "uint256" }], "name": "setVrfParams", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "trollOwnedNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "unequipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "validNFTsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawLink", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60e06040523480156200001157600080fd5b50604051620063e9380380620063e983398101604081905262000034916200081f565b80518051602091820151600080546001600160a01b0319163317905560016003558d51919290918e918e918e918e918e918e918e918e918e918e918b918b91620000859160049190850190620004f2565b5080516200009b906005906020840190620004f2565b5050508260001480620000b657506001600160a01b03821615155b620001085760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726f746f636f6c4665652f466565546f0000000000000060448201526064015b60405180910390fd5b602081015181515111156200015b5760405162461bcd60e51b815260206004820152602480820152600080516020620063c98339815191526044820152634e46547360e01b6064820152608401620000ff565b87516200017090600f9060208b0190620004f2565b50600e879055606086901b6001600160601b0319166080526010805460ff191686151517905560118490556012839055601380546001600160a01b0319166001600160a01b03841617905560208101516016558051620001d09062000319565b7f01e56a02aca7f26a28165a040851ba78f30282b55ca81c63a804cdc1e2dcea72600f60405162000202919062000954565b60405180910390a17fddf4c293a3479db41117899542b2a5d272b166296d11693304a6c1eac191054b600e546040516200023e91815260200190565b60405180910390a17f0be9186a0f7f1e3c3019fdaacbaffb9ea92e4aacae81a3dbcc3a18220a47380d6011546040516200027a91815260200190565b60405180910390a1601254601354604080519283526001600160a01b0390911660208301527f5ecd7df85e51aff79e169c80a23d9299697dcb741138d732a78485f61370843d910160405180910390a15050505050606096871b6001600160601b031990811660c0529590961b90941660a052505050506020828101518051910151620003089250620004cf565b505050505050505050505062000b1b565b6000546001600160a01b031633146200033157600080fd5b601654815160155462000345919062000a60565b1115620003905760405162461bcd60e51b815260206004820152602480820152600080516020620063c98339815191526044820152634e46547360e01b6064820152608401620000ff565b60005b8151811015620004cb576000828281518110620003c057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038116600090815291805260409091205490915060ff16156200042d5760405162461bcd60e51b815260206004820152601160248201527013919508185b1c9958591e481859191959607a1b6044820152606401620000ff565b6001600160a01b0381166000818152602080526040808220805460ff1916600190811790915560158054918201815583527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b03191684179055517f6f0f8cee3d9c2f167393540bc77d82ef43045c19beafd62240a7e45f2519171a9190a25080620004c28162000ab8565b91505062000393565b5050565b6000546001600160a01b03163314620004e757600080fd5b602691909155602755565b828054620005009062000a7b565b90600052602060002090601f0160209004810192826200052457600085556200056f565b82601f106200053f57805160ff19168380011785556200056f565b828001600101855582156200056f579182015b828111156200056f57825182559160200191906001019062000552565b506200057d92915062000581565b5090565b5b808211156200057d576000815560010162000582565b8051620005a58162000b02565b919050565b600082601f830112620005bb578081fd5b620005c562000a02565b808385604086011115620005d7578384fd5b835b6002811015620005fa578151845260209384019390910190600101620005d9565b509095945050505050565b80518015158114620005a557600080fd5b600082601f83011262000627578081fd5b81516001600160401b0381111562000643576200064362000aec565b602062000659601f8301601f1916820162000a2d565b82815285828487010111156200066d578384fd5b835b838110156200068c5785810183015182820184015282016200066f565b838111156200069d57848385840101525b5095945050505050565b600060408284031215620006b9578081fd5b620006c362000a02565b82519091506001600160401b0380821115620006de57600080fd5b818401915084601f830112620006f357600080fd5b81516020828211156200070a576200070a62000aec565b8160051b92506200071d81840162000a2d565b8281528181019085830185870184018a10156200073957600080fd5b600096505b848710156200076c5780519550620007568662000b02565b858352600196909601959183019183016200073e565b50808752505080860151818601525050505092915050565b60006080828403121562000796578081fd5b620007a062000a02565b905082601f830112620007b257600080fd5b620007bc62000a02565b80836040850186811115620007d057600080fd5b60005b600281101562000800578251620007ea8162000b02565b85526020948501949290920191600101620007d3565b50828552620008108782620005aa565b60208601525050505092915050565b60008060008060008060008060008060006101c08c8e03121562000841578687fd5b8b516001600160401b0381111562000857578788fd5b620008658e828f0162000616565b60208e0151909c5090506001600160401b0381111562000883578788fd5b620008918e828f0162000616565b60408e0151909b5090506001600160401b03811115620008af578788fd5b620008bd8e828f0162000616565b99505060608c01519750620008d560808d0162000598565b9650620008e560a08d0162000605565b955060c08c0151945060e08c01519350620009046101008d0162000598565b6101208d01519093506001600160401b0381111562000921578283fd5b6200092f8e828f01620006a7565b925050620009428d6101408e0162000784565b90509295989b509295989b9093969950565b6000602080835281845483600182811c9150808316806200097657607f831692505b8583108114156200099557634e487b7160e01b87526022600452602487fd5b878601838152602001818015620009b55760018114620009c757620009f3565b60ff19861682528782019650620009f3565b60008b815260209020895b86811015620009ed57815484820152908501908901620009d2565b83019750505b50949998505050505050505050565b604080519081016001600160401b038111828210171562000a275762000a2762000aec565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000a585762000a5862000aec565b604052919050565b6000821982111562000a765762000a7662000ad6565b500190565b600181811c9082168062000a9057607f821691505b6020821081141562000ab257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000acf5762000acf62000ad6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000b1857600080fd5b50565b60805160601c60a05160601c60c05160601c61584462000b85600039600081816126fd0152613f650152600081816125c301528181612a4c0152613f2901526000818161061f0152818161112d015281816126b301528181612f860152613e3201526158446000f3fe608060405234801561001057600080fd5b50600436106104215760003560e01c806378511f6111610235578063b88d4fde11610135578063e7201063116100c8578063ec5ffac211610097578063f0ab14ed1161007c578063f0ab14ed146109f4578063f2fde38b14610a14578063f43d958414610a2757600080fd5b8063ec5ffac2146109cb578063ef369252146109d457600080fd5b8063e720106314610949578063e985e9c51461095c578063ea289d00146109a5578063ea5ed3db146109b857600080fd5b8063d4ee1d9011610104578063d4ee1d90146108e1578063d793006614610901578063d8f8504f14610921578063da1bbcf61461094157600080fd5b8063b88d4fde14610890578063baba73a5146108a3578063c287e806146108ac578063c87b56dd146108ce57600080fd5b806395d89b41116101c8578063a694fc3a11610197578063b13db5761161017c578063b13db5761461083d578063b1bc99161461085d578063b55e58471461087057600080fd5b8063a694fc3a14610821578063b0e21e8a1461083457600080fd5b806395d89b41146107e05780639c52a7f1146107e8578063a22cb465146107fb578063a2f55ae51461080e57600080fd5b806382d5ea6c1161020457806382d5ea6c146107805780638c8c8a501461078d5780638da5cb5b146107ad57806394985ddd146107cd57600080fd5b806378511f611461071a5780637a8042bd1461073a5780637e09858e1461074d57806381fdc72b1461077857600080fd5b806342842e0e116103405780635981f75a116102d357806368c1c088116102a25780636e660ab1116102875780636e660ab1146106b957806370a08231146106e45780637776a0e5146106f757600080fd5b806368c1c0881461069e5780636c0360eb146106b157600080fd5b80635981f75a14610667578063605361721461067a57806361bc221a146106825780636352211e1461068b57600080fd5b80635174df051161030f5780635174df051461060757806351ed6a301461061a5780635452f3691461064157806355f804b31461065457600080fd5b806342842e0e146105bb578063476f2d5c146105ce57806347786d37146105e15780634f6ccce7146105f457600080fd5b8063233e9903116103b85780632f745c59116103875780632f745c5914610569578063355274ea1461057c5780633a2f5511146105855780633fd8cc4e1461059857600080fd5b8063233e99031461051d57806323b872dd146105305780632457c8ea146105435780632e17de781461055657600080fd5b80630a22d68c116103f45780630a22d68c146104b057806318160ddd146104c75780631864bbc9146104cf5780631e7269c5146104fa57600080fd5b806301ffc9a71461042657806306fdde031461044e578063081812fc14610463578063095ea7b31461049b575b600080fd5b610439610434366004615203565b610a47565b60405190151581526020015b60405180910390f35b610456610aa3565b60405161044591906154d4565b610476610471366004615281565b610b35565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610445565b6104ae6104a93660046150a7565b610c14565b005b6104b960145481565b604051908152602001610445565b600c546104b9565b6104b96104dd3660046150a7565b602260209081526000928352604080842090915290825290205481565b610439610508366004614f4d565b601f6020526000908152604090205460ff1681565b6104ae61052b366004615281565b610da1565b6104ae61053e366004614fbd565b610e01565b6104ae6105513660046151e2565b610ea2565b6104ae610564366004615281565b611008565b6104b96105773660046150a7565b611280565b6104b9600e5481565b6104ae610593366004615112565b61134f565b6104396105a6366004614f4d565b60026020526000908152604090205460ff1681565b6104ae6105c9366004614fbd565b6115d9565b6104b96105dc36600461534c565b6115f4565b6104ae6105ef366004615281565b611638565b6104b9610602366004615281565b6116fc565b6104ae6106153660046152d5565b6117e1565b6104767f000000000000000000000000000000000000000000000000000000000000000081565b6104ae61064f3660046151e2565b611c35565b6104ae61066236600461523b565b611c64565b6104ae6106753660046152d5565b611ccc565b6104ae612119565b6104b960175481565b610476610699366004615281565b612243565b6104ae6106ac36600461507a565b6122f5565b61045661243e565b6104b96106c73660046152b1565b602460209081526000928352604080842090915290825290205481565b6104b96106f2366004614f4d565b6124cc565b610439610705366004614f4d565b601e6020526000908152604090205460ff1681565b6104b9610728366004615281565b60236020526000908152604090205481565b6104ae610748366004615281565b61259a565b6104b961075b3660046152b1565b602160209081526000928352604080842090915290825290205481565b6104ae6125ec565b6010546104399060ff1681565b6104b961079b366004615281565b60186020526000908152604090205481565b6000546104769073ffffffffffffffffffffffffffffffffffffffff1681565b6104ae6107db3660046151e2565b6126e5565b61045661278e565b6104ae6107f6366004614f4d565b61279d565b6104ae61080936600461507a565b61283d565b6104ae61081c366004614f4d565b612954565b6104b961082f366004615281565b6129f7565b6104b960125481565b6104b961084b366004615281565b60196020526000908152604090205481565b61047661086b366004615281565b612b55565b6104b961087e366004615281565b601d6020526000908152604090205481565b6104ae61089e366004614ffd565b612b8c565b6104b960165481565b6104396108ba366004614f4d565b602080526000908152604090205460ff1681565b6104566108dc366004615281565b612c34565b6001546104769073ffffffffffffffffffffffffffffffffffffffff1681565b61091461090f3660046152fb565b612d44565b6040516104459190615490565b6104b961092f366004615281565b601c6020526000908152604090205481565b6015546104b9565b6104ae6109573660046151e2565b612ee5565b61043961096a366004614f85565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260096020908152604080832093909416825291909152205460ff1690565b6104ae6109b33660046152b1565b613021565b6104ae6109c63660046150d2565b613153565b6104b960115481565b6013546104769073ffffffffffffffffffffffffffffffffffffffff1681565b6104b9610a02366004615281565b601a6020526000908152604090205481565b6104ae610a22366004614f4d565b613307565b6104b9610a35366004615281565b601b6020526000908152604090205481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610a9d5750610a9d8261339e565b92915050565b606060048054610ab290615682565b80601f0160208091040260200160405190810160405280929190818152602001828054610ade90615682565b8015610b2b5780601f10610b0057610100808354040283529160200191610b2b565b820191906000526020600020905b815481529060010190602001808311610b0e57829003601f168201915b5050505050905090565b60008181526006602052604081205473ffffffffffffffffffffffffffffffffffffffff16610beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526008602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610c1f82612243565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610be2565b3373ffffffffffffffffffffffffffffffffffffffff82161480610d065750610d06813361096a565b610d92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610be2565b610d9c8383613481565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dc557600080fd5b60118190556040518181527f0be9186a0f7f1e3c3019fdaacbaffb9ea92e4aacae81a3dbcc3a18220a47380d906020015b60405180910390a150565b610e0b3382613521565b610e97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610be2565b610d9c83838361368d565b3360009081526002602052604090205460ff16610f41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610be2565b6000828152601a602052604090205415610fb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f41747472696275746520616c72656164792073657400000000000000000000006044820152606401610be2565b6000828152601a6020526040908190208290555182907fe73a9e48f41e228034f18c54b3f003b3de0b3bf1069ffd0c352543431b8a86a390610ffc9084815260200190565b60405180910390a25050565b60026003541415611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be2565b60026003556110843382613521565b6110ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610be2565b6110f3816138ff565b6000818152601c6020908152604080832042905560189091528120805491905561115473ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633836139d8565b60005b60155481101561123f5760006015828154811061119d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015486835260218252604080842073ffffffffffffffffffffffffffffffffffffffff90921680855291909252912054909150801561122a5773ffffffffffffffffffffffffffffffffffffffff82166000818152602260209081526040808320858452825280832083905588835260218252808320938352929052908120555b50508080611237906156d6565b915050611157565b50604051818152829033907ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb2809060200160405180910390a350506001600355565b600061128b836124cc565b8210611319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610be2565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600a60209081526040808320938352929052205490565b60005473ffffffffffffffffffffffffffffffffffffffff16331461137357600080fd5b60165481516015546113859190615613565b1115611412576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45786365656473206d6178696d756d206e756d626572206f662076616c69642060448201527f4e465473000000000000000000000000000000000000000000000000000000006064820152608401610be2565b60005b81518110156115d5576000828281518110611459577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff8116600090815291805260409091205490915060ff16156114f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e465420616c72656164792061646465640000000000000000000000000000006044820152606401610be2565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260208052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915560158054918201815583527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517f6f0f8cee3d9c2f167393540bc77d82ef43045c19beafd62240a7e45f2519171a9190a250806115cd816156d6565b915050611415565b5050565b610d9c83838360405180602001604052806000815250612b8c565b60006116008483613aac565b61160a8585613aac565b600087815260196020526040902054611623919061562b565b61162d919061570f565b90505b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461165c57600080fd5b600e5481116116c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43617020616c72656164792065786365656465640000000000000000000000006044820152606401610be2565b600e8190556040518181527fddf4c293a3479db41117899542b2a5d272b166296d11693304a6c1eac191054b90602001610df6565b6000611707600c5490565b8210611795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610be2565b600c82815481106117cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208052604090205460ff1661186f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f742076616c6964204e4654000000000000000000000000000000000000006044820152606401610be2565b3361187984612243565b73ffffffffffffffffffffffffffffffffffffffff161461191c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320747260448201527f6f6c6c00000000000000000000000000000000000000000000000000000000006064820152608401610be2565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff841690636352211e9060240160206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190614f69565b73ffffffffffffffffffffffffffffffffffffffff1614611a5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f662074686973204e4660448201527f54000000000000000000000000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260226020908152604080832084845290915290205415611af7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e465420616c72656164792065717569707065640000000000000000000000006044820152606401610be2565b600083815260216020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205415611bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f456163682074726f6c6c2063616e206f6e6c79206571756970206f6e6520746f60448201527f6b656e20706572204e46540000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff82166000818152602260209081526040808320858452825280832087905586835260218252808320848452825291829020849055905183815285917f5f3e52a313d16d3e3d13ea422592abcdf8484958442b5d977890b64c53523e2391015b60405180910390a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c5957600080fd5b602691909155602755565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c8857600080fd5b8051611c9b90600f906020840190614df4565b507f01e56a02aca7f26a28165a040851ba78f30282b55ca81c63a804cdc1e2dcea72600f604051610df691906154e7565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208052604090205460ff16611d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f742076616c6964204e4654000000000000000000000000000000000000006044820152606401610be2565b33611d6484612243565b73ffffffffffffffffffffffffffffffffffffffff1614611e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320747260448201527f6f6c6c00000000000000000000000000000000000000000000000000000000006064820152608401610be2565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff841690636352211e9060240160206040518083038186803b158015611e6f57600080fd5b505afa158015611e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190614f69565b73ffffffffffffffffffffffffffffffffffffffff1614611f4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f662074686973204e4660448201527f54000000000000000000000000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff821660009081526022602090815260408083208484529091529020548314612009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f54686973204e465420646f6573206e6f742062656c6f6e6720746f207468697360448201527f2074726f6c6c00000000000000000000000000000000000000000000000000006064820152608401610be2565b600083815260216020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205481146120a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f546869732074726f6c6c20646f6573206e6f74206f776e2074686973204e46546044820152606401610be2565b73ffffffffffffffffffffffffffffffffffffffff82166000818152602260209081526040808320858452825280832083905586835260218252808320848452825280832092909255905183815285917f209edba55054a6d25cdb7cd481d568e6a0fbe2ecc48276caee30a061cb1f744f9101611c28565b60015473ffffffffffffffffffffffffffffffffffffffff1633146121c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610be2565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60008181526006602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610a9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610be2565b60005473ffffffffffffffffffffffffffffffffffffffff16331461231957600080fd5b60105460ff1661234f57601080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b80156123a85773ffffffffffffffffffffffffffffffffffffffff82166000908152601e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556123f4565b73ffffffffffffffffffffffffffffffffffffffff82166000908152601e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b8173ffffffffffffffffffffffffffffffffffffffff167fd1b1846bd2f96d78a14f8960ca200e7a29f8d8d08c0386ffe28dc5c99067c52382604051610ffc911515815260200190565b600f805461244b90615682565b80601f016020809104026020016040519081016040528092919081815260200182805461247790615682565b80156124c45780601f10612499576101008083540402835291602001916124c4565b820191906000526020600020905b8154815290600101906020018083116124a757829003601f168201915b505050505081565b600073ffffffffffffffffffffffffffffffffffffffff8216612571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610be2565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b60005473ffffffffffffffffffffffffffffffffffffffff1633146125be57600080fd5b6125e97f000000000000000000000000000000000000000000000000000000000000000033836139d8565b50565b60026003541415612659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be2565b600260035560135473ffffffffffffffffffffffffffffffffffffffff161580159061268757506000601454115b156126de576014805460009091556013546126dc9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169116836139d8565b505b6001600355565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610be2565b6115d58282613b3e565b606060058054610ab290615682565b60005473ffffffffffffffffffffffffffffffffffffffff1633146127c157600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a78849101610df6565b73ffffffffffffffffffffffffffffffffffffffff82163314156128bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610be2565b33600081815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461297857600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf59101610df6565b6000612a0282613b94565b6027546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529192509073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612a8e57600080fd5b505afa158015612aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac69190615299565b1015612b2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420656e6f756768204c494e4b00000000000000000000000000000000006044820152606401610be2565b6000612b3e602654602754613f25565b600090815260286020526040902082905550919050565b60158181548110612b6557600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b612b963383613521565b612c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610be2565b612c2e848484846140bd565b50505050565b60008181526006602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16612ce8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610be2565b6000612cf2614160565b90506000815111612d125760405180602001604052806000815250612d3d565b80612d1c8461416f565b604051602001612d2d9291906153e3565b6040516020818303038152906040525b9392505050565b6060818067ffffffffffffffff811115612d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612db0578160200160208202803683370190505b5060008781526019602052604081205491935090815b83811015612ed957612e1788888884818110612e0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135613aac565b612e218985613aac565b612e2b908461562b565b612e35919061570f565b858281518110612e6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050868682818110612eb3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013583612ec59190615613565b925080612ed1816156d6565b915050612dc6565b50505050949350505050565b33612eef83612243565b73ffffffffffffffffffffffffffffffffffffffff1614612f6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610be2565b612fae73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846142ef565b60008281526018602052604081208054839290612fcc908490615613565b90915550506000828152601d6020908152604080832042905560188252918290205482518481529182015283917f9dd9373946c68e9420a62b36f888feb3e769b907bb535e27af7f59f2886337499101610ffc565b60005473ffffffffffffffffffffffffffffffffffffffff16331461304557600080fd5b811580613067575073ffffffffffffffffffffffffffffffffffffffff811615155b6130cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642070726f746f636f6c4665652f466565546f000000000000006044820152606401610be2565b6012829055601380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040805184815260208101929092527f5ecd7df85e51aff79e169c80a23d9299697dcb741138d732a78485f61370843d910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461317757600080fd5b601080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558060005b81811015612c2e576001601e60008686858181106131ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906132029190614f4d565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905583838281811061328e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906132a39190614f4d565b73ffffffffffffffffffffffffffffffffffffffff167fd1b1846bd2f96d78a14f8960ca200e7a29f8d8d08c0386ffe28dc5c99067c52360016040516132ed911515815260200190565b60405180910390a2806132ff816156d6565b9150506131a6565b60005473ffffffffffffffffffffffffffffffffffffffff16331461332b57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b90602001610df6565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061343157507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a9d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610a9d565b600081815260086020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906134db82612243565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526006602052604081205473ffffffffffffffffffffffffffffffffffffffff166135d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610be2565b60006135dd83612243565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061364c57508373ffffffffffffffffffffffffffffffffffffffff1661363484610b35565b73ffffffffffffffffffffffffffffffffffffffff16145b80611630575073ffffffffffffffffffffffffffffffffffffffff80821660009081526009602090815260408083209388168352929052205460ff16611630565b8273ffffffffffffffffffffffffffffffffffffffff166136ad82612243565b73ffffffffffffffffffffffffffffffffffffffff1614613750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff82166137f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610be2565b6137fd83838361434d565b613808600082613481565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040812080546001929061383e90849061563f565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260408120805460019290613879908490615613565b909155505060008181526006602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061390a82612243565b90506139188160008461434d565b613923600083613481565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040812080546001929061395990849061563f565b909155505060008281526006602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d9c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614453565b6000828015613b2057600183168015613ac757849250613acc565b600192505b506002830492505b8215613b1b578384028485820414613aeb57600080fd5b93506001831615613b10578382028285820414158515151615613b0d57600080fd5b91505b600283049250613ad4565b613b37565b828015613b305760009250613b35565b600192505b505b5092915050565b60008281526028602090815260408083205480845260198352928190208490555183815282917f1e6edca497f4aff07b388b2c8af55371a16eb956ed650861cb45f11758e4a65b910160405180910390a2505050565b600060026003541415613c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be2565b600260035560105460ff161580613c295750336000908152601e602052604090205460ff165b613c8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610be2565b600060125483613c9f919061563f565b9050601154811015613d0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d696e696e756d207374616b65206e6f74206d657400000000000000000000006044820152606401610be2565b600e54600c5410613d7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f43617020657863656564656400000000000000000000000000000000000000006044820152606401610be2565b60105460ff161580613d9c5750336000908152601f602052604090205460ff16155b613e02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f596f752063616e206f6e6c79207374616b65206f6e63650000000000000000006044820152606401610be2565b601760008154613e11906156d6565b91829055509150613e5a73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330866142ef565b60008281526018602052604081208290556012546014805491929091613e81908490615613565b9091555050336000818152601f6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055858352601b82528083204290819055601d90925290912055613ee3908361455f565b604051838152829033907f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b69060200160405180910390a3506001600355919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001613fa2929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401613fcf9392919061545b565b602060405180830381600087803b158015613fe957600080fd5b505af1158015613ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402191906151c6565b50600083815260256020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a09091019092528151918301919091209387905291905261407d906001615613565b6000858152602560205260409020556116308482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6140c884848461368d565b6140d484848484614579565b612c2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610be2565b6060600f8054610ab290615682565b6060816141af57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156141d957806141c3816156d6565b91506141d29050600a8361562b565b91506141b3565b60008167ffffffffffffffff81111561421b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614245576020820181803683370190505b5090505b84156116305761425a60018361563f565b9150614267600a8661570f565b614272906030615613565b60f81b8183815181106142ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506142e8600a8661562b565b9450614249565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612c2e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613a2a565b73ffffffffffffffffffffffffffffffffffffffff83166143b5576143b081600c80546000838152600d60205260408120829055600182018355919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70155565b6143f2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146143f2576143f28382614775565b73ffffffffffffffffffffffffffffffffffffffff821661441657610d9c8161482c565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d9c57610d9c8282614950565b60006144b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166149a19092919063ffffffff16565b805190915015610d9c57808060200190518101906144d391906151c6565b610d9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610be2565b6115d58282604051806020016040528060008152506149b0565b600073ffffffffffffffffffffffffffffffffffffffff84163b1561476d576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906145f0903390899088908890600401615412565b602060405180830381600087803b15801561460a57600080fd5b505af1925050508015614658575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526146559181019061521f565b60015b614722573d808015614686576040519150601f19603f3d011682016040523d82523d6000602084013e61468b565b606091505b50805161471a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610be2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611630565b506001611630565b60006001614782846124cc565b61478c919061563f565b6000838152600b60205260409020549091508082146147ec5773ffffffffffffffffffffffffffffffffffffffff84166000908152600a602090815260408083208584528252808320548484528184208190558352600b90915290208190555b506000918252600b6020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600a81528383209183525290812055565b600c5460009061483e9060019061563f565b6000838152600d6020526040812054600c805493945090928490811061488d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600c83815481106148d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602080832090910192909255828152600d9091526040808220849055858252812055600c805480614934577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061495b836124cc565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600a602090815260408083208684528252808320859055938252600b9052919091209190915550565b60606116308484600085614a53565b6149ba8383614bd3565b6149c76000848484614579565b610d9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610be2565b606082471015614ae5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610be2565b843b614b4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610be2565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051614b7691906153c7565b60006040518083038185875af1925050503d8060008114614bb3576040519150601f19603f3d011682016040523d82523d6000602084013e614bb8565b606091505b5091509150614bc8828286614da1565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216614c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610be2565b60008181526006602052604090205473ffffffffffffffffffffffffffffffffffffffff1615614cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610be2565b614ce86000838361434d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260408120805460019290614d1e908490615613565b909155505060008181526006602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608315614db0575081612d3d565b825115614dc05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be291906154d4565b828054614e0090615682565b90600052602060002090601f016020900481019282614e225760008555614e68565b82601f10614e3b57805160ff1916838001178555614e68565b82800160010185558215614e68579182015b82811115614e68578251825591602001919060010190614e4d565b50614e74929150614e78565b5090565b5b80821115614e745760008155600101614e79565b600067ffffffffffffffff831115614ea757614ea7615781565b614ed860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116016155c4565b9050828152838383011115614eec57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112614f14578182fd5b50813567ffffffffffffffff811115614f2b578182fd5b6020830191508360208260051b8501011115614f4657600080fd5b9250929050565b600060208284031215614f5e578081fd5b8135612d3d816157b0565b600060208284031215614f7a578081fd5b8151612d3d816157b0565b60008060408385031215614f97578081fd5b8235614fa2816157b0565b91506020830135614fb2816157b0565b809150509250929050565b600080600060608486031215614fd1578081fd5b8335614fdc816157b0565b92506020840135614fec816157b0565b929592945050506040919091013590565b60008060008060808587031215615012578081fd5b843561501d816157b0565b9350602085013561502d816157b0565b925060408501359150606085013567ffffffffffffffff81111561504f578182fd5b8501601f8101871361505f578182fd5b61506e87823560208401614e8d565b91505092959194509250565b6000806040838503121561508c578182fd5b8235615097816157b0565b91506020830135614fb2816157d2565b600080604083850312156150b9578182fd5b82356150c4816157b0565b946020939093013593505050565b600080602083850312156150e4578081fd5b823567ffffffffffffffff8111156150fa578182fd5b61510685828601614f03565b90969095509350505050565b60006020808385031215615124578182fd5b823567ffffffffffffffff8082111561513b578384fd5b818501915085601f83011261514e578384fd5b81358181111561516057615160615781565b8060051b91506151718483016155c4565b8181528481019084860184860187018a101561518b578788fd5b8795505b838610156151b957803594506151a4856157b0565b8483526001959095019491860191860161518f565b5098975050505050505050565b6000602082840312156151d7578081fd5b8151612d3d816157d2565b600080604083850312156151f4578182fd5b50508035926020909101359150565b600060208284031215615214578081fd5b8135612d3d816157e0565b600060208284031215615230578081fd5b8151612d3d816157e0565b60006020828403121561524c578081fd5b813567ffffffffffffffff811115615262578182fd5b8201601f81018413615272578182fd5b61163084823560208401614e8d565b600060208284031215615292578081fd5b5035919050565b6000602082840312156152aa578081fd5b5051919050565b600080604083850312156152c3578182fd5b823591506020830135614fb2816157b0565b6000806000606084860312156152e9578081fd5b833592506020840135614fec816157b0565b60008060008060608587031215615310578182fd5b8435935060208501359250604085013567ffffffffffffffff811115615334578283fd5b61534087828801614f03565b95989497509550505050565b60008060008060808587031215615361578182fd5b5050823594602084013594506040840135936060013592509050565b60008151808452615395816020860160208601615656565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516153d9818460208701615656565b9190910192915050565b600083516153f5818460208801615656565b835190830190615409818360208801615656565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152615451608083018461537d565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061162d606083018461537d565b6020808252825182820181905260009190848201906040850190845b818110156154c8578351835292840192918401916001016154ac565b50909695505050505050565b602081526000612d3d602083018461537d565b6000602080835281845483600182811c91508083168061550857607f831692505b85831081141561553f577f4e487b710000000000000000000000000000000000000000000000000000000087526022600452602487fd5b87860183815260200181801561555c576001811461558b576155b5565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008616825287820196506155b5565b60008b815260209020895b868110156155af57815484820152908501908901615596565b83019750505b50949998505050505050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561560b5761560b615781565b604052919050565b6000821982111561562657615626615723565b500190565b60008261563a5761563a615752565b500490565b60008282101561565157615651615723565b500390565b60005b83811015615671578181015183820152602001615659565b83811115612c2e5750506000910152565b600181811c9082168061569657607f821691505b602082108114156156d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561570857615708615723565b5060010190565b60008261571e5761571e615752565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146125e957600080fd5b80151581146125e957600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000811681146125e957600080fdfea26469706673582212200495bc6ed80174cb19cb981f89e01fc347e1f828ae9810bba3821e6b93de356c64736f6c6343000804003345786365656473206d6178696d756d206e756d626572206f662076616c696420"
};

// src/contracts/TrollNFT_VRFV2.ts
var TrollNFT_VRFV2 = class extends import_eth_wallet6.Contract {
  constructor(wallet, address) {
    super(wallet, address, TrollNFT_VRFV2_json_default.abi, TrollNFT_VRFV2_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol, params.baseURI, import_eth_wallet6.Utils.toString(params.cap), params.stakeToken, params.requireApproval, import_eth_wallet6.Utils.toString(params.minimumStake), import_eth_wallet6.Utils.toString(params.protocolFee), params.protocolFeeTo, [params.nftInfo.listValidNFTs, import_eth_wallet6.Utils.toString(params.nftInfo.maximumValidNFTs)], [params.vrfInfo.vrfAddresses, import_eth_wallet6.Utils.stringToBytes32(params.vrfInfo.vrfParams)]]);
  }
  parseAddStakesEvent(receipt) {
    return this.parseEvents(receipt, "AddStakes").map((e) => this.decodeAddStakesEvent(e));
  }
  decodeAddStakesEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      amountAdded: new import_eth_wallet6.BigNumber(result.amountAdded),
      newAmount: new import_eth_wallet6.BigNumber(result.newAmount),
      _event: event
    };
  }
  parseAddValidNFTEvent(receipt) {
    return this.parseEvents(receipt, "AddValidNFT").map((e) => this.decodeAddValidNFTEvent(e));
  }
  decodeAddValidNFTEvent(event) {
    let result = event.data;
    return {
      nft: result.nft,
      _event: event
    };
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      approved: result.approved,
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseApprovalForAllEvent(receipt) {
    return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
  }
  decodeApprovalForAllEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      operator: result.operator,
      approved: result.approved,
      _event: event
    };
  }
  parseApprovedStakerEvent(receipt) {
    return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
  }
  decodeApprovedStakerEvent(event) {
    let result = event.data;
    return {
      staker: result.staker,
      allow: result.allow,
      _event: event
    };
  }
  parseAttributeEvent(receipt) {
    return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
  }
  decodeAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      attribute: new import_eth_wallet6.BigNumber(result.attribute),
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseBaseURIEvent(receipt) {
    return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
  }
  decodeBaseURIEvent(event) {
    let result = event.data;
    return {
      baseURI: result.baseURI,
      _event: event
    };
  }
  parseCapEvent(receipt) {
    return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
  }
  decodeCapEvent(event) {
    let result = event.data;
    return {
      cap: new import_eth_wallet6.BigNumber(result.cap),
      _event: event
    };
  }
  parseCustomAttributeEvent(receipt) {
    return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
  }
  decodeCustomAttributeEvent(event) {
    let result = event.data;
    return {
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      attribute: new import_eth_wallet6.BigNumber(result.attribute),
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseEquipNFTEvent(receipt) {
    return this.parseEvents(receipt, "EquipNFT").map((e) => this.decodeEquipNFTEvent(e));
  }
  decodeEquipNFTEvent(event) {
    let result = event.data;
    return {
      trollId: new import_eth_wallet6.BigNumber(result.trollId),
      nft: result.nft,
      nftId: new import_eth_wallet6.BigNumber(result.nftId),
      _event: event
    };
  }
  parseMinimumStakeEvent(receipt) {
    return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
  }
  decodeMinimumStakeEvent(event) {
    let result = event.data;
    return {
      minimumStake: new import_eth_wallet6.BigNumber(result.minimumStake),
      _event: event
    };
  }
  parseProtocolFeeEvent(receipt) {
    return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
  }
  decodeProtocolFeeEvent(event) {
    let result = event.data;
    return {
      protocolFee: new import_eth_wallet6.BigNumber(result.protocolFee),
      protocolFeeTo: result.protocolFeeTo,
      _event: event
    };
  }
  parseStakeEvent(receipt) {
    return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
  }
  decodeStakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      amount: new import_eth_wallet6.BigNumber(result.amount),
      _event: event
    };
  }
  parseStakesApprovalEvent(receipt) {
    return this.parseEvents(receipt, "StakesApproval").map((e) => this.decodeStakesApprovalEvent(e));
  }
  decodeStakesApprovalEvent(event) {
    let result = event.data;
    return {
      fromTokenId: new import_eth_wallet6.BigNumber(result.fromTokenId),
      spender: result.spender,
      amount: new import_eth_wallet6.BigNumber(result.amount),
      _event: event
    };
  }
  parseStakesTransferEvent(receipt) {
    return this.parseEvents(receipt, "StakesTransfer").map((e) => this.decodeStakesTransferEvent(e));
  }
  decodeStakesTransferEvent(event) {
    let result = event.data;
    return {
      fromTokenId: new import_eth_wallet6.BigNumber(result.fromTokenId),
      toTokenId: new import_eth_wallet6.BigNumber(result.toTokenId),
      amount: new import_eth_wallet6.BigNumber(result.amount),
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnequipNFTEvent(receipt) {
    return this.parseEvents(receipt, "UnequipNFT").map((e) => this.decodeUnequipNFTEvent(e));
  }
  decodeUnequipNFTEvent(event) {
    let result = event.data;
    return {
      trollId: new import_eth_wallet6.BigNumber(result.trollId),
      nft: result.nft,
      nftId: new import_eth_wallet6.BigNumber(result.nftId),
      _event: event
    };
  }
  parseUnstakeEvent(receipt) {
    return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
  }
  decodeUnstakeEvent(event) {
    let result = event.data;
    return {
      who: result.who,
      tokenId: new import_eth_wallet6.BigNumber(result.tokenId),
      amount: new import_eth_wallet6.BigNumber(result.amount),
      _event: event
    };
  }
  assign() {
    let _attributes_call = async (param1) => {
      let result = await this.call("_attributes", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this._attributes = _attributes_call;
    let _customAttributes_call = async (param1) => {
      let result = await this.call("_customAttributes", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this._customAttributes = _customAttributes_call;
    let _stakesTransferAllowancesParams = (params) => [import_eth_wallet6.Utils.toString(params.param1), params.param2];
    let _stakesTransferAllowances_call = async (params) => {
      let result = await this.call("_stakesTransferAllowances", _stakesTransferAllowancesParams(params));
      return new import_eth_wallet6.BigNumber(result);
    };
    this._stakesTransferAllowances = _stakesTransferAllowances_call;
    let approvedStaker_call = async (param1) => {
      let result = await this.call("approvedStaker", [param1]);
      return result;
    };
    this.approvedStaker = approvedStaker_call;
    let balanceOf_call = async (owner) => {
      let result = await this.call("balanceOf", [owner]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let baseURI_call = async () => {
      let result = await this.call("baseURI");
      return result;
    };
    this.baseURI = baseURI_call;
    let cap_call = async () => {
      let result = await this.call("cap");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.cap = cap_call;
    let counter_call = async () => {
      let result = await this.call("counter");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.counter = counter_call;
    let creationDate_call = async (param1) => {
      let result = await this.call("creationDate", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.creationDate = creationDate_call;
    let destoryDate_call = async (param1) => {
      let result = await this.call("destoryDate", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.destoryDate = destoryDate_call;
    let extraStakes_call = async (param1) => {
      let result = await this.call("extraStakes", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.extraStakes = extraStakes_call;
    let getApproved_call = async (tokenId) => {
      let result = await this.call("getApproved", [import_eth_wallet6.Utils.toString(tokenId)]);
      return result;
    };
    this.getApproved = getApproved_call;
    let getAttributes1Params = (params) => [import_eth_wallet6.Utils.toString(params.tokenId), import_eth_wallet6.Utils.toString(params.base), import_eth_wallet6.Utils.toString(params.offset), import_eth_wallet6.Utils.toString(params.digits)];
    let getAttributes1_call = async (params) => {
      let result = await this.call("getAttributes1", getAttributes1Params(params));
      return new import_eth_wallet6.BigNumber(result);
    };
    this.getAttributes1 = getAttributes1_call;
    let getAttributes2Params = (params) => [import_eth_wallet6.Utils.toString(params.tokenId), import_eth_wallet6.Utils.toString(params.base), import_eth_wallet6.Utils.toString(params.digits)];
    let getAttributes2_call = async (params) => {
      let result = await this.call("getAttributes2", getAttributes2Params(params));
      return result.map((e) => new import_eth_wallet6.BigNumber(e));
    };
    this.getAttributes2 = getAttributes2_call;
    let isApprovedForAllParams = (params) => [params.owner, params.operator];
    let isApprovedForAll_call = async (params) => {
      let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
      return result;
    };
    this.isApprovedForAll = isApprovedForAll_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let isValidNFT_call = async (param1) => {
      let result = await this.call("isValidNFT", [param1]);
      return result;
    };
    this.isValidNFT = isValidNFT_call;
    let lastStakeDate_call = async (param1) => {
      let result = await this.call("lastStakeDate", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.lastStakeDate = lastStakeDate_call;
    let listValidNFTs_call = async (param1) => {
      let result = await this.call("listValidNFTs", [import_eth_wallet6.Utils.toString(param1)]);
      return result;
    };
    this.listValidNFTs = listValidNFTs_call;
    let maximumValidNFTs_call = async () => {
      let result = await this.call("maximumValidNFTs");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.maximumValidNFTs = maximumValidNFTs_call;
    let minimumStake_call = async () => {
      let result = await this.call("minimumStake");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.minimumStake = minimumStake_call;
    let minted_call = async (param1) => {
      let result = await this.call("minted", [param1]);
      return result;
    };
    this.minted = minted_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let nftsEquippedParams = (params) => [params.param1, import_eth_wallet6.Utils.toString(params.param2)];
    let nftsEquipped_call = async (params) => {
      let result = await this.call("nftsEquipped", nftsEquippedParams(params));
      return new import_eth_wallet6.BigNumber(result);
    };
    this.nftsEquipped = nftsEquipped_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let ownerOf_call = async (tokenId) => {
      let result = await this.call("ownerOf", [import_eth_wallet6.Utils.toString(tokenId)]);
      return result;
    };
    this.ownerOf = ownerOf_call;
    let protocolFee_call = async () => {
      let result = await this.call("protocolFee");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.protocolFee = protocolFee_call;
    let protocolFeeBalance_call = async () => {
      let result = await this.call("protocolFeeBalance");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.protocolFeeBalance = protocolFeeBalance_call;
    let protocolFeeTo_call = async () => {
      let result = await this.call("protocolFeeTo");
      return result;
    };
    this.protocolFeeTo = protocolFeeTo_call;
    let requireApproval_call = async () => {
      let result = await this.call("requireApproval");
      return result;
    };
    this.requireApproval = requireApproval_call;
    let stakeToken_call = async () => {
      let result = await this.call("stakeToken");
      return result;
    };
    this.stakeToken = stakeToken_call;
    let stakingBalance_call = async (param1) => {
      let result = await this.call("stakingBalance", [import_eth_wallet6.Utils.toString(param1)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.stakingBalance = stakingBalance_call;
    let supportsInterface_call = async (interfaceId) => {
      let result = await this.call("supportsInterface", [interfaceId]);
      return result;
    };
    this.supportsInterface = supportsInterface_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let tokenByIndex_call = async (index) => {
      let result = await this.call("tokenByIndex", [import_eth_wallet6.Utils.toString(index)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.tokenByIndex = tokenByIndex_call;
    let tokenOfOwnerByIndexParams = (params) => [params.owner, import_eth_wallet6.Utils.toString(params.index)];
    let tokenOfOwnerByIndex_call = async (params) => {
      let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
      return new import_eth_wallet6.BigNumber(result);
    };
    this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
    let tokenURI_call = async (tokenId) => {
      let result = await this.call("tokenURI", [import_eth_wallet6.Utils.toString(tokenId)]);
      return result;
    };
    this.tokenURI = tokenURI_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let trollOwnedNFTsParams = (params) => [import_eth_wallet6.Utils.toString(params.param1), params.param2];
    let trollOwnedNFTs_call = async (params) => {
      let result = await this.call("trollOwnedNFTs", trollOwnedNFTsParams(params));
      return new import_eth_wallet6.BigNumber(result);
    };
    this.trollOwnedNFTs = trollOwnedNFTs_call;
    let validNFTsLength_call = async () => {
      let result = await this.call("validNFTsLength");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.validNFTsLength = validNFTsLength_call;
    let addStakesParams = (params) => [import_eth_wallet6.Utils.toString(params.tokenId), import_eth_wallet6.Utils.toString(params.amount)];
    let addStakes_send = async (params) => {
      let result = await this.send("addStakes", addStakesParams(params));
      return result;
    };
    let addStakes_call = async (params) => {
      let result = await this.call("addStakes", addStakesParams(params));
      return;
    };
    this.addStakes = Object.assign(addStakes_send, {
      call: addStakes_call
    });
    let addValidNFTs_send = async (nfts) => {
      let result = await this.send("addValidNFTs", [nfts]);
      return result;
    };
    let addValidNFTs_call = async (nfts) => {
      let result = await this.call("addValidNFTs", [nfts]);
      return;
    };
    this.addValidNFTs = Object.assign(addValidNFTs_send, {
      call: addValidNFTs_call
    });
    let approveParams = (params) => [params.to, import_eth_wallet6.Utils.toString(params.tokenId)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let batchApprove_send = async (stakers) => {
      let result = await this.send("batchApprove", [stakers]);
      return result;
    };
    let batchApprove_call = async (stakers) => {
      let result = await this.call("batchApprove", [stakers]);
      return;
    };
    this.batchApprove = Object.assign(batchApprove_send, {
      call: batchApprove_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let equipNFTParams = (params) => [import_eth_wallet6.Utils.toString(params.trollId), params.nft, import_eth_wallet6.Utils.toString(params.nftId)];
    let equipNFT_send = async (params) => {
      let result = await this.send("equipNFT", equipNFTParams(params));
      return result;
    };
    let equipNFT_call = async (params) => {
      let result = await this.call("equipNFT", equipNFTParams(params));
      return;
    };
    this.equipNFT = Object.assign(equipNFT_send, {
      call: equipNFT_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let rawFulfillRandomnessParams = (params) => [import_eth_wallet6.Utils.stringToBytes32(params.requestId), import_eth_wallet6.Utils.toString(params.randomness)];
    let rawFulfillRandomness_send = async (params) => {
      let result = await this.send("rawFulfillRandomness", rawFulfillRandomnessParams(params));
      return result;
    };
    let rawFulfillRandomness_call = async (params) => {
      let result = await this.call("rawFulfillRandomness", rawFulfillRandomnessParams(params));
      return;
    };
    this.rawFulfillRandomness = Object.assign(rawFulfillRandomness_send, {
      call: rawFulfillRandomness_call
    });
    let safeTransferFromParams = (params) => [params.from, params.to, import_eth_wallet6.Utils.toString(params.tokenId)];
    let safeTransferFrom_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
      call: safeTransferFrom_call
    });
    let safeTransferFrom_1Params = (params) => [params.from, params.to, import_eth_wallet6.Utils.toString(params.tokenId), import_eth_wallet6.Utils.stringToBytes(params.data)];
    let safeTransferFrom_1_send = async (params) => {
      let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
      return result;
    };
    let safeTransferFrom_1_call = async (params) => {
      let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
      return;
    };
    this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
      call: safeTransferFrom_1_call
    });
    let setApprovalForAllParams = (params) => [params.operator, params.approved];
    let setApprovalForAll_send = async (params) => {
      let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
      return result;
    };
    let setApprovalForAll_call = async (params) => {
      let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
      return;
    };
    this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
      call: setApprovalForAll_call
    });
    let setApprovedStakerParams = (params) => [params.staker, params.allow];
    let setApprovedStaker_send = async (params) => {
      let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
      return result;
    };
    let setApprovedStaker_call = async (params) => {
      let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
      return;
    };
    this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
      call: setApprovedStaker_call
    });
    let setBaseURI_send = async (baseURI) => {
      let result = await this.send("setBaseURI", [baseURI]);
      return result;
    };
    let setBaseURI_call = async (baseURI) => {
      let result = await this.call("setBaseURI", [baseURI]);
      return;
    };
    this.setBaseURI = Object.assign(setBaseURI_send, {
      call: setBaseURI_call
    });
    let setCap_send = async (cap) => {
      let result = await this.send("setCap", [import_eth_wallet6.Utils.toString(cap)]);
      return result;
    };
    let setCap_call = async (cap) => {
      let result = await this.call("setCap", [import_eth_wallet6.Utils.toString(cap)]);
      return;
    };
    this.setCap = Object.assign(setCap_send, {
      call: setCap_call
    });
    let setCustomAttributeParams = (params) => [import_eth_wallet6.Utils.toString(params.tokenId), import_eth_wallet6.Utils.toString(params.attribute)];
    let setCustomAttribute_send = async (params) => {
      let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
      return result;
    };
    let setCustomAttribute_call = async (params) => {
      let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
      return;
    };
    this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
      call: setCustomAttribute_call
    });
    let setMinimumStake_send = async (minimumStake) => {
      let result = await this.send("setMinimumStake", [import_eth_wallet6.Utils.toString(minimumStake)]);
      return result;
    };
    let setMinimumStake_call = async (minimumStake) => {
      let result = await this.call("setMinimumStake", [import_eth_wallet6.Utils.toString(minimumStake)]);
      return;
    };
    this.setMinimumStake = Object.assign(setMinimumStake_send, {
      call: setMinimumStake_call
    });
    let setProtocolFeeParams = (params) => [import_eth_wallet6.Utils.toString(params.protocolFee), params.protocolFeeTo];
    let setProtocolFee_send = async (params) => {
      let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
      return result;
    };
    let setProtocolFee_call = async (params) => {
      let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
      return;
    };
    this.setProtocolFee = Object.assign(setProtocolFee_send, {
      call: setProtocolFee_call
    });
    let setVrfParamsParams = (params) => [import_eth_wallet6.Utils.stringToBytes32(params.vrfKeyHash), import_eth_wallet6.Utils.toString(params.vrfFee)];
    let setVrfParams_send = async (params) => {
      let result = await this.send("setVrfParams", setVrfParamsParams(params));
      return result;
    };
    let setVrfParams_call = async (params) => {
      let result = await this.call("setVrfParams", setVrfParamsParams(params));
      return;
    };
    this.setVrfParams = Object.assign(setVrfParams_send, {
      call: setVrfParams_call
    });
    let stake_send = async (amount) => {
      let result = await this.send("stake", [import_eth_wallet6.Utils.toString(amount)]);
      return result;
    };
    let stake_call = async (amount) => {
      let result = await this.call("stake", [import_eth_wallet6.Utils.toString(amount)]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.stake = Object.assign(stake_send, {
      call: stake_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferFromParams = (params) => [params.from, params.to, import_eth_wallet6.Utils.toString(params.tokenId)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let transferProtocolFee_send = async () => {
      let result = await this.send("transferProtocolFee");
      return result;
    };
    let transferProtocolFee_call = async () => {
      let result = await this.call("transferProtocolFee");
      return;
    };
    this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
      call: transferProtocolFee_call
    });
    let unequipNFTParams = (params) => [import_eth_wallet6.Utils.toString(params.trollId), params.nft, import_eth_wallet6.Utils.toString(params.nftId)];
    let unequipNFT_send = async (params) => {
      let result = await this.send("unequipNFT", unequipNFTParams(params));
      return result;
    };
    let unequipNFT_call = async (params) => {
      let result = await this.call("unequipNFT", unequipNFTParams(params));
      return;
    };
    this.unequipNFT = Object.assign(unequipNFT_send, {
      call: unequipNFT_call
    });
    let unstake_send = async (tokenId) => {
      let result = await this.send("unstake", [import_eth_wallet6.Utils.toString(tokenId)]);
      return result;
    };
    let unstake_call = async (tokenId) => {
      let result = await this.call("unstake", [import_eth_wallet6.Utils.toString(tokenId)]);
      return;
    };
    this.unstake = Object.assign(unstake_send, {
      call: unstake_call
    });
    let withdrawLink_send = async (amount) => {
      let result = await this.send("withdrawLink", [import_eth_wallet6.Utils.toString(amount)]);
      return result;
    };
    let withdrawLink_call = async (amount) => {
      let result = await this.call("withdrawLink", [import_eth_wallet6.Utils.toString(amount)]);
      return;
    };
    this.withdrawLink = Object.assign(withdrawLink_send, {
      call: withdrawLink_call
    });
  }
};

});define("@ijstech/cross-chain-bridge", (require, exports)=>{
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  Backer: () => Backer,
  BridgeVault: () => BridgeVault,
  BridgeVaultTrollRegistry: () => BridgeVaultTrollRegistry,
  Contracts: () => contracts_exports,
  CrossChainMulti: () => CrossChainMulti,
  CrossChainSingle: () => CrossChainSingle,
  GeneralTroll: () => GeneralTroll,
  LiquidityProvider: () => LiquidityProvider,
  MainChain: () => MainChain,
  MainChainDefaultDeploymentOptions: () => DefaultDeploymentOptions,
  MainChainVoting: () => MainChainVoting,
  Owner: () => Owner,
  SideChain: () => SideChain,
  SideChainDefaultDeploymentOptions: () => DefaultDeploymentOptions2,
  SideChainVoting: () => SideChainVoting,
  Trader: () => Trader,
  Troll: () => Troll,
  buildTokenPairByAddress: () => buildTokenPairByAddress,
  buildTokenPairBySymbol: () => buildTokenPairBySymbol,
  deploy: () => deploy3,
  deployMainChain: () => deploy,
  deploySideChain: () => deploy2,
  deployStakingOnly: () => deployStakingOnly,
  getCrossChain: () => getCrossChain,
  initChainRegistry: () => initChainRegistry,
  initChainRegistryByAddress: () => initChainRegistryByAddress
});

// src/contracts/index.ts
var contracts_exports = {};
__export(contracts_exports, {
  Authorization: () => Authorization,
  ERC1967Proxy: () => ERC1967Proxy,
  ERC20: () => ERC20,
  ERC721Holder: () => ERC721Holder,
  MOCK_TrollRegistry: () => MOCK_TrollRegistry,
  MintableToken: () => MintableToken,
  OSWAP_BridgeVault: () => OSWAP_BridgeVault,
  OSWAP_BridgeVaultTrollRegistry: () => OSWAP_BridgeVaultTrollRegistry,
  OSWAP_ChainRegistry: () => OSWAP_ChainRegistry,
  OSWAP_ChainRegistryExecutor: () => OSWAP_ChainRegistryExecutor,
  OSWAP_ConfigStore: () => OSWAP_ConfigStore,
  OSWAP_ConfigStoreTradeVault: () => OSWAP_ConfigStoreTradeVault,
  OSWAP_ContractProxy: () => OSWAP_ContractProxy,
  OSWAP_MainChainTrollRegistry: () => OSWAP_MainChainTrollRegistry,
  OSWAP_MainChainVotingExecutor: () => OSWAP_MainChainVotingExecutor,
  OSWAP_RouterVaultWrapper: () => OSWAP_RouterVaultWrapper,
  OSWAP_SideChainTrollRegistry: () => OSWAP_SideChainTrollRegistry,
  OSWAP_SideChainVotingExecutor: () => OSWAP_SideChainVotingExecutor,
  OSWAP_VotingContract: () => OSWAP_VotingContract,
  OSWAP_VotingManager: () => OSWAP_VotingManager,
  OSWAP_VotingRegistry: () => OSWAP_VotingRegistry
});

// src/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.ts
var import_eth_wallet = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.json.ts
var ERC1967Proxy_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_logic", "type": "address" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "stateMutability": "payable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "previousAdmin", "type": "address" }, { "indexed": false, "internalType": "address", "name": "newAdmin", "type": "address" }], "name": "AdminChanged", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "beacon", "type": "address" }], "name": "BeaconUpgraded", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "implementation", "type": "address" }], "name": "Upgraded", "type": "event" },
    { "stateMutability": "payable", "type": "fallback" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "6080604052604051610810380380610810833981016040819052610022916102f5565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610412565b6000805160206107c98339815191521461006957610069610463565b6100758282600061007c565b505061048f565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061011783836040518060600160405280602781526020016107e9602791396101de565b9392505050565b610131816102b360201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd6000805160206107c983398151915260001b6102b960201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060833b61023d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b03168560405161025891906103c3565b600060405180830381855af49150503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b5090925090506102a98282866102bc565b9695505050505050565b3b151590565b90565b606083156102cb575081610117565b8251156102db5782518084602001fd5b8160405162461bcd60e51b815260040161018f91906103df565b6000806040838503121561030857600080fd5b82516001600160a01b038116811461031f57600080fd5b60208401519092506001600160401b038082111561033c57600080fd5b818501915085601f83011261035057600080fd5b81518181111561036257610362610479565b604051601f8201601f19908116603f0116810190838211818310171561038a5761038a610479565b816040528281528860208487010111156103a357600080fd5b6103b4836020830160208801610437565b80955050505050509250929050565b600082516103d5818460208701610437565b9190910192915050565b60208152600082518060208401526103fe816040850160208701610437565b601f01601f19169190910160400192915050565b60008282101561043257634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561045257818101518382015260200161043a565b838111156100ab5750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61032b8061049e6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b6100a3565b565b606061004e83836040518060600160405280602781526020016102cf602791396100c7565b9392505050565b3b151590565b90565b600061009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100c2573d6000f35b3d6000fd5b6060833b61015c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101849190610231565b600060405180830381855af49150503d80600081146101bf576040519150601f19603f3d011682016040523d82523d6000602084013e6101c4565b606091505b50915091506101d48282866101de565b9695505050505050565b606083156101ed57508161004e565b8251156101fd5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610153919061024d565b6000825161024381846020870161029e565b9190910192915050565b602081526000825180602084015261026c81604085016020870161029e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b838110156102b95781810151838201526020016102a1565b838111156102c8576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205e82e06267113368ac5e81850eec016b82ffeb4d25a7f02c1821132b8760d32464736f6c63430008060033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
};

// src/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.ts
var ERC1967Proxy = class extends import_eth_wallet.Contract {
  constructor(wallet, address) {
    super(wallet, address, ERC1967Proxy_json_default.abi, ERC1967Proxy_json_default.bytecode);
    this.assign();
  }
  deploy(params, _value) {
    return this.__deploy([params.logic, import_eth_wallet.Utils.stringToBytes(params.data)], { value: _value });
  }
  parseAdminChangedEvent(receipt) {
    return this.parseEvents(receipt, "AdminChanged").map((e) => this.decodeAdminChangedEvent(e));
  }
  decodeAdminChangedEvent(event) {
    let result = event.data;
    return {
      previousAdmin: result.previousAdmin,
      newAdmin: result.newAdmin,
      _event: event
    };
  }
  parseBeaconUpgradedEvent(receipt) {
    return this.parseEvents(receipt, "BeaconUpgraded").map((e) => this.decodeBeaconUpgradedEvent(e));
  }
  decodeBeaconUpgradedEvent(event) {
    let result = event.data;
    return {
      beacon: result.beacon,
      _event: event
    };
  }
  parseUpgradedEvent(receipt) {
    return this.parseEvents(receipt, "Upgraded").map((e) => this.decodeUpgradedEvent(e));
  }
  decodeUpgradedEvent(event) {
    let result = event.data;
    return {
      implementation: result.implementation,
      _event: event
    };
  }
  assign() {
  }
};

// src/contracts/@openzeppelin/contracts/token/ERC20/ERC20.ts
var import_eth_wallet2 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/@openzeppelin/contracts/token/ERC20/ERC20.json.ts
var ERC20_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60806040523480156200001157600080fd5b5060405162000de938038062000de98339810160408190526200003491620001c5565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b82805462000076906200022f565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200012057600080fd5b81516001600160401b03808211156200013d576200013d6200026c565b604051601f8301601f19908116603f011681019082821181831017156200016857620001686200026c565b816040528381526020925086838588010111156200018557600080fd5b600091505b83821015620001a957858201830151818301840152908201906200018a565b83821115620001bb5760008385830101525b9695505050505050565b60008060408385031215620001d957600080fd5b82516001600160401b0380821115620001f157600080fd5b620001ff868387016200010e565b935060208501519150808211156200021657600080fd5b5062000225858286016200010e565b9150509250929050565b600181811c908216806200024457607f821691505b602082108114156200026657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610b5780620002926000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610a1b565b60405180910390f35b6100ff6100fa3660046109f1565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109b5565b6102a8565b604051601281526020016100e3565b6100ff6101513660046109f1565b610393565b610113610164366004610960565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d66103dc565b6100ff6101a23660046109f1565b6103eb565b6100ff6101b53660046109f1565b6104c3565b6101136101c8366004610982565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610acd565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610acd565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b600061029f3384846104d0565b50600192915050565b60006102b5848484610683565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602090815260408083203384529091529020548281101561037b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61038885338584036104d0565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161029f9185906103d7908690610a8e565b6104d0565b60606004805461020f90610acd565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828110156104ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610372565b6104b933858584036104d0565b5060019392505050565b600061029f338484610683565b73ffffffffffffffffffffffffffffffffffffffff8316610572576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff8216610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff82166107c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815290812080548492906108c3908490610a8e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092991815260200190565b60405180910390a350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461095b57600080fd5b919050565b60006020828403121561097257600080fd5b61097b82610937565b9392505050565b6000806040838503121561099557600080fd5b61099e83610937565b91506109ac60208401610937565b90509250929050565b6000806000606084860312156109ca57600080fd5b6109d384610937565b92506109e160208501610937565b9150604084013590509250925092565b60008060408385031215610a0457600080fd5b610a0d83610937565b946020939093013593505050565b600060208083528351808285015260005b81811015610a4857858101830151858201604001528201610a2c565b81811115610a5a576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610ac8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600181811c90821680610ae157607f821691505b60208210811415610b1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122017723ba9d5ddac57dfd4d7f65a4b3bbc8fbff767240352cc4ee8441fd418477464736f6c63430008060033"
};

// src/contracts/@openzeppelin/contracts/token/ERC20/ERC20.ts
var ERC20 = class extends import_eth_wallet2.Contract {
  constructor(wallet, address) {
    super(wallet, address, ERC20_json_default.abi, ERC20_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol]);
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet2.BigNumber(result.value),
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet2.BigNumber(result.value),
      _event: event
    };
  }
  assign() {
    let allowanceParams = (params) => [params.owner, params.spender];
    let allowance_call = async (params) => {
      let result = await this.call("allowance", allowanceParams(params));
      return new import_eth_wallet2.BigNumber(result);
    };
    this.allowance = allowance_call;
    let balanceOf_call = async (account) => {
      let result = await this.call("balanceOf", [account]);
      return new import_eth_wallet2.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let decimals_call = async () => {
      let result = await this.call("decimals");
      return new import_eth_wallet2.BigNumber(result);
    };
    this.decimals = decimals_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet2.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let approveParams = (params) => [params.spender, import_eth_wallet2.Utils.toString(params.amount)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return result;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let decreaseAllowanceParams = (params) => [params.spender, import_eth_wallet2.Utils.toString(params.subtractedValue)];
    let decreaseAllowance_send = async (params) => {
      let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
      return result;
    };
    let decreaseAllowance_call = async (params) => {
      let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
      return result;
    };
    this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
      call: decreaseAllowance_call
    });
    let increaseAllowanceParams = (params) => [params.spender, import_eth_wallet2.Utils.toString(params.addedValue)];
    let increaseAllowance_send = async (params) => {
      let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
      return result;
    };
    let increaseAllowance_call = async (params) => {
      let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
      return result;
    };
    this.increaseAllowance = Object.assign(increaseAllowance_send, {
      call: increaseAllowance_call
    });
    let transferParams = (params) => [params.recipient, import_eth_wallet2.Utils.toString(params.amount)];
    let transfer_send = async (params) => {
      let result = await this.send("transfer", transferParams(params));
      return result;
    };
    let transfer_call = async (params) => {
      let result = await this.call("transfer", transferParams(params));
      return result;
    };
    this.transfer = Object.assign(transfer_send, {
      call: transfer_call
    });
    let transferFromParams = (params) => [params.sender, params.recipient, import_eth_wallet2.Utils.toString(params.amount)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return result;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
  }
};

// src/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.ts
var import_eth_wallet3 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.json.ts
var ERC721Holder_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50610224806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61006761003e3660046100c5565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b919050565b600080600080608085870312156100db57600080fd5b6100e48561009c565b93506100f26020860161009c565b925060408501359150606085013567ffffffffffffffff8082111561011657600080fd5b818701915087601f83011261012a57600080fd5b81358181111561013c5761013c6101bf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610182576101826101bf565b816040528281528a602084870101111561019b57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212207f1085253fbc415f1d5bb612ddbc49ef949ae74620cf131a5dad9d03ed3c765b64736f6c63430008060033"
};

// src/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.ts
var ERC721Holder = class extends import_eth_wallet3.Contract {
  constructor(wallet, address) {
    super(wallet, address, ERC721Holder_json_default.abi, ERC721Holder_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this.__deploy();
  }
  assign() {
    let onERC721ReceivedParams = (params) => [params.param1, params.param2, import_eth_wallet3.Utils.toString(params.param3), import_eth_wallet3.Utils.stringToBytes(params.param4)];
    let onERC721Received_send = async (params) => {
      let result = await this.send("onERC721Received", onERC721ReceivedParams(params));
      return result;
    };
    let onERC721Received_call = async (params) => {
      let result = await this.call("onERC721Received", onERC721ReceivedParams(params));
      return result;
    };
    this.onERC721Received = Object.assign(onERC721Received_send, {
      call: onERC721Received_call
    });
  }
};

// src/contracts/Authorization.ts
var import_eth_wallet4 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/Authorization.json.ts
var Authorization_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556104e4806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c52a7f11161005b5780639c52a7f114610109578063a2f55ae51461011c578063d4ee1d901461012f578063f2fde38b1461014f57600080fd5b80633fd8cc4e1461008257806360536172146100ba5780638da5cb5b146100c4575b600080fd5b6100a5610090366004610471565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100c2610162565b005b6000546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b1565b6100c2610117366004610471565b610290565b6100c261012a366004610471565b610337565b6001546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b6100c261015d366004610471565b6103da565b60015473ffffffffffffffffffffffffffffffffffffffff16331461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e0000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461035b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf5910161032c565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103fe57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b9060200161032c565b60006020828403121561048357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a757600080fd5b939250505056fea26469706673582212200df0fe74974461b12bd831612c9ccf2682efc6fd66a99e14372494849409b53564736f6c63430008060033"
};

// src/contracts/Authorization.ts
var Authorization = class extends import_eth_wallet4.Contract {
  constructor(wallet, address) {
    super(wallet, address, Authorization_json_default.abi, Authorization_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this.__deploy();
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  assign() {
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
  }
};

// src/contracts/MOCK_TrollRegistry.ts
var import_eth_wallet5 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/MOCK_TrollRegistry.json.ts
var MOCK_TrollRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract IERC20", "name": "_govToken", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "troll", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "isSuperTroll", "type": "bool" }], "name": "AddTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "DelistTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockGeneralTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockSuperTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "RemoveTroll", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Resume", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newVotingExecutor", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "isActive", "type": "bool" }], "name": "SetVotingExecutor", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }], "name": "Shutdown", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "UnlockGeneralTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "unlock", "type": "bool" }, { "indexed": false, "internalType": "address", "name": "bridgeVault", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "penalty", "type": "uint256" }], "name": "UnlockSuperTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "oldTroll", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newTroll", "type": "address" }], "name": "UpdateTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrollRegistry", "type": "address" }], "name": "Upgrade", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_VotingManager", "name": "newVotingManager", "type": "address" }], "name": "UpgradeVotingManager", "type": "event" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "addTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "generalTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newTrollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newVotingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "removeTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "resume", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "shutdownByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "shutdownByVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "superTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "trollProfileInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollProfiles", "outputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum MOCK_TrollRegistry.TrollType", "name": "trollType", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "unlock", "type": "bool" }, { "internalType": "address[]", "name": "vaultRegistry", "type": "address[]" }, { "internalType": "uint256[]", "name": "penalty", "type": "uint256[]" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "updateTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeTrollRegistry", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeTrollRegistryByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgradeVotingManager", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgradeVotingManagerByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "usedNonce", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c06040523060601b60a0523480156200001857600080fd5b5060405162002b2638038062002b268339810160408190526200003b91620002b5565b600080546001600160a01b0319163390811782556001600160601b0319606084901b1660805280825260026020526040909120805460ff191660019081179091556200008891906200008f565b50620002fd565b6001600160a01b038216620000eb5760405162461bcd60e51b815260206004820152601760248201527f4f535741503a20496e76616c6964206578656375746f7200000000000000000060448201526064015b60405180910390fd5b600a5415806200013f57506001600160a01b0382166000818152600b6020526040902054600a80549091908110620001275762000127620002e7565b6000918252602090912001546001600160a01b031614155b15620001a757600a80546001600160a01b0384166000818152600b60205260408120839055600183018455929092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b031916909117905562000218565b6001600160a01b0382166000908152600b6020526040902054620002185760405162461bcd60e51b815260206004820152602160248201527f4f535741503a2063616e6e6f74207265736574206d61696e206578656375746f6044820152603960f91b6064820152608401620000e2565b6001600160a01b0382166000908152600c60205260409020805460ff19168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b6001600160601b031916826200027a5760006200027d565b60015b604080516d3b37ba34b733a2bc32b1baba37b960911b8152602081019390935260ff9091169082015260600160405180910390a15050565b600060208284031215620002c857600080fd5b81516001600160a01b0381168114620002e057600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b60805160601c60a05160601c6127fd6200032960003960006103960152600061032401526127fd6000f3fe608060405234801561001057600080fd5b50600436106102e85760003560e01c80638da5cb5b11610191578063bba588ca116100e3578063d81fa48711610097578063f2fde38b11610071578063f2fde38b146106a4578063f6f04d7f146106b7578063f7b1bf7e146106d757600080fd5b8063d81fa48714610473578063e19888df14610630578063ef9414fc1461064357600080fd5b8063c10ebe4b116100c8578063c10ebe4b146105ea578063c20ecd1f146105fd578063d4ee1d901461061057600080fd5b8063bba588ca146105b7578063bc69b032146105d757600080fd5b80639723fb6d11610145578063a2f55ae51161011f578063a2f55ae514610579578063a3818b3b1461058c578063b8624127146105af57600080fd5b80639723fb6d1461051e5780639c52a7f1146105415780639d69dc4e1461055457600080fd5b8063919270501161017657806391927050146104ef5780639527afb41461050257806396e9c5601461050b57600080fd5b80638da5cb5b146104bc5780638f409ae9146104dc57600080fd5b80635a8124651161024a57806364efe63f116101fe57806378a1a9fa116101d857806378a1a9fa1461049957806382ad7119146104a1578063842c4835146104b457600080fd5b806364efe63f1461037e57806372ecb9d014610473578063788ddbcb1461048657600080fd5b8063605361721161022f578063605361721461045057806364305328146104585780636468fca11461046b57600080fd5b80635a812465146104325780635c975abb1461044557600080fd5b806330167bec116102a15780633fd8cc4e116102865780633fd8cc4e146103e6578063414016d814610409578063568621751461041257600080fd5b806330167bec146103915780633820a526146103b857600080fd5b806305268cff116102d257806305268cff1461031f57806309a34aa41461036b578063290b7e781461037e57600080fd5b80622e6074146102ed578063046f7da214610315575b600080fd5b6103006102fb366004612626565b6106ea565b60405190151581526020015b60405180910390f35b61031d610784565b005b6103467f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161030c565b6103006103793660046123cc565b61086c565b61031d61038c3660046123af565b6108a4565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6103d86103c63660046123af565b60056020526000908152604090205481565b60405190815260200161030c565b6103006103f43660046123af565b60026020526000908152604090205460ff1681565b6103d860065481565b600d546103469073ffffffffffffffffffffffffffffffffffffffff1681565b61031d6104403660046123af565b6108d4565b60035460ff16610300565b61031d610a46565b61031d61046636600461260d565b610b70565b61031d610d17565b61031d6104813660046123af565b610e7b565b61031d6104943660046123cc565b610ea8565b600a546103d8565b6103006104af3660046123cc565b610eda565b61031d610f0a565b6000546103469073ffffffffffffffffffffffffffffffffffffffff1681565b61031d6104ea36600461259f565b6110af565b6103466104fd36600461260d565b6112b4565b6103d860075481565b61031d610519366004612401565b6112eb565b61030061052c36600461260d565b60086020526000908152604090205460ff1681565b61031d61054f3660046123af565b6115ec565b60035461034690610100900473ffffffffffffffffffffffffffffffffffffffff1681565b61031d6105873660046123af565b61168c565b61030061059a3660046123af565b600c6020526000908152604090205460ff1681565b61031d61172f565b6009546103469073ffffffffffffffffffffffffffffffffffffffff1681565b6103006105e5366004612626565b611753565b61031d6105f836600461259f565b6117a2565b61031d61060b366004612479565b6118dc565b6001546103469073ffffffffffffffffffffffffffffffffffffffff1681565b61031d61063e3660046124e0565b611a28565b61069661065136600461260d565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff1682565b60405161030c929190612649565b61031d6106b23660046123af565b611d21565b6103d86106c53660046123af565b600b6020526000908152604090205481565b61031d6106e536600461260d565b611db8565b6000600160008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561072b5761072b612747565b148061077d575060035b60008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561077257610772612747565b14801561077d575081155b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a857600080fd5b60035460ff16610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f54205041555345442100000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040517f490d6d11e278f168be9be39e46297f72ea877136d5bccad9cf4993e63a29568f90600090a1565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081205461089c8184611753565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108c857600080fd5b6108d181611f57565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c206164647265737300000000000000000000000000000000000000006044820152606401610810565b600354610100900473ffffffffffffffffffffffffffffffffffffffff16156109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616c7265616479207365740000000000000000000000000000000000000000006044820152606401610810565b6003805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610aed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610810565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60008181526004602052604090206002815474010000000000000000000000000000000000000000900460ff166004811115610bae57610bae612747565b14610c15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6e6f7420612067656e6572616c2074726f6c6c000000000000000000000000006044820152606401610810565b610c20336000610eda565b80610c3a57503360009081526002602052604090205460ff165b610ca0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f742066726f6d2073757065722074726f6c6c0000000000000000000000006044820152606401610810565b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167404000000000000000000000000000000000000000017815560405133815282907f7f685450453775986a82112c4cad63fd255a97ece09a2fca2bbca02c420fb748906020015b60405180910390a25050565b3360009081526002602052604090205460ff16610db6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610810565b60035460ff1615610e23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610810565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e9f57600080fd5b6108d181611fca565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ecc57600080fd5b610ed6828261203d565b5050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081205461089c81846106ea565b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef0609516040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7457600080fd5b505afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac91906125f0565b905073ffffffffffffffffffffffffffffffffffffffff811661102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f72650000000000000000000000006044820152606401610810565b600380547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8481168202929092179283905560405192041681527f6fa6ee9ec7808d2a9699505042862d79597c4068938b960a4a18d584a2aa3eea906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110d357600080fd5b600082815260046020526040812090815474010000000000000000000000000000000000000000900460ff16600481111561111057611110612747565b1415611178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420612076616c69642074726f6c6c0000000000000000000000000000006044820152606401610810565b60405183907f3146e37097e6cad53dc6803fe565afb42bd0fa6d1c8f2770885428ba293f672290600090a2805473ffffffffffffffffffffffffffffffffffffffff16600090815260056020908152604080832083905585835260049182905290912080547fffffffffffffffffffffff00000000000000000000000000000000000000000016908190556001917401000000000000000000000000000000000000000090910460ff169081111561123257611232612747565b14156112525760068054906000611248836126aa565b91905055506112ad565b600160008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561129157611291612747565b14156112ad57600780549060006112a7836126aa565b91905055505b5050505050565b600a81815481106112c457600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461130f57600080fd5b600084815260046020819052604082205474010000000000000000000000000000000000000000900460ff169081111561134b5761134b612747565b146113b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f616c7265616479206164646564000000000000000000000000000000000000006044820152606401610810565b60405180604001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001836113e55760026113e8565b60015b60048111156113f9576113f9612747565b90526000858152600460208181526040909220835181547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff9092169182178355938501519193919284927fffffffffffffffffffffff0000000000000000000000000000000000000000001690911790740100000000000000000000000000000000000000009084908111156114a8576114a8612747565b0217905550505073ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260409020849055600160008581526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561151657611516612747565b1415611536576006805490600061152c836126df565b9190505550611591565b600160008581526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561157557611575612747565b1415611591576007805490600061158b836126df565b91905055505b838373ffffffffffffffffffffffffffffffffffffffff167f8c9d891ac7160986ec470eacfe13fdd4e04741d07abc6e880cd9cdb4d1e019cb846040516115dc911515815260200190565b60405180910390a3505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461161057600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491016110a4565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116b057600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf591016110a4565b60005473ffffffffffffffffffffffffffffffffffffffff163314610db657600080fd5b6000600260008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561179457611794612747565b148061077d57506004610735565b60005473ffffffffffffffffffffffffffffffffffffffff1633146117c657600080fd5b600082815260046020819052604090912090815474010000000000000000000000000000000000000000900460ff16600481111561180657611806612747565b1461186d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f7420696e206c6f636b6564207374617475730000000000000000000000006044820152606401610810565b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017815560405183907f5190d96f5b35d80be130fe8fdbbe793dcb5b7df2507981d58b0787851c64186c90600090a25050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461190057600080fd5b60008381526004602052604090205473ffffffffffffffffffffffffffffffffffffffff168061198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f7420657869737473000000000000000000000000000000000000000000006044820152606401610810565b73ffffffffffffffffffffffffffffffffffffffff81811660008181526005602081815260408084208490558984526004825280842080547fffffffffffffffffffffffff000000000000000000000000000000000000000016968a1696871790558584529190528082208890555187917fa809954178f86ac2228f0b080243af1f1e8fa8931fde712147cc69b266967cc191a4505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611a4c57600080fd5b60008781526004602052604090206003815474010000000000000000000000000000000000000000900460ff166004811115611a8a57611a8a612747565b14611af1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f7420696e206c6f636b6564207374617475730000000000000000000000006044820152606401610810565b84838114611b5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606401610810565b8715611b9f5781547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001782555b60005b81811015611d1357878782818110611bbc57611bbc612776565b9050602002016020810190611bd191906123af565b73ffffffffffffffffffffffffffffffffffffffff1663b5155a1b8b888885818110611bff57611bff612776565b905060200201356040518363ffffffff1660e01b8152600401611c2c929190918252602082015260400190565b600060405180830381600087803b158015611c4657600080fd5b505af1158015611c5a573d6000803e3d6000fd5b50505050897fdc296d8aadc3ba5ba13b757df60241d09dc546e017a11ca07f0b71fccc55d66f8a8a8a85818110611c9357611c93612776565b9050602002016020810190611ca891906123af565b898986818110611cba57611cba612776565b90506020020135604051611cf993929190921515835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60405180910390a280611d0b816126df565b915050611ba2565b505050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d4557600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b906020016110a4565b60008181526004602052604090206001815474010000000000000000000000000000000000000000900460ff166004811115611df657611df6612747565b14611e5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420612073757065722074726f6c6c0000000000000000000000000000006044820152606401610810565b611e68336000610eda565b80611e8257503360009081526002602052604090205460ff165b611ee8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f742066726f6d2073757065722074726f6c6c0000000000000000000000006044820152606401610810565b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167403000000000000000000000000000000000000000017815560405133815282907fbb4243cf85be5a0fe6bee455e2c678ca74c8796416a6880ba7f98963ad83848990602001610d0b565b600d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f951c9bd637098cf919144d7f3755ae837b05fd4ccf465318c9e4298f8e3718c5906020016110a4565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d906020016110a4565b73ffffffffffffffffffffffffffffffffffffffff82166120ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f535741503a20496e76616c6964206578656375746f720000000000000000006044820152606401610810565b600a541580612124575073ffffffffffffffffffffffffffffffffffffffff82166000818152600b6020526040902054600a805490919081106120ff576120ff612776565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b156121af57600a805473ffffffffffffffffffffffffffffffffffffffff84166000818152600b60205260408120839055600183018455929092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055612261565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054612261576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4f535741503a2063616e6e6f74207265736574206d61696e206578656375746f60448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610810565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682612304576000612307565b60015b604080517f766f74696e674578656375746f720000000000000000000000000000000000008152602081019390935260ff9091169082015260600160405180910390a15050565b60008083601f84011261236057600080fd5b50813567ffffffffffffffff81111561237857600080fd5b6020830191508360208260051b850101111561239357600080fd5b9250929050565b803580151581146123aa57600080fd5b919050565b6000602082840312156123c157600080fd5b813561077d816127a5565b600080604083850312156123df57600080fd5b82356123ea816127a5565b91506123f86020840161239a565b90509250929050565b60008060008060008060a0878903121561241a57600080fd5b863567ffffffffffffffff81111561243157600080fd5b61243d89828a0161234e565b909750955050602087013593506040870135612458816127a5565b92506124666060880161239a565b9150608087013590509295509295509295565b60008060008060006080868803121561249157600080fd5b853567ffffffffffffffff8111156124a857600080fd5b6124b48882890161234e565b9096509450506020860135925060408601356124cf816127a5565b949793965091946060013592915050565b600080600080600080600080600060c08a8c0312156124fe57600080fd5b893567ffffffffffffffff8082111561251657600080fd5b6125228d838e0161234e565b909b50995060208c0135985089915061253d60408d0161239a565b975060608c013591508082111561255357600080fd5b61255f8d838e0161234e565b909750955060808c013591508082111561257857600080fd5b506125858c828d0161234e565b9a9d999c50979a9699959894979660a00135949350505050565b600080600080606085870312156125b557600080fd5b843567ffffffffffffffff8111156125cc57600080fd5b6125d88782880161234e565b90989097506020870135966040013595509350505050565b60006020828403121561260257600080fd5b815161077d816127a5565b60006020828403121561261f57600080fd5b5035919050565b6000806040838503121561263957600080fd5b823591506123f86020840161239a565b73ffffffffffffffffffffffffffffffffffffffff83168152604081016005831061269d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b6000816126b9576126b9612718565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561271157612711612718565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146108d157600080fdfea264697066735822122052ce8f15ff29f0b3ad9d33078b09100c63333bbb57d70f10346f34fa0b4875b464736f6c63430008060033"
};

// src/contracts/MOCK_TrollRegistry.ts
var MOCK_TrollRegistry = class extends import_eth_wallet5.Contract {
  constructor(wallet, address) {
    super(wallet, address, MOCK_TrollRegistry_json_default.abi, MOCK_TrollRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(govToken) {
    return this.__deploy([govToken]);
  }
  parseAddTrollEvent(receipt) {
    return this.parseEvents(receipt, "AddTroll").map((e) => this.decodeAddTrollEvent(e));
  }
  decodeAddTrollEvent(event) {
    let result = event.data;
    return {
      troll: result.troll,
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      isSuperTroll: result.isSuperTroll,
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDelistTrollEvent(receipt) {
    return this.parseEvents(receipt, "DelistTroll").map((e) => this.decodeDelistTrollEvent(e));
  }
  decodeDelistTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      _event: event
    };
  }
  parseLockGeneralTrollEvent(receipt) {
    return this.parseEvents(receipt, "LockGeneralTroll").map((e) => this.decodeLockGeneralTrollEvent(e));
  }
  decodeLockGeneralTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      lockedBy: result.lockedBy,
      _event: event
    };
  }
  parseLockSuperTrollEvent(receipt) {
    return this.parseEvents(receipt, "LockSuperTroll").map((e) => this.decodeLockSuperTrollEvent(e));
  }
  decodeLockSuperTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      lockedBy: result.lockedBy,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parseRemoveTrollEvent(receipt) {
    return this.parseEvents(receipt, "RemoveTroll").map((e) => this.decodeRemoveTrollEvent(e));
  }
  decodeRemoveTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      _event: event
    };
  }
  parseResumeEvent(receipt) {
    return this.parseEvents(receipt, "Resume").map((e) => this.decodeResumeEvent(e));
  }
  decodeResumeEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseSetVotingExecutorEvent(receipt) {
    return this.parseEvents(receipt, "SetVotingExecutor").map((e) => this.decodeSetVotingExecutorEvent(e));
  }
  decodeSetVotingExecutorEvent(event) {
    let result = event.data;
    return {
      newVotingExecutor: result.newVotingExecutor,
      isActive: result.isActive,
      _event: event
    };
  }
  parseShutdownEvent(receipt) {
    return this.parseEvents(receipt, "Shutdown").map((e) => this.decodeShutdownEvent(e));
  }
  decodeShutdownEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnlockGeneralTrollEvent(receipt) {
    return this.parseEvents(receipt, "UnlockGeneralTroll").map((e) => this.decodeUnlockGeneralTrollEvent(e));
  }
  decodeUnlockGeneralTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      _event: event
    };
  }
  parseUnlockSuperTrollEvent(receipt) {
    return this.parseEvents(receipt, "UnlockSuperTroll").map((e) => this.decodeUnlockSuperTrollEvent(e));
  }
  decodeUnlockSuperTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      unlock: result.unlock,
      bridgeVault: result.bridgeVault,
      penalty: new import_eth_wallet5.BigNumber(result.penalty),
      _event: event
    };
  }
  parseUpdateConfigStoreEvent(receipt) {
    return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
  }
  decodeUpdateConfigStoreEvent(event) {
    let result = event.data;
    return {
      newConfigStore: result.newConfigStore,
      _event: event
    };
  }
  parseUpdateTrollEvent(receipt) {
    return this.parseEvents(receipt, "UpdateTroll").map((e) => this.decodeUpdateTrollEvent(e));
  }
  decodeUpdateTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet5.BigNumber(result.trollProfileIndex),
      oldTroll: result.oldTroll,
      newTroll: result.newTroll,
      _event: event
    };
  }
  parseUpgradeEvent(receipt) {
    return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
  }
  decodeUpgradeEvent(event) {
    let result = event.data;
    return {
      newTrollRegistry: result.newTrollRegistry,
      _event: event
    };
  }
  parseUpgradeVotingManagerEvent(receipt) {
    return this.parseEvents(receipt, "UpgradeVotingManager").map((e) => this.decodeUpgradeVotingManagerEvent(e));
  }
  decodeUpgradeVotingManagerEvent(event) {
    let result = event.data;
    return {
      newVotingManager: result.newVotingManager,
      _event: event
    };
  }
  assign() {
    let configStore_call = async () => {
      let result = await this.call("configStore");
      return result;
    };
    this.configStore = configStore_call;
    let generalTrollCount_call = async () => {
      let result = await this.call("generalTrollCount");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.generalTrollCount = generalTrollCount_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let isGeneralTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
    let isGeneralTroll_call = async (params) => {
      let result = await this.call("isGeneralTroll", isGeneralTrollParams(params));
      return result;
    };
    this.isGeneralTroll = isGeneralTroll_call;
    let isGeneralTrollByIndexParams = (params) => [import_eth_wallet5.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
    let isGeneralTrollByIndex_call = async (params) => {
      let result = await this.call("isGeneralTrollByIndex", isGeneralTrollByIndexParams(params));
      return result;
    };
    this.isGeneralTrollByIndex = isGeneralTrollByIndex_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let isSuperTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
    let isSuperTroll_call = async (params) => {
      let result = await this.call("isSuperTroll", isSuperTrollParams(params));
      return result;
    };
    this.isSuperTroll = isSuperTroll_call;
    let isSuperTrollByIndexParams = (params) => [import_eth_wallet5.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
    let isSuperTrollByIndex_call = async (params) => {
      let result = await this.call("isSuperTrollByIndex", isSuperTrollByIndexParams(params));
      return result;
    };
    this.isSuperTrollByIndex = isSuperTrollByIndex_call;
    let isVotingExecutor_call = async (param1) => {
      let result = await this.call("isVotingExecutor", [param1]);
      return result;
    };
    this.isVotingExecutor = isVotingExecutor_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let newTrollRegistry_call = async () => {
      let result = await this.call("newTrollRegistry");
      return result;
    };
    this.newTrollRegistry = newTrollRegistry_call;
    let newVotingManager_call = async () => {
      let result = await this.call("newVotingManager");
      return result;
    };
    this.newVotingManager = newVotingManager_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let paused_call = async () => {
      let result = await this.call("paused");
      return result;
    };
    this.paused = paused_call;
    let superTrollCount_call = async () => {
      let result = await this.call("superTrollCount");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.superTrollCount = superTrollCount_call;
    let trollProfileInv_call = async (param1) => {
      let result = await this.call("trollProfileInv", [param1]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.trollProfileInv = trollProfileInv_call;
    let trollProfiles_call = async (param1) => {
      let result = await this.call("trollProfiles", [import_eth_wallet5.Utils.toString(param1)]);
      return {
        troll: result.troll,
        trollType: new import_eth_wallet5.BigNumber(result.trollType)
      };
    };
    this.trollProfiles = trollProfiles_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let usedNonce_call = async (param1) => {
      let result = await this.call("usedNonce", [import_eth_wallet5.Utils.toString(param1)]);
      return result;
    };
    this.usedNonce = usedNonce_call;
    let votingExecutor_call = async (param1) => {
      let result = await this.call("votingExecutor", [import_eth_wallet5.Utils.toString(param1)]);
      return result;
    };
    this.votingExecutor = votingExecutor_call;
    let votingExecutorInv_call = async (param1) => {
      let result = await this.call("votingExecutorInv", [param1]);
      return new import_eth_wallet5.BigNumber(result);
    };
    this.votingExecutorInv = votingExecutorInv_call;
    let votingExecutorLength_call = async () => {
      let result = await this.call("votingExecutorLength");
      return new import_eth_wallet5.BigNumber(result);
    };
    this.votingExecutorLength = votingExecutorLength_call;
    let addTrollParams = (params) => [import_eth_wallet5.Utils.stringToBytes(params.signatures), import_eth_wallet5.Utils.toString(params.trollProfileIndex), params.troll, params.isSuperTroll, import_eth_wallet5.Utils.toString(params.nonce)];
    let addTroll_send = async (params) => {
      let result = await this.send("addTroll", addTrollParams(params));
      return result;
    };
    let addTroll_call = async (params) => {
      let result = await this.call("addTroll", addTrollParams(params));
      return;
    };
    this.addTroll = Object.assign(addTroll_send, {
      call: addTroll_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let initAddress_send = async (configStore) => {
      let result = await this.send("initAddress", [configStore]);
      return result;
    };
    let initAddress_call = async (configStore) => {
      let result = await this.call("initAddress", [configStore]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let lockGeneralTroll_send = async (trollProfileIndex) => {
      let result = await this.send("lockGeneralTroll", [import_eth_wallet5.Utils.toString(trollProfileIndex)]);
      return result;
    };
    let lockGeneralTroll_call = async (trollProfileIndex) => {
      let result = await this.call("lockGeneralTroll", [import_eth_wallet5.Utils.toString(trollProfileIndex)]);
      return;
    };
    this.lockGeneralTroll = Object.assign(lockGeneralTroll_send, {
      call: lockGeneralTroll_call
    });
    let lockSuperTroll_send = async (trollProfileIndex) => {
      let result = await this.send("lockSuperTroll", [import_eth_wallet5.Utils.toString(trollProfileIndex)]);
      return result;
    };
    let lockSuperTroll_call = async (trollProfileIndex) => {
      let result = await this.call("lockSuperTroll", [import_eth_wallet5.Utils.toString(trollProfileIndex)]);
      return;
    };
    this.lockSuperTroll = Object.assign(lockSuperTroll_send, {
      call: lockSuperTroll_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let removeTrollParams = (params) => [import_eth_wallet5.Utils.stringToBytes(params.signatures), import_eth_wallet5.Utils.toString(params.trollProfileIndex), import_eth_wallet5.Utils.toString(params.nonce)];
    let removeTroll_send = async (params) => {
      let result = await this.send("removeTroll", removeTrollParams(params));
      return result;
    };
    let removeTroll_call = async (params) => {
      let result = await this.call("removeTroll", removeTrollParams(params));
      return;
    };
    this.removeTroll = Object.assign(removeTroll_send, {
      call: removeTroll_call
    });
    let resume_send = async () => {
      let result = await this.send("resume");
      return result;
    };
    let resume_call = async () => {
      let result = await this.call("resume");
      return;
    };
    this.resume = Object.assign(resume_send, {
      call: resume_call
    });
    let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
    let setVotingExecutor_send = async (params) => {
      let result = await this.send("setVotingExecutor", setVotingExecutorParams(params));
      return result;
    };
    let setVotingExecutor_call = async (params) => {
      let result = await this.call("setVotingExecutor", setVotingExecutorParams(params));
      return;
    };
    this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
      call: setVotingExecutor_call
    });
    let shutdownByAdmin_send = async () => {
      let result = await this.send("shutdownByAdmin");
      return result;
    };
    let shutdownByAdmin_call = async () => {
      let result = await this.call("shutdownByAdmin");
      return;
    };
    this.shutdownByAdmin = Object.assign(shutdownByAdmin_send, {
      call: shutdownByAdmin_call
    });
    let shutdownByVoting_send = async () => {
      let result = await this.send("shutdownByVoting");
      return result;
    };
    let shutdownByVoting_call = async () => {
      let result = await this.call("shutdownByVoting");
      return;
    };
    this.shutdownByVoting = Object.assign(shutdownByVoting_send, {
      call: shutdownByVoting_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let unlockGeneralTrollParams = (params) => [import_eth_wallet5.Utils.stringToBytes(params.signatures), import_eth_wallet5.Utils.toString(params.trollProfileIndex), import_eth_wallet5.Utils.toString(params.nonce)];
    let unlockGeneralTroll_send = async (params) => {
      let result = await this.send("unlockGeneralTroll", unlockGeneralTrollParams(params));
      return result;
    };
    let unlockGeneralTroll_call = async (params) => {
      let result = await this.call("unlockGeneralTroll", unlockGeneralTrollParams(params));
      return;
    };
    this.unlockGeneralTroll = Object.assign(unlockGeneralTroll_send, {
      call: unlockGeneralTroll_call
    });
    let unlockSuperTrollParams = (params) => [import_eth_wallet5.Utils.stringToBytes(params.signatures), import_eth_wallet5.Utils.toString(params.trollProfileIndex), params.unlock, params.vaultRegistry, import_eth_wallet5.Utils.toString(params.penalty), import_eth_wallet5.Utils.toString(params.nonce)];
    let unlockSuperTroll_send = async (params) => {
      let result = await this.send("unlockSuperTroll", unlockSuperTrollParams(params));
      return result;
    };
    let unlockSuperTroll_call = async (params) => {
      let result = await this.call("unlockSuperTroll", unlockSuperTrollParams(params));
      return;
    };
    this.unlockSuperTroll = Object.assign(unlockSuperTroll_send, {
      call: unlockSuperTroll_call
    });
    let updateConfigStore_send = async () => {
      let result = await this.send("updateConfigStore");
      return result;
    };
    let updateConfigStore_call = async () => {
      let result = await this.call("updateConfigStore");
      return;
    };
    this.updateConfigStore = Object.assign(updateConfigStore_send, {
      call: updateConfigStore_call
    });
    let updateTrollParams = (params) => [import_eth_wallet5.Utils.stringToBytes(params.signatures), import_eth_wallet5.Utils.toString(params.trollProfileIndex), params.newTroll, import_eth_wallet5.Utils.toString(params.nonce)];
    let updateTroll_send = async (params) => {
      let result = await this.send("updateTroll", updateTrollParams(params));
      return result;
    };
    let updateTroll_call = async (params) => {
      let result = await this.call("updateTroll", updateTrollParams(params));
      return;
    };
    this.updateTroll = Object.assign(updateTroll_send, {
      call: updateTroll_call
    });
    let upgradeTrollRegistry_send = async (trollRegistry) => {
      let result = await this.send("upgradeTrollRegistry", [trollRegistry]);
      return result;
    };
    let upgradeTrollRegistry_call = async (trollRegistry) => {
      let result = await this.call("upgradeTrollRegistry", [trollRegistry]);
      return;
    };
    this.upgradeTrollRegistry = Object.assign(upgradeTrollRegistry_send, {
      call: upgradeTrollRegistry_call
    });
    let upgradeTrollRegistryByAdmin_send = async (trollRegistry) => {
      let result = await this.send("upgradeTrollRegistryByAdmin", [trollRegistry]);
      return result;
    };
    let upgradeTrollRegistryByAdmin_call = async (trollRegistry) => {
      let result = await this.call("upgradeTrollRegistryByAdmin", [trollRegistry]);
      return;
    };
    this.upgradeTrollRegistryByAdmin = Object.assign(upgradeTrollRegistryByAdmin_send, {
      call: upgradeTrollRegistryByAdmin_call
    });
    let upgradeVotingManager_send = async (votingManager) => {
      let result = await this.send("upgradeVotingManager", [votingManager]);
      return result;
    };
    let upgradeVotingManager_call = async (votingManager) => {
      let result = await this.call("upgradeVotingManager", [votingManager]);
      return;
    };
    this.upgradeVotingManager = Object.assign(upgradeVotingManager_send, {
      call: upgradeVotingManager_call
    });
    let upgradeVotingManagerByAdmin_send = async (votingManager) => {
      let result = await this.send("upgradeVotingManagerByAdmin", [votingManager]);
      return result;
    };
    let upgradeVotingManagerByAdmin_call = async (votingManager) => {
      let result = await this.call("upgradeVotingManagerByAdmin", [votingManager]);
      return;
    };
    this.upgradeVotingManagerByAdmin = Object.assign(upgradeVotingManagerByAdmin_send, {
      call: upgradeVotingManagerByAdmin_call
    });
  }
};

// src/contracts/MintableToken.ts
var import_eth_wallet6 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/MintableToken.json.ts
var MintableToken_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burnFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/MintableToken.ts
var MintableToken = class extends import_eth_wallet6.Contract {
  constructor(wallet, address) {
    super(wallet, address, MintableToken_json_default.abi, MintableToken_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.name, params.symbol]);
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet6.BigNumber(result.value),
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet6.BigNumber(result.value),
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  assign() {
    let allowanceParams = (params) => [params.owner, params.spender];
    let allowance_call = async (params) => {
      let result = await this.call("allowance", allowanceParams(params));
      return new import_eth_wallet6.BigNumber(result);
    };
    this.allowance = allowance_call;
    let balanceOf_call = async (account) => {
      let result = await this.call("balanceOf", [account]);
      return new import_eth_wallet6.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let decimals_call = async () => {
      let result = await this.call("decimals");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.decimals = decimals_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet6.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let approveParams = (params) => [params.spender, import_eth_wallet6.Utils.toString(params.amount)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return result;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let burn_send = async (amount) => {
      let result = await this.send("burn", [import_eth_wallet6.Utils.toString(amount)]);
      return result;
    };
    let burn_call = async (amount) => {
      let result = await this.call("burn", [import_eth_wallet6.Utils.toString(amount)]);
      return;
    };
    this.burn = Object.assign(burn_send, {
      call: burn_call
    });
    let burnFromParams = (params) => [params.account, import_eth_wallet6.Utils.toString(params.amount)];
    let burnFrom_send = async (params) => {
      let result = await this.send("burnFrom", burnFromParams(params));
      return result;
    };
    let burnFrom_call = async (params) => {
      let result = await this.call("burnFrom", burnFromParams(params));
      return;
    };
    this.burnFrom = Object.assign(burnFrom_send, {
      call: burnFrom_call
    });
    let decreaseAllowanceParams = (params) => [params.spender, import_eth_wallet6.Utils.toString(params.subtractedValue)];
    let decreaseAllowance_send = async (params) => {
      let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
      return result;
    };
    let decreaseAllowance_call = async (params) => {
      let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
      return result;
    };
    this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
      call: decreaseAllowance_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let increaseAllowanceParams = (params) => [params.spender, import_eth_wallet6.Utils.toString(params.addedValue)];
    let increaseAllowance_send = async (params) => {
      let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
      return result;
    };
    let increaseAllowance_call = async (params) => {
      let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
      return result;
    };
    this.increaseAllowance = Object.assign(increaseAllowance_send, {
      call: increaseAllowance_call
    });
    let mintParams = (params) => [params.account, import_eth_wallet6.Utils.toString(params.amount)];
    let mint_send = async (params) => {
      let result = await this.send("mint", mintParams(params));
      return result;
    };
    let mint_call = async (params) => {
      let result = await this.call("mint", mintParams(params));
      return result;
    };
    this.mint = Object.assign(mint_send, {
      call: mint_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferParams = (params) => [params.recipient, import_eth_wallet6.Utils.toString(params.amount)];
    let transfer_send = async (params) => {
      let result = await this.send("transfer", transferParams(params));
      return result;
    };
    let transfer_call = async (params) => {
      let result = await this.call("transfer", transferParams(params));
      return result;
    };
    this.transfer = Object.assign(transfer_send, {
      call: transfer_call
    });
    let transferFromParams = (params) => [params.sender, params.recipient, import_eth_wallet6.Utils.toString(params.amount)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return result;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
  }
};

// src/contracts/OSWAP_BridgeVaultTrollRegistry.ts
var import_eth_wallet7 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_BridgeVaultTrollRegistry.json.ts
var OSWAP_BridgeVaultTrollRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "_trollRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Penalty", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "backerBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "trollBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "totalShares", "type": "uint256" }], "name": "Stake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "approvalDecrement", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "trollBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "totalShares", "type": "uint256" }], "name": "Unstake", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "address", "name": "msgSender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }], "name": "UnstakeApproval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "backerBalance", "type": "uint256" }], "name": "UnstakeRequest", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "newTrollRegistry", "type": "address" }], "name": "UpdateTrollRegistry", "type": "event" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "backerStakes", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }, { "internalType": "uint256", "name": "pendingWithdrawal", "type": "uint256" }, { "internalType": "uint256", "name": "approvedWithdrawal", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "bridgeVault", "outputs": [{ "internalType": "contract IOSWAP_BridgeVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getBackers", "outputs": [{ "internalType": "address[]", "name": "backers", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashUnstakeRequest", "outputs": [{ "internalType": "bytes32", "name": "hash", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IOSWAP_BridgeVault", "name": "_bridgeVault", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lastTrollTxCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }], "name": "maxWithdrawal", "outputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "penalizeSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "shares", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakedBy", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "stakedByInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "stakedByLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "transactionsCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollStakesBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollStakesTotalShares", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unstakeApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "shares", "type": "uint256" }], "name": "unstakeRequest", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateTrollRegistry", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "usedNonce", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "msgSender", "type": "address" }, { "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32", "name": "paramsHash", "type": "bytes32" }], "name": "verifyStakedValue", "outputs": [{ "internalType": "uint256", "name": "superTrollCount", "type": "uint256" }, { "internalType": "uint256", "name": "totalStake", "type": "uint256" }, { "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/OSWAP_BridgeVaultTrollRegistry.ts
var OSWAP_BridgeVaultTrollRegistry = class extends import_eth_wallet7.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_BridgeVaultTrollRegistry_json_default.abi, OSWAP_BridgeVaultTrollRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(trollRegistry) {
    return this.__deploy([trollRegistry]);
  }
  parsePenaltyEvent(receipt) {
    return this.parseEvents(receipt, "Penalty").map((e) => this.decodePenaltyEvent(e));
  }
  decodePenaltyEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet7.BigNumber(result.trollProfileIndex),
      amount: new import_eth_wallet7.BigNumber(result.amount),
      _event: event
    };
  }
  parseStakeEvent(receipt) {
    return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
  }
  decodeStakeEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet7.BigNumber(result.trollProfileIndex),
      amount: new import_eth_wallet7.BigNumber(result.amount),
      shares: new import_eth_wallet7.BigNumber(result.shares),
      backerBalance: new import_eth_wallet7.BigNumber(result.backerBalance),
      trollBalance: new import_eth_wallet7.BigNumber(result.trollBalance),
      totalShares: new import_eth_wallet7.BigNumber(result.totalShares),
      _event: event
    };
  }
  parseUnstakeEvent(receipt) {
    return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
  }
  decodeUnstakeEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet7.BigNumber(result.trollProfileIndex),
      amount: new import_eth_wallet7.BigNumber(result.amount),
      shares: new import_eth_wallet7.BigNumber(result.shares),
      approvalDecrement: new import_eth_wallet7.BigNumber(result.approvalDecrement),
      trollBalance: new import_eth_wallet7.BigNumber(result.trollBalance),
      totalShares: new import_eth_wallet7.BigNumber(result.totalShares),
      _event: event
    };
  }
  parseUnstakeApprovalEvent(receipt) {
    return this.parseEvents(receipt, "UnstakeApproval").map((e) => this.decodeUnstakeApprovalEvent(e));
  }
  decodeUnstakeApprovalEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      msgSender: result.msgSender,
      signers: result.signers.map((e) => new import_eth_wallet7.BigNumber(e)),
      shares: new import_eth_wallet7.BigNumber(result.shares),
      _event: event
    };
  }
  parseUnstakeRequestEvent(receipt) {
    return this.parseEvents(receipt, "UnstakeRequest").map((e) => this.decodeUnstakeRequestEvent(e));
  }
  decodeUnstakeRequestEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet7.BigNumber(result.trollProfileIndex),
      shares: new import_eth_wallet7.BigNumber(result.shares),
      backerBalance: new import_eth_wallet7.BigNumber(result.backerBalance),
      _event: event
    };
  }
  parseUpdateConfigStoreEvent(receipt) {
    return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
  }
  decodeUpdateConfigStoreEvent(event) {
    let result = event.data;
    return {
      newConfigStore: result.newConfigStore,
      _event: event
    };
  }
  parseUpdateTrollRegistryEvent(receipt) {
    return this.parseEvents(receipt, "UpdateTrollRegistry").map((e) => this.decodeUpdateTrollRegistryEvent(e));
  }
  decodeUpdateTrollRegistryEvent(event) {
    let result = event.data;
    return {
      newTrollRegistry: result.newTrollRegistry,
      _event: event
    };
  }
  assign() {
    let backerStakes_call = async (param1) => {
      let result = await this.call("backerStakes", [param1]);
      return {
        trollProfileIndex: new import_eth_wallet7.BigNumber(result.trollProfileIndex),
        shares: new import_eth_wallet7.BigNumber(result.shares),
        pendingWithdrawal: new import_eth_wallet7.BigNumber(result.pendingWithdrawal),
        approvedWithdrawal: new import_eth_wallet7.BigNumber(result.approvedWithdrawal)
      };
    };
    this.backerStakes = backerStakes_call;
    let bridgeVault_call = async () => {
      let result = await this.call("bridgeVault");
      return result;
    };
    this.bridgeVault = bridgeVault_call;
    let configStore_call = async () => {
      let result = await this.call("configStore");
      return result;
    };
    this.configStore = configStore_call;
    let getBackers_call = async (trollProfileIndex) => {
      let result = await this.call("getBackers", [import_eth_wallet7.Utils.toString(trollProfileIndex)]);
      return result;
    };
    this.getBackers = getBackers_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let hashUnstakeRequestParams = (params) => [params.backer, import_eth_wallet7.Utils.toString(params.trollProfileIndex), import_eth_wallet7.Utils.toString(params.shares), import_eth_wallet7.Utils.toString(params.nonce)];
    let hashUnstakeRequest_call = async (params) => {
      let result = await this.call("hashUnstakeRequest", hashUnstakeRequestParams(params));
      return result;
    };
    this.hashUnstakeRequest = hashUnstakeRequest_call;
    let lastTrollTxCount_call = async (param1) => {
      let result = await this.call("lastTrollTxCount", [param1]);
      return new import_eth_wallet7.BigNumber(result);
    };
    this.lastTrollTxCount = lastTrollTxCount_call;
    let maxWithdrawal_call = async (backer) => {
      let result = await this.call("maxWithdrawal", [backer]);
      return new import_eth_wallet7.BigNumber(result);
    };
    this.maxWithdrawal = maxWithdrawal_call;
    let stakedByParams = (params) => [import_eth_wallet7.Utils.toString(params.param1), import_eth_wallet7.Utils.toString(params.param2)];
    let stakedBy_call = async (params) => {
      let result = await this.call("stakedBy", stakedByParams(params));
      return result;
    };
    this.stakedBy = stakedBy_call;
    let stakedByInvParams = (params) => [import_eth_wallet7.Utils.toString(params.param1), params.param2];
    let stakedByInv_call = async (params) => {
      let result = await this.call("stakedByInv", stakedByInvParams(params));
      return new import_eth_wallet7.BigNumber(result);
    };
    this.stakedByInv = stakedByInv_call;
    let stakedByLength_call = async (trollProfileIndex) => {
      let result = await this.call("stakedByLength", [import_eth_wallet7.Utils.toString(trollProfileIndex)]);
      return new import_eth_wallet7.BigNumber(result);
    };
    this.stakedByLength = stakedByLength_call;
    let transactionsCount_call = async () => {
      let result = await this.call("transactionsCount");
      return new import_eth_wallet7.BigNumber(result);
    };
    this.transactionsCount = transactionsCount_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let trollStakesBalances_call = async (param1) => {
      let result = await this.call("trollStakesBalances", [import_eth_wallet7.Utils.toString(param1)]);
      return new import_eth_wallet7.BigNumber(result);
    };
    this.trollStakesBalances = trollStakesBalances_call;
    let trollStakesTotalShares_call = async (param1) => {
      let result = await this.call("trollStakesTotalShares", [import_eth_wallet7.Utils.toString(param1)]);
      return new import_eth_wallet7.BigNumber(result);
    };
    this.trollStakesTotalShares = trollStakesTotalShares_call;
    let usedNonce_call = async (param1) => {
      let result = await this.call("usedNonce", [import_eth_wallet7.Utils.stringToBytes32(param1)]);
      return result;
    };
    this.usedNonce = usedNonce_call;
    let initAddress_send = async (bridgeVault) => {
      let result = await this.send("initAddress", [bridgeVault]);
      return result;
    };
    let initAddress_call = async (bridgeVault) => {
      let result = await this.call("initAddress", [bridgeVault]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let penalizeSuperTrollParams = (params) => [import_eth_wallet7.Utils.toString(params.trollProfileIndex), import_eth_wallet7.Utils.toString(params.amount)];
    let penalizeSuperTroll_send = async (params) => {
      let result = await this.send("penalizeSuperTroll", penalizeSuperTrollParams(params));
      return result;
    };
    let penalizeSuperTroll_call = async (params) => {
      let result = await this.call("penalizeSuperTroll", penalizeSuperTrollParams(params));
      return;
    };
    this.penalizeSuperTroll = Object.assign(penalizeSuperTroll_send, {
      call: penalizeSuperTroll_call
    });
    let stakeParams = (params) => [import_eth_wallet7.Utils.toString(params.trollProfileIndex), import_eth_wallet7.Utils.toString(params.amount)];
    let stake_send = async (params) => {
      let result = await this.send("stake", stakeParams(params));
      return result;
    };
    let stake_call = async (params) => {
      let result = await this.call("stake", stakeParams(params));
      return new import_eth_wallet7.BigNumber(result);
    };
    this.stake = Object.assign(stake_send, {
      call: stake_call
    });
    let unstakeParams = (params) => [params.backer, import_eth_wallet7.Utils.toString(params.shares)];
    let unstake_send = async (params) => {
      let result = await this.send("unstake", unstakeParams(params));
      return result;
    };
    let unstake_call = async (params) => {
      let result = await this.call("unstake", unstakeParams(params));
      return;
    };
    this.unstake = Object.assign(unstake_send, {
      call: unstake_call
    });
    let unstakeApproveParams = (params) => [import_eth_wallet7.Utils.stringToBytes(params.signatures), params.backer, import_eth_wallet7.Utils.toString(params.trollProfileIndex), import_eth_wallet7.Utils.toString(params.shares), import_eth_wallet7.Utils.toString(params.nonce)];
    let unstakeApprove_send = async (params) => {
      let result = await this.send("unstakeApprove", unstakeApproveParams(params));
      return result;
    };
    let unstakeApprove_call = async (params) => {
      let result = await this.call("unstakeApprove", unstakeApproveParams(params));
      return;
    };
    this.unstakeApprove = Object.assign(unstakeApprove_send, {
      call: unstakeApprove_call
    });
    let unstakeRequest_send = async (shares) => {
      let result = await this.send("unstakeRequest", [import_eth_wallet7.Utils.toString(shares)]);
      return result;
    };
    let unstakeRequest_call = async (shares) => {
      let result = await this.call("unstakeRequest", [import_eth_wallet7.Utils.toString(shares)]);
      return;
    };
    this.unstakeRequest = Object.assign(unstakeRequest_send, {
      call: unstakeRequest_call
    });
    let updateConfigStore_send = async () => {
      let result = await this.send("updateConfigStore");
      return result;
    };
    let updateConfigStore_call = async () => {
      let result = await this.call("updateConfigStore");
      return;
    };
    this.updateConfigStore = Object.assign(updateConfigStore_send, {
      call: updateConfigStore_call
    });
    let updateTrollRegistry_send = async () => {
      let result = await this.send("updateTrollRegistry");
      return result;
    };
    let updateTrollRegistry_call = async () => {
      let result = await this.call("updateTrollRegistry");
      return;
    };
    this.updateTrollRegistry = Object.assign(updateTrollRegistry_send, {
      call: updateTrollRegistry_call
    });
    let verifyStakedValueParams = (params) => [params.msgSender, import_eth_wallet7.Utils.stringToBytes(params.signatures), import_eth_wallet7.Utils.stringToBytes32(params.paramsHash)];
    let verifyStakedValue_send = async (params) => {
      let result = await this.send("verifyStakedValue", verifyStakedValueParams(params));
      return result;
    };
    let verifyStakedValue_call = async (params) => {
      let result = await this.call("verifyStakedValue", verifyStakedValueParams(params));
      return {
        superTrollCount: new import_eth_wallet7.BigNumber(result.superTrollCount),
        totalStake: new import_eth_wallet7.BigNumber(result.totalStake),
        signers: result.signers.map((e) => new import_eth_wallet7.BigNumber(e))
      };
    };
    this.verifyStakedValue = Object.assign(verifyStakedValue_send, {
      call: verifyStakedValue_call
    });
  }
};

// src/contracts/OSWAP_ChainRegistry.ts
var import_eth_wallet8 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_ChainRegistry.json.ts
var OSWAP_ChainRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "_votingExecutorManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": false, "internalType": "enum OSWAP_ChainRegistry.Status", "name": "status", "type": "uint8" }, { "indexed": false, "internalType": "contract IERC20", "name": "govToken", "type": "address" }], "name": "NewChain", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": true, "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "indexed": false, "internalType": "address", "name": "_address", "type": "address" }], "name": "UpdateAddress", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "_address", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "indexed": false, "internalType": "address", "name": "_address", "type": "address" }], "name": "UpdateMainChainAddress", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": false, "internalType": "enum OSWAP_ChainRegistry.Status", "name": "status", "type": "uint8" }], "name": "UpdateStatus", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "indexed": false, "internalType": "struct OSWAP_ChainRegistry.Vault", "name": "vault", "type": "tuple" }], "name": "UpdateVault", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "enum OSWAP_ChainRegistry.Status", "name": "_status", "type": "uint8" }, { "internalType": "contract IERC20", "name": "_govToken", "type": "address" }, { "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }, { "internalType": "bytes32[]", "name": "contractNames", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_address", "type": "address[]" }], "name": "addChain", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "allChains", "outputs": [{ "internalType": "uint256[]", "name": "", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "chains", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "chainsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "bytes32[]", "name": "contractnames", "type": "bytes32[]" }], "name": "getChain", "outputs": [{ "internalType": "enum OSWAP_ChainRegistry.Status", "name": "_status", "type": "uint8" }, { "internalType": "contract IERC20", "name": "_govToken", "type": "address" }, { "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }, { "internalType": "address[]", "name": "_contracts", "type": "address[]" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault[]", "name": "_vaults", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256[]", "name": "chainId", "type": "uint256[]" }, { "internalType": "enum OSWAP_ChainRegistry.Status[]", "name": "_status", "type": "uint8[]" }, { "internalType": "contract IERC20[]", "name": "_govToken", "type": "address[]" }, { "internalType": "contract OSWAP_ConfigStore[]", "name": "_configStore", "type": "address[]" }, { "internalType": "bytes32[]", "name": "mainChainContractNames", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_mainChainContractAddress", "type": "address[]" }, { "internalType": "bytes32[]", "name": "contractNames", "type": "bytes32[]" }, { "internalType": "address[][]", "name": "_address", "type": "address[][]" }, { "internalType": "bytes32[]", "name": "_tokenNames", "type": "bytes32[]" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault[][]", "name": "vault", "type": "tuple[][]" }], "name": "init", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "mainChainContractAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256[]", "name": "chainId", "type": "uint256[]" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault[]", "name": "vault", "type": "tuple[]" }], "name": "newVault", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "sideChainContractAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "status", "outputs": [{ "internalType": "enum OSWAP_ChainRegistry.Status", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "tokenNames", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "tokenNamesLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "internalType": "address", "name": "_address", "type": "address" }], "name": "updateAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "bytes32[]", "name": "contractNames", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_addresses", "type": "address[]" }], "name": "updateAddresses", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "contract OSWAP_ConfigStore", "name": "_address", "type": "address" }], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "internalType": "address", "name": "_address", "type": "address" }], "name": "updateMainChainAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "enum OSWAP_ChainRegistry.Status", "name": "_status", "type": "uint8" }], "name": "updateStatus", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault", "name": "vault", "type": "tuple" }], "name": "updateVault", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "vaults", "outputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "vaultsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingExecutorManager", "outputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60806040523480156200001157600080fd5b50604051620030a1380380620030a1833981016040819052620000349162000063565b600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905562000095565b6000602082840312156200007657600080fd5b81516001600160a01b03811681146200008e57600080fd5b9392505050565b612ffc80620000a56000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637f3f94b1116100e3578063bc91a18e1161008c578063cc06597511610066578063cc0659751461040f578063df360c3414610417578063fc85a2871461045857600080fd5b8063bc91a18e146103a6578063c2b504ec146103dc578063c7e7dec6146103fc57600080fd5b8063b4f807e3116100bd578063b4f807e314610339578063b833424e1461036f578063bc0201ec1461038257600080fd5b80637f3f94b11461031457806382af54c9146103295780639ffa446a1461033157600080fd5b806342d21ef711610145578063550325b51161011f578063550325b5146102a457806366a82a51146102b757806372f423321461030157600080fd5b806342d21ef71461020657806342f064c9146102365780634e763cd01461029157600080fd5b80632a391db4116101765780632a391db4146101ba578063310495ab146101cd5780633a1b3d31146101f357600080fd5b8063010b0cc91461019257806310261785146101a7575b600080fd5b6101a56101a0366004612973565b61046b565b005b6101a56101b53660046127a6565b610585565b6101a56101c8366004612b79565b610979565b6101e06101db36600461295a565b610a96565b6040519081526020015b60405180910390f35b6101a5610201366004612b4d565b610ab7565b61022961021436600461295a565b60036020526000908152604090205460ff1681565b6040516101ea9190612cd0565b61026c61024436600461295a565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ea565b6101a561029f366004612c1b565b610d6a565b6101e06102b236600461295a565b611040565b6102ca6102c5366004612af2565b611050565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216918101919091526060016101ea565b6101a561030f366004612973565b6110a5565b61031c6112b9565b6040516101ea9190612c8c565b6009546101e0565b6002546101e0565b61026c61034736600461295a565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101e061037d3660046129a3565b611311565b610395610390366004612a10565b61142c565b6040516101ea959493929190612d15565b61026c6103b436600461295a565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60015461026c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101a561040a366004612b14565b6116a3565b6008546101e0565b61026c610425366004612af2565b600560209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6101a5610466366004612a8f565b6118c1565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156104d457600080fd5b505afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190612931565b610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064015b60405180910390fd5b6105818282611bff565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105a957600080fd5b60025415610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f616c726561647920696e69740000000000000000000000000000000000000000604482015260640161056e565b895161067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c6964206c656e677468000000000000000000000000000000000000604482015260640161056e565b88518a5114801561068d575087518a51145b801561069a575086518a51145b80156106a7575082518a51145b61070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b8451865114610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60005b86518110156107d2576107c087828151811061079957610799612f43565b60200260200101518783815181106107b3576107b3612f43565b6020026020010151611bff565b806107ca81612eb4565b91505061077b565b5060005b8a5181101561087c5761086a8b82815181106107f4576107f4612f43565b60200260200101518b838151811061080e5761080e612f43565b60200260200101518b848151811061082857610828612f43565b60200260200101518b858151811061084257610842612f43565b60200260200101518989878151811061085d5761085d612f43565b6020026020010151611c81565b8061087481612eb4565b9150506107d6565b5080518251146108e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60005b82518110156109445761093183828151811061090957610909612f43565b60200260200101518c84848151811061092457610924612f43565b60200260200101516120c4565b508061093c81612eb4565b9150506108eb565b5050600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055505050505050505050565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190612931565b610a80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b610a8e868686868686611c81565b505050505050565b60088181548110610aa657600080fd5b600091825260209091200154905081565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190612931565b610bbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008281526003602052604081205460ff166002811115610be157610be1612f14565b1415610c49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b6001816002811115610c5d57610c5d612f14565b1480610c7a57506002816002811115610c7857610c78612f14565b145b610ce0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420737461747573000000000000000000000000000000000000604482015260640161056e565b600082815260036020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836002811115610d2957610d29612f14565b0217905550817f1ec5c05690dbdf3fe6eeaa13c3026d2706bba8ff773391bf70f15b407fb1658882604051610d5e9190612cd0565b60405180910390a25050565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190612931565b610e71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b6009548310610edc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c696420696e64657800000000000000000000000000000000000000604482015260640161056e565b60008281526003602052604081205460ff166002811115610eff57610eff612f14565b1415610f67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b8060098481548110610f7b57610f7b612f43565b6000918252602080832086845290910181526040918290208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559285015160018301805491831691851691909117905593830151600290910180549190941691161790915551829084907f7ac7a6967f79b47c6da19bb1985e530ea9a085881a96e16869ab84d1b8ca378f90611033908590612e04565b60405180910390a3505050565b60028181548110610aa657600080fd5b6009828154811061106057600080fd5b600091825260208083209091019052908152604090208054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff9182169350918116911683565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561110e57600080fd5b505afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612931565b6111ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008281526003602052604081205460ff1660028111156111cf576111cf612f14565b1415611237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b60008281526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915191825283917f40dd2b3c90b1eb7ec1e0f4266fac1a526a7d2d664c4718a4b7da0473fbdbc3359101610d5e565b6060600280548060200260200160405190810160405280929190818152602001828054801561130757602002820191906000526020600020905b8154815260200190600101908083116112f3575b5050505050905090565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff169063a3818b3b9060240160206040518083038186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190612931565b611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b6114248484846120c4565b949350505050565b6000838152600360209081526040808320546006835281842054600790935292205460ff9092169173ffffffffffffffffffffffffffffffffffffffff9182169116606080858067ffffffffffffffff81111561148b5761148b612f72565b6040519080825280602002602001820160405280156114b4578160200160208202803683370190505b50925060005b818110156115625760008a8152600560205260408120908a8a848181106114e3576114e3612f43565b90506020020135815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828151811061152b5761152b612f43565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061155a81612eb4565b9150506114ba565b50506009548067ffffffffffffffff81111561158057611580612f72565b6040519080825280602002602001820160405280156115e957816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161159e5790505b50915060005b81811015611696576009818154811061160a5761160a612f43565b600091825260208083208d845290910181526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169382019390935260029091015490911691810191909152835184908390811061167857611678612f43565b6020026020010181905250808061168e90612eb4565b9150506115ef565b5050939792965093509350565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190612931565b6117aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008381526003602052604081205460ff1660028111156117cd576117cd612f14565b1415611835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b600083815260056020908152604080832085845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252839185917fb7e76be9c912c58d23e471f89ba672854363e3c92e3bd9cfce0abbbb5a1a884b9101611033565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561192a57600080fd5b505afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190612931565b6119c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008381526003602052604081205460ff1660028111156119eb576119eb612f14565b1415611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b815181518114611abf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60005b81811015611bf857828181518110611adc57611adc612f43565b6020026020010151600560008781526020019081526020016000206000868481518110611b0b57611b0b612f43565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838181518110611b7157611b71612f43565b6020026020010151857fb7e76be9c912c58d23e471f89ba672854363e3c92e3bd9cfce0abbbb5a1a884b858481518110611bad57611bad612f43565b6020026020010151604051611bde919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a380611bf081612eb4565b915050611ac2565b5050505050565b60008281526004602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915191825283917fe2de36ee958c6ed4c2511ad593c8cb18ad4695becc19a3c89dc73b62101648219101610d5e565b60008681526003602052604081205460ff166002811115611ca457611ca4612f14565b14611d0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f636861696e20616c726561647920657869737473000000000000000000000000604482015260640161056e565b6000856002811115611d1f57611d1f612f14565b11611d86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420737461747573000000000000000000000000000000000000604482015260640161056e565b8051825114611df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60028054600181810183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910188905560008881526003602052604090208054889391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116918490811115611e6d57611e6d612f14565b02179055506000868152600660205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790555186907f625cff83fc78cbdcd27df677554d8a62577d4bde3393e3de2c49fc15cbea338c90611ef29088908890612ce4565b60405180910390a260008681526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8716908117909155915191825287917f40dd2b3c90b1eb7ec1e0f4266fac1a526a7d2d664c4718a4b7da0473fbdbc335910160405180910390a2815160005b818110156120ba57828181518110611f9e57611f9e612f43565b6020026020010151600560008a81526020019081526020016000206000868481518110611fcd57611fcd612f43565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083818151811061203357612033612f43565b6020026020010151887fb7e76be9c912c58d23e471f89ba672854363e3c92e3bd9cfce0abbbb5a1a884b85848151811061206f5761206f612f43565b60200260200101516040516120a0919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a3806120b281612eb4565b915050611f84565b5050505050505050565b81518151600091908114612134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b600980546008805460018181019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018890558254018255600091825292505b818110156123825760006003600087848151811061219657612196612f43565b60209081029190910181015182528101919091526040016000205460ff1660028111156121c5576121c5612f14565b141561222d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b83818151811061223f5761223f612f43565b60200260200101516009848154811061225a5761225a612f43565b90600052602060002001600087848151811061227857612278612f43565b60209081029190910181015182528181019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617835593850151600183018054918316918616919091179055939091015160029091018054919093169116179055845185908290811061231757612317612f43565b6020026020010151837f7ac7a6967f79b47c6da19bb1985e530ea9a085881a96e16869ab84d1b8ca378f86848151811061235357612353612f43565b60200260200101516040516123689190612e04565b60405180910390a38061237a81612eb4565b915050612176565b50509392505050565b600082601f83011261239c57600080fd5b813560206123b16123ac83612e90565b612e41565b80838252828201915082860187848660051b89010111156123d157600080fd5b60005b858110156123f95781356123e781612fa1565b845292840192908401906001016123d4565b5090979650505050505050565b600082601f83011261241757600080fd5b813560206124276123ac83612e90565b80838252828201915082860187848660051b890101111561244757600080fd5b6000805b8681101561248a57823567ffffffffffffffff811115612469578283fd5b6124778b88838d010161238b565b865250938501939185019160010161244b565b509198975050505050505050565b600082601f8301126124a957600080fd5b813560206124b96123ac83612e90565b80838252828201915082860187848660051b89010111156124d957600080fd5b6000805b8681101561248a57823567ffffffffffffffff8111156124fb578283fd5b6125098b88838d01016126b5565b86525093850193918501916001016124dd565b600082601f83011261252d57600080fd5b8135602061253d6123ac83612e90565b80838252828201915082860187848660051b890101111561255d57600080fd5b60005b858110156123f957813584529284019290840190600101612560565b600082601f83011261258d57600080fd5b8135602061259d6123ac83612e90565b80838252828201915082860187848660051b89010111156125bd57600080fd5b60005b858110156123f95781356125d381612fa1565b845292840192908401906001016125c0565b600082601f8301126125f657600080fd5b813560206126066123ac83612e90565b80838252828201915082860187848660051b890101111561262657600080fd5b60005b858110156123f957813561263c81612fa1565b84529284019290840190600101612629565b600082601f83011261265f57600080fd5b8135602061266f6123ac83612e90565b80838252828201915082860187848660051b890101111561268f57600080fd5b60005b858110156123f9576126a38261271c565b84529284019290840190600101612692565b600082601f8301126126c657600080fd5b813560206126d66123ac83612e90565b828152818101908583016060808602880185018910156126f557600080fd5b60005b8681101561248a5761270a8a84612730565b855293850193918101916001016126f8565b80356003811061272b57600080fd5b919050565b60006060828403121561274257600080fd5b6040516060810181811067ffffffffffffffff8211171561276557612765612f72565b604052905080823561277681612fa1565b8152602083013561278681612fa1565b6020820152604083013561279981612fa1565b6040919091015292915050565b6000806000806000806000806000806101408b8d0312156127c657600080fd5b8a3567ffffffffffffffff808211156127de57600080fd5b6127ea8e838f0161251c565b9b5060208d013591508082111561280057600080fd5b61280c8e838f0161264e565b9a5060408d013591508082111561282257600080fd5b61282e8e838f0161257c565b995060608d013591508082111561284457600080fd5b6128508e838f016125e5565b985060808d013591508082111561286657600080fd5b6128728e838f0161251c565b975060a08d013591508082111561288857600080fd5b6128948e838f0161238b565b965060c08d01359150808211156128aa57600080fd5b6128b68e838f0161251c565b955060e08d01359150808211156128cc57600080fd5b6128d88e838f01612406565b94506101008d01359150808211156128ef57600080fd5b6128fb8e838f0161251c565b93506101208d013591508082111561291257600080fd5b5061291f8d828e01612498565b9150509295989b9194979a5092959850565b60006020828403121561294357600080fd5b8151801515811461295357600080fd5b9392505050565b60006020828403121561296c57600080fd5b5035919050565b6000806040838503121561298657600080fd5b82359150602083013561299881612fa1565b809150509250929050565b6000806000606084860312156129b857600080fd5b83359250602084013567ffffffffffffffff808211156129d757600080fd5b6129e38783880161251c565b935060408601359150808211156129f957600080fd5b50612a06868287016126b5565b9150509250925092565b600080600060408486031215612a2557600080fd5b83359250602084013567ffffffffffffffff80821115612a4457600080fd5b818601915086601f830112612a5857600080fd5b813581811115612a6757600080fd5b8760208260051b8501011115612a7c57600080fd5b6020830194508093505050509250925092565b600080600060608486031215612aa457600080fd5b83359250602084013567ffffffffffffffff80821115612ac357600080fd5b612acf8783880161251c565b93506040860135915080821115612ae557600080fd5b50612a068682870161238b565b60008060408385031215612b0557600080fd5b50508035926020909101359150565b600080600060608486031215612b2957600080fd5b83359250602084013591506040840135612b4281612fa1565b809150509250925092565b60008060408385031215612b6057600080fd5b82359150612b706020840161271c565b90509250929050565b60008060008060008060c08789031215612b9257600080fd5b86359550612ba26020880161271c565b94506040870135612bb281612fa1565b93506060870135612bc281612fa1565b9250608087013567ffffffffffffffff80821115612bdf57600080fd5b612beb8a838b0161251c565b935060a0890135915080821115612c0157600080fd5b50612c0e89828a0161238b565b9150509295509295509295565b600080600060a08486031215612c3057600080fd5b8335925060208401359150612c488560408601612730565b90509250925092565b60038110612c88577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015612cc457835183529284019291840191600101612ca8565b50909695505050505050565b60208101612cde8284612c51565b92915050565b60408101612cf28285612c51565b73ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b600060a08201612d258389612c51565b602073ffffffffffffffffffffffffffffffffffffffff808916828601528088166040860152606060a08187015283885180865260c088019150848a01955060005b81811015612d85578651851683529585019591850191600101612d67565b5050868103608088015287518082529084019450915082870160005b83811015612df357612de3868351805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b9482019490840190600101612da1565b50939b9a5050505050505050505050565b60608101612cde8284805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612e8857612e88612f72565b604052919050565b600067ffffffffffffffff821115612eaa57612eaa612f72565b5060051b60200190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612fc357600080fd5b5056fea26469706673582212206dfc6b74e3c1bbd6fa418ef7241d22c066d2f83c9ef186e7a36a3e538ede4d4764736f6c63430008060033"
};

// src/contracts/OSWAP_ChainRegistry.ts
var OSWAP_ChainRegistry = class extends import_eth_wallet8.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ChainRegistry_json_default.abi, OSWAP_ChainRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(votingExecutorManager) {
    return this.__deploy([votingExecutorManager]);
  }
  parseNewChainEvent(receipt) {
    return this.parseEvents(receipt, "NewChain").map((e) => this.decodeNewChainEvent(e));
  }
  decodeNewChainEvent(event) {
    let result = event.data;
    return {
      chainId: new import_eth_wallet8.BigNumber(result.chainId),
      status: new import_eth_wallet8.BigNumber(result.status),
      govToken: result.govToken,
      _event: event
    };
  }
  parseUpdateAddressEvent(receipt) {
    return this.parseEvents(receipt, "UpdateAddress").map((e) => this.decodeUpdateAddressEvent(e));
  }
  decodeUpdateAddressEvent(event) {
    let result = event.data;
    return {
      chainId: new import_eth_wallet8.BigNumber(result.chainId),
      contractName: result.contractName,
      _address: result._address,
      _event: event
    };
  }
  parseUpdateConfigStoreEvent(receipt) {
    return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
  }
  decodeUpdateConfigStoreEvent(event) {
    let result = event.data;
    return {
      chainId: new import_eth_wallet8.BigNumber(result.chainId),
      _address: result._address,
      _event: event
    };
  }
  parseUpdateMainChainAddressEvent(receipt) {
    return this.parseEvents(receipt, "UpdateMainChainAddress").map((e) => this.decodeUpdateMainChainAddressEvent(e));
  }
  decodeUpdateMainChainAddressEvent(event) {
    let result = event.data;
    return {
      contractName: result.contractName,
      _address: result._address,
      _event: event
    };
  }
  parseUpdateStatusEvent(receipt) {
    return this.parseEvents(receipt, "UpdateStatus").map((e) => this.decodeUpdateStatusEvent(e));
  }
  decodeUpdateStatusEvent(event) {
    let result = event.data;
    return {
      chainId: new import_eth_wallet8.BigNumber(result.chainId),
      status: new import_eth_wallet8.BigNumber(result.status),
      _event: event
    };
  }
  parseUpdateVaultEvent(receipt) {
    return this.parseEvents(receipt, "UpdateVault").map((e) => this.decodeUpdateVaultEvent(e));
  }
  decodeUpdateVaultEvent(event) {
    let result = event.data;
    return {
      index: new import_eth_wallet8.BigNumber(result.index),
      chainId: new import_eth_wallet8.BigNumber(result.chainId),
      vault: {
        token: result.vault.token,
        vaultRegistry: result.vault.vaultRegistry,
        bridgeVault: result.vault.bridgeVault
      },
      _event: event
    };
  }
  assign() {
    let allChains_call = async () => {
      let result = await this.call("allChains");
      return result.map((e) => new import_eth_wallet8.BigNumber(e));
    };
    this.allChains = allChains_call;
    let chains_call = async (param1) => {
      let result = await this.call("chains", [import_eth_wallet8.Utils.toString(param1)]);
      return new import_eth_wallet8.BigNumber(result);
    };
    this.chains = chains_call;
    let chainsLength_call = async () => {
      let result = await this.call("chainsLength");
      return new import_eth_wallet8.BigNumber(result);
    };
    this.chainsLength = chainsLength_call;
    let configStore_call = async (param1) => {
      let result = await this.call("configStore", [import_eth_wallet8.Utils.toString(param1)]);
      return result;
    };
    this.configStore = configStore_call;
    let getChainParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), import_eth_wallet8.Utils.stringToBytes32(params.contractnames)];
    let getChain_call = async (params) => {
      let result = await this.call("getChain", getChainParams(params));
      return {
        _status: new import_eth_wallet8.BigNumber(result._status),
        _govToken: result._govToken,
        _configStore: result._configStore,
        _contracts: result._contracts,
        _vaults: result._vaults.map((e) => ({
          token: e.token,
          vaultRegistry: e.vaultRegistry,
          bridgeVault: e.bridgeVault
        }))
      };
    };
    this.getChain = getChain_call;
    let govToken_call = async (param1) => {
      let result = await this.call("govToken", [import_eth_wallet8.Utils.toString(param1)]);
      return result;
    };
    this.govToken = govToken_call;
    let mainChainContractAddress_call = async (param1) => {
      let result = await this.call("mainChainContractAddress", [import_eth_wallet8.Utils.stringToBytes32(param1)]);
      return result;
    };
    this.mainChainContractAddress = mainChainContractAddress_call;
    let sideChainContractAddressParams = (params) => [import_eth_wallet8.Utils.toString(params.param1), import_eth_wallet8.Utils.stringToBytes32(params.param2)];
    let sideChainContractAddress_call = async (params) => {
      let result = await this.call("sideChainContractAddress", sideChainContractAddressParams(params));
      return result;
    };
    this.sideChainContractAddress = sideChainContractAddress_call;
    let status_call = async (param1) => {
      let result = await this.call("status", [import_eth_wallet8.Utils.toString(param1)]);
      return new import_eth_wallet8.BigNumber(result);
    };
    this.status = status_call;
    let tokenNames_call = async (param1) => {
      let result = await this.call("tokenNames", [import_eth_wallet8.Utils.toString(param1)]);
      return result;
    };
    this.tokenNames = tokenNames_call;
    let tokenNamesLength_call = async () => {
      let result = await this.call("tokenNamesLength");
      return new import_eth_wallet8.BigNumber(result);
    };
    this.tokenNamesLength = tokenNamesLength_call;
    let vaultsParams = (params) => [import_eth_wallet8.Utils.toString(params.param1), import_eth_wallet8.Utils.toString(params.param2)];
    let vaults_call = async (params) => {
      let result = await this.call("vaults", vaultsParams(params));
      return {
        token: result.token,
        vaultRegistry: result.vaultRegistry,
        bridgeVault: result.bridgeVault
      };
    };
    this.vaults = vaults_call;
    let vaultsLength_call = async () => {
      let result = await this.call("vaultsLength");
      return new import_eth_wallet8.BigNumber(result);
    };
    this.vaultsLength = vaultsLength_call;
    let votingExecutorManager_call = async () => {
      let result = await this.call("votingExecutorManager");
      return result;
    };
    this.votingExecutorManager = votingExecutorManager_call;
    let addChainParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), import_eth_wallet8.Utils.toString(params.status), params.govToken, params.configStore, import_eth_wallet8.Utils.stringToBytes32(params.contractNames), params.address];
    let addChain_send = async (params) => {
      let result = await this.send("addChain", addChainParams(params));
      return result;
    };
    let addChain_call = async (params) => {
      let result = await this.call("addChain", addChainParams(params));
      return;
    };
    this.addChain = Object.assign(addChain_send, {
      call: addChain_call
    });
    let initParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), import_eth_wallet8.Utils.toString(params.status), params.govToken, params.configStore, import_eth_wallet8.Utils.stringToBytes32(params.mainChainContractNames), params.mainChainContractAddress, import_eth_wallet8.Utils.stringToBytes32(params.contractNames), params.address, import_eth_wallet8.Utils.stringToBytes32(params.tokenNames), params.vault.map((a0) => a0.map((e) => [e.token, e.vaultRegistry, e.bridgeVault]))];
    let init_send = async (params) => {
      let result = await this.send("init", initParams(params));
      return result;
    };
    let init_call = async (params) => {
      let result = await this.call("init", initParams(params));
      return;
    };
    this.init = Object.assign(init_send, {
      call: init_call
    });
    let newVaultParams = (params) => [import_eth_wallet8.Utils.stringToBytes32(params.name), import_eth_wallet8.Utils.toString(params.chainId), params.vault.map((e) => [e.token, e.vaultRegistry, e.bridgeVault])];
    let newVault_send = async (params) => {
      let result = await this.send("newVault", newVaultParams(params));
      return result;
    };
    let newVault_call = async (params) => {
      let result = await this.call("newVault", newVaultParams(params));
      return new import_eth_wallet8.BigNumber(result);
    };
    this.newVault = Object.assign(newVault_send, {
      call: newVault_call
    });
    let updateAddressParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), import_eth_wallet8.Utils.stringToBytes32(params.contractName), params.address];
    let updateAddress_send = async (params) => {
      let result = await this.send("updateAddress", updateAddressParams(params));
      return result;
    };
    let updateAddress_call = async (params) => {
      let result = await this.call("updateAddress", updateAddressParams(params));
      return;
    };
    this.updateAddress = Object.assign(updateAddress_send, {
      call: updateAddress_call
    });
    let updateAddressesParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), import_eth_wallet8.Utils.stringToBytes32(params.contractNames), params.addresses];
    let updateAddresses_send = async (params) => {
      let result = await this.send("updateAddresses", updateAddressesParams(params));
      return result;
    };
    let updateAddresses_call = async (params) => {
      let result = await this.call("updateAddresses", updateAddressesParams(params));
      return;
    };
    this.updateAddresses = Object.assign(updateAddresses_send, {
      call: updateAddresses_call
    });
    let updateConfigStoreParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), params.address];
    let updateConfigStore_send = async (params) => {
      let result = await this.send("updateConfigStore", updateConfigStoreParams(params));
      return result;
    };
    let updateConfigStore_call = async (params) => {
      let result = await this.call("updateConfigStore", updateConfigStoreParams(params));
      return;
    };
    this.updateConfigStore = Object.assign(updateConfigStore_send, {
      call: updateConfigStore_call
    });
    let updateMainChainAddressParams = (params) => [import_eth_wallet8.Utils.stringToBytes32(params.contractName), params.address];
    let updateMainChainAddress_send = async (params) => {
      let result = await this.send("updateMainChainAddress", updateMainChainAddressParams(params));
      return result;
    };
    let updateMainChainAddress_call = async (params) => {
      let result = await this.call("updateMainChainAddress", updateMainChainAddressParams(params));
      return;
    };
    this.updateMainChainAddress = Object.assign(updateMainChainAddress_send, {
      call: updateMainChainAddress_call
    });
    let updateStatusParams = (params) => [import_eth_wallet8.Utils.toString(params.chainId), import_eth_wallet8.Utils.toString(params.status)];
    let updateStatus_send = async (params) => {
      let result = await this.send("updateStatus", updateStatusParams(params));
      return result;
    };
    let updateStatus_call = async (params) => {
      let result = await this.call("updateStatus", updateStatusParams(params));
      return;
    };
    this.updateStatus = Object.assign(updateStatus_send, {
      call: updateStatus_call
    });
    let updateVaultParams = (params) => [import_eth_wallet8.Utils.toString(params.index), import_eth_wallet8.Utils.toString(params.chainId), [params.vault.token, params.vault.vaultRegistry, params.vault.bridgeVault]];
    let updateVault_send = async (params) => {
      let result = await this.send("updateVault", updateVaultParams(params));
      return result;
    };
    let updateVault_call = async (params) => {
      let result = await this.call("updateVault", updateVaultParams(params));
      return;
    };
    this.updateVault = Object.assign(updateVault_send, {
      call: updateVault_call
    });
  }
};

// src/contracts/OSWAP_ChainRegistryExecutor.ts
var import_eth_wallet9 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_ChainRegistryExecutor.json.ts
var OSWAP_ChainRegistryExecutor_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }, { "internalType": "contract OSWAP_ChainRegistry", "name": "_chainRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "Execute", "type": "event" },
    { "inputs": [], "name": "chainRegistry", "outputs": [{ "internalType": "contract OSWAP_ChainRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c06040523480156200001157600080fd5b506040516200203238038062002032833981016040819052620000349162000053565b6001600160601b0319606092831b8116608052911b1660a052620000ab565b600080604083850312156200006757600080fd5b8251620000748162000092565b6020840151909250620000878162000092565b809150509250929050565b6001600160a01b0381168114620000a857600080fd5b50565b60805160601c60a05160601c611f09620001296000396000818160b0015281816105e60152818161085601528181610a1601528181610b8301528181610d5a01528181610fd0015281816110e80152818161123001528181611450015281816115e501526117ba015260008181606001526101000152611f096000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638af7c64914610046578063da1bcdf01461005b578063fd5e394a146100ab575b600080fd5b610059610054366004611987565b6100d2565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6040517fb15866e60000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b15866e69060240160206040518083038186803b15801561015757600080fd5b505afa15801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f91906119fc565b610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f535741505f566f74696e674578656375746f723a204e6f742066726f6d207660448201527f6f74696e6700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7fb98f16f9e16a613740729e6e1b35730f7ca1456ba20bff88685e53e1881bec9082826040516102b8929190611b4f565b60405180910390a16000828260008181106102d5576102d5611e75565b905060200201359050807f73696465436861696e436f6e666967000000000000000000000000000000000014156103205761031b6103168360018187611d2a565b6112fc565b505050565b807f6e65775661756c7400000000000000000000000000000000000000000000000014156106b6576006821080159061036d57506004610361600284611d84565b61036b9190611dd4565b155b6103d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b600060046103e2600285611d84565b6103ec9190611d70565b905060008167ffffffffffffffff81111561040957610409611ea4565b604051908082528060200260200182016040528015610432578160200160208202803683370190505b509050816020026084602083013760008267ffffffffffffffff81111561045b5761045b611ea4565b6040519080825280602002602001820160405280156104c457816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816104795790505b50905060006104d4846002611d58565b905060005b848110156105e3576040518060600160405280898985806104f990611d9b565b965081811061050a5761050a611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff1681526020018989858061053c90611d9b565b965081811061054d5761054d611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff1681526020018989858061057f90611d9b565b965081811061059057610590611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff168152508382815181106105c5576105c5611e75565b602002602001018190525080806105db90611d9b565b9150506104d9565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b833424e8888600181811061063357610633611e75565b9050602002013585856040518463ffffffff1660e01b815260040161065a93929190611b6b565b602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190611a5b565b5050505050505050565b807f616464436861696e00000000000000000000000000000000000000000000000014156109825760058210801590610703575060026106f7600584611d84565b6107019190611dd4565b155b610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b60006002610778600585611d84565b6107829190611d70565b90506000610791826005611d58565b905060008267ffffffffffffffff8111156107ae576107ae611ea4565b6040519080825280602002602001820160405280156107d7578160200160208202803683370190505b50905060005b838110156108535786866107f18386611d58565b81811061080057610800611e75565b9050602002013560601c82828151811061081c5761081c611e75565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061084b81611d9b565b9150506107dd565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a391db4878760018181106108a3576108a3611e75565b9050602002013560001c888860028181106108c0576108c0611e75565b9050602002013560001c60028111156108db576108db611e46565b898960038181106108ee576108ee611e75565b9050602002013560601c8a8a600481811061090b5761090b611e75565b602002919091013560601c90506109258860058d8f611d2a565b886040518863ffffffff1660e01b81526004016109489796959493929190611c73565b600060405180830381600087803b15801561096257600080fd5b505af1158015610976573d6000803e3d6000fd5b50505050505050505050565b807f75706461746553746174757300000000000000000000000000000000000000001415610aef5760038214610a14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a1b3d3184846001818110610a6357610a63611e75565b9050602002013560001c85856002818110610a8057610a80611e75565b9050602002013560001c6002811115610a9b57610a9b611e46565b6040518363ffffffff1660e01b8152600401610ab8929190611c5f565b600060405180830381600087803b158015610ad257600080fd5b505af1158015610ae6573d6000803e3d6000fd5b50505050505050565b807f7570646174655661756c740000000000000000000000000000000000000000001415610cc65760068214610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634e763cd084846001818110610bd057610bd0611e75565b9050602002013560001c85856002818110610bed57610bed611e75565b9050602002013560001c604051806060016040528088886003818110610c1557610c15611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff16815260200188886004818110610c4d57610c4d611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff16815260200188886005818110610c8557610c85611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff168152506040518463ffffffff1660e01b8152600401610ab893929190611ce0565b807f75706461746541646472657373000000000000000000000000000000000000001415610e325760048214610d58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c7e7dec684846001818110610da757610da7611e75565b9050602002013560001c85856002818110610dc457610dc4611e75565b9050602002013586866003818110610dde57610dde611e75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260048101959095526024850193909352506020909102013560601c6044820152606401610ab8565b807f757064617465416464726573736573000000000000000000000000000000000014156110545760048210801590610e7e57506002610e728184611d84565b610e7c9190611dd4565b155b610ee4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b60006002610ef28185611d84565b610efc9190611d70565b90506000610f0b826002611d58565b905060008267ffffffffffffffff811115610f2857610f28611ea4565b604051908082528060200260200182016040528015610f51578160200160208202803683370190505b50905060005b83811015610fcd578686610f6b8386611d58565b818110610f7a57610f7a611e75565b9050602002013560601c828281518110610f9657610f96611e75565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610fc581611d9b565b915050610f57565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc85a2878787600181811061101d5761101d611e75565b602002919091013590506110348560028a8c611d2a565b856040518563ffffffff1660e01b81526004016109489493929190611c28565b807f7570646174654d61696e436861696e4164647265737300000000000000000000141561119c57600382146110e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663010b0cc98484600181811061113557611135611e75565b905060200201358585600281811061114f5761114f611e75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526004810194909452602002919091013560601c602483015250604401610ab8565b807f757064617465436f6e66696753746f7265000000000000000000000000000000141561129a576003821461122e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166372f423328484600181811061127d5761127d611e75565b9050602002013560001c8585600281811061114f5761114f611e75565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152606401610217565b60028111611366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152606401610217565b60008282600081811061137b5761137b611e75565b90506020020135905060008383600181811061139957611399611e75565b6113ad926020909102013590506002611d58565b90506113ba816001611d58565b83111561129a5760008484838181106113d5576113d5611e75565b905060200201359050600085858460016113ef9190611d58565b8181106113fe576113fe611e75565b9050602002013590508260026114149190611d58565b85141561174a57837f736574436f6e666967000000000000000000000000000000000000000000000014156115b05760025b83811015610ae6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342f064c988888481811061149c5761149c611e75565b9050602002013560001c6040518263ffffffff1660e01b81526004016114c491815260200190565b60206040518083038186803b1580156114dc57600080fd5b505afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611a25565b6040517fd1fd27b3000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff919091169063d1fd27b390604401600060405180830381600087803b15801561158557600080fd5b505af1158015611599573d6000803e3d6000fd5b5050505080806115a890611d9b565b915050611446565b837f736574436f6e666967416464726573730000000000000000000000000000000014156117455760025b83811015610ae6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342f064c988888481811061163157611631611e75565b9050602002013560001c6040518263ffffffff1660e01b815260040161165991815260200190565b60206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190611a25565b6040517f9db57e1f000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9190911690639db57e1f90604401600060405180830381600087803b15801561171a57600080fd5b505af115801561172e573d6000803e3d6000fd5b50505050808061173d90611d9b565b9150506115db565b611923565b60008686611759866002611d58565b81811061176857611768611e75565b90506020020135905083600361177e9190611d58565b86141561192157847f736574436f6e666967320000000000000000000000000000000000000000000014156119215760025b848110156106ac577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342f064c989898481811061180657611806611e75565b9050602002013560001c6040518263ffffffff1660e01b815260040161182e91815260200190565b60206040518083038186803b15801561184657600080fd5b505afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e9190611a25565b6040517fdf9321a500000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044810184905273ffffffffffffffffffffffffffffffffffffffff919091169063df9321a590606401600060405180830381600087803b1580156118f657600080fd5b505af115801561190a573d6000803e3d6000fd5b50505050808061191990611d9b565b9150506117b0565b505b50506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152606401610217565b6000806020838503121561199a57600080fd5b823567ffffffffffffffff808211156119b257600080fd5b818501915085601f8301126119c657600080fd5b8135818111156119d557600080fd5b8660208260051b85010111156119ea57600080fd5b60209290920196919550909350505050565b600060208284031215611a0e57600080fd5b81518015158114611a1e57600080fd5b9392505050565b600060208284031215611a3757600080fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114611a1e57600080fd5b600060208284031215611a6d57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015611aba57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611a88565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611af757600080fd5b8260051b8083602087013760009401602001938452509192915050565b60038110611b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081526000611b63602083018486611ac5565b949350505050565b6000606080830186845260208281860152818751808452608087019150828901935060005b81811015611bac57845183529383019391830191600101611b90565b50508581036040870152865180825290820192508187019060005b81811015611c1957611c09858451805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b9385019391830191600101611bc7565b50929998505050505050505050565b848152606060208201526000611c42606083018587611ac5565b8281036040840152611c548185611a74565b979650505050505050565b82815260408101611a1e6020830184611b14565b878152611c836020820188611b14565b600073ffffffffffffffffffffffffffffffffffffffff808816604084015280871660608401525060c06080830152611cc060c083018587611ac5565b82810360a0840152611cd28185611a74565b9a9950505050505050505050565b8381526020810183905260a08101611b636040830184805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b60008085851115611d3a57600080fd5b83861115611d4757600080fd5b5050600583901b0193919092039150565b60008219821115611d6b57611d6b611de8565b500190565b600082611d7f57611d7f611e17565b500490565b600082821015611d9657611d96611de8565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611dcd57611dcd611de8565b5060010190565b600082611de357611de3611e17565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212202dcea9247161446836bd71ad0d7984e285b0376fe15cc0909e025b1e6095327964736f6c63430008060033"
};

// src/contracts/OSWAP_ChainRegistryExecutor.ts
var OSWAP_ChainRegistryExecutor = class extends import_eth_wallet9.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ChainRegistryExecutor_json_default.abi, OSWAP_ChainRegistryExecutor_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.votingManager, params.chainRegistry]);
  }
  parseExecuteEvent(receipt) {
    return this.parseEvents(receipt, "Execute").map((e) => this.decodeExecuteEvent(e));
  }
  decodeExecuteEvent(event) {
    let result = event.data;
    return {
      params: result.params,
      _event: event
    };
  }
  assign() {
    let chainRegistry_call = async () => {
      let result = await this.call("chainRegistry");
      return result;
    };
    this.chainRegistry = chainRegistry_call;
    let votingManager_call = async () => {
      let result = await this.call("votingManager");
      return result;
    };
    this.votingManager = votingManager_call;
    let execute_send = async (params) => {
      let result = await this.send("execute", [import_eth_wallet9.Utils.stringToBytes32(params)]);
      return result;
    };
    let execute_call = async (params) => {
      let result = await this.call("execute", [import_eth_wallet9.Utils.stringToBytes32(params)]);
      return;
    };
    this.execute = Object.assign(execute_send, {
      call: execute_call
    });
  }
};

// src/contracts/OSWAP_ConfigStore.ts
var import_eth_wallet10 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_ConfigStore.json.ts
var OSWAP_ConfigStore_json_default = {
  "abi": [
    { "inputs": [{ "components": [{ "internalType": "contract IERC20", "name": "govToken", "type": "address" }, { "internalType": "contract IOSWAP_SwapPolicy", "name": "swapPolicy", "type": "address" }, { "internalType": "uint256", "name": "lpWithdrawlDelay", "type": "uint256" }, { "internalType": "uint256", "name": "transactionsGap", "type": "uint256" }, { "internalType": "uint256", "name": "superTrollMinCount", "type": "uint256" }, { "internalType": "uint256", "name": "generalTrollMinCount", "type": "uint256" }, { "internalType": "uint256", "name": "transactionFee", "type": "uint256" }, { "internalType": "address", "name": "router", "type": "address" }, { "internalType": "address", "name": "rebalancer", "type": "address" }, { "internalType": "address", "name": "feeTo", "type": "address" }, { "internalType": "address", "name": "wrapper", "type": "address" }, { "internalType": "contract IERC20[]", "name": "asset", "type": "address[]" }, { "internalType": "uint256[]", "name": "baseFee", "type": "uint256[]" }], "internalType": "struct OSWAP_ConfigStore.Params", "name": "params", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }], "name": "ParamSet1", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IOSWAP_VotingExecutorManager", "name": "newVotingExecutorManager", "type": "address" }], "name": "UpdateVotingExecutorManager", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "Upgrade", "type": "event" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "baseFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "feeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "generalTrollMinCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }], "name": "getBridgeParams", "outputs": [{ "internalType": "contract IOSWAP_SwapPolicy", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }], "name": "getRebalanceParams", "outputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getSignatureVerificationParams", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "_votingExecutorManager", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedProxy", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lpWithdrawlDelay", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newConfigStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "priceOracle", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "rebalancer", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "router", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "setConfig2", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfigAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "setOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract IOSWAP_SwapPolicy", "name": "_swapPolicy", "type": "address" }], "name": "setSwapPolicy", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "superTrollMinCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "swapPolicy", "outputs": [{ "internalType": "contract IOSWAP_SwapPolicy", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "transactionFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "transactionsGap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateVotingExecutorManager", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "votingExecutorManager", "outputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a06040523480156200001157600080fd5b5060405162001e8538038062001e858339810160408190526200003491620002e3565b60008054336001600160a01b0319918216179091558151606090811b6001600160601b031916608090815260208401516004805485166001600160a01b03928316179055604085015160085591840151600955830151600a5560a0830151600b5560c0830151600c5560e0830151600d80548416918316919091179055610100830151600e80548416918316919091179055610120830151600f80549093169116179055610180810151516101608201515114620000f157600080fd5b60005b81610160015151811015620001855781610180015181815181106200011d576200011d620004db565b6020026020010151600660008461016001518481518110620001435762000143620004db565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806200017c90620004b1565b915050620000f4565b506101408101516001600160a01b031615620001c4576101408101516001600160a01b03166000908152600760205260409020805460ff191660011790555b50336000908152600260205260409020805460ff1916600117905562000520565b8051620001f28162000507565b919050565b600082601f8301126200020957600080fd5b81516020620002226200021c836200048b565b62000458565b80838252828201915082860187848660051b89010111156200024357600080fd5b60005b858110156200026f5781516200025c8162000507565b8452928401929084019060010162000246565b5090979650505050505050565b600082601f8301126200028e57600080fd5b81516020620002a16200021c836200048b565b80838252828201915082860187848660051b8901011115620002c257600080fd5b60005b858110156200026f57815184529284019290840190600101620002c5565b600060208284031215620002f657600080fd5b81516001600160401b03808211156200030e57600080fd5b908301906101a082860312156200032457600080fd5b6200032e6200042c565b6200033983620001e5565b81526200034960208401620001e5565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526200038e60e08401620001e5565b60e0820152610100620003a3818501620001e5565b90820152610120620003b7848201620001e5565b90820152610140620003cb848201620001e5565b908201526101608381015183811115620003e457600080fd5b620003f288828701620001f7565b82840152505061018080840151838111156200040d57600080fd5b6200041b888287016200027c565b918301919091525095945050505050565b6040516101a081016001600160401b0381118282101715620004525762000452620004f1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004835762000483620004f1565b604052919050565b60006001600160401b03821115620004a757620004a7620004f1565b5060051b60200190565b6000600019821415620004d457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200051d57600080fd5b50565b60805160601c6119386200054d6000396000818161027f015281816102e1015261054001526119386000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80639a7777931161012a578063cdd7e0c4116100bd578063e5c149a91161008c578063ef06095111610071578063ef06095114610662578063f2fde38b14610682578063f887ea401461069557600080fd5b8063e5c149a914610635578063ee53f4cb1461063e57600080fd5b8063cdd7e0c4146105e6578063d1fd27b3146105ef578063d4ee1d9014610602578063df9321a51461062257600080fd5b8063a2f55ae5116100f9578063a2f55ae514610505578063b023c86514610518578063b86a1855146105bd578063c2b504ec146105c657600080fd5b80639a777793146104c35780639c52a7f1146104d65780639db57e1f146104e95780639ed3edf0146104fc57600080fd5b80633d54c447116101a25780636053617211610171578063605361721461048a578063626e6b6c1461049257806381c0dc6d1461049b5780638da5cb5b146104a357600080fd5b80633d54c4471461040e5780633fd8cc4e146104415780635a812465146104645780635c38eb3a1461047757600080fd5b80630fa0c7f8116101de5780630fa0c7f8146102b6578063123b9a0b1461038a57806325aa9c54146103b85780632951f1b2146103d857600080fd5b8063017e7e581461021057806301d22ccd1461025a57806305268cff1461027a5780630900f010146102a1575b600080fd5b600f546102309073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b600e546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102307f000000000000000000000000000000000000000000000000000000000000000081565b6102b46102af3660046117f7565b6106b5565b005b61033b6102c43660046117f7565b600454600d5473ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600090815260056020908152604080832054968416835280832054600690925290912054600c5494831696938316958316949190921692565b6040805173ffffffffffffffffffffffffffffffffffffffff978816815295871660208701529386169385019390935293166060830152608082019290925260a081019190915260c001610251565b6103aa6103983660046117f7565b60066020526000908152604090205481565b604051908152602001610251565b6004546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102306103e63660046117f7565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61043161041c3660046117f7565b60076020526000908152604090205460ff1681565b6040519015158152602001610251565b61043161044f3660046117f7565b60026020526000908152604090205460ff1681565b6102b46104723660046117f7565b61083b565b6102b461048536600461188b565b6109a3565b6102b4610b22565b6103aa600b5481565b6102b4610c4c565b6000546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102b46104d13660046117f7565b610de1565b6102b46104e43660046117f7565b610f3e565b6102b46104f736600461183d565b610fde565b6103aa600c5481565b6102b46105133660046117f7565b6112d2565b6105866105263660046117f7565b600e5473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166000908152600560205260408082205494831682529020549181169392811692911690565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529284166020840152921691810191909152606001610251565b6103aa60085481565b6003546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6103aa60095481565b6102b46105fd36600461183d565b611375565b6001546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102b461063036600461185f565b611577565b6103aa600a5481565b600b54600a5460095460408051938452602084019290925290820152606001610251565b6010546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102b46106903660046117f7565b611760565b600d546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061181b565b6107c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064015b60405180910390fd5b601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461085f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166108dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c2061646472657373000000000000000000000000000000000000000060448201526064016107b8565b60035473ffffffffffffffffffffffffffffffffffffffff161561095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f616c726561647920696e6974000000000000000000000000000000000000000060448201526064016107b8565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081526002602052604090205460ff16610a42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084016107b8565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526005602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169385169390931790925580517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216835285901b16928101929092527f6f7261636c650000000000000000000000000000000000000000000000000000917f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706910160405180910390a25050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610bc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084016107b8565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b600354604080517fc53bc047000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163c53bc047916004808301926020929190829003018186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef91906118c4565b905073ffffffffffffffffffffffffffffffffffffffff8116610d6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f726500000000000000000000000060448201526064016107b8565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fe74e49c9957a38058d1fefcf5aa66950c8ba0c968b7ee84424852312e657d69090602001610830565b3360009081526002602052604090205460ff16610e80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084016107b8565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055604051606082901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681527f73776170506f6c69637900000000000000000000000000000000000000000000907f88606c7ce4ded506e934ff550061fa2f46fabe388e2e70153ce425794d1c804a9060200160405180910390a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f6257600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a78849101610830565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f919061181b565b6110e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064016107b8565b606081901c7f726f75746572000000000000000000000000000000000000000000000000000083141561115757600d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055611293565b827f726562616c616e6365720000000000000000000000000000000000000000000014156111c457600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055611293565b827f666565546f000000000000000000000000000000000000000000000000000000141561123157600f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055611293565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420636f6e66696700000000000000000000000000000000000060448201526064016107b8565b827f88606c7ce4ded506e934ff550061fa2f46fabe388e2e70153ce425794d1c804a836040516112c591815260200190565b60405180910390a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112f657600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf59101610830565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156113de57600080fd5b505afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611416919061181b565b61147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064016107b8565b807f7472616e73616374696f6e7347617000000000000000000000000000000000008314156114af576009819055611293565b827f7472616e73616374696f6e46656500000000000000000000000000000000000014156114e157600c819055611293565b827f737570657254726f6c6c4d696e436f756e740000000000000000000000000000141561151357600a819055611293565b827f67656e6572616c54726f6c6c4d696e436f756e74000000000000000000000000141561154557600b819055611293565b827f6c7057697468647261776c44656c6179000000000000000000000000000000001415611231576008819055611293565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611618919061181b565b61167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064016107b8565b827f626173654665650000000000000000000000000000000000000000000000000014156116c157606082901c6000908152600660205260409020819055611728565b827f6973417070726f76656450726f78790000000000000000000000000000000000141561123157606082901c600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183141790555b604080518381526020810183905284917f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb70691016112c5565b60005473ffffffffffffffffffffffffffffffffffffffff16331461178457600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b90602001610830565b60006020828403121561180957600080fd5b8135611814816118dd565b9392505050565b60006020828403121561182d57600080fd5b8151801515811461181457600080fd5b6000806040838503121561185057600080fd5b50508035926020909101359150565b60008060006060848603121561187457600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561189e57600080fd5b82356118a9816118dd565b915060208301356118b9816118dd565b809150509250929050565b6000602082840312156118d657600080fd5b8151611814815b73ffffffffffffffffffffffffffffffffffffffff811681146118ff57600080fd5b5056fea2646970667358221220bd7b47b5832b1870d2c1324baf6ff90d81c52e97411935023bfe8829833f3f0164736f6c63430008060033"
};

// src/contracts/OSWAP_ConfigStore.ts
var OSWAP_ConfigStore = class extends import_eth_wallet10.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ConfigStore_json_default.abi, OSWAP_ConfigStore_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([[params.govToken, params.swapPolicy, import_eth_wallet10.Utils.toString(params.lpWithdrawlDelay), import_eth_wallet10.Utils.toString(params.transactionsGap), import_eth_wallet10.Utils.toString(params.superTrollMinCount), import_eth_wallet10.Utils.toString(params.generalTrollMinCount), import_eth_wallet10.Utils.toString(params.transactionFee), params.router, params.rebalancer, params.feeTo, params.wrapper, params.asset, import_eth_wallet10.Utils.toString(params.baseFee)]]);
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseParamSet1Event(receipt) {
    return this.parseEvents(receipt, "ParamSet1").map((e) => this.decodeParamSet1Event(e));
  }
  decodeParamSet1Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUpdateVotingExecutorManagerEvent(receipt) {
    return this.parseEvents(receipt, "UpdateVotingExecutorManager").map((e) => this.decodeUpdateVotingExecutorManagerEvent(e));
  }
  decodeUpdateVotingExecutorManagerEvent(event) {
    let result = event.data;
    return {
      newVotingExecutorManager: result.newVotingExecutorManager,
      _event: event
    };
  }
  parseUpgradeEvent(receipt) {
    return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
  }
  decodeUpgradeEvent(event) {
    let result = event.data;
    return {
      newConfigStore: result.newConfigStore,
      _event: event
    };
  }
  assign() {
    let baseFee_call = async (param1) => {
      let result = await this.call("baseFee", [param1]);
      return new import_eth_wallet10.BigNumber(result);
    };
    this.baseFee = baseFee_call;
    let feeTo_call = async () => {
      let result = await this.call("feeTo");
      return result;
    };
    this.feeTo = feeTo_call;
    let generalTrollMinCount_call = async () => {
      let result = await this.call("generalTrollMinCount");
      return new import_eth_wallet10.BigNumber(result);
    };
    this.generalTrollMinCount = generalTrollMinCount_call;
    let getBridgeParams_call = async (asset) => {
      let result = await this.call("getBridgeParams", [asset]);
      return {
        param1: result[0],
        param2: result[1],
        param3: result[2],
        param4: result[3],
        param5: new import_eth_wallet10.BigNumber(result[4]),
        param6: new import_eth_wallet10.BigNumber(result[5])
      };
    };
    this.getBridgeParams = getBridgeParams_call;
    let getRebalanceParams_call = async (asset) => {
      let result = await this.call("getRebalanceParams", [asset]);
      return {
        param1: result[0],
        param2: result[1],
        param3: result[2]
      };
    };
    this.getRebalanceParams = getRebalanceParams_call;
    let getSignatureVerificationParams_call = async () => {
      let result = await this.call("getSignatureVerificationParams");
      return {
        param1: new import_eth_wallet10.BigNumber(result[0]),
        param2: new import_eth_wallet10.BigNumber(result[1]),
        param3: new import_eth_wallet10.BigNumber(result[2])
      };
    };
    this.getSignatureVerificationParams = getSignatureVerificationParams_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let isApprovedProxy_call = async (param1) => {
      let result = await this.call("isApprovedProxy", [param1]);
      return result;
    };
    this.isApprovedProxy = isApprovedProxy_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let lpWithdrawlDelay_call = async () => {
      let result = await this.call("lpWithdrawlDelay");
      return new import_eth_wallet10.BigNumber(result);
    };
    this.lpWithdrawlDelay = lpWithdrawlDelay_call;
    let newConfigStore_call = async () => {
      let result = await this.call("newConfigStore");
      return result;
    };
    this.newConfigStore = newConfigStore_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let priceOracle_call = async (param1) => {
      let result = await this.call("priceOracle", [param1]);
      return result;
    };
    this.priceOracle = priceOracle_call;
    let rebalancer_call = async () => {
      let result = await this.call("rebalancer");
      return result;
    };
    this.rebalancer = rebalancer_call;
    let router_call = async () => {
      let result = await this.call("router");
      return result;
    };
    this.router = router_call;
    let superTrollMinCount_call = async () => {
      let result = await this.call("superTrollMinCount");
      return new import_eth_wallet10.BigNumber(result);
    };
    this.superTrollMinCount = superTrollMinCount_call;
    let swapPolicy_call = async () => {
      let result = await this.call("swapPolicy");
      return result;
    };
    this.swapPolicy = swapPolicy_call;
    let transactionFee_call = async () => {
      let result = await this.call("transactionFee");
      return new import_eth_wallet10.BigNumber(result);
    };
    this.transactionFee = transactionFee_call;
    let transactionsGap_call = async () => {
      let result = await this.call("transactionsGap");
      return new import_eth_wallet10.BigNumber(result);
    };
    this.transactionsGap = transactionsGap_call;
    let votingExecutorManager_call = async () => {
      let result = await this.call("votingExecutorManager");
      return result;
    };
    this.votingExecutorManager = votingExecutorManager_call;
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let initAddress_send = async (votingExecutorManager) => {
      let result = await this.send("initAddress", [votingExecutorManager]);
      return result;
    };
    let initAddress_call = async (votingExecutorManager) => {
      let result = await this.call("initAddress", [votingExecutorManager]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let setConfigParams = (params) => [import_eth_wallet10.Utils.stringToBytes32(params.name), import_eth_wallet10.Utils.stringToBytes32(params.value)];
    let setConfig_send = async (params) => {
      let result = await this.send("setConfig", setConfigParams(params));
      return result;
    };
    let setConfig_call = async (params) => {
      let result = await this.call("setConfig", setConfigParams(params));
      return;
    };
    this.setConfig = Object.assign(setConfig_send, {
      call: setConfig_call
    });
    let setConfig2Params = (params) => [import_eth_wallet10.Utils.stringToBytes32(params.name), import_eth_wallet10.Utils.stringToBytes32(params.value1), import_eth_wallet10.Utils.stringToBytes32(params.value2)];
    let setConfig2_send = async (params) => {
      let result = await this.send("setConfig2", setConfig2Params(params));
      return result;
    };
    let setConfig2_call = async (params) => {
      let result = await this.call("setConfig2", setConfig2Params(params));
      return;
    };
    this.setConfig2 = Object.assign(setConfig2_send, {
      call: setConfig2_call
    });
    let setConfigAddressParams = (params) => [import_eth_wallet10.Utils.stringToBytes32(params.name), import_eth_wallet10.Utils.stringToBytes32(params.value)];
    let setConfigAddress_send = async (params) => {
      let result = await this.send("setConfigAddress", setConfigAddressParams(params));
      return result;
    };
    let setConfigAddress_call = async (params) => {
      let result = await this.call("setConfigAddress", setConfigAddressParams(params));
      return;
    };
    this.setConfigAddress = Object.assign(setConfigAddress_send, {
      call: setConfigAddress_call
    });
    let setOracleParams = (params) => [params.asset, params.oracle];
    let setOracle_send = async (params) => {
      let result = await this.send("setOracle", setOracleParams(params));
      return result;
    };
    let setOracle_call = async (params) => {
      let result = await this.call("setOracle", setOracleParams(params));
      return;
    };
    this.setOracle = Object.assign(setOracle_send, {
      call: setOracle_call
    });
    let setSwapPolicy_send = async (swapPolicy) => {
      let result = await this.send("setSwapPolicy", [swapPolicy]);
      return result;
    };
    let setSwapPolicy_call = async (swapPolicy) => {
      let result = await this.call("setSwapPolicy", [swapPolicy]);
      return;
    };
    this.setSwapPolicy = Object.assign(setSwapPolicy_send, {
      call: setSwapPolicy_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let updateVotingExecutorManager_send = async () => {
      let result = await this.send("updateVotingExecutorManager");
      return result;
    };
    let updateVotingExecutorManager_call = async () => {
      let result = await this.call("updateVotingExecutorManager");
      return;
    };
    this.updateVotingExecutorManager = Object.assign(updateVotingExecutorManager_send, {
      call: updateVotingExecutorManager_call
    });
    let upgrade_send = async (configStore) => {
      let result = await this.send("upgrade", [configStore]);
      return result;
    };
    let upgrade_call = async (configStore) => {
      let result = await this.call("upgrade", [configStore]);
      return;
    };
    this.upgrade = Object.assign(upgrade_send, {
      call: upgrade_call
    });
  }
};

// src/contracts/OSWAP_ConfigStoreTradeVault.ts
var import_eth_wallet11 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_ConfigStoreTradeVault.json.ts
var OSWAP_ConfigStoreTradeVault_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "uint256", "name": "_arbitrageFee", "type": "uint256" }, { "internalType": "address", "name": "_router", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }], "name": "ParamSet1", "type": "event" },
    { "inputs": [], "name": "arbitrageFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "feeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getTradeParam", "outputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newConfigStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStoreTradeVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "router", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfigAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "608060405234801561001057600080fd5b5060405161045938038061045983398101604081905261002f91610063565b600191909155600080546001600160a01b039092166001600160a01b031992831617905560038054909116301790556100a0565b6000806040838503121561007657600080fd5b825160208401519092506001600160a01b038116811461009557600080fd5b809150509250929050565b6103aa806100af6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639db57e1f1161005b5780639db57e1f14610133578063d1fd27b314610148578063ef0609511461015b578063f887ea401461017b57600080fd5b8063017e7e58146100825780633a310c3d146100cc5780639b0e64531461011c575b600080fd5b6002546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f060005460015473ffffffffffffffffffffffffffffffffffffffff90911691565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016100c3565b61012560015481565b6040519081526020016100c3565b610146610141366004610352565b61019b565b005b610146610156366004610352565b61031f565b6003546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b6000546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b606081901c7f726f75746572000000000000000000000000000000000000000000000000000083141561020d57600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556102e0565b827f6e6577436f6e66696753746f7265000000000000000000000000000000000000141561027a57600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556102e0565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420636f6e666967000000000000000000000000000000000000604482015260640160405180910390fd5b827f88606c7ce4ded506e934ff550061fa2f46fabe388e2e70153ce425794d1c804a8360405161031291815260200190565b60405180910390a2505050565b807f617262697472616765466565000000000000000000000000000000000000000083141561027a5760018190556102e0565b6000806040838503121561036557600080fd5b5050803592602090910135915056fea26469706673582212204f498ae5bb655ff8c2592c0f0378734f24d9ceefd011363c61e6cbd6845df0b864736f6c63430008060033"
};

// src/contracts/OSWAP_ConfigStoreTradeVault.ts
var OSWAP_ConfigStoreTradeVault = class extends import_eth_wallet11.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ConfigStoreTradeVault_json_default.abi, OSWAP_ConfigStoreTradeVault_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([import_eth_wallet11.Utils.toString(params.arbitrageFee), params.router]);
  }
  parseParamSet1Event(receipt) {
    return this.parseEvents(receipt, "ParamSet1").map((e) => this.decodeParamSet1Event(e));
  }
  decodeParamSet1Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      _event: event
    };
  }
  assign() {
    let arbitrageFee_call = async () => {
      let result = await this.call("arbitrageFee");
      return new import_eth_wallet11.BigNumber(result);
    };
    this.arbitrageFee = arbitrageFee_call;
    let feeTo_call = async () => {
      let result = await this.call("feeTo");
      return result;
    };
    this.feeTo = feeTo_call;
    let getTradeParam_call = async () => {
      let result = await this.call("getTradeParam");
      return {
        param1: result[0],
        param2: new import_eth_wallet11.BigNumber(result[1])
      };
    };
    this.getTradeParam = getTradeParam_call;
    let newConfigStore_call = async () => {
      let result = await this.call("newConfigStore");
      return result;
    };
    this.newConfigStore = newConfigStore_call;
    let router_call = async () => {
      let result = await this.call("router");
      return result;
    };
    this.router = router_call;
    let setConfigParams = (params) => [import_eth_wallet11.Utils.stringToBytes32(params.name), import_eth_wallet11.Utils.stringToBytes32(params.value)];
    let setConfig_send = async (params) => {
      let result = await this.send("setConfig", setConfigParams(params));
      return result;
    };
    let setConfig_call = async (params) => {
      let result = await this.call("setConfig", setConfigParams(params));
      return;
    };
    this.setConfig = Object.assign(setConfig_send, {
      call: setConfig_call
    });
    let setConfigAddressParams = (params) => [import_eth_wallet11.Utils.stringToBytes32(params.name), import_eth_wallet11.Utils.stringToBytes32(params.value)];
    let setConfigAddress_send = async (params) => {
      let result = await this.send("setConfigAddress", setConfigAddressParams(params));
      return result;
    };
    let setConfigAddress_call = async (params) => {
      let result = await this.call("setConfigAddress", setConfigAddressParams(params));
      return;
    };
    this.setConfigAddress = Object.assign(setConfigAddress_send, {
      call: setConfigAddress_call
    });
  }
};

// src/contracts/OSWAP_ContractProxy.ts
var import_eth_wallet12 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_ContractProxy.json.ts
var OSWAP_ContractProxy_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "address", "name": "_logic", "type": "address" }, { "internalType": "address", "name": "votingManager", "type": "address" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "stateMutability": "payable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "previousAdmin", "type": "address" }, { "indexed": false, "internalType": "address", "name": "newAdmin", "type": "address" }], "name": "AdminChanged", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "beacon", "type": "address" }], "name": "BeaconUpgraded", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "implementation", "type": "address" }], "name": "Upgraded", "type": "event" },
    { "stateMutability": "payable", "type": "fallback" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "implementation", "outputs": [{ "internalType": "address", "name": "implementation_", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "oldImplementation", "type": "address" }, { "internalType": "address", "name": "newImplementation", "type": "address" }, { "internalType": "bool", "name": "finalize", "type": "bool" }], "name": "upgradeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "oldImplementation", "type": "address" }, { "internalType": "address", "name": "newImplementation", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }, { "internalType": "bool", "name": "finalize", "type": "bool" }], "name": "upgradeToAndCall", "outputs": [], "stateMutability": "payable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "60806040526040516200183b3803806200183b8339810160408190526200002691620004ee565b600080546001600160a01b0319163317905582816200006760017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000621565b600080516020620017f48339815191521462000087576200008762000676565b620000958282600062000113565b50620000c5905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000621565b600080516020620017d483398151915214620000e557620000e562000676565b620000f08262000150565b5050336000908152600260205260409020805460ff1916600117905550620006a2565b6200011e83620001ab565b6000825111806200012c5750805b156200014b57620001498383620001ed60201b62000b2f1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200017b6200021c565b604080516001600160a01b03928316815291841660208301520160405180910390a1620001a88162000255565b50565b620001b6816200030a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200021583836040518060600160405280602781526020016200181460279139620003ad565b9392505050565b600062000246600080516020620017d483398151915260001b6200048a60201b62000b5b1760201c565b546001600160a01b0316919050565b6001600160a01b038116620002c05760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002e9600080516020620017d483398151915260001b6200048a60201b62000b5b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b62000320816200048d60201b62000b5e1760201c565b620003845760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620002b7565b80620002e9600080516020620017f483398151915260001b6200048a60201b62000b5b1760201c565b6060833b6200040e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620002b7565b600080856001600160a01b0316856040516200042b9190620005ce565b600060405180830381855af49150503d806000811462000468576040519150601f19603f3d011682016040523d82523d6000602084013e6200046d565b606091505b5090925090506200048082828662000493565b9695505050505050565b90565b3b151590565b60608315620004a457508162000215565b825115620004b55782518084602001fd5b8160405162461bcd60e51b8152600401620002b79190620005ec565b80516001600160a01b0381168114620004e957600080fd5b919050565b6000806000606084860312156200050457600080fd5b6200050f84620004d1565b92506200051f60208501620004d1565b60408501519092506001600160401b03808211156200053d57600080fd5b818601915086601f8301126200055257600080fd5b8151818111156200056757620005676200068c565b604051601f8201601f19908116603f011681019083821181831017156200059257620005926200068c565b81604052828152896020848701011115620005ac57600080fd5b620005bf83602083016020880162000647565b80955050505050509250925092565b60008251620005e281846020870162000647565b9190910192915050565b60208152600082518060208401526200060d81604085016020870162000647565b601f01601f19169190910160400192915050565b6000828210156200064257634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015620006645781810151838201526020016200064a565b83811115620001495750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61112280620006b26000396000f3fe6080604052600436106100b55760003560e01c80639c52a7f111610069578063c24bcb701161004e578063c24bcb70146101ed578063d4ee1d9014610200578063f2fde38b1461022d576100c4565b80639c52a7f1146101ad578063a2f55ae5146101cd576100c4565b8063605361721161009a578063605361721461014b578063653c3ee4146101605780638da5cb5b14610180576100c4565b80633fd8cc4e146100cc5780635c60da1b14610111576100c4565b366100c4576100c261024d565b005b6100c261024d565b3480156100d857600080fd5b506100fc6100e7366004610ef3565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561011d57600080fd5b5061012661025f565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610108565b34801561015757600080fd5b506100c261026e565b34801561016c57600080fd5b506100c261017b366004610f0e565b61039d565b34801561018c57600080fd5b506000546101269073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101b957600080fd5b506100c26101c8366004610ef3565b610661565b3480156101d957600080fd5b506100c26101e8366004610ef3565b610708565b6100c26101fb366004610f55565b6107ab565b34801561020c57600080fd5b506001546101269073ffffffffffffffffffffffffffffffffffffffff1681565b34801561023957600080fd5b506100c2610248366004610ef3565b610a98565b61025d610258610b64565b610b6e565b565b6000610269610b64565b905090565b60015473ffffffffffffffffffffffffffffffffffffffff16331461031a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b816103a6610b97565b6040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff919091169063a3818b3b9060240160206040518083038186803b15801561040d57600080fd5b505afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190610ffe565b8061045f57503360009081526002602052604090205460ff165b6104c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f7420617574680000000000000000000000000000000000000000000000006044820152606401610311565b7f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d75460ff1615610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f66696e616c697a656400000000000000000000000000000000000000000000006044820152606401610311565b610559610b64565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146105ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420636f6e7472616374000000000000000000000000000000006044820152606401610311565b6040805160008082526020820190925261060991859190610bd7565b811561065b577f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315151790555b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068557600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461072c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf591016106fd565b836107b4610b97565b6040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff919091169063a3818b3b9060240160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190610ffe565b8061086d57503360009081526002602052604090205460ff165b6108d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f7420617574680000000000000000000000000000000000000000000000006044820152606401610311565b7f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d75460ff161561095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f66696e616c697a656400000000000000000000000000000000000000000000006044820152606401610311565b610967610b64565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146109fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420636f6e7472616374000000000000000000000000000000006044820152606401610311565b610a3e8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610bd7915050565b8115610a90577f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315151790555b505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610abc57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b906020016106fd565b6060610b5483836040518060600160405280602781526020016110c660279139610bfc565b9392505050565b90565b3b151590565b6000610269610d0e565b3660008037600080366000845af43d6000803e808015610b8d573d6000f35b3d6000fd5b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b5473ffffffffffffffffffffffffffffffffffffffff16919050565b610be083610d36565b600082511180610bed5750805b15610b925761065b8383610b2f565b6060833b610c8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610311565b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051610cb4919061101b565b600060405180830381855af49150503d8060008114610cef576040519150601f19603f3d011682016040523d82523d6000602084013e610cf4565b606091505b5091509150610d04828286610d83565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610bbb565b610d3f81610dd6565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60608315610d92575081610b54565b825115610da25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103119190611037565b803b610e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610311565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eee57600080fd5b919050565b600060208284031215610f0557600080fd5b610b5482610eca565b600080600060608486031215610f2357600080fd5b610f2c84610eca565b9250610f3a60208501610eca565b91506040840135610f4a816110b4565b809150509250925092565b600080600080600060808688031215610f6d57600080fd5b610f7686610eca565b9450610f8460208701610eca565b9350604086013567ffffffffffffffff80821115610fa157600080fd5b818801915088601f830112610fb557600080fd5b813581811115610fc457600080fd5b896020828501011115610fd657600080fd5b6020830195508094505050506060860135610ff0816110b4565b809150509295509295909350565b60006020828403121561101057600080fd5b8151610b54816110b4565b6000825161102d818460208701611088565b9190910192915050565b6020815260008251806020840152611056816040850160208701611088565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b838110156110a357818101518382015260200161108b565b8381111561065b5750506000910152565b80151581146110c257600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fd7d0582d9728a5bcf7a7531800616276c49d575ffdfb672b012fd3760506e0a64736f6c63430008060033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
};

// src/contracts/OSWAP_ContractProxy.ts
var OSWAP_ContractProxy = class extends import_eth_wallet12.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_ContractProxy_json_default.abi, OSWAP_ContractProxy_json_default.bytecode);
    this.assign();
  }
  deploy(params, _value) {
    return this.__deploy([params.logic, params.votingManager, import_eth_wallet12.Utils.stringToBytes(params.data)], { value: _value });
  }
  parseAdminChangedEvent(receipt) {
    return this.parseEvents(receipt, "AdminChanged").map((e) => this.decodeAdminChangedEvent(e));
  }
  decodeAdminChangedEvent(event) {
    let result = event.data;
    return {
      previousAdmin: result.previousAdmin,
      newAdmin: result.newAdmin,
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseBeaconUpgradedEvent(receipt) {
    return this.parseEvents(receipt, "BeaconUpgraded").map((e) => this.decodeBeaconUpgradedEvent(e));
  }
  decodeBeaconUpgradedEvent(event) {
    let result = event.data;
    return {
      beacon: result.beacon,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUpgradedEvent(receipt) {
    return this.parseEvents(receipt, "Upgraded").map((e) => this.decodeUpgradedEvent(e));
  }
  decodeUpgradedEvent(event) {
    let result = event.data;
    return {
      implementation: result.implementation,
      _event: event
    };
  }
  assign() {
    let implementation_call = async () => {
      let result = await this.call("implementation");
      return result;
    };
    this.implementation = implementation_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let upgradeToParams = (params) => [params.oldImplementation, params.newImplementation, params.finalize];
    let upgradeTo_send = async (params) => {
      let result = await this.send("upgradeTo", upgradeToParams(params));
      return result;
    };
    let upgradeTo_call = async (params) => {
      let result = await this.call("upgradeTo", upgradeToParams(params));
      return;
    };
    this.upgradeTo = Object.assign(upgradeTo_send, {
      call: upgradeTo_call
    });
    let upgradeToAndCallParams = (params) => [params.oldImplementation, params.newImplementation, import_eth_wallet12.Utils.stringToBytes(params.data), params.finalize];
    let upgradeToAndCall_send = async (params, _value) => {
      let result = await this.send("upgradeToAndCall", upgradeToAndCallParams(params), { value: _value });
      return result;
    };
    let upgradeToAndCall_call = async (params, _value) => {
      let result = await this.call("upgradeToAndCall", upgradeToAndCallParams(params), { value: _value });
      return;
    };
    this.upgradeToAndCall = Object.assign(upgradeToAndCall_send, {
      call: upgradeToAndCall_call
    });
  }
};

// src/contracts/OSWAP_MainChainTrollRegistry.ts
var import_eth_wallet13 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_MainChainTrollRegistry.json.ts
var OSWAP_MainChainTrollRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract IERC20", "name": "_govToken", "type": "address" }, { "internalType": "contract I_TrollNFT[]", "name": "_superTrollNft", "type": "address[]" }, { "internalType": "contract I_TrollNFT[]", "name": "_generalTrollNft", "type": "address[]" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "troll", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "isSuperTroll", "type": "bool" }], "name": "AddTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "blocked", "type": "bool" }], "name": "BlockNftTokenId", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Resume", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }], "name": "Shutdown", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "StakeGeneralToll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "StakeSuperToll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "UnstakeGeneralToll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "UnstakeSuperToll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }], "name": "UpdateNFT", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "oldTroll", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newTroll", "type": "address" }], "name": "UpdateTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_VotingManager", "name": "newVotingManager", "type": "address" }], "name": "UpdateVotingManager", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrollRegistry", "type": "address" }], "name": "Upgrade", "type": "event" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakesGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakesSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "bytes", "name": "signature", "type": "bytes" }], "name": "addTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "backerStaking", "outputs": [{ "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.StakeTo[]", "name": "stakings", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }], "name": "getStakeTo", "outputs": [{ "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.StakeTo[]", "name": "", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getStakedBy", "outputs": [{ "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.Nft[]", "name": "", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }], "name": "getStakes", "outputs": [{ "internalType": "uint256", "name": "totalStakes", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getStakesByTrollProfile", "outputs": [{ "internalType": "uint256", "name": "totalStakes", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getTrollByNft", "outputs": [{ "internalType": "address", "name": "troll", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getTrollProperties", "outputs": [{ "components": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.TrollProfile", "name": "troll", "type": "tuple" }, { "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.Nft[]", "name": "nfts", "type": "tuple[]" }, { "internalType": "address[]", "name": "backers", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "trollAddress", "type": "address" }], "name": "getTrollPropertiesByAddress", "outputs": [{ "components": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.TrollProfile", "name": "troll", "type": "tuple" }, { "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.Nft[]", "name": "nfts", "type": "tuple[]" }, { "internalType": "address[]", "name": "backers", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTrolls", "outputs": [{ "components": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.TrollProfile[]", "name": "trolls", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newTrollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }], "name": "nftType", "outputs": [{ "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "ownerTrolls", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "ownerTrollsLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "resume", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "shutdownByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "shutdownByVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "stakeGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "stakeOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "stakeSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakeTo", "outputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakeToInv", "outputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }], "name": "stakeToLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakedBy", "outputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakedByInv", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "stakedByLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "totalStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollNft", "outputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }], "name": "trollNftInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollNftLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "trollProfileInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollProfiles", "outputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollProfilesLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstakeGeneralTroll", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstakeSuperTroll", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trolltype", "type": "uint8" }], "name": "updateNft", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "bytes", "name": "signature", "type": "bytes" }], "name": "updateTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateVotingManager", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a06040523480156200001157600080fd5b50604051620060a9380380620060a983398101604081905262000034916200041f565b600080546001600160a01b0319163317815560016003556001600160601b0319606085901b166080528251905b818110156200014a5760008482815181106200008157620000816200052c565b6020908102919091018101516001600160a01b0381166000818152600d84526040808220879055600c805460018082019092557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03191685179055600e90955290819020805460ff19168517905551919350917f16ddf45031c2e990a872494124626939277cfe2d55a7c67328719867b400513b916200012c91906200049e565b60405180910390a250806200014181620004e2565b91505062000061565b50815160005b81811015620002495760008482815181106200017057620001706200052c565b602002602001015190508382620001889190620004c7565b6001600160a01b0382166000818152600d6020908152604080832094909455600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b03191684179055600e9052829020805460ff19166002908117909155915190917f16ddf45031c2e990a872494124626939277cfe2d55a7c67328719867b400513b916200022b91906200049e565b60405180910390a250806200024081620004e2565b91505062000150565b506040805160808101825260008082526020820181815292820181815260608301829052600580546001810182559252825160039092027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810180546001600160a01b039485166001600160a01b031991821617825595517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db19092018054929094169582168617845591519394919392916001600160a81b031990911617600160a01b83600481111562000321576200032162000516565b02179055506060919091015160029182015533600090815260209190915260409020805460ff1916600117905550620005719350505050565b600082601f8301126200036c57600080fd5b815160206001600160401b03808311156200038b576200038b62000542565b8260051b604051601f19603f83011681018181108482111715620003b357620003b362000542565b60405284815283810192508684018288018501891015620003d357600080fd5b600092505b858310156200040157620003ec816200040d565b845292840192600192909201918401620003d8565b50979650505050505050565b80516200041a8162000558565b919050565b6000806000606084860312156200043557600080fd5b8351620004428162000558565b60208501519093506001600160401b03808211156200046057600080fd5b6200046e878388016200035a565b935060408601519150808211156200048557600080fd5b5062000494868287016200035a565b9150509250925092565b6020810160058310620004c157634e487b7160e01b600052602160045260246000fd5b91905290565b60008219821115620004dd57620004dd62000500565b500190565b6000600019821415620004f957620004f962000500565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200056e57600080fd5b50565b60805160601c615b0b6200059e6000396000818161039f01528181613b810152613bf50152615b0b6000f3fe608060405234801561001057600080fd5b50600436106103625760003560e01c806387fc5c4e116101c8578063bba588ca11610104578063cf86758a116100a2578063de447c6c1161007c578063de447c6c14610956578063e33a7e9714610969578063ef9414fc1461097c578063f2fde38b1461099f57600080fd5b8063cf86758a146108fe578063d4ee1d9014610911578063da1bcdf01461093157600080fd5b8063c1e4eba7116100de578063c1e4eba714610882578063c28758e7146108a2578063cc8c23d1146108b5578063ce5889e6146108c857600080fd5b8063bba588ca14610804578063bba68e1214610824578063be8e42831461083757600080fd5b80639cd83e1d11610171578063a2f55ae51161014b578063a2f55ae51461078f578063a52fc232146107a2578063b562754c146107e9578063b8624127146107fc57600080fd5b80639cd83e1d146106fc5780639df9d5a01461070f578063a2a317221461074557600080fd5b80638da5cb5b116101a25780638da5cb5b146106b65780639c52a7f1146106d65780639c7d51dc146106e957600080fd5b806387fc5c4e146106835780638a9424731461068b5780638b0e9f3f146106ad57600080fd5b8063432121be116102a2578063606a630f116102405780637b7740441161021a5780637b7740441461060b5780637ba6f4581461064a5780637f21e5661461065d5780637f97f2261461067057600080fd5b8063606a630f146105e85780636468fca1146105f0578063653b2b8a146105f857600080fd5b80635678cf221161027c5780635678cf22146105925780635a812465146105c25780635c975abb146105d557806360536172146105e057600080fd5b8063432121be1461054c57806344fe9eb01461055f5780634fd3d1a41461057257600080fd5b80631d4c6b631161030f5780633820a526116102e95780633820a526146104b95780633fd8cc4e146104d9578063425d04f11461050c578063426233601461052c57600080fd5b80631d4c6b63146104745780632170ee67146104875780633043ef751461049957600080fd5b80630900f010116103405780630900f010146103e65780630d504090146103f9578063150b7a021461040c57600080fd5b8063031cd7a914610367578063046f7da21461039057806305268cff1461039a575b600080fd5b61037a6103753660046154a3565b6109b2565b6040516103879190615750565b60405180910390f35b610398610b53565b005b6103c17f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610387565b6103986103f43660046152f7565b610d24565b6103986104073660046154a3565b610e3d565b61044361041a366004615314565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610387565b6103c161048236600461554f565b611056565b6005545b604051908152602001610387565b61048b6104a736600461554f565b6000908152600a602052604090205490565b61048b6104c73660046152f7565b60066020526000908152604090205481565b6104fc6104e73660046152f7565b60026020526000908152604090205460ff1681565b6040519015158152602001610387565b61048b61051a3660046152f7565b600d6020526000908152604090205481565b61048b61053a3660046152f7565b60106020526000908152604090205481565b61039861055a366004615412565b61108d565b61039861056d3660046152f7565b6116eb565b6105856105803660046155e1565b61170f565b60405161038791906157ca565b6105b56105a03660046152f7565b600e6020526000908152604090205460ff1681565b6040516103879190615818565b6103986105d03660046152f7565b6118c5565b60045460ff166104fc565b610398611a37565b610398611b61565b610398611d06565b61048b610606366004615477565b611e6a565b61061e6106193660046155e1565b611e9b565b6040805173ffffffffffffffffffffffffffffffffffffffff9093168352602083019190915201610387565b61048b6106583660046152f7565b611eee565b61039861066b3660046155a9565b611f24565b61039861067e3660046155a9565b61212e565b600c5461048b565b61069e61069936600461554f565b612338565b60405161038793929190615877565b61048b600f5481565b6000546103c19073ffffffffffffffffffffffffffffffffffffffff1681565b6103986106e43660046152f7565b6125f0565b61037a6106f73660046152f7565b612690565b61048b61070a36600461554f565b61274a565b61048b61071d3660046152f7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b610758610753366004615477565b6128a1565b6040805173ffffffffffffffffffffffffffffffffffffffff90951685526020850193909352918301526060820152608001610387565b61039861079d3660046152f7565b6128fe565b6107d46107b0366004615477565b600b6020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610387565b6103c16107f7366004615477565b6129a1565b610398612a7e565b6011546103c19073ffffffffffffffffffffffffffffffffffffffff1681565b610398610832366004615581565b612b8b565b61061e610845366004615477565b60096020908152600092835260408084209091529082529020805460019091015473ffffffffffffffffffffffffffffffffffffffff9091169082565b61089561089036600461554f565b612fc7565b604051610387919061573d565b6103986108b03660046154a3565b613051565b6103986108c33660046154f5565b61325b565b61048b6108d63660046152f7565b73ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604090205490565b61069e61090c3660046152f7565b6134af565b6001546103c19073ffffffffffffffffffffffffffffffffffffffff1681565b6004546103c190610100900473ffffffffffffffffffffffffffffffffffffffff1681565b61048b610964366004615477565b613514565b61048b610977366004615477565b613732565b61098f61098a36600461554f565b613940565b60405161038794939291906156fc565b6103986109ad3660046152f7565b6139aa565b73ffffffffffffffffffffffffffffffffffffffff831660009081526008602052604090208054606091906109e784866158f1565b11156109fd5780546109fa908590615909565b92505b8267ffffffffffffffff811115610a1657610a16615a76565b604051908082528060200260200182016040528015610a8857816020015b610a756040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b815260200190600190039081610a345790505b5091508360005b84811015610b495782610aa287846158f1565b81548110610ab257610ab2615a47565b6000918252602091829020604080516080810182526004909302909101805473ffffffffffffffffffffffffffffffffffffffff16835260018101549383019390935260028301549082015260039091015460608201528451859083908110610b1d57610b1d615a47565b60200260200101819052508180610b3390615981565b9250508080610b4190615981565b915050610a8f565b5050509392505050565b600480546040517fa3818b3b0000000000000000000000000000000000000000000000000000000081523392810192909252610100900473ffffffffffffffffffffffffffffffffffffffff169063a3818b3b9060240160206040518083038186803b158015610bc257600080fd5b505afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906154d8565b610c65576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064015b60405180910390fd5b60045460ff16610cd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f5420504155534544210000000000000000000000000000000000000000006044820152606401610c5c565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040517f490d6d11e278f168be9be39e46297f72ea877136d5bccad9cf4993e63a29568f90600090a1565b600480546040517fa3818b3b0000000000000000000000000000000000000000000000000000000081523392810192909252610100900473ffffffffffffffffffffffffffffffffffffffff169063a3818b3b9060240160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb91906154d8565b610e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610c5c565b610e3a81613a41565b50565b60026003541415610eaa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c5c565b600260035560045460ff1615610f1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b6000610f29848484613ab4565b9050600260058281548110610f4057610f40615a47565b906000526020600020906003020160010160149054906101000a900460ff166004811115610f7057610f706159e9565b14610fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964207479706500000000000000000000000000000000000000006044820152606401610c5c565b3360008181526010602090815260409182902054825173ffffffffffffffffffffffffffffffffffffffff8916815291820187905291810185905260608101919091528291907f3382a3810f9820eedad39485adbc997efa01ec1e6f28a42faa48591c0f021313906080015b60405180910390a3505060016003555050565b600c818154811061106657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60045460ff16156110fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b3373ffffffffffffffffffffffffffffffffffffffff8516611178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642074726f6c6c000000000000000000000000000000000000006044820152606401610c5c565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604090205415611205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f74726f6c6c20616c7265616479206578697374730000000000000000000000006044820152606401610c5c565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611264575073ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902054155b6112ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6f776e65722063616e6e6f7420626520612074726f6c6c0000000000000000006044820152606401610c5c565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604090205460ff1615611380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f7065726d697474656420616464726573732063616e6e6f74206265206120747260448201527f6f6c6c00000000000000000000000000000000000000000000000000000000006064820152608401610c5c565b8473ffffffffffffffffffffffffffffffffffffffff1661149384848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16602082015260340191506114089050565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c0160405160208183030381529060405280519060200120613dc890919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614611510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e76616c69642074726f6c6c207369676e61747572650000000000000000006044820152606401610c5c565b6005805473ffffffffffffffffffffffffffffffffffffffff808816600081815260066020908152604080832086905593871680835260078252848320805460018101825590845292829020909201859055835160808101855291825281019190915291929190810187611585576002611588565b60015b6004811115611599576115996159e9565b81526000602091820181905283546001808201865594825290829020835160039092020180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416178255928401519481018054938416959092169485178255604084015193949093927fffffffffffffffffffffff000000000000000000000000000000000000000000161774010000000000000000000000000000000000000000836004811115611668576116686159e9565b0217905550606082015181600201555050808673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f5a5157dadc8c8bd7d4fc4714b56b66645f6b03fa2bb608c11ee6c5d089a601f7886040516116db911515815260200190565b60405180910390a4505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e3157600080fd5b6005546060908310156118bf5760055461172983856158f1565b11156117405760055461173d908490615909565b91505b8167ffffffffffffffff81111561175957611759615a76565b6040519080825280602002602001820160405280156117c957816020015b6040805160808101825260008082526020808301829052928201819052606082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816117775790505b50905060005b828110156118bd5760056117e385836158f1565b815481106117f3576117f3615a47565b6000918252602091829020604080516080810182526003909302909101805473ffffffffffffffffffffffffffffffffffffffff908116845260018201549081169484019490945291929083019060ff7401000000000000000000000000000000000000000090910416600481111561186e5761186e6159e9565b600481111561187f5761187f6159e9565b815260200160028201548152505082828151811061189f5761189f615a47565b602002602001018190525080806118b590615981565b9150506117cf565b505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146118e957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116611966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c206164647265737300000000000000000000000000000000000000006044820152606401610c5c565b600454610100900473ffffffffffffffffffffffffffffffffffffffff16156119eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616c7265616479207365740000000000000000000000000000000000000000006044820152606401610c5c565b6004805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314611ade576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610c5c565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b6000600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663568621756040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcb57600080fd5b505afa158015611bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c039190615532565b905073ffffffffffffffffffffffffffffffffffffffff8116611c82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f72650000000000000000000000006044820152606401610c5c565b600480547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8481168202929092179283905560405192041681527fe5399da4ca4a23fdcadfc64b00ca059531760b0f400124896ca6d487146e2bba906020015b60405180910390a150565b3360009081526002602052604090205460ff16611da5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610c5c565b60045460ff1615611e12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b60076020528160005260406000208181548110611e8657600080fd5b90600052602060002001600091509150505481565b600a6020528160005260406000208181548110611eb757600080fd5b60009182526020909120600290910201805460019091015473ffffffffffffffffffffffffffffffffffffffff9091169250905082565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054611f1d8161274a565b9392505050565b60026003541415611f91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c5c565b600260035560045460ff1615612003576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b60016005848154811061201857612018615a47565b906000526020600020906003020160010160149054906101000a900460ff166004811115612048576120486159e9565b146120af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964207479706500000000000000000000000000000000000000006044820152606401610c5c565b60006120bc848484613dec565b3360008181526010602090815260409182902054825173ffffffffffffffffffffffffffffffffffffffff89168152918201879052918101849052606081019190915291925085917f1c12b959181c41be80f7832b8e802318a5297f109d7aa0a41c71f1deae8d668390608001611043565b6002600354141561219b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c5c565b600260035560045460ff161561220d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b60026005848154811061222257612222615a47565b906000526020600020906003020160010160149054906101000a900460ff166004811115612252576122526159e9565b146122b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964207479706500000000000000000000000000000000000000006044820152606401610c5c565b60006122c6848484613dec565b3360008181526010602090815260409182902054825173ffffffffffffffffffffffffffffffffffffffff89168152918201879052918101849052606081019190915291925085917f3382a3810f9820eedad39485adbc997efa01ec1e6f28a42faa48591c0f02131390608001611043565b6040805160808101825260008082526020820181905291810182905260608101919091526060806005848154811061237257612372615a47565b6000918252602091829020604080516080810182526003909302909101805473ffffffffffffffffffffffffffffffffffffffff908116845260018201549081169484019490945291929083019060ff740100000000000000000000000000000000000000009091041660048111156123ed576123ed6159e9565b60048111156123fe576123fe6159e9565b81526020016002820154815250509250600a6000858152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156124965760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101612441565b505082519294508291505067ffffffffffffffff8111156124b9576124b9615a76565b6040519080825280602002602001820160405280156124e2578160200160208202803683370190505b50915060005b818110156125e7576009600085838151811061250657612506615a47565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085838151811061256057612560615a47565b602002602001015160200151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815181106125b0576125b0615a47565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806125df81615981565b9150506124e8565b50509193909250565b60005473ffffffffffffffffffffffffffffffffffffffff16331461261457600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a78849101611cfb565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561273f5760008481526020908190206040805160808101825260048602909201805473ffffffffffffffffffffffffffffffffffffffff1683526001808201548486015260028201549284019290925260030154606083015290835290920191016126d5565b505050509050919050565b6000818152600a602052604081208054825b8181101561289957600083828154811061277857612778615a47565b6000918252602090912060029091020190506001815473ffffffffffffffffffffffffffffffffffffffff166000908152600e602052604090205460ff1660048111156127c7576127c76159e9565b141561288657805460018201546040517f8c8c8a5000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691638c8c8a50916128299160040190815260200190565b60206040518083038186803b15801561284157600080fd5b505afa158015612855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128799190615568565b61288390866158f1565b94505b508061289181615981565b91505061275c565b505050919050565b600860205281600052604060002081815481106128bd57600080fd5b6000918252602090912060049091020180546001820154600283015460039093015473ffffffffffffffffffffffffffffffffffffffff9092169450925084565b60005473ffffffffffffffffffffffffffffffffffffffff16331461292257600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf59101611cfb565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020908152604080832084845290915281205480612a39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f7420657869737473000000000000000000000000000000000000000000006044820152606401610c5c565b60058181548110612a4c57612a4c615a47565b600091825260209091206001600390920201015473ffffffffffffffffffffffffffffffffffffffff16949350505050565b600480546040517fa3818b3b0000000000000000000000000000000000000000000000000000000081523392810192909252610100900473ffffffffffffffffffffffffffffffffffffffff169063a3818b3b9060240160206040518083038186803b158015612aed57600080fd5b505afa158015612b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b2591906154d8565b611da5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610c5c565b73ffffffffffffffffffffffffffffffffffffffff8316612c08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c69642074726f6c6c000000000000000000000000000000000000006044820152606401610c5c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090205415612c95576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6e657754726f6c6c20616c7265616479206578697374730000000000000000006044820152606401610c5c565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205460ff1615612d4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f7065726d697474656420616464726573732063616e6e6f74206265206120747260448201527f6f6c6c00000000000000000000000000000000000000000000000000000000006064820152608401610c5c565b3373ffffffffffffffffffffffffffffffffffffffff1660058581548110612d7557612d75615a47565b600091825260209091206003909102015473ffffffffffffffffffffffffffffffffffffffff1614612e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f742066726f6d206f776e65720000000000000000000000000000000000006044820152606401610c5c565b8273ffffffffffffffffffffffffffffffffffffffff16612e8b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040517fffffffffffffffffffffffffffffffffffffffff0000000000000000000000003360601b16602082015260340191506114089050565b73ffffffffffffffffffffffffffffffffffffffff1614612f08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f696e76616c69642074726f6c6c207369676e61747572650000000000000000006044820152606401610c5c565b600060058581548110612f1d57612f1d615a47565b600091825260208083206003929092029091016001810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff8a8116918217909355808652600690945260408086208b90559116808552818520859055905191945092839189917fa809954178f86ac2228f0b080243af1f1e8fa8931fde712147cc69b266967cc191a4505050505050565b6060600a6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561273f5760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff168252600190810154828401529083529092019101612ffc565b600260035414156130be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c5c565b600260035560045460ff1615613130576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b600061313d848484613ab4565b905060016005828154811061315457613154615a47565b906000526020600020906003020160010160149054906101000a900460ff166004811115613184576131846159e9565b146131eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964207479706500000000000000000000000000000000000000006044820152606401610c5c565b3360008181526010602090815260409182902054825173ffffffffffffffffffffffffffffffffffffffff8916815291820187905291810185905260608101919091528291907f1c12b959181c41be80f7832b8e802318a5297f109d7aa0a41c71f1deae8d668390608001611043565b60005473ffffffffffffffffffffffffffffffffffffffff16331461327f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600e6020526040812054600c5460ff90911691901580613316575073ffffffffffffffffffffffffffffffffffffffff84166000818152600d6020526040902054600c805490919081106132f1576132f1615a47565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b905080156133a457600c805473ffffffffffffffffffffffffffffffffffffffff86166000818152600d60205260408120839055600183018455929092527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790556133f6565b60018260048111156133b8576133b86159e9565b146133d75760048360048111156133d1576133d16159e9565b146133ed565b60038360048111156133eb576133eb6159e9565b145b6133f657600080fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600e6020526040902080548491907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836004811115613456576134566159e9565b02179055508373ffffffffffffffffffffffffffffffffffffffff167f16ddf45031c2e990a872494124626939277cfe2d55a7c67328719867b400513b846040516134a19190615818565b60405180910390a250505050565b60408051608081018252600080825260208201819052918101829052606081019190915273ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040902054606090819061350790612338565b9250925092509193909250565b600060026003541415613583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c5c565b600260035560045460ff16156135f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b60006136018484614479565b909250905060016005838154811061361b5761361b615a47565b906000526020600020906003020160010160149054906101000a900460ff16600481111561364b5761364b6159e9565b146136b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964207479706500000000000000000000000000000000000000006044820152606401610c5c565b3360008181526010602090815260409182902054825173ffffffffffffffffffffffffffffffffffffffff8916815291820187905291810184905260608101919091528391907f744df6fdf1e46bf94675ef68c91d2366a3d1af2c057b08a37885b722e70f7c3f906080015b60405180910390a350600160035592915050565b6000600260035414156137a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610c5c565b600260035560045460ff1615613813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610c5c565b600061381f8484614479565b909250905060026005838154811061383957613839615a47565b906000526020600020906003020160010160149054906101000a900460ff166004811115613869576138696159e9565b146138d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e76616c6964207479706500000000000000000000000000000000000000006044820152606401610c5c565b3360008181526010602090815260409182902054825173ffffffffffffffffffffffffffffffffffffffff8916815291820187905291810184905260608101919091528391907fcd40dd8259555b5239d3fb50f32f4f582cc75eef596816a4031083b3fef8dfe99060800161371e565b6005818154811061395057600080fd5b600091825260209091206003909102018054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff91821693509082169174010000000000000000000000000000000000000000900460ff169084565b60005473ffffffffffffffffffffffffffffffffffffffff1633146139ce57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b90602001611cfb565b601180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d90602001611cfb565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600b60209081526040808320878452825280832054938352600982528083208784529091529020805491929091163314613b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f742066726f6d206261636b657200000000000000000000000000000000006044820152606401610c5c565b613ba973ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333086614af6565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b158015613c3957600080fd5b505af1158015613c4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c7191906154d8565b506040517fe7201063000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff86169063e720106390604401600060405180830381600087803b158015613ce157600080fd5b505af1158015613cf5573d6000803e3d6000fd5b50503360009081526010602052604081208054879450909250613d199084906158f1565b9250508190555082600f6000828254613d3291906158f1565b9091555050600480546040517f17e42ec00000000000000000000000000000000000000000000000000000000081523392810192909252610100900473ffffffffffffffffffffffffffffffffffffffff16906317e42ec090602401600060405180830381600087803b158015613da857600080fd5b505af1158015613dbc573d6000803e3d6000fd5b50505050509392505050565b6000806000613dd78585614b91565b91509150613de481614c01565b509392505050565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905260009073ffffffffffffffffffffffffffffffffffffffff8416906342842e0e90606401600060405180830381600087803b158015613e6357600080fd5b505af1158015613e77573d6000803e3d6000fd5b50506040517f8c8c8a500000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff86169250638c8c8a50915060240160206040518083038186803b158015613ee157600080fd5b505afa158015613ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f199190615568565b33600090815260106020526040812080549293508392909190613f3d9084906158f1565b9250508190555080600f6000828254613f5691906158f1565b909155505060058054339160009187908110613f7457613f74615a47565b6000918252602080832073ffffffffffffffffffffffffffffffffffffffff89168452600e9091526040909220546003909102909101915060ff166004811115613fc057613fc06159e9565b600182015474010000000000000000000000000000000000000000900460ff166004811115613ff157613ff16159e9565b14614058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c6964206e66742074797065000000000000000000000000000000006044820152606401610c5c565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600060405180604001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200183815250905080600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052808973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018a815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550506000600a60008a815260200190815260200160002080549050905060405180604001604052808a815260200182815250600b60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008981526020019081526020016000206000820151816000015560208201518160010155905050600a60008a815260200190815260200160002060405180604001604052808a73ffffffffffffffffffffffffffffffffffffffff16815260200189815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550508360020160008154809291906143df90615981565b9091555050600480546040517f17e42ec00000000000000000000000000000000000000000000000000000000081523392810192909252610100900473ffffffffffffffffffffffffffffffffffffffff16906317e42ec090602401600060405180830381600087803b15801561445557600080fd5b505af1158015614469573d6000803e3d6000fd5b5050505050505050509392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602090815260408083208484529091528120805491903390836144b957600080fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812080548291906144ef90600190615909565b73ffffffffffffffffffffffffffffffffffffffff808b1660009081526009602090815260408083208d84529091529020805492945091811690871614614592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e6f742061206261636b657200000000000000000000000000000000000000006044820152606401610c5c565b8060010154935082841461466c5760008284815481106145b4576145b4615a47565b90600052602060002090600402019050808386815481106145d7576145d7615a47565b60009182526020808320845460049093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff938416178155600180860154818301556002808701549083015560039586015495909101949094558454909116825260098152604080832094840154835293905291909120018490555b8180548061467c5761467c615a18565b6000828152602080822060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9094019384020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825560018281018590556002830185905560039092018490559390945573ffffffffffffffffffffffffffffffffffffffff8e168083526009825260408084208f85528352808420805490951685559385018390558252600b81528282208d835281528282208401548c8352600a9091529190208054919650935061475b9250615909565b915081831461481857600081838154811061477857614778615a47565b906000526020600020906002020190508082858154811061479b5761479b615a47565b60009182526020808320845460029093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9384161781556001948501549085015584549091168252600b8152604080832094840154835293905291909120018390555b8080548061482857614828615a18565b6000828152602080822060027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9094019384020180547fffffffffffffffffffffffff000000000000000000000000000000000000000016815560019081018390559290935573ffffffffffffffffffffffffffffffffffffffff8c168152600b835260408082208c835290935291822082815501555060058054879081106148d3576148d3615a47565b6000918252602082206002600390920201018054916148f18361594c565b90915550506040517f8c8c8a500000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff891690638c8c8a509060240160206040518083038186803b15801561495c57600080fd5b505afa158015614970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149949190615568565b336000908152601060205260408120805492975087929091906149b8908490615909565b9250508190555084600f60008282546149d19190615909565b90915550506040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810188905273ffffffffffffffffffffffffffffffffffffffff8916906342842e0e90606401600060405180830381600087803b158015614a4a57600080fd5b505af1158015614a5e573d6000803e3d6000fd5b5050600480546040517f17e42ec00000000000000000000000000000000000000000000000000000000081523392810192909252610100900473ffffffffffffffffffffffffffffffffffffffff1692506317e42ec09150602401600060405180830381600087803b158015614ad357600080fd5b505af1158015614ae7573d6000803e3d6000fd5b50505050505050509250929050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052614b8b908590614e5a565b50505050565b600080825160411415614bc85760208301516040840151606085015160001a614bbc87828585614f6b565b94509450505050614bfa565b825160401415614bf25760208301516040840151614be7868383615083565b935093505050614bfa565b506000905060025b9250929050565b6000816004811115614c1557614c156159e9565b1415614c1e5750565b6001816004811115614c3257614c326159e9565b1415614c9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c5c565b6002816004811115614cae57614cae6159e9565b1415614d16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c5c565b6003816004811115614d2a57614d2a6159e9565b1415614db8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610c5c565b6004816004811115614dcc57614dcc6159e9565b1415610e3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610c5c565b6000614ebc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166150cb9092919063ffffffff16565b805190915015614f665780806020019051810190614eda91906154d8565b614f66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c5c565b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614fa2575060009050600361507a565b8460ff16601b14158015614fba57508460ff16601c14155b15614fcb575060009050600461507a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561501f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166150735760006001925092505061507a565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b016150bd87828885614f6b565b935093505050935093915050565b60606150da84846000856150e2565b949350505050565b606082471015615174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c5c565b843b6151dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c5c565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161520591906156e0565b60006040518083038185875af1925050503d8060008114615242576040519150601f19603f3d011682016040523d82523d6000602084013e615247565b606091505b5091509150615257828286615262565b979650505050505050565b60608315615271575081611f1d565b8251156152815782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5c9190615826565b60008083601f8401126152c757600080fd5b50813567ffffffffffffffff8111156152df57600080fd5b602083019150836020828501011115614bfa57600080fd5b60006020828403121561530957600080fd5b8135611f1d81615aa5565b6000806000806080858703121561532a57600080fd5b843561533581615aa5565b9350602085013561534581615aa5565b925060408501359150606085013567ffffffffffffffff8082111561536957600080fd5b818701915087601f83011261537d57600080fd5b81358181111561538f5761538f615a76565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156153d5576153d5615a76565b816040528281528a60208487010111156153ee57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806000806060858703121561542857600080fd5b843561543381615aa5565b9350602085013561544381615ac7565b9250604085013567ffffffffffffffff81111561545f57600080fd5b61546b878288016152b5565b95989497509550505050565b6000806040838503121561548a57600080fd5b823561549581615aa5565b946020939093013593505050565b6000806000606084860312156154b857600080fd5b83356154c381615aa5565b95602085013595506040909401359392505050565b6000602082840312156154ea57600080fd5b8151611f1d81615ac7565b6000806040838503121561550857600080fd5b823561551381615aa5565b915060208301356005811061552757600080fd5b809150509250929050565b60006020828403121561554457600080fd5b8151611f1d81615aa5565b60006020828403121561556157600080fd5b5035919050565b60006020828403121561557a57600080fd5b5051919050565b6000806000806060858703121561559757600080fd5b84359350602085013561544381615aa5565b6000806000606084860312156155be57600080fd5b8335925060208401356155d081615aa5565b929592945050506040919091013590565b600080604083850312156155f457600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015615654578151805173ffffffffffffffffffffffffffffffffffffffff1688528301518388015260409096019590820190600101615617565b509495945050505050565b60058110615696577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b73ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525060408101516156d4604084018261565f565b50606090810151910152565b600082516156f2818460208701615920565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff8581168252841660208201526080810161572e604083018561565f565b82606083015295945050505050565b602081526000611f1d6020830184615603565b602080825282518282018190526000919060409081850190868401855b828110156157bd578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528581015186860152606090810151908501526080909301929085019060010161576d565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561580c576157f983855161569a565b92840192608092909201916001016157e6565b50909695505050505050565b602081016118bf828461565f565b6020815260008251806020840152615845816040850160208701615920565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b615881818561569a565b60c06080820152600061589760c0830185615603565b82810360a084015283518082526020808601928101919060005b828110156158e357845173ffffffffffffffffffffffffffffffffffffffff16845293810193928101926001016158b1565b509198975050505050505050565b60008219821115615904576159046159ba565b500190565b60008282101561591b5761591b6159ba565b500390565b60005b8381101561593b578181015183820152602001615923565b83811115614b8b5750506000910152565b60008161595b5761595b6159ba565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156159b3576159b36159ba565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610e3a57600080fd5b8015158114610e3a57600080fdfea2646970667358221220f47018c674cc2c934d364daf2eed34c519516cfb895181cb79abe4ee05f3845764736f6c63430008060033"
};

// src/contracts/OSWAP_MainChainTrollRegistry.ts
var OSWAP_MainChainTrollRegistry = class extends import_eth_wallet13.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_MainChainTrollRegistry_json_default.abi, OSWAP_MainChainTrollRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.govToken, params.superTrollNft, params.generalTrollNft]);
  }
  parseAddTrollEvent(receipt) {
    return this.parseEvents(receipt, "AddTroll").map((e) => this.decodeAddTrollEvent(e));
  }
  decodeAddTrollEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      troll: result.troll,
      trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
      isSuperTroll: result.isSuperTroll,
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseBlockNftTokenIdEvent(receipt) {
    return this.parseEvents(receipt, "BlockNftTokenId").map((e) => this.decodeBlockNftTokenIdEvent(e));
  }
  decodeBlockNftTokenIdEvent(event) {
    let result = event.data;
    return {
      nft: result.nft,
      tokenId: new import_eth_wallet13.BigNumber(result.tokenId),
      blocked: result.blocked,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseResumeEvent(receipt) {
    return this.parseEvents(receipt, "Resume").map((e) => this.decodeResumeEvent(e));
  }
  decodeResumeEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseShutdownEvent(receipt) {
    return this.parseEvents(receipt, "Shutdown").map((e) => this.decodeShutdownEvent(e));
  }
  decodeShutdownEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      _event: event
    };
  }
  parseStakeGeneralTollEvent(receipt) {
    return this.parseEvents(receipt, "StakeGeneralToll").map((e) => this.decodeStakeGeneralTollEvent(e));
  }
  decodeStakeGeneralTollEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
      nft: result.nft,
      tokenId: new import_eth_wallet13.BigNumber(result.tokenId),
      stakesChange: new import_eth_wallet13.BigNumber(result.stakesChange),
      stakesBalance: new import_eth_wallet13.BigNumber(result.stakesBalance),
      _event: event
    };
  }
  parseStakeSuperTollEvent(receipt) {
    return this.parseEvents(receipt, "StakeSuperToll").map((e) => this.decodeStakeSuperTollEvent(e));
  }
  decodeStakeSuperTollEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
      nft: result.nft,
      tokenId: new import_eth_wallet13.BigNumber(result.tokenId),
      stakesChange: new import_eth_wallet13.BigNumber(result.stakesChange),
      stakesBalance: new import_eth_wallet13.BigNumber(result.stakesBalance),
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnstakeGeneralTollEvent(receipt) {
    return this.parseEvents(receipt, "UnstakeGeneralToll").map((e) => this.decodeUnstakeGeneralTollEvent(e));
  }
  decodeUnstakeGeneralTollEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
      nft: result.nft,
      tokenId: new import_eth_wallet13.BigNumber(result.tokenId),
      stakesChange: new import_eth_wallet13.BigNumber(result.stakesChange),
      stakesBalance: new import_eth_wallet13.BigNumber(result.stakesBalance),
      _event: event
    };
  }
  parseUnstakeSuperTollEvent(receipt) {
    return this.parseEvents(receipt, "UnstakeSuperToll").map((e) => this.decodeUnstakeSuperTollEvent(e));
  }
  decodeUnstakeSuperTollEvent(event) {
    let result = event.data;
    return {
      backer: result.backer,
      trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
      nft: result.nft,
      tokenId: new import_eth_wallet13.BigNumber(result.tokenId),
      stakesChange: new import_eth_wallet13.BigNumber(result.stakesChange),
      stakesBalance: new import_eth_wallet13.BigNumber(result.stakesBalance),
      _event: event
    };
  }
  parseUpdateNFTEvent(receipt) {
    return this.parseEvents(receipt, "UpdateNFT").map((e) => this.decodeUpdateNFTEvent(e));
  }
  decodeUpdateNFTEvent(event) {
    let result = event.data;
    return {
      nft: result.nft,
      trollType: new import_eth_wallet13.BigNumber(result.trollType),
      _event: event
    };
  }
  parseUpdateTrollEvent(receipt) {
    return this.parseEvents(receipt, "UpdateTroll").map((e) => this.decodeUpdateTrollEvent(e));
  }
  decodeUpdateTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
      oldTroll: result.oldTroll,
      newTroll: result.newTroll,
      _event: event
    };
  }
  parseUpdateVotingManagerEvent(receipt) {
    return this.parseEvents(receipt, "UpdateVotingManager").map((e) => this.decodeUpdateVotingManagerEvent(e));
  }
  decodeUpdateVotingManagerEvent(event) {
    let result = event.data;
    return {
      newVotingManager: result.newVotingManager,
      _event: event
    };
  }
  parseUpgradeEvent(receipt) {
    return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
  }
  decodeUpgradeEvent(event) {
    let result = event.data;
    return {
      newTrollRegistry: result.newTrollRegistry,
      _event: event
    };
  }
  assign() {
    let backerStakingParams = (params) => [params.backer, import_eth_wallet13.Utils.toString(params.start), import_eth_wallet13.Utils.toString(params.length)];
    let backerStaking_call = async (params) => {
      let result = await this.call("backerStaking", backerStakingParams(params));
      return result.map((e) => ({
        nft: e.nft,
        tokenId: new import_eth_wallet13.BigNumber(e.tokenId),
        trollProfileIndex: new import_eth_wallet13.BigNumber(e.trollProfileIndex),
        timestamp: new import_eth_wallet13.BigNumber(e.timestamp)
      }));
    };
    this.backerStaking = backerStaking_call;
    let getStakeTo_call = async (backer) => {
      let result = await this.call("getStakeTo", [backer]);
      return result.map((e) => ({
        nft: e.nft,
        tokenId: new import_eth_wallet13.BigNumber(e.tokenId),
        trollProfileIndex: new import_eth_wallet13.BigNumber(e.trollProfileIndex),
        timestamp: new import_eth_wallet13.BigNumber(e.timestamp)
      }));
    };
    this.getStakeTo = getStakeTo_call;
    let getStakedBy_call = async (trollProfileIndex) => {
      let result = await this.call("getStakedBy", [import_eth_wallet13.Utils.toString(trollProfileIndex)]);
      return result.map((e) => ({
        nft: e.nft,
        tokenId: new import_eth_wallet13.BigNumber(e.tokenId)
      }));
    };
    this.getStakedBy = getStakedBy_call;
    let getStakes_call = async (troll) => {
      let result = await this.call("getStakes", [troll]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.getStakes = getStakes_call;
    let getStakesByTrollProfile_call = async (trollProfileIndex) => {
      let result = await this.call("getStakesByTrollProfile", [import_eth_wallet13.Utils.toString(trollProfileIndex)]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.getStakesByTrollProfile = getStakesByTrollProfile_call;
    let getTrollByNftParams = (params) => [params.nft, import_eth_wallet13.Utils.toString(params.tokenId)];
    let getTrollByNft_call = async (params) => {
      let result = await this.call("getTrollByNft", getTrollByNftParams(params));
      return result;
    };
    this.getTrollByNft = getTrollByNft_call;
    let getTrollProperties_call = async (trollProfileIndex) => {
      let result = await this.call("getTrollProperties", [import_eth_wallet13.Utils.toString(trollProfileIndex)]);
      return {
        troll: {
          owner: result.troll.owner,
          troll: result.troll.troll,
          trollType: new import_eth_wallet13.BigNumber(result.troll.trollType),
          nftCount: new import_eth_wallet13.BigNumber(result.troll.nftCount)
        },
        nfts: result.nfts.map((e) => ({
          nft: e.nft,
          tokenId: new import_eth_wallet13.BigNumber(e.tokenId)
        })),
        backers: result.backers
      };
    };
    this.getTrollProperties = getTrollProperties_call;
    let getTrollPropertiesByAddress_call = async (trollAddress) => {
      let result = await this.call("getTrollPropertiesByAddress", [trollAddress]);
      return {
        troll: {
          owner: result.troll.owner,
          troll: result.troll.troll,
          trollType: new import_eth_wallet13.BigNumber(result.troll.trollType),
          nftCount: new import_eth_wallet13.BigNumber(result.troll.nftCount)
        },
        nfts: result.nfts.map((e) => ({
          nft: e.nft,
          tokenId: new import_eth_wallet13.BigNumber(e.tokenId)
        })),
        backers: result.backers
      };
    };
    this.getTrollPropertiesByAddress = getTrollPropertiesByAddress_call;
    let getTrollsParams = (params) => [import_eth_wallet13.Utils.toString(params.start), import_eth_wallet13.Utils.toString(params.length)];
    let getTrolls_call = async (params) => {
      let result = await this.call("getTrolls", getTrollsParams(params));
      return result.map((e) => ({
        owner: e.owner,
        troll: e.troll,
        trollType: new import_eth_wallet13.BigNumber(e.trollType),
        nftCount: new import_eth_wallet13.BigNumber(e.nftCount)
      }));
    };
    this.getTrolls = getTrolls_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let newTrollRegistry_call = async () => {
      let result = await this.call("newTrollRegistry");
      return result;
    };
    this.newTrollRegistry = newTrollRegistry_call;
    let nftType_call = async (param1) => {
      let result = await this.call("nftType", [param1]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.nftType = nftType_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let ownerTrollsParams = (params) => [params.param1, import_eth_wallet13.Utils.toString(params.param2)];
    let ownerTrolls_call = async (params) => {
      let result = await this.call("ownerTrolls", ownerTrollsParams(params));
      return new import_eth_wallet13.BigNumber(result);
    };
    this.ownerTrolls = ownerTrolls_call;
    let ownerTrollsLength_call = async (owner) => {
      let result = await this.call("ownerTrollsLength", [owner]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.ownerTrollsLength = ownerTrollsLength_call;
    let paused_call = async () => {
      let result = await this.call("paused");
      return result;
    };
    this.paused = paused_call;
    let stakeOf_call = async (param1) => {
      let result = await this.call("stakeOf", [param1]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.stakeOf = stakeOf_call;
    let stakeToParams = (params) => [params.param1, import_eth_wallet13.Utils.toString(params.param2)];
    let stakeTo_call = async (params) => {
      let result = await this.call("stakeTo", stakeToParams(params));
      return {
        nft: result.nft,
        tokenId: new import_eth_wallet13.BigNumber(result.tokenId),
        trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
        timestamp: new import_eth_wallet13.BigNumber(result.timestamp)
      };
    };
    this.stakeTo = stakeTo_call;
    let stakeToInvParams = (params) => [params.param1, import_eth_wallet13.Utils.toString(params.param2)];
    let stakeToInv_call = async (params) => {
      let result = await this.call("stakeToInv", stakeToInvParams(params));
      return {
        backer: result.backer,
        index: new import_eth_wallet13.BigNumber(result.index)
      };
    };
    this.stakeToInv = stakeToInv_call;
    let stakeToLength_call = async (backer) => {
      let result = await this.call("stakeToLength", [backer]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.stakeToLength = stakeToLength_call;
    let stakedByParams = (params) => [import_eth_wallet13.Utils.toString(params.param1), import_eth_wallet13.Utils.toString(params.param2)];
    let stakedBy_call = async (params) => {
      let result = await this.call("stakedBy", stakedByParams(params));
      return {
        nft: result.nft,
        tokenId: new import_eth_wallet13.BigNumber(result.tokenId)
      };
    };
    this.stakedBy = stakedBy_call;
    let stakedByInvParams = (params) => [params.param1, import_eth_wallet13.Utils.toString(params.param2)];
    let stakedByInv_call = async (params) => {
      let result = await this.call("stakedByInv", stakedByInvParams(params));
      return {
        trollProfileIndex: new import_eth_wallet13.BigNumber(result.trollProfileIndex),
        index: new import_eth_wallet13.BigNumber(result.index)
      };
    };
    this.stakedByInv = stakedByInv_call;
    let stakedByLength_call = async (trollProfileIndex) => {
      let result = await this.call("stakedByLength", [import_eth_wallet13.Utils.toString(trollProfileIndex)]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.stakedByLength = stakedByLength_call;
    let totalStake_call = async () => {
      let result = await this.call("totalStake");
      return new import_eth_wallet13.BigNumber(result);
    };
    this.totalStake = totalStake_call;
    let trollNft_call = async (param1) => {
      let result = await this.call("trollNft", [import_eth_wallet13.Utils.toString(param1)]);
      return result;
    };
    this.trollNft = trollNft_call;
    let trollNftInv_call = async (param1) => {
      let result = await this.call("trollNftInv", [param1]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.trollNftInv = trollNftInv_call;
    let trollNftLength_call = async () => {
      let result = await this.call("trollNftLength");
      return new import_eth_wallet13.BigNumber(result);
    };
    this.trollNftLength = trollNftLength_call;
    let trollProfileInv_call = async (param1) => {
      let result = await this.call("trollProfileInv", [param1]);
      return new import_eth_wallet13.BigNumber(result);
    };
    this.trollProfileInv = trollProfileInv_call;
    let trollProfiles_call = async (param1) => {
      let result = await this.call("trollProfiles", [import_eth_wallet13.Utils.toString(param1)]);
      return {
        owner: result.owner,
        troll: result.troll,
        trollType: new import_eth_wallet13.BigNumber(result.trollType),
        nftCount: new import_eth_wallet13.BigNumber(result.nftCount)
      };
    };
    this.trollProfiles = trollProfiles_call;
    let trollProfilesLength_call = async () => {
      let result = await this.call("trollProfilesLength");
      return new import_eth_wallet13.BigNumber(result);
    };
    this.trollProfilesLength = trollProfilesLength_call;
    let votingManager_call = async () => {
      let result = await this.call("votingManager");
      return result;
    };
    this.votingManager = votingManager_call;
    let addStakesGeneralTrollParams = (params) => [params.nft, import_eth_wallet13.Utils.toString(params.tokenId), import_eth_wallet13.Utils.toString(params.amount)];
    let addStakesGeneralTroll_send = async (params) => {
      let result = await this.send("addStakesGeneralTroll", addStakesGeneralTrollParams(params));
      return result;
    };
    let addStakesGeneralTroll_call = async (params) => {
      let result = await this.call("addStakesGeneralTroll", addStakesGeneralTrollParams(params));
      return;
    };
    this.addStakesGeneralTroll = Object.assign(addStakesGeneralTroll_send, {
      call: addStakesGeneralTroll_call
    });
    let addStakesSuperTrollParams = (params) => [params.nft, import_eth_wallet13.Utils.toString(params.tokenId), import_eth_wallet13.Utils.toString(params.amount)];
    let addStakesSuperTroll_send = async (params) => {
      let result = await this.send("addStakesSuperTroll", addStakesSuperTrollParams(params));
      return result;
    };
    let addStakesSuperTroll_call = async (params) => {
      let result = await this.call("addStakesSuperTroll", addStakesSuperTrollParams(params));
      return;
    };
    this.addStakesSuperTroll = Object.assign(addStakesSuperTroll_send, {
      call: addStakesSuperTroll_call
    });
    let addTrollParams = (params) => [params.troll, params.isSuperTroll, import_eth_wallet13.Utils.stringToBytes(params.signature)];
    let addTroll_send = async (params) => {
      let result = await this.send("addTroll", addTrollParams(params));
      return result;
    };
    let addTroll_call = async (params) => {
      let result = await this.call("addTroll", addTrollParams(params));
      return;
    };
    this.addTroll = Object.assign(addTroll_send, {
      call: addTroll_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let initAddress_send = async (votingManager) => {
      let result = await this.send("initAddress", [votingManager]);
      return result;
    };
    let initAddress_call = async (votingManager) => {
      let result = await this.call("initAddress", [votingManager]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let onERC721ReceivedParams = (params) => [params.param1, params.param2, import_eth_wallet13.Utils.toString(params.param3), import_eth_wallet13.Utils.stringToBytes(params.param4)];
    let onERC721Received_send = async (params) => {
      let result = await this.send("onERC721Received", onERC721ReceivedParams(params));
      return result;
    };
    let onERC721Received_call = async (params) => {
      let result = await this.call("onERC721Received", onERC721ReceivedParams(params));
      return result;
    };
    this.onERC721Received = Object.assign(onERC721Received_send, {
      call: onERC721Received_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let resume_send = async () => {
      let result = await this.send("resume");
      return result;
    };
    let resume_call = async () => {
      let result = await this.call("resume");
      return;
    };
    this.resume = Object.assign(resume_send, {
      call: resume_call
    });
    let shutdownByAdmin_send = async () => {
      let result = await this.send("shutdownByAdmin");
      return result;
    };
    let shutdownByAdmin_call = async () => {
      let result = await this.call("shutdownByAdmin");
      return;
    };
    this.shutdownByAdmin = Object.assign(shutdownByAdmin_send, {
      call: shutdownByAdmin_call
    });
    let shutdownByVoting_send = async () => {
      let result = await this.send("shutdownByVoting");
      return result;
    };
    let shutdownByVoting_call = async () => {
      let result = await this.call("shutdownByVoting");
      return;
    };
    this.shutdownByVoting = Object.assign(shutdownByVoting_send, {
      call: shutdownByVoting_call
    });
    let stakeGeneralTrollParams = (params) => [import_eth_wallet13.Utils.toString(params.trollProfileIndex), params.nft, import_eth_wallet13.Utils.toString(params.tokenId)];
    let stakeGeneralTroll_send = async (params) => {
      let result = await this.send("stakeGeneralTroll", stakeGeneralTrollParams(params));
      return result;
    };
    let stakeGeneralTroll_call = async (params) => {
      let result = await this.call("stakeGeneralTroll", stakeGeneralTrollParams(params));
      return;
    };
    this.stakeGeneralTroll = Object.assign(stakeGeneralTroll_send, {
      call: stakeGeneralTroll_call
    });
    let stakeSuperTrollParams = (params) => [import_eth_wallet13.Utils.toString(params.trollProfileIndex), params.nft, import_eth_wallet13.Utils.toString(params.tokenId)];
    let stakeSuperTroll_send = async (params) => {
      let result = await this.send("stakeSuperTroll", stakeSuperTrollParams(params));
      return result;
    };
    let stakeSuperTroll_call = async (params) => {
      let result = await this.call("stakeSuperTroll", stakeSuperTrollParams(params));
      return;
    };
    this.stakeSuperTroll = Object.assign(stakeSuperTroll_send, {
      call: stakeSuperTroll_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let unstakeGeneralTrollParams = (params) => [params.nft, import_eth_wallet13.Utils.toString(params.tokenId)];
    let unstakeGeneralTroll_send = async (params) => {
      let result = await this.send("unstakeGeneralTroll", unstakeGeneralTrollParams(params));
      return result;
    };
    let unstakeGeneralTroll_call = async (params) => {
      let result = await this.call("unstakeGeneralTroll", unstakeGeneralTrollParams(params));
      return new import_eth_wallet13.BigNumber(result);
    };
    this.unstakeGeneralTroll = Object.assign(unstakeGeneralTroll_send, {
      call: unstakeGeneralTroll_call
    });
    let unstakeSuperTrollParams = (params) => [params.nft, import_eth_wallet13.Utils.toString(params.tokenId)];
    let unstakeSuperTroll_send = async (params) => {
      let result = await this.send("unstakeSuperTroll", unstakeSuperTrollParams(params));
      return result;
    };
    let unstakeSuperTroll_call = async (params) => {
      let result = await this.call("unstakeSuperTroll", unstakeSuperTrollParams(params));
      return new import_eth_wallet13.BigNumber(result);
    };
    this.unstakeSuperTroll = Object.assign(unstakeSuperTroll_send, {
      call: unstakeSuperTroll_call
    });
    let updateNftParams = (params) => [params.nft, import_eth_wallet13.Utils.toString(params.trolltype)];
    let updateNft_send = async (params) => {
      let result = await this.send("updateNft", updateNftParams(params));
      return result;
    };
    let updateNft_call = async (params) => {
      let result = await this.call("updateNft", updateNftParams(params));
      return;
    };
    this.updateNft = Object.assign(updateNft_send, {
      call: updateNft_call
    });
    let updateTrollParams = (params) => [import_eth_wallet13.Utils.toString(params.trollProfileIndex), params.newTroll, import_eth_wallet13.Utils.stringToBytes(params.signature)];
    let updateTroll_send = async (params) => {
      let result = await this.send("updateTroll", updateTrollParams(params));
      return result;
    };
    let updateTroll_call = async (params) => {
      let result = await this.call("updateTroll", updateTrollParams(params));
      return;
    };
    this.updateTroll = Object.assign(updateTroll_send, {
      call: updateTroll_call
    });
    let updateVotingManager_send = async () => {
      let result = await this.send("updateVotingManager");
      return result;
    };
    let updateVotingManager_call = async () => {
      let result = await this.call("updateVotingManager");
      return;
    };
    this.updateVotingManager = Object.assign(updateVotingManager_send, {
      call: updateVotingManager_call
    });
    let upgrade_send = async (trollRegistry) => {
      let result = await this.send("upgrade", [trollRegistry]);
      return result;
    };
    let upgrade_call = async (trollRegistry) => {
      let result = await this.call("upgrade", [trollRegistry]);
      return;
    };
    this.upgrade = Object.assign(upgrade_send, {
      call: upgrade_call
    });
    let upgradeByAdmin_send = async (trollRegistry) => {
      let result = await this.send("upgradeByAdmin", [trollRegistry]);
      return result;
    };
    let upgradeByAdmin_call = async (trollRegistry) => {
      let result = await this.call("upgradeByAdmin", [trollRegistry]);
      return;
    };
    this.upgradeByAdmin = Object.assign(upgradeByAdmin_send, {
      call: upgradeByAdmin_call
    });
  }
};

// src/contracts/OSWAP_MainChainVotingExecutor.ts
var import_eth_wallet14 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_MainChainVotingExecutor.json.ts
var OSWAP_MainChainVotingExecutor_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "Execute", "type": "event" },
    { "inputs": [], "name": "chainRegistry", "outputs": [{ "internalType": "contract OSWAP_ChainRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_ChainRegistry", "name": "_chainRegistry", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c060405234801561001057600080fd5b50604051620014f8380380620014f8833981016040819052610031916100d8565b6000816001600160a01b03166330167bec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561006c57600080fd5b505afa158015610080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a491906100d8565b6001600160601b0319606091821b811660805292901b90911660a05250600080546001600160a01b03191633179055610114565b6000602082840312156100ea57600080fd5b81516100f5816100fc565b9392505050565b6001600160a01b038116811461011157600080fd5b50565b60805160601c60a05160601c61137b6200017d6000396000818160e9015281816101cb015281816105ba0152818161068b0152818161078d015281816109460152610a0d0152600081816071015281816103de0152818161048b0152610868015261137b6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638af7c649116100505780638af7c649146100d1578063da1bcdf0146100e4578063fd5e394a1461010b57600080fd5b806330167bec1461006c5780635a812465146100bc575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100cf6100ca3660046111b4565b61012b565b005b6100cf6100df366004611116565b61019d565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6001546100939073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461014f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600080549091169055565b6040517fb15866e60000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b15866e69060240160206040518083038186803b15801561022257600080fd5b505afa158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a919061118b565b6102eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f535741505f566f74696e674578656375746f723a204e6f742066726f6d207660448201527f6f74696e6700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80610352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420706172616d73206c656e677468000000000000000000000060448201526064016102e2565b7fb98f16f9e16a613740729e6e1b35730f7ca1456ba20bff88685e53e1881bec9082826040516103839291906111ee565b60405180910390a16000828260008181106103a0576103a06112f1565b602002919091013591505060018214156104f657807f73687574646f776e0000000000000000000000000000000000000000000000001415610461577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b86241276040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b50505050505050565b807f726573756d65000000000000000000000000000000000000000000000000000014156104f1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663046f7da26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561044457600080fd5b610aee565b60008383600181811061050b5761050b6112f1565b905060200201359050817f73696465436861696e436f6e666967000000000000000000000000000000000014156105575761055161054c8460018188611243565b610b50565b50505050565b600283141561070257817f73657441646d696e0000000000000000000000000000000000000000000000001415610631576040517f704b6c02000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063704b6c0290602401600060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b5050505050505050565b817f75706772616465566f74696e674d616e6167657200000000000000000000000014156106fd576040517f0900f010000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630900f01090602401600060405180830381600087803b1580156106e457600080fd5b505af11580156106f8573d6000803e3d6000fd5b505050505b610aec565b600084846002818110610717576107176112f1565b602002919091013591505060038414156108b857827f736574566f74696e674578656375746f720000000000000000000000000000001415610806576040517f788ddbcb000000000000000000000000000000000000000000000000000000008152606083901c600482015281151560248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063788ddbcb906044015b600060405180830381600087803b1580156107e757600080fd5b505af11580156107fb573d6000803e3d6000fd5b505050505050505050565b827f7570677261646554726f6c6c526567697374727900000000000000000000000014156108b357468214156108ac576040517f0900f010000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630900f010906024016107cd565b5050505050565b610aea565b6000858560038181106108cd576108cd6112f1565b602002919091013591505060048514156109c557837f736574566f74696e67436f6e666967000000000000000000000000000000000014156109c0576040517fd9c370860000000000000000000000000000000000000000000000000000000081526004810184905260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d9c37086906064015b600060405180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b50505050505050505050565b610ae8565b6007851415610ae857837f616464566f74696e67436f6e66696700000000000000000000000000000000001415610ae85773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365611e438484848a8a6004818110610a4857610a486112f1565b9050602002013560001c8b8b6005818110610a6557610a656112f1565b9050602002013560001c8c8c6006818110610a8257610a826112f1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b16815260048101989098526024880196909652506044860193909352606485019190915260848401526020909102013560a482015260c401610986565b505b505b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d6574657273000000000000000000000000000060448201526064016102e2565b60028111610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d6574657273000000000000000000000000000060448201526064016102e2565b600082826000818110610bcf57610bcf6112f1565b905060200201359050600083836001818110610bed57610bed6112f1565b610c01926020909102013590506002611271565b9050610c0e816001611271565b831115610aee576000848483818110610c2957610c296112f1565b90506020020135905060008585846001610c439190611271565b818110610c5257610c526112f1565b905060200201359050826002610c689190611271565b851415610f5d57837f736574436f6e66696700000000000000000000000000000000000000000000001415610de65760025b838110156104585760015473ffffffffffffffffffffffffffffffffffffffff166342f064c9888884818110610cd257610cd26112f1565b9050602002013560001c6040518263ffffffff1660e01b8152600401610cfa91815260200190565b60206040518083038186803b158015610d1257600080fd5b505afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906111d1565b6040517fd1fd27b3000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff919091169063d1fd27b390604401600060405180830381600087803b158015610dbb57600080fd5b505af1158015610dcf573d6000803e3d6000fd5b505050508080610dde90611289565b915050610c9a565b837f736574436f6e666967416464726573730000000000000000000000000000000014156108b35760025b838110156104585760015473ffffffffffffffffffffffffffffffffffffffff166342f064c9888884818110610e4957610e496112f1565b9050602002013560001c6040518263ffffffff1660e01b8152600401610e7191815260200190565b60206040518083038186803b158015610e8957600080fd5b505afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec191906111d1565b6040517f9db57e1f000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9190911690639db57e1f90604401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b505050508080610f5590611289565b915050610e11565b60008686610f6c866002611271565b818110610f7b57610f7b6112f1565b905060200201359050836003610f919190611271565b861415610ae857847f736574436f6e66696732000000000000000000000000000000000000000000001415610ae85760025b848110156106275760015473ffffffffffffffffffffffffffffffffffffffff166342f064c9898984818110610ffb57610ffb6112f1565b9050602002013560001c6040518263ffffffff1660e01b815260040161102391815260200190565b60206040518083038186803b15801561103b57600080fd5b505afa15801561104f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107391906111d1565b6040517fdf9321a500000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044810184905273ffffffffffffffffffffffffffffffffffffffff919091169063df9321a590606401600060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b50505050808061110e90611289565b915050610fc3565b6000806020838503121561112957600080fd5b823567ffffffffffffffff8082111561114157600080fd5b818501915085601f83011261115557600080fd5b81358181111561116457600080fd5b8660208260051b850101111561117957600080fd5b60209290920196919550909350505050565b60006020828403121561119d57600080fd5b815180151581146111ad57600080fd5b9392505050565b6000602082840312156111c657600080fd5b81356111ad81611320565b6000602082840312156111e357600080fd5b81516111ad81611320565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561122757600080fd5b8260051b80856040850137600092016040019182525092915050565b6000808585111561125357600080fd5b8386111561126057600080fd5b5050600583901b0193919092039150565b60008219821115611284576112846112c2565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112bb576112bb6112c2565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461134257600080fd5b5056fea26469706673582212204d53f7f8a617e2214f9d62d660aaae388268f9fcfa6b1116145b1c9d0da9ae8f64736f6c63430008060033"
};

// src/contracts/OSWAP_MainChainVotingExecutor.ts
var OSWAP_MainChainVotingExecutor = class extends import_eth_wallet14.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_MainChainVotingExecutor_json_default.abi, OSWAP_MainChainVotingExecutor_json_default.bytecode);
    this.assign();
  }
  deploy(votingManager) {
    return this.__deploy([votingManager]);
  }
  parseExecuteEvent(receipt) {
    return this.parseEvents(receipt, "Execute").map((e) => this.decodeExecuteEvent(e));
  }
  decodeExecuteEvent(event) {
    let result = event.data;
    return {
      params: result.params,
      _event: event
    };
  }
  assign() {
    let chainRegistry_call = async () => {
      let result = await this.call("chainRegistry");
      return result;
    };
    this.chainRegistry = chainRegistry_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let votingManager_call = async () => {
      let result = await this.call("votingManager");
      return result;
    };
    this.votingManager = votingManager_call;
    let execute_send = async (params) => {
      let result = await this.send("execute", [import_eth_wallet14.Utils.stringToBytes32(params)]);
      return result;
    };
    let execute_call = async (params) => {
      let result = await this.call("execute", [import_eth_wallet14.Utils.stringToBytes32(params)]);
      return;
    };
    this.execute = Object.assign(execute_send, {
      call: execute_call
    });
    let initAddress_send = async (chainRegistry) => {
      let result = await this.send("initAddress", [chainRegistry]);
      return result;
    };
    let initAddress_call = async (chainRegistry) => {
      let result = await this.call("initAddress", [chainRegistry]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
  }
};

// src/contracts/OSWAP_RouterVaultWrapper.ts
var import_eth_wallet15 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_RouterVaultWrapper.json.ts
var OSWAP_RouterVaultWrapper_json_default = {
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vault", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "address", "name": "inToken", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "inAmount", "type": "uint256" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "stateMutability": "payable", "type": "receive" }
  ],
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b03191633179055612a54806100326000396000f3fe60806040526004361061007f5760003560e01c8063842c48351161004e578063842c48351461023d5780638da5cb5b146102525780639d69dc4e146102a4578063bdfcb8b0146102d157600080fd5b806313c35abb146101c45780632211b3bd146101ea57806353613a031461020a5780635a8124651461021d57600080fd5b366101bf57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101249190612328565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420666f726d20726f75746572000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b6101d76101d23660046123b7565b6102f1565b6040519081526020015b60405180910390f35b3480156101f657600080fd5b506101d761020536600461241d565b6106c4565b6101d7610218366004612345565b610c2d565b34801561022957600080fd5b506101bd61023836600461261e565b610fb3565b34801561024957600080fd5b506101bd61117f565b34801561025e57600080fd5b5060005461027f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e1565b3480156102b057600080fd5b5060015461027f9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102dd57600080fd5b506101d76102ec366004612497565b61131a565b600032331480156103015750333b155b610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b600154604080517ff887ea40000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163f887ea40916004808301926020929190829003018186803b1580156103d257600080fd5b505afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190612328565b905060008173ffffffffffffffffffffffffffffffffffffffff1663ed3b11ce3486602001518b8b8b8b600067ffffffffffffffff81111561044e5761044e6129ca565b6040519080825280601f01601f191660200182016040528015610478576020820181803683370190505b506040518863ffffffff1660e01b815260040161049a969594939291906127d7565b6000604051808303818588803b1580156104b357600080fd5b505af11580156104c7573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261050e919081019061253a565b91505080600182516105209190612929565b815181106105305761053061299b565b602090810291909101810151908501908152604080517fd06f3fb5000000000000000000000000000000000000000000000000000000008152865160048201529151602483015285015173ffffffffffffffffffffffffffffffffffffffff90811660448301526060860151606483015260808601518116608483015260a086015160a48301523360c483015287169063d06f3fb59060e401602060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b919061263b565b92508573ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc0843360008560008151811061066c5761066c61299b565b60200260200101516040516106b1949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a2505095945050505050565b600032331480156106d45750333b155b61073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b60008573ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078257600080fd5b505afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190612328565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190612328565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663b66bd67c8c8c876040518463ffffffff1660e01b81526004016108a093929190612710565b60006040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109129190810190612505565b9050806000815181106109275761092761299b565b602002602001015191505061093d81338961186e565b965061096073ffffffffffffffffffffffffffffffffffffffff821683896119e3565b600073ffffffffffffffffffffffffffffffffffffffff831663c1385f2460208801358a8e8e898f8e896040519080825280601f01601f1916602001820160405280156109b4576020820181803683370190505b506040518963ffffffff1660e01b81526004016109d8989796959493929190612832565b600060405180830381600087803b1580156109f257600080fd5b505af1158015610a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a4c919081019061253a565b6040517fd06f3fb500000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff8b16915063d06f3fb590610aa4908990339060040161275d565b602060405180830381600087803b158015610abe57600080fd5b505af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af6919061263b565b94508873ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc086338585600081518110610b4657610b4661299b565b6020026020010151604051610b8b949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a280600081518110610ba657610ba661299b565b6020026020010151881115610c1f57610bfd3382600081518110610bcc57610bcc61299b565b60200260200101518a610bdf9190612929565b73ffffffffffffffffffffffffffffffffffffffff85169190611b74565b610c1f73ffffffffffffffffffffffffffffffffffffffff8316846000611bcf565b505050509695505050505050565b60003233148015610c3d5750333b155b610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b600154604080517ff887ea40000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163f887ea40916004808301926020929190829003018186803b158015610d0e57600080fd5b505afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d469190612328565b9050600073ffffffffffffffffffffffffffffffffffffffff821663e76c59753460208701358b8b8b8b886040519080825280601f01601f191660200182016040528015610d9b576020820181803683370190505b506040518863ffffffff1660e01b8152600401610dbd969594939291906127d7565b6000604051808303818588803b158015610dd657600080fd5b505af1158015610dea573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e31919081019061253a565b6040517fd06f3fb500000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff8816915063d06f3fb590610e89908790339060040161275d565b602060405180830381600087803b158015610ea357600080fd5b505af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061263b565b92508573ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc08433600085600081518110610f2c57610f2c61299b565b6020026020010151604051610f71949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a2610fa83382600081518110610f9057610f9061299b565b602002602001015134610fa39190612929565b611d60565b505095945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f742066726f6d206f776e657200000000000000000000000000000000000060448201526064016101b4565b73ffffffffffffffffffffffffffffffffffffffff81166110b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c2061646472657373000000000000000000000000000000000000000060448201526064016101b4565b60015473ffffffffffffffffffffffffffffffffffffffff1615611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616c72656164792073657400000000000000000000000000000000000000000060448201526064016101b4565b6001805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600080549091169055565b600154604080517fef060951000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163ef060951916004808301926020929190829003018186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112229190612328565b905073ffffffffffffffffffffffffffffffffffffffff81166112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f726500000000000000000000000060448201526064016101b4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f6fa6ee9ec7808d2a9699505042862d79597c4068938b960a4a18d584a2aa3eea9060200160405180910390a150565b6000323314801561132a5750333b155b611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b600154604080517ff887ea40000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163f887ea40916004808301926020929190829003018186803b1580156113fb57600080fd5b505afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190612328565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663b66bd67c8b8b8b73ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561149c57600080fd5b505afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190612328565b6040518463ffffffff1660e01b81526004016114f293929190612710565b60006040518083038186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115649190810190612505565b9050806000815181106115795761157961299b565b602002602001015191505061158f81338861186e565b95506115b273ffffffffffffffffffffffffffffffffffffffff821683886119e3565b60008273ffffffffffffffffffffffffffffffffffffffff166365d9e64b8887602001518d8d878e8d600067ffffffffffffffff8111156115f5576115f56129ca565b6040519080825280601f01601f19166020018201604052801561161f576020820181803683370190505b506040518963ffffffff1660e01b8152600401611643989796959493929190612832565b600060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116b7919081019061253a565b91505080600182516116c99190612929565b815181106116d9576116d961299b565b602090810291909101810151908601908152604080517fd06f3fb5000000000000000000000000000000000000000000000000000000008152875160048201529151602483015286015173ffffffffffffffffffffffffffffffffffffffff90811660448301526060870151606483015260808701518116608483015260a087015160a48301523360c483015289169063d06f3fb59060e401602060405180830381600087803b15801561178c57600080fd5b505af11580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c4919061263b565b93508773ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc0853385856000815181106118145761181461299b565b6020026020010151604051611859949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a25050509695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b1580156118d657600080fd5b505afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e919061263b565b905061193273ffffffffffffffffffffffffffffffffffffffff8516843085611e6a565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b15801561199957600080fd5b505afa1580156119ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d1919061263b565b6119db9190612929565b949350505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d919061263b565b611a979190612911565b60405173ffffffffffffffffffffffffffffffffffffffff8516602482015260448101829052909150611b6e9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611ec8565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611bca9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611aec565b505050565b801580611c7e57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c4457600080fd5b505afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c919061263b565b155b611d0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016101b4565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611bca9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611aec565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611d9791906126f4565b60006040518083038185875af1925050503d8060008114611dd4576040519150601f19603f3d011682016040523d82523d6000602084013e611dd9565b606091505b5050905080611bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016101b4565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611b6e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611aec565b6000611f2a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611fd49092919063ffffffff16565b805190915015611bca5780806020019051810190611f4891906125fc565b611bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101b4565b60606119db8484600085611fea565b9392505050565b60608247101561207c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101b4565b843b6120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b4565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161210d91906126f4565b60006040518083038185875af1925050503d806000811461214a576040519150601f19603f3d011682016040523d82523d6000602084013e61214f565b606091505b509150915061215f82828661216a565b979650505050505050565b60608315612179575081611fe3565b8251156121895782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b4919061274a565b60008083601f8401126121cf57600080fd5b50813567ffffffffffffffff8111156121e757600080fd5b6020830191508360208260051b850101111561220257600080fd5b9250929050565b600082601f83011261221a57600080fd5b8151602061222f61222a836128ed565b61289e565b80838252828201915082860187848660051b890101111561224f57600080fd5b60005b85811015612277578151612265816129f9565b84529284019290840190600101612252565b5090979650505050505050565b600060c0828403121561229657600080fd5b50919050565b600060c082840312156122ae57600080fd5b60405160c0810181811067ffffffffffffffff821117156122d1576122d16129ca565b8060405250809150823581526020830135602082015260408301356122f5816129f9565b6040820152606083810135908201526080830135612312816129f9565b608082015260a092830135920191909152919050565b60006020828403121561233a57600080fd5b8151611fe3816129f9565b6000806000806000610120868803121561235e57600080fd5b853567ffffffffffffffff81111561237557600080fd5b612381888289016121bd565b9096509450506020860135612395816129f9565b9250604086013591506123ab8760608801612284565b90509295509295909350565b600080600080600061012086880312156123d057600080fd5b853567ffffffffffffffff8111156123e757600080fd5b6123f3888289016121bd565b9096509450506020860135612407816129f9565b9250604086013591506123ab876060880161229c565b600080600080600080610140878903121561243757600080fd5b863567ffffffffffffffff81111561244e57600080fd5b61245a89828a016121bd565b909750955050602087013561246e816129f9565b9350604087013592506060870135915061248b8860808901612284565b90509295509295509295565b60008060008060008061014087890312156124b157600080fd5b863567ffffffffffffffff8111156124c857600080fd5b6124d489828a016121bd565b90975095505060208701356124e8816129f9565b9350604087013592506060870135915061248b886080890161229c565b60006020828403121561251757600080fd5b815167ffffffffffffffff81111561252e57600080fd5b6119db84828501612209565b6000806040838503121561254d57600080fd5b825167ffffffffffffffff8082111561256557600080fd5b61257186838701612209565b935060209150818501518181111561258857600080fd5b85019050601f8101861361259b57600080fd5b80516125a961222a826128ed565b80828252848201915084840189868560051b87010111156125c957600080fd5b600094505b838510156125ec5780518352600194909401939185019185016125ce565b5080955050505050509250929050565b60006020828403121561260e57600080fd5b81518015158114611fe357600080fd5b60006020828403121561263057600080fd5b8135611fe3816129f9565b60006020828403121561264d57600080fd5b5051919050565b8183526000602080850194508260005b8581101561269f578135612677816129f9565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612664565b509495945050505050565b600081518084526126c2816020860160208601612940565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612706818460208701612940565b9190910192915050565b604081526000612724604083018587612654565b905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b602081526000611fe360208301846126aa565b823581526020808401359082015260e08101604084013561277d816129f9565b73ffffffffffffffffffffffffffffffffffffffff808216604085015260608601356060850152608086013591506127b4826129f9565b808216608085015260a086013560a085015280851660c085015250509392505050565b86815260a0602082015260006127f160a083018789612654565b73ffffffffffffffffffffffffffffffffffffffff86166040840152846060840152828103608084015261282581856126aa565b9998505050505050505050565b88815287602082015260e06040820152600061285260e08301888a612654565b73ffffffffffffffffffffffffffffffffffffffff87811660608501528616608084015260a0830185905282810360c084015261288f81856126aa565b9b9a5050505050505050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156128e5576128e56129ca565b604052919050565b600067ffffffffffffffff821115612907576129076129ca565b5060051b60200190565b600082198211156129245761292461296c565b500190565b60008282101561293b5761293b61296c565b500390565b60005b8381101561295b578181015183820152602001612943565b83811115611b6e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612a1b57600080fd5b5056fea264697066735822122013576d7a312f407a52ee078ff5df3e8e1f2fe9f6f25a80908cf0574e7f12129064736f6c63430008060033"
};

// src/contracts/OSWAP_RouterVaultWrapper.ts
var OSWAP_RouterVaultWrapper = class extends import_eth_wallet15.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_RouterVaultWrapper_json_default.abi, OSWAP_RouterVaultWrapper_json_default.bytecode);
    this.assign();
  }
  deploy() {
    return this.__deploy();
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      vault: result.vault,
      orderId: new import_eth_wallet15.BigNumber(result.orderId),
      sender: result.sender,
      inToken: result.inToken,
      inAmount: new import_eth_wallet15.BigNumber(result.inAmount),
      _event: event
    };
  }
  parseUpdateConfigStoreEvent(receipt) {
    return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
  }
  decodeUpdateConfigStoreEvent(event) {
    let result = event.data;
    return {
      newConfigStore: result.newConfigStore,
      _event: event
    };
  }
  assign() {
    let configStore_call = async () => {
      let result = await this.call("configStore");
      return result;
    };
    this.configStore = configStore_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let initAddress_send = async (configStore) => {
      let result = await this.send("initAddress", [configStore]);
      return result;
    };
    let initAddress_call = async (configStore) => {
      let result = await this.call("initAddress", [configStore]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let swapETHForExactTokensParams = (params) => [params.pair, params.vault, import_eth_wallet15.Utils.toString(params.deadline), [import_eth_wallet15.Utils.toString(params.order.peerChain), import_eth_wallet15.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet15.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet15.Utils.toString(params.order.expire)]];
    let swapETHForExactTokens_send = async (params, _value) => {
      let result = await this.send("swapETHForExactTokens", swapETHForExactTokensParams(params), { value: _value });
      return result;
    };
    let swapETHForExactTokens_call = async (params, _value) => {
      let result = await this.call("swapETHForExactTokens", swapETHForExactTokensParams(params), { value: _value });
      return new import_eth_wallet15.BigNumber(result);
    };
    this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
      call: swapETHForExactTokens_call
    });
    let swapExactETHForTokensParams = (params) => [params.pair, params.vault, import_eth_wallet15.Utils.toString(params.deadline), [import_eth_wallet15.Utils.toString(params.order.peerChain), import_eth_wallet15.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet15.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet15.Utils.toString(params.order.expire)]];
    let swapExactETHForTokens_send = async (params, _value) => {
      let result = await this.send("swapExactETHForTokens", swapExactETHForTokensParams(params), { value: _value });
      return result;
    };
    let swapExactETHForTokens_call = async (params, _value) => {
      let result = await this.call("swapExactETHForTokens", swapExactETHForTokensParams(params), { value: _value });
      return new import_eth_wallet15.BigNumber(result);
    };
    this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
      call: swapExactETHForTokens_call
    });
    let swapExactTokensForTokensParams = (params) => [params.pair, params.vault, import_eth_wallet15.Utils.toString(params.amountIn), import_eth_wallet15.Utils.toString(params.deadline), [import_eth_wallet15.Utils.toString(params.order.peerChain), import_eth_wallet15.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet15.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet15.Utils.toString(params.order.expire)]];
    let swapExactTokensForTokens_send = async (params) => {
      let result = await this.send("swapExactTokensForTokens", swapExactTokensForTokensParams(params));
      return result;
    };
    let swapExactTokensForTokens_call = async (params) => {
      let result = await this.call("swapExactTokensForTokens", swapExactTokensForTokensParams(params));
      return new import_eth_wallet15.BigNumber(result);
    };
    this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
      call: swapExactTokensForTokens_call
    });
    let swapTokensForExactTokensParams = (params) => [params.pair, params.vault, import_eth_wallet15.Utils.toString(params.amountIn), import_eth_wallet15.Utils.toString(params.deadline), [import_eth_wallet15.Utils.toString(params.order.peerChain), import_eth_wallet15.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet15.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet15.Utils.toString(params.order.expire)]];
    let swapTokensForExactTokens_send = async (params) => {
      let result = await this.send("swapTokensForExactTokens", swapTokensForExactTokensParams(params));
      return result;
    };
    let swapTokensForExactTokens_call = async (params) => {
      let result = await this.call("swapTokensForExactTokens", swapTokensForExactTokensParams(params));
      return new import_eth_wallet15.BigNumber(result);
    };
    this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
      call: swapTokensForExactTokens_call
    });
    let updateConfigStore_send = async () => {
      let result = await this.send("updateConfigStore");
      return result;
    };
    let updateConfigStore_call = async () => {
      let result = await this.call("updateConfigStore");
      return;
    };
    this.updateConfigStore = Object.assign(updateConfigStore_send, {
      call: updateConfigStore_call
    });
  }
};

// src/contracts/OSWAP_SideChainTrollRegistry.ts
var import_eth_wallet16 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_SideChainTrollRegistry.json.ts
var OSWAP_SideChainTrollRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "troll", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "isSuperTroll", "type": "bool" }], "name": "AddTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "DelistTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockGeneralTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockSuperTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": true, "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }], "name": "NewVault", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "RemoveTroll", "type": "event" },
    { "anonymous": false, "inputs": [], "name": "Resume", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newVotingExecutor", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "isActive", "type": "bool" }], "name": "SetVotingExecutor", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }], "name": "Shutdown", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "UnlockGeneralTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "unlock", "type": "bool" }, { "indexed": false, "internalType": "address", "name": "bridgeVault", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "penalty", "type": "uint256" }], "name": "UnlockSuperTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "troll", "type": "address" }], "name": "UpdateTroll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrollRegistry", "type": "address" }], "name": "Upgrade", "type": "event" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "addTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "allVaultToken", "outputs": [{ "internalType": "contract IERC20[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "generalTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashAddTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashRegisterVault", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashRemoveTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "unlock", "type": "bool" }, { "internalType": "address[]", "name": "vaultRegistry", "type": "address[]" }, { "internalType": "uint256[]", "name": "penalty", "type": "uint256[]" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashUnlockTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashUpdateTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault[]", "name": "_vaults", "type": "address[]" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lastTrollTxCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newTrollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newVotingExecutorManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "registerVault", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "removeTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "resume", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "shutdownByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "shutdownByVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "superTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "transactionsCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "trollProfileInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollProfiles", "outputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_SideChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "unlock", "type": "bool" }, { "internalType": "address[]", "name": "vaultRegistry", "type": "address[]" }, { "internalType": "uint256[]", "name": "penalty", "type": "uint256[]" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "updateTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "usedNonce", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "vaultToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "vaultTokenLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "vaults", "outputs": [{ "internalType": "contract IOSWAP_BridgeVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "msgSender", "type": "address" }, { "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32", "name": "paramsHash", "type": "bytes32" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "verifySignatures", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/OSWAP_SideChainTrollRegistry.ts
var OSWAP_SideChainTrollRegistry = class extends import_eth_wallet16.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_SideChainTrollRegistry_json_default.abi, OSWAP_SideChainTrollRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(configStore) {
    return this.__deploy([configStore]);
  }
  parseAddTrollEvent(receipt) {
    return this.parseEvents(receipt, "AddTroll").map((e) => this.decodeAddTrollEvent(e));
  }
  decodeAddTrollEvent(event) {
    let result = event.data;
    return {
      troll: result.troll,
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      isSuperTroll: result.isSuperTroll,
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDelistTrollEvent(receipt) {
    return this.parseEvents(receipt, "DelistTroll").map((e) => this.decodeDelistTrollEvent(e));
  }
  decodeDelistTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      _event: event
    };
  }
  parseLockGeneralTrollEvent(receipt) {
    return this.parseEvents(receipt, "LockGeneralTroll").map((e) => this.decodeLockGeneralTrollEvent(e));
  }
  decodeLockGeneralTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      lockedBy: result.lockedBy,
      _event: event
    };
  }
  parseLockSuperTrollEvent(receipt) {
    return this.parseEvents(receipt, "LockSuperTroll").map((e) => this.decodeLockSuperTrollEvent(e));
  }
  decodeLockSuperTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      lockedBy: result.lockedBy,
      _event: event
    };
  }
  parseNewVaultEvent(receipt) {
    return this.parseEvents(receipt, "NewVault").map((e) => this.decodeNewVaultEvent(e));
  }
  decodeNewVaultEvent(event) {
    let result = event.data;
    return {
      token: result.token,
      vault: result.vault,
      _event: event
    };
  }
  parseRemoveTrollEvent(receipt) {
    return this.parseEvents(receipt, "RemoveTroll").map((e) => this.decodeRemoveTrollEvent(e));
  }
  decodeRemoveTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      _event: event
    };
  }
  parseResumeEvent(receipt) {
    return this.parseEvents(receipt, "Resume").map((e) => this.decodeResumeEvent(e));
  }
  decodeResumeEvent(event) {
    let result = event.data;
    return {
      _event: event
    };
  }
  parseSetVotingExecutorEvent(receipt) {
    return this.parseEvents(receipt, "SetVotingExecutor").map((e) => this.decodeSetVotingExecutorEvent(e));
  }
  decodeSetVotingExecutorEvent(event) {
    let result = event.data;
    return {
      newVotingExecutor: result.newVotingExecutor,
      isActive: result.isActive,
      _event: event
    };
  }
  parseShutdownEvent(receipt) {
    return this.parseEvents(receipt, "Shutdown").map((e) => this.decodeShutdownEvent(e));
  }
  decodeShutdownEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUnlockGeneralTrollEvent(receipt) {
    return this.parseEvents(receipt, "UnlockGeneralTroll").map((e) => this.decodeUnlockGeneralTrollEvent(e));
  }
  decodeUnlockGeneralTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      _event: event
    };
  }
  parseUnlockSuperTrollEvent(receipt) {
    return this.parseEvents(receipt, "UnlockSuperTroll").map((e) => this.decodeUnlockSuperTrollEvent(e));
  }
  decodeUnlockSuperTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      unlock: result.unlock,
      bridgeVault: result.bridgeVault,
      penalty: new import_eth_wallet16.BigNumber(result.penalty),
      _event: event
    };
  }
  parseUpdateConfigStoreEvent(receipt) {
    return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
  }
  decodeUpdateConfigStoreEvent(event) {
    let result = event.data;
    return {
      newConfigStore: result.newConfigStore,
      _event: event
    };
  }
  parseUpdateTrollEvent(receipt) {
    return this.parseEvents(receipt, "UpdateTroll").map((e) => this.decodeUpdateTrollEvent(e));
  }
  decodeUpdateTrollEvent(event) {
    let result = event.data;
    return {
      trollProfileIndex: new import_eth_wallet16.BigNumber(result.trollProfileIndex),
      troll: result.troll,
      _event: event
    };
  }
  parseUpgradeEvent(receipt) {
    return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
  }
  decodeUpgradeEvent(event) {
    let result = event.data;
    return {
      newTrollRegistry: result.newTrollRegistry,
      _event: event
    };
  }
  assign() {
    let allVaultToken_call = async () => {
      let result = await this.call("allVaultToken");
      return result;
    };
    this.allVaultToken = allVaultToken_call;
    let configStore_call = async () => {
      let result = await this.call("configStore");
      return result;
    };
    this.configStore = configStore_call;
    let generalTrollCount_call = async () => {
      let result = await this.call("generalTrollCount");
      return new import_eth_wallet16.BigNumber(result);
    };
    this.generalTrollCount = generalTrollCount_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let hashAddTrollParams = (params) => [import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.troll, params.isSuperTroll, import_eth_wallet16.Utils.toString(params.nonce)];
    let hashAddTroll_call = async (params) => {
      let result = await this.call("hashAddTroll", hashAddTrollParams(params));
      return result;
    };
    this.hashAddTroll = hashAddTroll_call;
    let hashRegisterVaultParams = (params) => [params.token, params.vault, import_eth_wallet16.Utils.toString(params.nonce)];
    let hashRegisterVault_call = async (params) => {
      let result = await this.call("hashRegisterVault", hashRegisterVaultParams(params));
      return result;
    };
    this.hashRegisterVault = hashRegisterVault_call;
    let hashRemoveTrollParams = (params) => [import_eth_wallet16.Utils.toString(params.trollProfileIndex), import_eth_wallet16.Utils.toString(params.nonce)];
    let hashRemoveTroll_call = async (params) => {
      let result = await this.call("hashRemoveTroll", hashRemoveTrollParams(params));
      return result;
    };
    this.hashRemoveTroll = hashRemoveTroll_call;
    let hashUnlockTrollParams = (params) => [import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.unlock, params.vaultRegistry, import_eth_wallet16.Utils.toString(params.penalty), import_eth_wallet16.Utils.toString(params.nonce)];
    let hashUnlockTroll_call = async (params) => {
      let result = await this.call("hashUnlockTroll", hashUnlockTrollParams(params));
      return result;
    };
    this.hashUnlockTroll = hashUnlockTroll_call;
    let hashUpdateTrollParams = (params) => [import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.newTroll, import_eth_wallet16.Utils.toString(params.nonce)];
    let hashUpdateTroll_call = async (params) => {
      let result = await this.call("hashUpdateTroll", hashUpdateTrollParams(params));
      return result;
    };
    this.hashUpdateTroll = hashUpdateTroll_call;
    let isGeneralTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
    let isGeneralTroll_call = async (params) => {
      let result = await this.call("isGeneralTroll", isGeneralTrollParams(params));
      return result;
    };
    this.isGeneralTroll = isGeneralTroll_call;
    let isGeneralTrollByIndexParams = (params) => [import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
    let isGeneralTrollByIndex_call = async (params) => {
      let result = await this.call("isGeneralTrollByIndex", isGeneralTrollByIndexParams(params));
      return result;
    };
    this.isGeneralTrollByIndex = isGeneralTrollByIndex_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let isSuperTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
    let isSuperTroll_call = async (params) => {
      let result = await this.call("isSuperTroll", isSuperTrollParams(params));
      return result;
    };
    this.isSuperTroll = isSuperTroll_call;
    let isSuperTrollByIndexParams = (params) => [import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
    let isSuperTrollByIndex_call = async (params) => {
      let result = await this.call("isSuperTrollByIndex", isSuperTrollByIndexParams(params));
      return result;
    };
    this.isSuperTrollByIndex = isSuperTrollByIndex_call;
    let isVotingExecutor_call = async (param1) => {
      let result = await this.call("isVotingExecutor", [param1]);
      return result;
    };
    this.isVotingExecutor = isVotingExecutor_call;
    let lastTrollTxCount_call = async (param1) => {
      let result = await this.call("lastTrollTxCount", [param1]);
      return new import_eth_wallet16.BigNumber(result);
    };
    this.lastTrollTxCount = lastTrollTxCount_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let newTrollRegistry_call = async () => {
      let result = await this.call("newTrollRegistry");
      return result;
    };
    this.newTrollRegistry = newTrollRegistry_call;
    let newVotingExecutorManager_call = async () => {
      let result = await this.call("newVotingExecutorManager");
      return result;
    };
    this.newVotingExecutorManager = newVotingExecutorManager_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let paused_call = async () => {
      let result = await this.call("paused");
      return result;
    };
    this.paused = paused_call;
    let superTrollCount_call = async () => {
      let result = await this.call("superTrollCount");
      return new import_eth_wallet16.BigNumber(result);
    };
    this.superTrollCount = superTrollCount_call;
    let transactionsCount_call = async () => {
      let result = await this.call("transactionsCount");
      return new import_eth_wallet16.BigNumber(result);
    };
    this.transactionsCount = transactionsCount_call;
    let trollProfileInv_call = async (param1) => {
      let result = await this.call("trollProfileInv", [param1]);
      return new import_eth_wallet16.BigNumber(result);
    };
    this.trollProfileInv = trollProfileInv_call;
    let trollProfiles_call = async (param1) => {
      let result = await this.call("trollProfiles", [import_eth_wallet16.Utils.toString(param1)]);
      return {
        troll: result.troll,
        trollType: new import_eth_wallet16.BigNumber(result.trollType)
      };
    };
    this.trollProfiles = trollProfiles_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let usedNonce_call = async (param1) => {
      let result = await this.call("usedNonce", [import_eth_wallet16.Utils.toString(param1)]);
      return result;
    };
    this.usedNonce = usedNonce_call;
    let vaultToken_call = async (param1) => {
      let result = await this.call("vaultToken", [import_eth_wallet16.Utils.toString(param1)]);
      return result;
    };
    this.vaultToken = vaultToken_call;
    let vaultTokenLength_call = async () => {
      let result = await this.call("vaultTokenLength");
      return new import_eth_wallet16.BigNumber(result);
    };
    this.vaultTokenLength = vaultTokenLength_call;
    let vaults_call = async (param1) => {
      let result = await this.call("vaults", [param1]);
      return result;
    };
    this.vaults = vaults_call;
    let votingExecutor_call = async (param1) => {
      let result = await this.call("votingExecutor", [import_eth_wallet16.Utils.toString(param1)]);
      return result;
    };
    this.votingExecutor = votingExecutor_call;
    let votingExecutorInv_call = async (param1) => {
      let result = await this.call("votingExecutorInv", [param1]);
      return new import_eth_wallet16.BigNumber(result);
    };
    this.votingExecutorInv = votingExecutorInv_call;
    let votingExecutorLength_call = async () => {
      let result = await this.call("votingExecutorLength");
      return new import_eth_wallet16.BigNumber(result);
    };
    this.votingExecutorLength = votingExecutorLength_call;
    let addTrollParams = (params) => [import_eth_wallet16.Utils.stringToBytes(params.signatures), import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.troll, params.isSuperTroll, import_eth_wallet16.Utils.toString(params.nonce)];
    let addTroll_send = async (params) => {
      let result = await this.send("addTroll", addTrollParams(params));
      return result;
    };
    let addTroll_call = async (params) => {
      let result = await this.call("addTroll", addTrollParams(params));
      return;
    };
    this.addTroll = Object.assign(addTroll_send, {
      call: addTroll_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let initAddressParams = (params) => [params.votingExecutor, params.tokens, params.vaults];
    let initAddress_send = async (params) => {
      let result = await this.send("initAddress", initAddressParams(params));
      return result;
    };
    let initAddress_call = async (params) => {
      let result = await this.call("initAddress", initAddressParams(params));
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let lockGeneralTroll_send = async (trollProfileIndex) => {
      let result = await this.send("lockGeneralTroll", [import_eth_wallet16.Utils.toString(trollProfileIndex)]);
      return result;
    };
    let lockGeneralTroll_call = async (trollProfileIndex) => {
      let result = await this.call("lockGeneralTroll", [import_eth_wallet16.Utils.toString(trollProfileIndex)]);
      return;
    };
    this.lockGeneralTroll = Object.assign(lockGeneralTroll_send, {
      call: lockGeneralTroll_call
    });
    let lockSuperTroll_send = async (trollProfileIndex) => {
      let result = await this.send("lockSuperTroll", [import_eth_wallet16.Utils.toString(trollProfileIndex)]);
      return result;
    };
    let lockSuperTroll_call = async (trollProfileIndex) => {
      let result = await this.call("lockSuperTroll", [import_eth_wallet16.Utils.toString(trollProfileIndex)]);
      return;
    };
    this.lockSuperTroll = Object.assign(lockSuperTroll_send, {
      call: lockSuperTroll_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let registerVaultParams = (params) => [import_eth_wallet16.Utils.stringToBytes(params.signatures), params.token, params.vault, import_eth_wallet16.Utils.toString(params.nonce)];
    let registerVault_send = async (params) => {
      let result = await this.send("registerVault", registerVaultParams(params));
      return result;
    };
    let registerVault_call = async (params) => {
      let result = await this.call("registerVault", registerVaultParams(params));
      return;
    };
    this.registerVault = Object.assign(registerVault_send, {
      call: registerVault_call
    });
    let removeTrollParams = (params) => [import_eth_wallet16.Utils.stringToBytes(params.signatures), import_eth_wallet16.Utils.toString(params.trollProfileIndex), import_eth_wallet16.Utils.toString(params.nonce)];
    let removeTroll_send = async (params) => {
      let result = await this.send("removeTroll", removeTrollParams(params));
      return result;
    };
    let removeTroll_call = async (params) => {
      let result = await this.call("removeTroll", removeTrollParams(params));
      return;
    };
    this.removeTroll = Object.assign(removeTroll_send, {
      call: removeTroll_call
    });
    let resume_send = async () => {
      let result = await this.send("resume");
      return result;
    };
    let resume_call = async () => {
      let result = await this.call("resume");
      return;
    };
    this.resume = Object.assign(resume_send, {
      call: resume_call
    });
    let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
    let setVotingExecutor_send = async (params) => {
      let result = await this.send("setVotingExecutor", setVotingExecutorParams(params));
      return result;
    };
    let setVotingExecutor_call = async (params) => {
      let result = await this.call("setVotingExecutor", setVotingExecutorParams(params));
      return;
    };
    this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
      call: setVotingExecutor_call
    });
    let shutdownByAdmin_send = async () => {
      let result = await this.send("shutdownByAdmin");
      return result;
    };
    let shutdownByAdmin_call = async () => {
      let result = await this.call("shutdownByAdmin");
      return;
    };
    this.shutdownByAdmin = Object.assign(shutdownByAdmin_send, {
      call: shutdownByAdmin_call
    });
    let shutdownByVoting_send = async () => {
      let result = await this.send("shutdownByVoting");
      return result;
    };
    let shutdownByVoting_call = async () => {
      let result = await this.call("shutdownByVoting");
      return;
    };
    this.shutdownByVoting = Object.assign(shutdownByVoting_send, {
      call: shutdownByVoting_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let unlockGeneralTrollParams = (params) => [import_eth_wallet16.Utils.stringToBytes(params.signatures), import_eth_wallet16.Utils.toString(params.trollProfileIndex), import_eth_wallet16.Utils.toString(params.nonce)];
    let unlockGeneralTroll_send = async (params) => {
      let result = await this.send("unlockGeneralTroll", unlockGeneralTrollParams(params));
      return result;
    };
    let unlockGeneralTroll_call = async (params) => {
      let result = await this.call("unlockGeneralTroll", unlockGeneralTrollParams(params));
      return;
    };
    this.unlockGeneralTroll = Object.assign(unlockGeneralTroll_send, {
      call: unlockGeneralTroll_call
    });
    let unlockSuperTrollParams = (params) => [import_eth_wallet16.Utils.stringToBytes(params.signatures), import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.unlock, params.vaultRegistry, import_eth_wallet16.Utils.toString(params.penalty), import_eth_wallet16.Utils.toString(params.nonce)];
    let unlockSuperTroll_send = async (params) => {
      let result = await this.send("unlockSuperTroll", unlockSuperTrollParams(params));
      return result;
    };
    let unlockSuperTroll_call = async (params) => {
      let result = await this.call("unlockSuperTroll", unlockSuperTrollParams(params));
      return;
    };
    this.unlockSuperTroll = Object.assign(unlockSuperTroll_send, {
      call: unlockSuperTroll_call
    });
    let updateConfigStore_send = async () => {
      let result = await this.send("updateConfigStore");
      return result;
    };
    let updateConfigStore_call = async () => {
      let result = await this.call("updateConfigStore");
      return;
    };
    this.updateConfigStore = Object.assign(updateConfigStore_send, {
      call: updateConfigStore_call
    });
    let updateTrollParams = (params) => [import_eth_wallet16.Utils.stringToBytes(params.signatures), import_eth_wallet16.Utils.toString(params.trollProfileIndex), params.newTroll, import_eth_wallet16.Utils.toString(params.nonce)];
    let updateTroll_send = async (params) => {
      let result = await this.send("updateTroll", updateTrollParams(params));
      return result;
    };
    let updateTroll_call = async (params) => {
      let result = await this.call("updateTroll", updateTrollParams(params));
      return;
    };
    this.updateTroll = Object.assign(updateTroll_send, {
      call: updateTroll_call
    });
    let upgrade_send = async (trollRegistry) => {
      let result = await this.send("upgrade", [trollRegistry]);
      return result;
    };
    let upgrade_call = async (trollRegistry) => {
      let result = await this.call("upgrade", [trollRegistry]);
      return;
    };
    this.upgrade = Object.assign(upgrade_send, {
      call: upgrade_call
    });
    let upgradeByAdmin_send = async (trollRegistry) => {
      let result = await this.send("upgradeByAdmin", [trollRegistry]);
      return result;
    };
    let upgradeByAdmin_call = async (trollRegistry) => {
      let result = await this.call("upgradeByAdmin", [trollRegistry]);
      return;
    };
    this.upgradeByAdmin = Object.assign(upgradeByAdmin_send, {
      call: upgradeByAdmin_call
    });
    let verifySignaturesParams = (params) => [params.msgSender, import_eth_wallet16.Utils.stringToBytes(params.signatures), import_eth_wallet16.Utils.stringToBytes32(params.paramsHash), import_eth_wallet16.Utils.toString(params.nonce)];
    let verifySignatures_send = async (params) => {
      let result = await this.send("verifySignatures", verifySignaturesParams(params));
      return result;
    };
    let verifySignatures_call = async (params) => {
      let result = await this.call("verifySignatures", verifySignaturesParams(params));
      return;
    };
    this.verifySignatures = Object.assign(verifySignatures_send, {
      call: verifySignatures_call
    });
  }
};

// src/contracts/OSWAP_SideChainVotingExecutor.ts
var import_eth_wallet17 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_SideChainVotingExecutor.json.ts
var OSWAP_SideChainVotingExecutor_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "_trollRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "Execute", "type": "event" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }], "name": "executeHash", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c060405234801561001057600080fd5b50604051610ebe380380610ebe83398101604081905261002f91610169565b806001600160a01b031660a0816001600160a01b031660601b81525050806001600160a01b0316639d69dc4e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561008557600080fd5b505afa158015610099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd9190610169565b6000806101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b03166305268cff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011b57600080fd5b505afa15801561012f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101539190610169565b60601b6001600160601b031916608052506101a5565b60006020828403121561017b57600080fd5b81516101868161018d565b9392505050565b6001600160a01b03811681146101a257600080fd5b50565b60805160601c60a05160601c610ccd6101f16000396000818160c20152818161026a0152818161032c015281816103db0152818161058101526107980152600060710152610ccd6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639d69dc4e116100505780639d69dc4e146100e4578063b2286ef014610104578063c0c888501461012557600080fd5b806305268cff1461006c57806330167bec146100bd575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6000546100939073ffffffffffffffffffffffffffffffffffffffff1681565b610117610112366004610989565b61013a565b6040519081526020016100b4565b6101386101333660046109d5565b610178565b005b60405160009046906101589082903090889088908890602001610a92565b604051602081830303815290604052805190602001209150509392505050565b816101e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420706172616d73206c656e677468000000000000000000000060448201526064015b60405180910390fd5b7fb98f16f9e16a613740729e6e1b35730f7ca1456ba20bff88685e53e1881bec908383604051610215929190610c13565b60405180910390a1600061022a84848461013a565b6040517f099828de00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063099828de906102a79033908a908a9087908990600401610b11565b600060405180830381600087803b1580156102c157600080fd5b505af11580156102d5573d6000803e3d6000fd5b505050506000848460008181106102ee576102ee610c68565b6020029190910135915050600184141561044657807f73687574646f776e00000000000000000000000000000000000000000000000014156103b1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b86241276040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561039257600080fd5b505af11580156103a6573d6000803e3d6000fd5b505050505050610936565b807f726573756d6500000000000000000000000000000000000000000000000000001415610441577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663046f7da26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561039257600080fd5b6108d4565b60008585600181811061045b5761045b610c68565b602002919091013591505060028514156105ca57817f75706772616465436f6e66696753746f726500000000000000000000000000001415610527576000546040517f0900f010000000000000000000000000000000000000000000000000000000008152606083901c600482015273ffffffffffffffffffffffffffffffffffffffff90911690630900f010906024015b600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b50505050505050610936565b817f7570677261646554726f6c6c526567697374727900000000000000000000000014156105c5576040517f0900f010000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630900f010906024016104ed565b6108d2565b6000868660028181106105df576105df610c68565b602002919091013591505060038614156107e157827f736574436f6e666967000000000000000000000000000000000000000000000014156106b0576000546040517fd1fd27b3000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d1fd27b3906044015b600060405180830381600087803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b5050505050505050610936565b827f736574436f6e66696741646472657373000000000000000000000000000000001415610736576000546040517f9db57e1f000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff90911690639db57e1f90604401610675565b827f736574566f74696e674578656375746f7200000000000000000000000000000014156107dc576040517f788ddbcb000000000000000000000000000000000000000000000000000000008152606083901c600482015281151560248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063788ddbcb90604401610675565b6108d0565b6000878760038181106107f6576107f6610c68565b602002919091013591505060048714156108ce57837f736574436f6e666967320000000000000000000000000000000000000000000014156108ce576000546040517fdf9321a500000000000000000000000000000000000000000000000000000000815260048101859052602481018490526044810183905273ffffffffffffffffffffffffffffffffffffffff9091169063df9321a590606401600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b505050505050505050610936565b505b505b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d6574657273000000000000000000000000000060448201526064016101db565b5050505050565b60008083601f84011261094f57600080fd5b50813567ffffffffffffffff81111561096757600080fd5b6020830191508360208260051b850101111561098257600080fd5b9250929050565b60008060006040848603121561099e57600080fd5b833567ffffffffffffffff8111156109b557600080fd5b6109c18682870161093d565b909790965060209590950135949350505050565b6000806000806000606086880312156109ed57600080fd5b853567ffffffffffffffff80821115610a0557600080fd5b610a1189838a0161093d565b90975095506020880135915080821115610a2a57600080fd5b50610a378882890161093d565b96999598509660400135949350505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8581527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115610aef57600080fd5b8360051b80866034850137603492019182019290925260540195945050505050565b60006080820173ffffffffffffffffffffffffffffffffffffffff8816835260206080818501528187835260a08501905060a08860051b86010192508860005b89811015610bfb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6087860301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18c3603018112610bb257600080fd5b8b01803567ffffffffffffffff811115610bcb57600080fd5b8036038d1315610bda57600080fd5b610be78782888501610a49565b965050509183019190830190600101610b51565b50505050604083019490945250606001529392505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610c4c57600080fd5b8260051b80856040850137600092016040019182525092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220ec019599262d9456571dca7e11e7f9a2baff40b3e60c0ffb0c31155505427cf164736f6c63430008060033"
};

// src/contracts/OSWAP_SideChainVotingExecutor.ts
var OSWAP_SideChainVotingExecutor = class extends import_eth_wallet17.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_SideChainVotingExecutor_json_default.abi, OSWAP_SideChainVotingExecutor_json_default.bytecode);
    this.assign();
  }
  deploy(trollRegistry) {
    return this.__deploy([trollRegistry]);
  }
  parseExecuteEvent(receipt) {
    return this.parseEvents(receipt, "Execute").map((e) => this.decodeExecuteEvent(e));
  }
  decodeExecuteEvent(event) {
    let result = event.data;
    return {
      params: result.params,
      _event: event
    };
  }
  assign() {
    let configStore_call = async () => {
      let result = await this.call("configStore");
      return result;
    };
    this.configStore = configStore_call;
    let executeHashParams = (params) => [import_eth_wallet17.Utils.stringToBytes32(params.params), import_eth_wallet17.Utils.toString(params.nonce)];
    let executeHash_call = async (params) => {
      let result = await this.call("executeHash", executeHashParams(params));
      return result;
    };
    this.executeHash = executeHash_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let executeParams = (params) => [import_eth_wallet17.Utils.stringToBytes(params.signatures), import_eth_wallet17.Utils.stringToBytes32(params.params), import_eth_wallet17.Utils.toString(params.nonce)];
    let execute_send = async (params) => {
      let result = await this.send("execute", executeParams(params));
      return result;
    };
    let execute_call = async (params) => {
      let result = await this.call("execute", executeParams(params));
      return;
    };
    this.execute = Object.assign(execute_send, {
      call: execute_call
    });
  }
};

// src/contracts/OSWAP_VotingContract.ts
var import_eth_wallet18 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_VotingContract.json.ts
var OSWAP_VotingContract_json_default = {
  "abi": [
    { "inputs": [{ "components": [{ "internalType": "contract OSWAP_MainChainVotingExecutor", "name": "executor", "type": "address" }, { "internalType": "uint256", "name": "id", "type": "uint256" }, { "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum", "type": "uint256" }, { "internalType": "uint256", "name": "threshold", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam", "type": "bytes32[]" }], "internalType": "struct OSWAP_VotingContract.Params", "name": "params", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteOption", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allExecuteParam", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allOptions", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allOptionsWeight", "outputs": [{ "internalType": "uint256[]", "name": "", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "executeDelay", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "executeParam", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "executeParamLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "executed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "executor", "outputs": [{ "internalType": "contract OSWAP_MainChainVotingExecutor", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getParams", "outputs": [{ "internalType": "address", "name": "executor_", "type": "address" }, { "internalType": "uint256", "name": "id_", "type": "uint256" }, { "internalType": "bytes32", "name": "name_", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options_", "type": "bytes32[]" }, { "internalType": "uint256", "name": "voteStartTime_", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime_", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay_", "type": "uint256" }, { "internalType": "bool[2]", "name": "status_", "type": "bool[2]" }, { "internalType": "uint256[]", "name": "optionsWeight_", "type": "uint256[]" }, { "internalType": "uint256[3]", "name": "quorum_", "type": "uint256[3]" }, { "internalType": "bytes32[]", "name": "executeParam_", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "id", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "options", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "optionsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "optionsWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "quorum", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "threshold", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "updateWeight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "vetoed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "vote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "voteEndTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "voteStartTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": ""
};

// src/contracts/OSWAP_VotingContract.ts
var OSWAP_VotingContract = class extends import_eth_wallet18.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingContract_json_default.abi, OSWAP_VotingContract_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([[params.executor, import_eth_wallet18.Utils.toString(params.id), import_eth_wallet18.Utils.stringToBytes32(params.name), import_eth_wallet18.Utils.stringToBytes32(params.options), import_eth_wallet18.Utils.toString(params.quorum), import_eth_wallet18.Utils.toString(params.threshold), import_eth_wallet18.Utils.toString(params.voteEndTime), import_eth_wallet18.Utils.toString(params.executeDelay), import_eth_wallet18.Utils.stringToBytes32(params.executeParam)]]);
  }
  assign() {
    let accountVoteOption_call = async (param1) => {
      let result = await this.call("accountVoteOption", [param1]);
      return new import_eth_wallet18.BigNumber(result);
    };
    this.accountVoteOption = accountVoteOption_call;
    let accountVoteWeight_call = async (param1) => {
      let result = await this.call("accountVoteWeight", [param1]);
      return new import_eth_wallet18.BigNumber(result);
    };
    this.accountVoteWeight = accountVoteWeight_call;
    let allExecuteParam_call = async () => {
      let result = await this.call("allExecuteParam");
      return result;
    };
    this.allExecuteParam = allExecuteParam_call;
    let allOptions_call = async () => {
      let result = await this.call("allOptions");
      return result;
    };
    this.allOptions = allOptions_call;
    let allOptionsWeight_call = async () => {
      let result = await this.call("allOptionsWeight");
      return result.map((e) => new import_eth_wallet18.BigNumber(e));
    };
    this.allOptionsWeight = allOptionsWeight_call;
    let executeDelay_call = async () => {
      let result = await this.call("executeDelay");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.executeDelay = executeDelay_call;
    let executeParam_call = async (param1) => {
      let result = await this.call("executeParam", [import_eth_wallet18.Utils.toString(param1)]);
      return result;
    };
    this.executeParam = executeParam_call;
    let executeParamLength_call = async () => {
      let result = await this.call("executeParamLength");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.executeParamLength = executeParamLength_call;
    let executed_call = async () => {
      let result = await this.call("executed");
      return result;
    };
    this.executed = executed_call;
    let executor_call = async () => {
      let result = await this.call("executor");
      return result;
    };
    this.executor = executor_call;
    let getParams_call = async () => {
      let result = await this.call("getParams");
      return {
        executor_: result.executor_,
        id_: new import_eth_wallet18.BigNumber(result.id_),
        name_: result.name_,
        options_: result.options_,
        voteStartTime_: new import_eth_wallet18.BigNumber(result.voteStartTime_),
        voteEndTime_: new import_eth_wallet18.BigNumber(result.voteEndTime_),
        executeDelay_: new import_eth_wallet18.BigNumber(result.executeDelay_),
        status_: result.status_,
        optionsWeight_: result.optionsWeight_.map((e) => new import_eth_wallet18.BigNumber(e)),
        quorum_: result.quorum_.map((e) => new import_eth_wallet18.BigNumber(e)),
        executeParam_: result.executeParam_
      };
    };
    this.getParams = getParams_call;
    let id_call = async () => {
      let result = await this.call("id");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.id = id_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let options_call = async (param1) => {
      let result = await this.call("options", [import_eth_wallet18.Utils.toString(param1)]);
      return result;
    };
    this.options = options_call;
    let optionsLength_call = async () => {
      let result = await this.call("optionsLength");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.optionsLength = optionsLength_call;
    let optionsWeight_call = async (param1) => {
      let result = await this.call("optionsWeight", [import_eth_wallet18.Utils.toString(param1)]);
      return new import_eth_wallet18.BigNumber(result);
    };
    this.optionsWeight = optionsWeight_call;
    let quorum_call = async () => {
      let result = await this.call("quorum");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.quorum = quorum_call;
    let threshold_call = async () => {
      let result = await this.call("threshold");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.threshold = threshold_call;
    let totalVoteWeight_call = async () => {
      let result = await this.call("totalVoteWeight");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.totalVoteWeight = totalVoteWeight_call;
    let totalWeight_call = async () => {
      let result = await this.call("totalWeight");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.totalWeight = totalWeight_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let vetoed_call = async () => {
      let result = await this.call("vetoed");
      return result;
    };
    this.vetoed = vetoed_call;
    let voteEndTime_call = async () => {
      let result = await this.call("voteEndTime");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.voteEndTime = voteEndTime_call;
    let voteStartTime_call = async () => {
      let result = await this.call("voteStartTime");
      return new import_eth_wallet18.BigNumber(result);
    };
    this.voteStartTime = voteStartTime_call;
    let votingManager_call = async () => {
      let result = await this.call("votingManager");
      return result;
    };
    this.votingManager = votingManager_call;
    let execute_send = async () => {
      let result = await this.send("execute");
      return result;
    };
    let execute_call = async () => {
      let result = await this.call("execute");
      return;
    };
    this.execute = Object.assign(execute_send, {
      call: execute_call
    });
    let updateWeight_send = async (account) => {
      let result = await this.send("updateWeight", [account]);
      return result;
    };
    let updateWeight_call = async (account) => {
      let result = await this.call("updateWeight", [account]);
      return;
    };
    this.updateWeight = Object.assign(updateWeight_send, {
      call: updateWeight_call
    });
    let veto_send = async () => {
      let result = await this.send("veto");
      return result;
    };
    let veto_call = async () => {
      let result = await this.call("veto");
      return;
    };
    this.veto = Object.assign(veto_send, {
      call: veto_call
    });
    let vote_send = async (option) => {
      let result = await this.send("vote", [import_eth_wallet18.Utils.toString(option)]);
      return result;
    };
    let vote_call = async (option) => {
      let result = await this.call("vote", [import_eth_wallet18.Utils.toString(option)]);
      return;
    };
    this.vote = Object.assign(vote_send, {
      call: vote_call
    });
  }
};

// src/contracts/OSWAP_VotingManager.ts
var import_eth_wallet19 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_VotingManager.json.ts
var OSWAP_VotingManager_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "_trollRegistry", "type": "address" }, { "internalType": "bytes32[]", "name": "_names", "type": "bytes32[]" }, { "internalType": "uint256[]", "name": "_minExeDelay", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_maxVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minGovTokenToCreateVote", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minQuorum", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minGovTokenToCreateVote", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "AddVotingConfig", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Executed", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "poll", "type": "address" }], "name": "NewPoll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "NewVote", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "poll", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Poll", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }], "name": "SetVotingConfig", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_VotingManager", "name": "newVotingManager", "type": "address" }], "name": "Upgrade", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Veto", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "vote", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Vote", "type": "event" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minGovTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "addVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "allVotings", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }], "name": "closeVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "executed", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "getNewVoteId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getVotingConfigProfiles", "outputs": [{ "internalType": "bytes32[]", "name": "profiles", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "getVotingCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }], "name": "getVotingParams", "outputs": [{ "internalType": "uint256", "name": "_minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "_minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_minGovTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "_minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getVotings", "outputs": [{ "internalType": "address[]", "name": "_votings", "type": "address[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "initAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address[]", "name": "_votingExecutor", "type": "address[]" }], "name": "initVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "isVotingContract", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }, { "internalType": "bool", "name": "isExecutiveVote", "type": "bool" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "newVotingExecutorManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "newVotingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "setAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "internalType": "uint256", "name": "paramValue", "type": "uint256" }], "name": "setVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_votingRegister", "type": "address" }], "name": "setVotingRegister", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "updateWeight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgradeByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "voting", "type": "address" }], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "voteCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bool", "name": "poll", "type": "bool" }, { "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "voted", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingConfigProfiles", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingConfigProfilesLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "votingConfigs", "outputs": [{ "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minGovTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingRegister", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votings", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60a06040523480156200001157600080fd5b5060405162003b1d38038062003b1d833981016040819052620000349162000597565b600080546001600160a01b03199081163317909155600380546001600160a01b038a16921682179055604080516305268cff60e01b815290516305268cff91600480820192602092909190829003018186803b1580156200009457600080fd5b505afa158015620000a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cf919062000570565b60601b6001600160601b03191660805284518651148015620000f2575083518551145b801562000100575082518451145b80156200010e575081518351145b80156200011c575080518251145b6200017a5760405162461bcd60e51b815260206004820152602360248201527f4f535741503a20417267756d656e74206c656e67746873206e6f74206d6174636044820152621a195960ea1b60648201526084015b60405180910390fd5b60005b8651811015620004a65760008682815181106200019e576200019e620006dd565b6020026020010151118015620001d3575062093a80868281518110620001c857620001c8620006dd565b602002602001015111155b620002215760405162461bcd60e51b815260206004820152601a60248201527f4f535741503a20496e76616c6964206d696e45786544656c6179000000000000604482015260640162000171565b838181518110620002365762000236620006dd565b6020026020010151858281518110620002535762000253620006dd565b602002602001015110801562000288575062093a808582815181106200027d576200027d620006dd565b602002602001015111155b620002d65760405162461bcd60e51b815260206004820152601e60248201527f4f535741503a20496e76616c6964206d696e566f74654475726174696f6e0000604482015260640162000171565b600060056000898481518110620002f157620002f1620006dd565b6020026020010151815260200190815260200160002090508682815181106200031e576200031e620006dd565b60200260200101518160000181905550858281518110620003435762000343620006dd565b60200260200101518160010181905550848281518110620003685762000368620006dd565b602002602001015181600201819055508382815181106200038d576200038d620006dd565b60200260200101518160030181905550828281518110620003b257620003b2620006dd565b602002602001015181600401819055506006888381518110620003d957620003d9620006dd565b6020908102919091018101518254600181018455600093845291909220015587517f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf0912990899084908110620004315762000431620006dd565b6020026020010151826000015483600101548460020154856003015486600401546040516200048896959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a150806200049d81620006b3565b9150506200017d565b505050505050505062000722565b600082601f830112620004c657600080fd5b815160206001600160401b0380831115620004e557620004e5620006f3565b8260051b604051601f19603f830116810181811084821117156200050d576200050d620006f3565b604052848152838101925086840182880185018910156200052d57600080fd5b600092505b858310156200055257805184529284019260019290920191840162000532565b50979650505050505050565b80516200056b8162000709565b919050565b6000602082840312156200058357600080fd5b8151620005908162000709565b9392505050565b600080600080600080600060e0888a031215620005b357600080fd5b620005be886200055e565b60208901519097506001600160401b0380821115620005dc57600080fd5b620005ea8b838c01620004b4565b975060408a01519150808211156200060157600080fd5b6200060f8b838c01620004b4565b965060608a01519150808211156200062657600080fd5b620006348b838c01620004b4565b955060808a01519150808211156200064b57600080fd5b620006598b838c01620004b4565b945060a08a01519150808211156200067057600080fd5b6200067e8b838c01620004b4565b935060c08a01519150808211156200069557600080fd5b50620006a48a828b01620004b4565b91505092959891949750929550565b6000600019821415620006d657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200071f57600080fd5b50565b60805160601c6133dc62000741600039600061030901526133dc6000f3fe608060405234801561001057600080fd5b50600436106102ff5760003560e01c806378a1a9fa1161019c578063a8fd327e116100ee578063f2486f4411610097578063f851a44011610071578063f851a44014610719578063ff2a59b014610739578063ffccd8431461074157600080fd5b8063f2486f44146106d3578063f2fde38b146106e6578063f6f04d7f146106f957600080fd5b8063c6384071116100c8578063c638407114610697578063d4ee1d90146106a0578063d9c37086146106c057600080fd5b8063a8fd327e14610629578063b15866e614610666578063c53bc0471461067957600080fd5b806395e5cfa211610150578063a2f55ae51161012a578063a2f55ae5146105e0578063a3818b3b146105f3578063a598d03c1461061657600080fd5b806395e5cfa2146105a55780639c2aab5e146105c55780639c52a7f1146105cd57600080fd5b80638da5cb5b116101815780638da5cb5b1461055257806391927050146105725780639449f0131461058557600080fd5b806378a1a9fa14610537578063821077511461053f57600080fd5b80633fd8cc4e1161025557806365611e4311610209578063704b6c02116101e3578063704b6c02146104d6578063718fbb79146104e9578063788ddbcb1461052457600080fd5b806365611e431461049d57806365eaf8bc146104b05780636a333cee146104c357600080fd5b8063568621751161023a5780635686217514610462578063605361721461048257806362072e761461048a57600080fd5b80633fd8cc4e1461041c57806344fe9eb01461044f57600080fd5b806326ae21a9116102b757806330167bec1161029157806330167bec146103e157806331a38c89146104015780633b32cf421461040957600080fd5b806326ae21a9146103a657806329294e2b146103b957806329711413146103d957600080fd5b80630900f010116102e85780630900f0101461036a578063145988981461037d57806317e42ec01461039357600080fd5b806305268cff1461030457806308c4934d14610355575b600080fd5b61032b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610368610363366004612ffe565b610761565b005b610368610378366004612ffe565b610816565b610385610898565b60405190815260200161034c565b6103686103a1366004612ffe565b61095f565b6103686103b4366004612ffe565b610a24565b6103cc6103c73660046131ac565b610b52565b60405161034c91906131ce565b6103cc610c60565b60035461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b610368610ccf565b610368610417366004613057565b610dd9565b61043f61042a366004612ffe565b60026020526000908152604090205460ff1681565b604051901515815260200161034c565b61036861045d366004612ffe565b610ebc565b600e5461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b610368610ee0565b610368610498366004612ffe565b61100a565b6103686104ab366004613150565b6111de565b6103686104be3660046130cc565b61160f565b6103686104d1366004612ffe565b611786565b6103686104e4366004612ffe565b6118e9565b6104fc6104f736600461310b565b611962565b604080519586526020860194909452928401919091526060830152608082015260a00161034c565b610368610532366004613022565b6119f5565b600754610385565b61036861054d366004613022565b611a78565b60005461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b61032b61058036600461310b565b611f7b565b610385610593366004612ffe565b600c6020526000908152604090205481565b6105b86105b33660046131ac565b611fb2565b60405161034c9190613228565b600d54610385565b6103686105db366004612ffe565b61208f565b6103686105ee366004612ffe565b612136565b61043f610601366004612ffe565b60096020526000908152604090205460ff1681565b61032b61062436600461310b565b6121d9565b6104fc61063736600461310b565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b61043f610674366004612ffe565b6121e9565b600e5473ffffffffffffffffffffffffffffffffffffffff1661032b565b610385600b5481565b60015461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b6103686106ce366004613124565b612250565b6103856106e136600461310b565b6127d9565b6103686106f4366004612ffe565b6127fa565b610385610707366004612ffe565b60086020526000908152604090205481565b600a5461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b600654610385565b60045461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078557600080fd5b600a5473ffffffffffffffffffffffffffffffffffffffff161561080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f535741503a20416c726561647920736574000000000000000000000000000060448201526064015b60405180910390fd5b61081381612891565b50565b3360009081526009602052604090205460ff1661088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b610813816129c6565b60045460009073ffffffffffffffffffffffffffffffffffffffff163314610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f476f7665726e616e63653a204e6f742066726f6d20766f74696e67526567697360448201527f74727900000000000000000000000000000000000000000000000000000000006064820152608401610801565b600b80549060006109528361328f565b9190505550600b54905090565b60005b600d54811015610a2057600d818154811061097f5761097f613326565b6000918252602090912001546040517f17e42ec000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906317e42ec090602401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b505050508080610a189061328f565b915050610962565b5050565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610aa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f535741503a204e6f742066726f6d2073687574646f776e2061646d696e00006044820152606401610801565b8073ffffffffffffffffffffffffffffffffffffffff1663ef9b78c66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b50505050610b0e81612a39565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f1c24a27ac669c0278656c76cc711441c8dd32d21c32227dad2b42bf6271e8fae90600090a250565b600d54606090610b628385613260565b1115610b7957600d54610b76908490613278565b91505b8167ffffffffffffffff811115610b9257610b92613355565b604051908082528060200260200182016040528015610bbb578160200160208202803683370190505b50905060005b82811015610c5957600d610bd58286613260565b81548110610be557610be5613326565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610c2257610c22613326565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610c518161328f565b915050610bc1565b5092915050565b6060600d805480602002602001604051908101604052809291908181526020018280548015610cc557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c9a575b5050505050905090565b336000818152600c6020526040902054600d80549091908110610cf457610cf4613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f742060448201527f65786973747300000000000000000000000000000000000000000000000000006064820152608401610801565b610dac33612a39565b60405133907fdf42bfa876a741bbe542cf1a563269e1390bf03901b5d433a6e8afd6ee36dbfe90600090a2565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dfd57600080fd5b60075415610e67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a206578656375746f7220616c72656164792073657400000000006044820152606401610801565b8060005b81811015610eb657610ea4848483818110610e8857610e88613326565b9050602002016020810190610e9d9190612ffe565b6001612cd8565b80610eae8161328f565b915050610e6b565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461088f57600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610f87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610801565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b8073ffffffffffffffffffffffffffffffffffffffff1663b3ee6e406040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190613193565b156110ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f476f7665726e616e63653a204e6f74206120506f6c6c000000000000000000006044820152606401610801565b8073ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113557600080fd5b505afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190613193565b42116111d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f476f7665726e616e63653a20566f74696e67206e6f7420656e646564000000006044820152606401610801565b61081381612a39565b3360009081526009602052604090205460ff16611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b600354604080517f8b0e9f3f000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638b0e9f3f916004808301926020929190829003018186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190613193565b905060008611801561130f575062093a808611155b611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f535741503a20496e76616c6964206d696e45786544656c61790000000000006044820152606401610801565b8385108015611387575062093a808511155b6113ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a20496e76616c696420766f74654475726174696f6e00000000006044820152606401610801565b8083111561147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741503a20496e76616c6964206d696e476f76546f6b656e546f4372656160448201527f7465566f746500000000000000000000000000000000000000000000000000006064820152608401610801565b808211156114e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f535741503a20496e76616c6964206d696e51756f72756d00000000000000006044820152606401610801565b600087815260056020526040902080541561155e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f535741503a20436f6e66696720616c726561647920657869737473000000006044820152606401610801565b86815560018082018790556002820186905560038201859055600482018490556006805491820181556000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018890556040805189815260208101899052908101879052606081018690526080810185905260a081018490527f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf091299060c00160405180910390a15050505050505050565b336000818152600c6020526040902054600d8054909190811061163457611634613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146116e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f742060448201527f65786973747300000000000000000000000000000000000000000000000000006064820152608401610801565b821561173c57604051818152339073ffffffffffffffffffffffffffffffffffffffff8416907f939cecbaa6409c96475d12a0cf1c30c058192b2b51716b5591c3f659ed9354a7906020015b60405180910390a3505050565b604051818152339073ffffffffffffffffffffffffffffffffffffffff8416907f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc9060200161172f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146117aa57600080fd5b60045473ffffffffffffffffffffffffffffffffffffffff161561182a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f535741503a20416c72656164792073657400000000000000000000000000006044820152606401610801565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055604051606082901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681527f766f74696e675265676973746572000000000000000000000000000000000000907f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509906020015b60405180910390a250565b3360009081526009602052604090205460ff1661080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b6000818152600560205260408120600381015482918291829182916119cd57507f766f74650000000000000000000000000000000000000000000000000000000060005260056020527f9d8bd124132542d3b6ae5154dc8b70b99a1fde60a7254eb6a258ad48a511339e5b8054600182015460028301546003840154600490940154929a91995097509195509350915050565b3360009081526009602052604090205460ff16611a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b610a208282612cd8565b60045473ffffffffffffffffffffffffffffffffffffffff163314611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f476f7665726e616e63653a204e6f742066726f6d20766f74696e67526567697360448201527f74727900000000000000000000000000000000000000000000000000000000006064820152608401610801565b73ffffffffffffffffffffffffffffffffffffffff8216611bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f476f7665726e616e63653a20496e76616c696420766f74696e6720616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610801565b600d541580611c2c575073ffffffffffffffffffffffffffffffffffffffff82166000818152600c6020526040902054600d80549091908110611c0757611c07613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b611cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f476f7665726e616e63653a20566f74696e6720636f6e747261637420616c726560448201527f61647920657869737473000000000000000000000000000000000000000000006064820152608401610801565b60005b600d54811015611e68576000600d8281548110611cda57611cda613326565b60009182526020918290200154604080517fb3ee6e40000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169350839263b3ee6e4092600480840193829003018186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190613193565b158015611e0d5750428173ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd357600080fd5b505afa158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b9190613193565b105b15611e5457611e4f600d8381548110611e2857611e28613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16612a39565b611e62565b81611e5e8161328f565b9250505b50611cbb565b600d805473ffffffffffffffffffffffffffffffffffffffff85166000818152600c60205260408120839055600183018455929092527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790558115611f355760405173ffffffffffffffffffffffffffffffffffffffff8416907f3b7f4bea1b2462212751e8a9d23ca2a37a1abf7ff729725e224314f1c190c99190600090a2505050565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f83f5721a5071f4aac6f77c58360d8c8618098cebdc6d3c393f1e757ef4d1082b90600090a2505050565b60078181548110611f8b57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60065460609083101561208957600654611fcc8385613260565b1115611fe357600654611fe0908490613278565b91505b8167ffffffffffffffff811115611ffc57611ffc613355565b604051908082528060200260200182016040528015612025578160200160208202803683370190505b50905060005b82811015610c5957600661203f8583613260565b8154811061204f5761204f613326565b906000526020600020015482828151811061206c5761206c613326565b6020908102919091010152806120818161328f565b91505061202b565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146120b357600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461215a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf5910161212b565b600d8181548110611f8b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600c6020526040812054600d8054929392909190811061222757612227613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161492915050565b3360009081526009602052604090205460ff166122c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b600354604080517f8b0e9f3f000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638b0e9f3f916004808301926020929190829003018186803b15801561233457600080fd5b505afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190613193565b6000858152600560205260409020549091506123e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f535741503a20436f6e666967206e6f742065786973747300000000000000006044820152606401610801565b827f6d696e45786544656c6179000000000000000000000000000000000000000000141561249b5760008211801561241f575062093a808211155b612485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f535741503a20496e76616c6964206d696e45786544656c61790000000000006044820152606401610801565b6000848152600560205260409020829055612798565b827f6d696e566f74654475726174696f6e0000000000000000000000000000000000141561256557600084815260056020526040902060020154821080156124e6575062093a808211155b61254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a20496e76616c696420766f74654475726174696f6e00000000006044820152606401610801565b6000848152600560205260409020600101829055612798565b827f6d6178566f74654475726174696f6e00000000000000000000000000000000001415612620576000848152600560205260409020600101548211612607576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a20496e76616c696420766f74654475726174696f6e00000000006044820152606401610801565b6000848152600560205260409020600201829055612798565b827f6d696e476f76546f6b656e546f437265617465566f746500000000000000000014156126f157808211156126d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741503a20496e76616c6964206d696e476f76546f6b656e546f4372656160448201527f7465566f746500000000000000000000000000000000000000000000000000006064820152608401610801565b6000848152600560205260409020600301829055612798565b827f6d696e51756f72756d000000000000000000000000000000000000000000000014156127985780821115612783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f535741503a20496e76616c6964206d696e51756f72756d00000000000000006044820152606401610801565b60008481526005602052604090206004018290555b82847f10eff86a4e52b12bd92a6e64442cdb5baa87a9b327114811ebfc96a7c1e00281846040516127cb91815260200190565b60405180910390a350505050565b600681815481106127e957600080fd5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461281e57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b9060200161212b565b73ffffffffffffffffffffffffffffffffffffffff811661290e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f535741503a20496e76616c69642061646d696e0000000000000000000000006044820152606401610801565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055604051606082901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681527f61646d696e000000000000000000000000000000000000000000000000000000907f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509906020016118de565b600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d9060200161212b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c602052604090205480151580612ab757508173ffffffffffffffffffffffffffffffffffffffff16600d600081548110612a9357612a93613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b612b43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f742060448201527f65786973747300000000000000000000000000000000000000000000000000006064820152608401610801565b600d54612b5290600190613278565b811015612c4557600d8054612b6990600190613278565b81548110612b7957612b79613326565b600091825260209091200154600d805473ffffffffffffffffffffffffffffffffffffffff9092169183908110612bb257612bb2613326565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c6000600d8481548110612c1257612c12613326565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020526040812055600d805480612c7c57612c7c6132f7565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b73ffffffffffffffffffffffffffffffffffffffff8216612d55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f535741503a20496e76616c6964206578656375746f720000000000000000006044820152606401610801565b6007541580612dbf575073ffffffffffffffffffffffffffffffffffffffff8216600081815260086020526040902054600780549091908110612d9a57612d9a613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b15612e4a576007805473ffffffffffffffffffffffffffffffffffffffff84166000818152600860205260408120839055600183018455929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055612efc565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902054612efc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4f535741503a2063616e6e6f74207265736574206d61696e206578656375746f60448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610801565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682612f9f576000612fa2565b60015b604080517f766f74696e674578656375746f720000000000000000000000000000000000008152602081019390935260ff9091169082015260600160405180910390a15050565b80358015158114612ff957600080fd5b919050565b60006020828403121561301057600080fd5b813561301b81613384565b9392505050565b6000806040838503121561303557600080fd5b823561304081613384565b915061304e60208401612fe9565b90509250929050565b6000806020838503121561306a57600080fd5b823567ffffffffffffffff8082111561308257600080fd5b818501915085601f83011261309657600080fd5b8135818111156130a557600080fd5b8660208260051b85010111156130ba57600080fd5b60209290920196919550909350505050565b6000806000606084860312156130e157600080fd5b6130ea84612fe9565b925060208401356130fa81613384565b929592945050506040919091013590565b60006020828403121561311d57600080fd5b5035919050565b60008060006060848603121561313957600080fd5b505081359360208301359350604090920135919050565b60008060008060008060c0878903121561316957600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156131a557600080fd5b5051919050565b600080604083850312156131bf57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561321c57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016131ea565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561321c57835183529284019291840191600101613244565b60008219821115613273576132736132c8565b500190565b60008282101561328a5761328a6132c8565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132c1576132c16132c8565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461081357600080fdfea2646970667358221220c13121617842839cf37f7da21461694ce3229b8eaf7d5db4b84e0014d64ae48564736f6c63430008060033"
};

// src/contracts/OSWAP_VotingManager.ts
var OSWAP_VotingManager = class extends import_eth_wallet19.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingManager_json_default.abi, OSWAP_VotingManager_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.trollRegistry, import_eth_wallet19.Utils.stringToBytes32(params.names), import_eth_wallet19.Utils.toString(params.minExeDelay), import_eth_wallet19.Utils.toString(params.minVoteDuration), import_eth_wallet19.Utils.toString(params.maxVoteDuration), import_eth_wallet19.Utils.toString(params.minGovTokenToCreateVote), import_eth_wallet19.Utils.toString(params.minQuorum)]);
  }
  parseAddVotingConfigEvent(receipt) {
    return this.parseEvents(receipt, "AddVotingConfig").map((e) => this.decodeAddVotingConfigEvent(e));
  }
  decodeAddVotingConfigEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      minExeDelay: new import_eth_wallet19.BigNumber(result.minExeDelay),
      minVoteDuration: new import_eth_wallet19.BigNumber(result.minVoteDuration),
      maxVoteDuration: new import_eth_wallet19.BigNumber(result.maxVoteDuration),
      minGovTokenToCreateVote: new import_eth_wallet19.BigNumber(result.minGovTokenToCreateVote),
      minQuorum: new import_eth_wallet19.BigNumber(result.minQuorum),
      _event: event
    };
  }
  parseAuthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
  }
  decodeAuthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseDeauthorizeEvent(receipt) {
    return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
  }
  decodeDeauthorizeEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseExecutedEvent(receipt) {
    return this.parseEvents(receipt, "Executed").map((e) => this.decodeExecutedEvent(e));
  }
  decodeExecutedEvent(event) {
    let result = event.data;
    return {
      vote: result.vote,
      _event: event
    };
  }
  parseNewPollEvent(receipt) {
    return this.parseEvents(receipt, "NewPoll").map((e) => this.decodeNewPollEvent(e));
  }
  decodeNewPollEvent(event) {
    let result = event.data;
    return {
      poll: result.poll,
      _event: event
    };
  }
  parseNewVoteEvent(receipt) {
    return this.parseEvents(receipt, "NewVote").map((e) => this.decodeNewVoteEvent(e));
  }
  decodeNewVoteEvent(event) {
    let result = event.data;
    return {
      vote: result.vote,
      _event: event
    };
  }
  parseParamSetEvent(receipt) {
    return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
  }
  decodeParamSetEvent(event) {
    let result = event.data;
    return {
      name: result.name,
      value: result.value,
      _event: event
    };
  }
  parseParamSet2Event(receipt) {
    return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
  }
  decodeParamSet2Event(event) {
    let result = event.data;
    return {
      name: result.name,
      value1: result.value1,
      value2: result.value2,
      _event: event
    };
  }
  parsePollEvent(receipt) {
    return this.parseEvents(receipt, "Poll").map((e) => this.decodePollEvent(e));
  }
  decodePollEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      poll: result.poll,
      option: new import_eth_wallet19.BigNumber(result.option),
      _event: event
    };
  }
  parseSetVotingConfigEvent(receipt) {
    return this.parseEvents(receipt, "SetVotingConfig").map((e) => this.decodeSetVotingConfigEvent(e));
  }
  decodeSetVotingConfigEvent(event) {
    let result = event.data;
    return {
      configName: result.configName,
      paramName: result.paramName,
      minExeDelay: new import_eth_wallet19.BigNumber(result.minExeDelay),
      _event: event
    };
  }
  parseStartOwnershipTransferEvent(receipt) {
    return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
  }
  decodeStartOwnershipTransferEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseTransferOwnershipEvent(receipt) {
    return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
  }
  decodeTransferOwnershipEvent(event) {
    let result = event.data;
    return {
      user: result.user,
      _event: event
    };
  }
  parseUpgradeEvent(receipt) {
    return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
  }
  decodeUpgradeEvent(event) {
    let result = event.data;
    return {
      newVotingManager: result.newVotingManager,
      _event: event
    };
  }
  parseVetoEvent(receipt) {
    return this.parseEvents(receipt, "Veto").map((e) => this.decodeVetoEvent(e));
  }
  decodeVetoEvent(event) {
    let result = event.data;
    return {
      vote: result.vote,
      _event: event
    };
  }
  parseVoteEvent(receipt) {
    return this.parseEvents(receipt, "Vote").map((e) => this.decodeVoteEvent(e));
  }
  decodeVoteEvent(event) {
    let result = event.data;
    return {
      account: result.account,
      vote: result.vote,
      option: new import_eth_wallet19.BigNumber(result.option),
      _event: event
    };
  }
  assign() {
    let admin_call = async () => {
      let result = await this.call("admin");
      return result;
    };
    this.admin = admin_call;
    let allVotings_call = async () => {
      let result = await this.call("allVotings");
      return result;
    };
    this.allVotings = allVotings_call;
    let getVotingConfigProfilesParams = (params) => [import_eth_wallet19.Utils.toString(params.start), import_eth_wallet19.Utils.toString(params.length)];
    let getVotingConfigProfiles_call = async (params) => {
      let result = await this.call("getVotingConfigProfiles", getVotingConfigProfilesParams(params));
      return result;
    };
    this.getVotingConfigProfiles = getVotingConfigProfiles_call;
    let getVotingCount_call = async () => {
      let result = await this.call("getVotingCount");
      return new import_eth_wallet19.BigNumber(result);
    };
    this.getVotingCount = getVotingCount_call;
    let getVotingParams_call = async (name) => {
      let result = await this.call("getVotingParams", [import_eth_wallet19.Utils.stringToBytes32(name)]);
      return {
        _minExeDelay: new import_eth_wallet19.BigNumber(result._minExeDelay),
        _minVoteDuration: new import_eth_wallet19.BigNumber(result._minVoteDuration),
        _maxVoteDuration: new import_eth_wallet19.BigNumber(result._maxVoteDuration),
        _minGovTokenToCreateVote: new import_eth_wallet19.BigNumber(result._minGovTokenToCreateVote),
        _minQuorum: new import_eth_wallet19.BigNumber(result._minQuorum)
      };
    };
    this.getVotingParams = getVotingParams_call;
    let getVotingsParams = (params) => [import_eth_wallet19.Utils.toString(params.start), import_eth_wallet19.Utils.toString(params.count)];
    let getVotings_call = async (params) => {
      let result = await this.call("getVotings", getVotingsParams(params));
      return result;
    };
    this.getVotings = getVotings_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let isPermitted_call = async (param1) => {
      let result = await this.call("isPermitted", [param1]);
      return result;
    };
    this.isPermitted = isPermitted_call;
    let isVotingContract_call = async (votingContract) => {
      let result = await this.call("isVotingContract", [votingContract]);
      return result;
    };
    this.isVotingContract = isVotingContract_call;
    let isVotingExecutor_call = async (param1) => {
      let result = await this.call("isVotingExecutor", [param1]);
      return result;
    };
    this.isVotingExecutor = isVotingExecutor_call;
    let newOwner_call = async () => {
      let result = await this.call("newOwner");
      return result;
    };
    this.newOwner = newOwner_call;
    let newVotingExecutorManager_call = async () => {
      let result = await this.call("newVotingExecutorManager");
      return result;
    };
    this.newVotingExecutorManager = newVotingExecutorManager_call;
    let newVotingManager_call = async () => {
      let result = await this.call("newVotingManager");
      return result;
    };
    this.newVotingManager = newVotingManager_call;
    let owner_call = async () => {
      let result = await this.call("owner");
      return result;
    };
    this.owner = owner_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let voteCount_call = async () => {
      let result = await this.call("voteCount");
      return new import_eth_wallet19.BigNumber(result);
    };
    this.voteCount = voteCount_call;
    let votingConfigProfiles_call = async (param1) => {
      let result = await this.call("votingConfigProfiles", [import_eth_wallet19.Utils.toString(param1)]);
      return result;
    };
    this.votingConfigProfiles = votingConfigProfiles_call;
    let votingConfigProfilesLength_call = async () => {
      let result = await this.call("votingConfigProfilesLength");
      return new import_eth_wallet19.BigNumber(result);
    };
    this.votingConfigProfilesLength = votingConfigProfilesLength_call;
    let votingConfigs_call = async (param1) => {
      let result = await this.call("votingConfigs", [import_eth_wallet19.Utils.stringToBytes32(param1)]);
      return {
        minExeDelay: new import_eth_wallet19.BigNumber(result.minExeDelay),
        minVoteDuration: new import_eth_wallet19.BigNumber(result.minVoteDuration),
        maxVoteDuration: new import_eth_wallet19.BigNumber(result.maxVoteDuration),
        minGovTokenToCreateVote: new import_eth_wallet19.BigNumber(result.minGovTokenToCreateVote),
        minQuorum: new import_eth_wallet19.BigNumber(result.minQuorum)
      };
    };
    this.votingConfigs = votingConfigs_call;
    let votingExecutor_call = async (param1) => {
      let result = await this.call("votingExecutor", [import_eth_wallet19.Utils.toString(param1)]);
      return result;
    };
    this.votingExecutor = votingExecutor_call;
    let votingExecutorInv_call = async (param1) => {
      let result = await this.call("votingExecutorInv", [param1]);
      return new import_eth_wallet19.BigNumber(result);
    };
    this.votingExecutorInv = votingExecutorInv_call;
    let votingExecutorLength_call = async () => {
      let result = await this.call("votingExecutorLength");
      return new import_eth_wallet19.BigNumber(result);
    };
    this.votingExecutorLength = votingExecutorLength_call;
    let votingIdx_call = async (param1) => {
      let result = await this.call("votingIdx", [param1]);
      return new import_eth_wallet19.BigNumber(result);
    };
    this.votingIdx = votingIdx_call;
    let votingRegister_call = async () => {
      let result = await this.call("votingRegister");
      return result;
    };
    this.votingRegister = votingRegister_call;
    let votings_call = async (param1) => {
      let result = await this.call("votings", [import_eth_wallet19.Utils.toString(param1)]);
      return result;
    };
    this.votings = votings_call;
    let addVotingConfigParams = (params) => [import_eth_wallet19.Utils.stringToBytes32(params.name), import_eth_wallet19.Utils.toString(params.minExeDelay), import_eth_wallet19.Utils.toString(params.minVoteDuration), import_eth_wallet19.Utils.toString(params.maxVoteDuration), import_eth_wallet19.Utils.toString(params.minGovTokenToCreateVote), import_eth_wallet19.Utils.toString(params.minQuorum)];
    let addVotingConfig_send = async (params) => {
      let result = await this.send("addVotingConfig", addVotingConfigParams(params));
      return result;
    };
    let addVotingConfig_call = async (params) => {
      let result = await this.call("addVotingConfig", addVotingConfigParams(params));
      return;
    };
    this.addVotingConfig = Object.assign(addVotingConfig_send, {
      call: addVotingConfig_call
    });
    let closeVote_send = async (vote) => {
      let result = await this.send("closeVote", [vote]);
      return result;
    };
    let closeVote_call = async (vote) => {
      let result = await this.call("closeVote", [vote]);
      return;
    };
    this.closeVote = Object.assign(closeVote_send, {
      call: closeVote_call
    });
    let deny_send = async (user) => {
      let result = await this.send("deny", [user]);
      return result;
    };
    let deny_call = async (user) => {
      let result = await this.call("deny", [user]);
      return;
    };
    this.deny = Object.assign(deny_send, {
      call: deny_call
    });
    let executed_send = async () => {
      let result = await this.send("executed");
      return result;
    };
    let executed_call = async () => {
      let result = await this.call("executed");
      return;
    };
    this.executed = Object.assign(executed_send, {
      call: executed_call
    });
    let getNewVoteId_send = async () => {
      let result = await this.send("getNewVoteId");
      return result;
    };
    let getNewVoteId_call = async () => {
      let result = await this.call("getNewVoteId");
      return new import_eth_wallet19.BigNumber(result);
    };
    this.getNewVoteId = Object.assign(getNewVoteId_send, {
      call: getNewVoteId_call
    });
    let initAdmin_send = async (admin) => {
      let result = await this.send("initAdmin", [admin]);
      return result;
    };
    let initAdmin_call = async (admin) => {
      let result = await this.call("initAdmin", [admin]);
      return;
    };
    this.initAdmin = Object.assign(initAdmin_send, {
      call: initAdmin_call
    });
    let initVotingExecutor_send = async (votingExecutor) => {
      let result = await this.send("initVotingExecutor", [votingExecutor]);
      return result;
    };
    let initVotingExecutor_call = async (votingExecutor) => {
      let result = await this.call("initVotingExecutor", [votingExecutor]);
      return;
    };
    this.initVotingExecutor = Object.assign(initVotingExecutor_send, {
      call: initVotingExecutor_call
    });
    let newVoteParams = (params) => [params.vote, params.isExecutiveVote];
    let newVote_send = async (params) => {
      let result = await this.send("newVote", newVoteParams(params));
      return result;
    };
    let newVote_call = async (params) => {
      let result = await this.call("newVote", newVoteParams(params));
      return;
    };
    this.newVote = Object.assign(newVote_send, {
      call: newVote_call
    });
    let permit_send = async (user) => {
      let result = await this.send("permit", [user]);
      return result;
    };
    let permit_call = async (user) => {
      let result = await this.call("permit", [user]);
      return;
    };
    this.permit = Object.assign(permit_send, {
      call: permit_call
    });
    let setAdmin_send = async (admin) => {
      let result = await this.send("setAdmin", [admin]);
      return result;
    };
    let setAdmin_call = async (admin) => {
      let result = await this.call("setAdmin", [admin]);
      return;
    };
    this.setAdmin = Object.assign(setAdmin_send, {
      call: setAdmin_call
    });
    let setVotingConfigParams = (params) => [import_eth_wallet19.Utils.stringToBytes32(params.configName), import_eth_wallet19.Utils.stringToBytes32(params.paramName), import_eth_wallet19.Utils.toString(params.paramValue)];
    let setVotingConfig_send = async (params) => {
      let result = await this.send("setVotingConfig", setVotingConfigParams(params));
      return result;
    };
    let setVotingConfig_call = async (params) => {
      let result = await this.call("setVotingConfig", setVotingConfigParams(params));
      return;
    };
    this.setVotingConfig = Object.assign(setVotingConfig_send, {
      call: setVotingConfig_call
    });
    let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
    let setVotingExecutor_send = async (params) => {
      let result = await this.send("setVotingExecutor", setVotingExecutorParams(params));
      return result;
    };
    let setVotingExecutor_call = async (params) => {
      let result = await this.call("setVotingExecutor", setVotingExecutorParams(params));
      return;
    };
    this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
      call: setVotingExecutor_call
    });
    let setVotingRegister_send = async (votingRegister) => {
      let result = await this.send("setVotingRegister", [votingRegister]);
      return result;
    };
    let setVotingRegister_call = async (votingRegister) => {
      let result = await this.call("setVotingRegister", [votingRegister]);
      return;
    };
    this.setVotingRegister = Object.assign(setVotingRegister_send, {
      call: setVotingRegister_call
    });
    let takeOwnership_send = async () => {
      let result = await this.send("takeOwnership");
      return result;
    };
    let takeOwnership_call = async () => {
      let result = await this.call("takeOwnership");
      return;
    };
    this.takeOwnership = Object.assign(takeOwnership_send, {
      call: takeOwnership_call
    });
    let transferOwnership_send = async (newOwner) => {
      let result = await this.send("transferOwnership", [newOwner]);
      return result;
    };
    let transferOwnership_call = async (newOwner) => {
      let result = await this.call("transferOwnership", [newOwner]);
      return;
    };
    this.transferOwnership = Object.assign(transferOwnership_send, {
      call: transferOwnership_call
    });
    let updateWeight_send = async (account) => {
      let result = await this.send("updateWeight", [account]);
      return result;
    };
    let updateWeight_call = async (account) => {
      let result = await this.call("updateWeight", [account]);
      return;
    };
    this.updateWeight = Object.assign(updateWeight_send, {
      call: updateWeight_call
    });
    let upgrade_send = async (votingManager) => {
      let result = await this.send("upgrade", [votingManager]);
      return result;
    };
    let upgrade_call = async (votingManager) => {
      let result = await this.call("upgrade", [votingManager]);
      return;
    };
    this.upgrade = Object.assign(upgrade_send, {
      call: upgrade_call
    });
    let upgradeByAdmin_send = async (votingManager) => {
      let result = await this.send("upgradeByAdmin", [votingManager]);
      return result;
    };
    let upgradeByAdmin_call = async (votingManager) => {
      let result = await this.call("upgradeByAdmin", [votingManager]);
      return;
    };
    this.upgradeByAdmin = Object.assign(upgradeByAdmin_send, {
      call: upgradeByAdmin_call
    });
    let veto_send = async (voting) => {
      let result = await this.send("veto", [voting]);
      return result;
    };
    let veto_call = async (voting) => {
      let result = await this.call("veto", [voting]);
      return;
    };
    this.veto = Object.assign(veto_send, {
      call: veto_call
    });
    let votedParams = (params) => [params.poll, params.account, import_eth_wallet19.Utils.toString(params.option)];
    let voted_send = async (params) => {
      let result = await this.send("voted", votedParams(params));
      return result;
    };
    let voted_call = async (params) => {
      let result = await this.call("voted", votedParams(params));
      return;
    };
    this.voted = Object.assign(voted_send, {
      call: voted_call
    });
  }
};

// src/contracts/OSWAP_VotingRegistry.ts
var import_eth_wallet20 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_VotingRegistry.json.ts
var OSWAP_VotingRegistry_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "inputs": [{ "internalType": "contract OSWAP_MainChainVotingExecutor", "name": "executor", "type": "address" }, { "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum", "type": "uint256" }, { "internalType": "uint256", "name": "threshold", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam", "type": "bytes32[]" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
  ],
  "bytecode": "60c060405234801561001057600080fd5b5060405161334c38038061334c83398101604081905261002f916100bf565b806001600160a01b03166330167bec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561006857600080fd5b505afa15801561007c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a091906100bf565b6001600160601b0319606091821b811660805291901b1660a0526100fb565b6000602082840312156100d157600080fd5b81516100dc816100e3565b9392505050565b6001600160a01b03811681146100f857600080fd5b50565b60805160601c60a05160601c6132056101476000396000818160a201528181610126015281816102910152818161071401526108ff0152600081816051015261039201526132056000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806330167bec146200004b578063da1bcdf0146200009c578063dac642fb14620000c4575b600080fd5b620000737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b620000737f000000000000000000000000000000000000000000000000000000000000000081565b620000db620000d5366004620009f6565b620000dd565b005b6040517fa3818b3b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152821515917f00000000000000000000000000000000000000000000000000000000000000009091169063a3818b3b9060240160206040518083038186803b1580156200016b57600080fd5b505afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a69190620009cb565b62000238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741505f566f74696e6752656769737472793a20496e76616c696420657860448201527f656375746f72000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008162000267577f706f6c6c0000000000000000000000000000000000000000000000000000000062000285565b838360008181106200027d576200027d62000c74565b905060200201355b905060008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663718fbb79876040518263ffffffff1660e01b8152600401620002eb91815260200190565b60a06040518083038186803b1580156200030457600080fd5b505afa15801562000319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033f919062000ae7565b6040517f426233600000000000000000000000000000000000000000000000000000000081523360048201529499509297509095509350915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063426233609060240160206040518083038186803b158015620003d557600080fd5b505afa158015620003ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000410919062000acd565b905082811015620004a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4f535741505f566f74696e6752656769737472793a206d696e476f76546f6b6560448201527f6e546f437265617465566f7465206e6f74206d6574000000000000000000000060648201526084016200022f565b620004b0428662000c34565b8c101562000541576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4f535741505f566f74696e6752656769737472793a206d696e566f746544757260448201527f6174696f6e206e6f74206d65740000000000000000000000000000000000000060648201526084016200022f565b6200054d428562000c34565b8c1115620005de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4f535741505f566f74696e6752656769737472793a206578636565646564206d60448201527f6178566f74654475726174696f6e00000000000000000000000000000000000060648201526084016200022f565b87156200070957818e101562000677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f535741505f566f74696e6752656769737472793a206d696e51756f72756d2060448201527f6e6f74206d65740000000000000000000000000000000000000000000000000060648201526084016200022f565b858b101562000709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f535741505f566f74696e6752656769737472793a206d696e45786544656c6160448201527f79206e6f74206d6574000000000000000000000000000000000000000000000060648201526084016200022f565b5050505050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663145988986040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200077b57600080fd5b505af115801562000790573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007b6919062000acd565b905060006040518061012001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018d81526020018c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050509082525060208082018c905260408083018c9052606083018b9052608083018a90528051888302818101840190925288815260a0909301929189918991829190850190849080828437600092019190915250505091525060405162000885906200096e565b62000891919062000b65565b604051809103906000f080158015620008ae573d6000803e3d6000fd5b506040517f8210775100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015285151560248301529192507f000000000000000000000000000000000000000000000000000000000000000090911690638210775190604401600060405180830381600087803b1580156200094657600080fd5b505af11580156200095b573d6000803e3d6000fd5b5050505050505050505050505050505050565b61252c8062000ca483390190565b60008083601f8401126200098f57600080fd5b50813567ffffffffffffffff811115620009a857600080fd5b6020830191508360208260051b8501011115620009c457600080fd5b9250929050565b600060208284031215620009de57600080fd5b81518015158114620009ef57600080fd5b9392505050565b6000806000806000806000806000806101008b8d03121562000a1757600080fd5b8a3573ffffffffffffffffffffffffffffffffffffffff8116811462000a3c57600080fd5b995060208b0135985060408b013567ffffffffffffffff8082111562000a6157600080fd5b62000a6f8e838f016200097c565b909a50985060608d0135975060808d0135965060a08d0135955060c08d0135945060e08d013591508082111562000aa557600080fd5b5062000ab48d828e016200097c565b915080935050809150509295989b9194979a5092959850565b60006020828403121562000ae057600080fd5b5051919050565b600080600080600060a0868803121562000b0057600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600081518084526020808501945080840160005b8381101562000b5a5781518752958201959082019060010162000b3c565b509495945050505050565b6020815262000b8d60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60208201516040820152604082015160608201526000606083015161012080608085015262000bc161014085018362000b28565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403018286015262000c2a838262000b28565b9695505050505050565b6000821982111562000c6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe6101c06040523480156200001257600080fd5b506040516200252c3803806200252c8339810160408190526200003591620006ea565b6000336001600160a01b03166330167bec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200007157600080fd5b505afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac9190620006ca565b90506000336001600160a01b031663da1bcdf06040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ea57600080fd5b505afa158015620000ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001259190620006ca565b6001600160601b0319606082811b821660a05284901b1660805260c0840151909150421115620001a85760405162461bcd60e51b8152602060048201526024808201527f566f74696e67436f6e74726163743a20566f74696e6720616c726561647920656044820152631b99195960e21b60648201526084015b60405180910390fd5b61010083015151156200040857825160405163a3818b3b60e01b81526001600160a01b0391821660048201529082169063a3818b3b9060240160206040518083038186803b158015620001fa57600080fd5b505afa1580156200020f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023591906200069f565b620002835760405162461bcd60e51b815260206004820181905260248201527f566f74696e67436f6e74726163743a20496e76616c6964206578656375746f7260448201526064016200019f565b8260600151516002148015620002bd57508260600151600081518110620002ae57620002ae6200081f565b6020026020010151605960f81b145b8015620002ee57508260600151600181518110620002df57620002df6200081f565b6020026020010151602760f91b145b6200033c5760405162461bcd60e51b815260206004820152601f60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e730060448201526064016200019f565b670de0b6b3a76400008360a001511115620003a45760405162461bcd60e51b815260206004820152602160248201527f566f74696e67436f6e74726163743a20496e76616c6964207468726573686f6c6044820152601960fa1b60648201526084016200019f565b60008360e0015111620004085760405162461bcd60e51b815260206004820152602560248201527f566f74696e67436f6e74726163743a20496e76616c696420657865637574652060448201526464656c617960d81b60648201526084016200019f565b82600001516001600160a01b031660c0816001600160a01b031660601b81525050816001600160a01b0316638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200046357600080fd5b505afa15801562000478573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049e9190620007d9565b60065560208084015160e05260408401516101005260608401518051620004ca9260009201906200057c565b5060808301516101205260a0830151610140526060830151516001600160401b03811115620004fd57620004fd62000835565b60405190808252806020026020018201604052801562000527578160200160208202803683370190505b5080516200053e916004916020909101906200057c565b50426101605260c08301516101805260e08301516101a052610100830151805162000572916007916020909101906200057c565b5050505062000864565b828054828255906000526020600020908101928215620005ba579160200282015b82811115620005ba5782518255916020019190600101906200059d565b50620005c8929150620005cc565b5090565b5b80821115620005c85760008155600101620005cd565b600082601f830112620005f557600080fd5b815160206001600160401b038083111562000614576200061462000835565b8260051b604051601f19603f830116810181811084821117156200063c576200063c62000835565b604052848152838101925086840182880185018910156200065c57600080fd5b600092505b858310156200068157805184529284019260019290920191840162000661565b50979650505050505050565b80516200069a816200084b565b919050565b600060208284031215620006b257600080fd5b81518015158114620006c357600080fd5b9392505050565b600060208284031215620006dd57600080fd5b8151620006c3816200084b565b600060208284031215620006fd57600080fd5b81516001600160401b03808211156200071557600080fd5b9083019061012082860312156200072b57600080fd5b62000735620007f3565b62000740836200068d565b815260208301516020820152604083015160408201526060830151828111156200076957600080fd5b6200077787828601620005e3565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015183811115620007ba57600080fd5b620007c888828701620005e3565b918301919091525095945050505050565b600060208284031215620007ec57600080fd5b5051919050565b60405161012081016001600160401b038111828210171562000819576200081962000835565b60405290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200086157600080fd5b50565b60805160601c60a05160601c60c05160601c60e05161010051610120516101405161016051610180516101a051611ba962000983600039600081816103a801528181610f0701526110340152600081816103d8015281816104da01528181610ad001528181610ee501526110550152600081816102620152610ec301526000818161034501528181610e1a01526113f401526000818161022801528181610df701526112c30152600081816101ee0152610e9f0152600081816103ff0152610e7d01526000818161044101528181610e5b015261154601526000818161047001528181610762015281816115b001526116ae0152600081816102c90152818161088901528181610a2a01528181610b620152610cc70152611ba96000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063876cdb2f11610104578063c55dd801116100a2578063ede20b4611610071578063ede20b46146104a3578063ef9b78c6146104b5578063f3c49550146104bd578063f830f09c146104d057600080fd5b8063c55dd80114610463578063da1bcdf01461046b578063da918d7a14610492578063e5188f551461049a57600080fd5b8063af640d0f116100de578063af640d0f146103fa578063b3ee6e4014610421578063bd81b9a614610429578063c34c08e51461043c57600080fd5b8063876cdb2f146103a357806396c82e57146103ca5780639e6cb42b146103d357600080fd5b806330167bec1161017157806342cde4e81161014b57806342cde4e81461034057806358c0dc1d146103675780635e615a6b1461037c578063614619541461039b57600080fd5b806330167bec146102c457806331a38c8914610310578063409e22051461032d57600080fd5b806317e42ec0116101ad57806317e42ec01461024a57806318024acc1461025d5780632376a29a14610284578063281a9bdf146102a457600080fd5b80630121b93f146101d457806306fdde03146101e95780631703a01814610223575b600080fd5b6101e76101e23660046118fb565b6104d8565b005b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6101e76102583660046118be565b610ace565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6102106102923660046118be565b60036020526000908152604090205481565b6102106102b23660046118be565b60026020526000908152604090205481565b6102eb7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161021a565b60015461031d9060ff1681565b604051901515815260200161021a565b61021061033b3660046118fb565b610d2e565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b61036f610d4f565b60405161021a9190611a4f565b610384610da7565b60405161021a9b9a9998979695949392919061198b565b6101e761102f565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b61021060065481565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b600754610210565b6102106104373660046118fb565b611630565b6102eb7f000000000000000000000000000000000000000000000000000000000000000081565b600054610210565b6102eb7f000000000000000000000000000000000000000000000000000000000000000081565b61036f611640565b61021060055481565b60015461031d90610100900460ff1681565b6101e7611696565b6102106104cb3660046118fb565b61181c565b61036f61182c565b7f000000000000000000000000000000000000000000000000000000000000000042111561058d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f566f74696e67436f6e74726163743a20566f746520616c726561647920656e6460448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600154610100900460ff1615610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792076657460448201527f6f656400000000000000000000000000000000000000000000000000000000006064820152608401610584565b60015460ff16156106b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792065786560448201527f63757465640000000000000000000000000000000000000000000000000000006064820152608401610584565b6000548110610723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e00006044820152606401610584565b6007546040517f65eaf8bc00000000000000000000000000000000000000000000000000000000815290156004820152336024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906365eaf8bc90606401600060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b50503360009081526003602052604090205491505080156108585733600090815260026020526040902054600480548391908390811061081157610811611b44565b90600052602060002001546108269190611afe565b6004828154811061083957610839611b44565b600091825260209091200155600554610853908390611afe565b600555505b6040517f426233600000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063426233609060240160206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190611914565b9050600081116109aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f566f74696e67436f6e74726163743a204e6f74207374616b656420746f20766f60448201527f74650000000000000000000000000000000000000000000000000000000000006064820152608401610584565b3360009081526002602090815260408083208690556003909152902081905560048054829190859081106109e0576109e0611b44565b90600052602060002001546109f59190611aa9565b60048481548110610a0857610a08611b44565b600091825260209091200155600554610a22908290611aa9565b6005819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611914565b600655505050565b7f00000000000000000000000000000000000000000000000000000000000000004211158015610b065750600154610100900460ff16155b8015610b15575060015460ff16155b15610d2b576040517f4262336000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063426233609060240160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190611914565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020549091508015801590610c165750818114155b15610cc55773ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320546003909252909120839055600480548491849184908110610c6757610c67611b44565b9060005260206000200154610c7c9190611afe565b610c869190611aa9565b60048281548110610c9957610c99611b44565b90600052602060002001819055508282600554610cb69190611afe565b610cc09190611aa9565b600555505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b50565b60008181548110610d3e57600080fd5b600091825260209091200154905081565b60606007805480602002602001604051908101604052809291908181526020018280548015610d9d57602002820191906000526020600020905b815481526020019060010190808311610d89575b5050505050905090565b600080600060606000806000610dbb611882565b6060610dc56118a0565b60408051808201825260015460ff808216151583526101009091041615156020808301919091528251606081810185527f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000082840152600654828601526000805486518186028101860190975280875291957f0000000000000000000000000000000000000000000000000000000000000000957f0000000000000000000000000000000000000000000000000000000000000000957f00000000000000000000000000000000000000000000000000000000000000009593947f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000947f00000000000000000000000000000000000000000000000000000000000000009493600493600792918a9190830182828015610f6157602002820191906000526020600020905b815481526020019060010190808311610f4d575b5050505050975082805480602002602001604051908101604052809291908181526020018280548015610fb357602002820191906000526020600020905b815481526020019060010190808311610f9f575b505050505092508080548060200260200160405190810160405280929190818152602001828054801561100557602002820191906000526020600020905b815481526020019060010190808311610ff1575b505050505090509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b6110797f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611aa9565b4211611107576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f566f74696e67436f6e74726163743a20457865637574652064656c6179206e6f60448201527f74207061737420796574000000000000000000000000000000000000000000006064820152608401610584565b600154610100900460ff161561119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792076657460448201527f6f656400000000000000000000000000000000000000000000000000000000006064820152608401610584565b60015460ff1615611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792065786560448201527f63757465640000000000000000000000000000000000000000000000000000006064820152608401610584565b6007546112c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f566f74696e67436f6e74726163743a204578656375746520706172616d206e6f60448201527f7420646566696e656400000000000000000000000000000000000000000000006064820152608401610584565b7f0000000000000000000000000000000000000000000000000000000000000000600554101561134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a2051756f72756d206e6f74206d657400006044820152606401610584565b600460018154811061136157611361611b44565b9060005260206000200154600460008154811061138057611380611b44565b9060005260206000200154116113f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f566f74696e67436f6e74726163743a204d616a6f72697479206e6f74206d65746044820152606401610584565b7f00000000000000000000000000000000000000000000000000000000000000006005546114209190611ac1565b670de0b6b3a7640000600460008154811061143d5761143d611b44565b90600052602060002001546114529190611ac1565b116114df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f566f74696e67436f6e74726163743a205468726573686f6c64206e6f74206d6560448201527f74000000000000000000000000000000000000000000000000000000000000006064820152608401610584565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790556040517f8af7c64900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638af7c6499061157c90600790600401611a62565b600060405180830381600087803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166331a38c896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561161657600080fd5b505af115801561162a573d6000803e3d6000fd5b50505050565b60078181548110610d3e57600080fd5b60606000805480602002602001604051908101604052809291908181526020018280548015610d9d5760200282019190600052602060002090815481526020019060010190808311610d89575050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461175b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f535741505f566f74696e67436f6e74726163743a204e6f742066726f6d204760448201527f6f7665726e616e636500000000000000000000000000000000000000000000006064820152608401610584565b60015460ff16156117ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741505f566f74696e67436f6e74726163743a20416c726561647920657860448201527f65637574656400000000000000000000000000000000000000000000000000006064820152608401610584565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b60048181548110610d3e57600080fd5b60606004805480602002602001604051908101604052809291908181526020018280548015610d9d5760200282019190600052602060002090815481526020019060010190808311610d89575050505050905090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156118d057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146118f457600080fd5b9392505050565b60006020828403121561190d57600080fd5b5035919050565b60006020828403121561192657600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561195d57815187529582019590820190600101611941565b509495945050505050565b8060005b600381101561162a57815184526020938401939091019060010161196c565b60006101c073ffffffffffffffffffffffffffffffffffffffff8e16835260208d818501528c60408501528160608501526119c88285018d61192d565b91508a60808501528960a08501528860c085015260e084018860005b6002811015611a035781511515835291830191908301906001016119e4565b50505050828103610120840152611a1a818761192d565b9050611a2a610140840186611968565b8281036101a0840152611a3d818561192d565b9e9d5050505050505050505050505050565b6020815260006118f4602083018461192d565b6020808252825482820181905260008481528281209092916040850190845b81811015611a9d57835483526001938401939285019201611a81565b50909695505050505050565b60008219821115611abc57611abc611b15565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611af957611af9611b15565b500290565b600082821015611b1057611b10611b15565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212202c84137a4f41b71d0ff9773151d562c55db99c6bef9ed48bf7a2d88f8240142964736f6c63430008060033a26469706673582212202a4d0f086a099ed0a6dcedb1f86c07b9279dce1980cb7d7169f2f9e16b9c963164736f6c63430008060033"
};

// src/contracts/OSWAP_VotingRegistry.ts
var OSWAP_VotingRegistry = class extends import_eth_wallet20.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_VotingRegistry_json_default.abi, OSWAP_VotingRegistry_json_default.bytecode);
    this.assign();
  }
  deploy(votingManager) {
    return this.__deploy([votingManager]);
  }
  assign() {
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let votingManager_call = async () => {
      let result = await this.call("votingManager");
      return result;
    };
    this.votingManager = votingManager_call;
    let newVoteParams = (params) => [params.executor, import_eth_wallet20.Utils.stringToBytes32(params.name), import_eth_wallet20.Utils.stringToBytes32(params.options), import_eth_wallet20.Utils.toString(params.quorum), import_eth_wallet20.Utils.toString(params.threshold), import_eth_wallet20.Utils.toString(params.voteEndTime), import_eth_wallet20.Utils.toString(params.executeDelay), import_eth_wallet20.Utils.stringToBytes32(params.executeParam)];
    let newVote_send = async (params) => {
      let result = await this.send("newVote", newVoteParams(params));
      return result;
    };
    let newVote_call = async (params) => {
      let result = await this.call("newVote", newVoteParams(params));
      return;
    };
    this.newVote = Object.assign(newVote_send, {
      call: newVote_call
    });
  }
};

// src/contracts/OSWAP_BridgeVault.ts
var import_eth_wallet21 = __toModule(require("@ijstech/eth-wallet"));

// src/contracts/OSWAP_BridgeVault.json.ts
var OSWAP_BridgeVault_json_default = {
  "abi": [
    { "inputs": [{ "internalType": "contract IOSWAP_BridgeVaultTrollRegistry", "name": "_vaultRegistry", "type": "address" }, { "internalType": "contract IOSWAP_ConfigStore", "name": "_configStore", "type": "address" }, { "internalType": "contract IERC20", "name": "_asset", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "mintAmount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newLpAssetBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "indexed": false, "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "AmendOrderRequest", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "indexed": false, "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }], "name": "NewOrder", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }, { "indexed": false, "internalType": "bool", "name": "canceledByOrderOwner", "type": "bool" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "OrderCanceled", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "rebalancer", "type": "address" }, { "indexed": false, "internalType": "int256", "name": "amount", "type": "int256" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }], "name": "Rebalance", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newPendingWithdrawal", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "burnAmount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newLpAssetBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newPendingWithdrawal", "type": "uint256" }], "name": "RemoveLiquidityRequest", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "sourceChainId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": false, "internalType": "bytes32", "name": "hashedOrderId", "type": "bytes32" }], "name": "RequestCancelOrder", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }, { "indexed": false, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "indexed": false, "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "indexed": false, "internalType": "uint256", "name": "outAmount", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "newLpAssetBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "Swap", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "excess", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "Sync", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IOSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IOSWAP_SideChainTrollRegistry", "name": "newTrollRegistry", "type": "address" }], "name": "UpdateTrollRegistry", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "orderId", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }], "name": "VoidOrder", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }], "name": "WithdrawUnexecutedOrder", "type": "event" },
    { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "feeTo", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "WithdrawlTrollFee", "type": "event" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "asset", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "assetDecimalsScale", "outputs": [{ "internalType": "int8", "name": "", "type": "int8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "govTokenOracle", "type": "address" }, { "internalType": "address", "name": "assetTokenOracle", "type": "address" }], "name": "assetPriceAgainstGovToken", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "internalType": "bool", "name": "canceledByOrderOwner", "type": "bool" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "cancelOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract IOSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "getChainId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOrders", "outputs": [{ "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order[]", "name": "list", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "internalType": "bool", "name": "canceledByOrderOwner", "type": "bool" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "hashCancelOrderParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_owner", "type": "address" }, { "internalType": "uint256", "name": "sourceChainId", "type": "uint256" }, { "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "hashOrder", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "orderId", "type": "bytes32" }, { "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }], "name": "hashSwapParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "orderId", "type": "bytes32" }], "name": "hashVoidOrderParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "_owner", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashWithdrawParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "imbalance", "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "contract IOSWAP_BridgeVaultTrollRegistry", "name": "_vaultRegistry", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "lastKnownBalance", "outputs": [{ "internalType": "uint256", "name": "balance", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "lpAssetBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "newOrder", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "internalType": "address", "name": "trader", "type": "address" }], "name": "newOrderFromRouter", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderAmendments", "outputs": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "orderAmendmentsLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderRefunds", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderStatus", "outputs": [{ "internalType": "enum IOSWAP_BridgeVault.OrderStatus", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orders", "outputs": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "ordersLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pendingWithdrawalAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pendingWithdrawalTimeout", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "assetAmount", "type": "uint256" }], "name": "rebalancerDeposit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "assetAmount", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "rebalancerWithdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "uint256", "name": "assetAmount", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "lpTokenAmount", "type": "uint256" }], "name": "removeLiquidityRequest", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "requestAmendOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "sourceChainId", "type": "uint256" }, { "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "requestCancelOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "address", "name": "_owner", "type": "address" }, { "internalType": "uint256", "name": "_orderId", "type": "uint256" }, { "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swap", "outputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "swapOrderStatus", "outputs": [{ "internalType": "enum IOSWAP_BridgeVault.OrderStatus", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "totalPendingWithdrawal", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract IOSWAP_SideChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "updateTrollRegistry", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [], "name": "vaultRegistry", "outputs": [{ "internalType": "contract IOSWAP_BridgeVaultTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
    { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32", "name": "orderId", "type": "bytes32" }], "name": "voidOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "withdrawUnexecutedOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
    { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawlTrollFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
  ],
  "bytecode": "60e06040523480156200001157600080fd5b50604051620060f8380380620060f883398101604081905262000034916200043f565b604080518082018252601281527113d4d5d05408109c9a5919d94815985d5b1d60721b60208083019182528351808501909452600b84526a13d4d5d0540b559055531560aa1b908401528151919291620000919160039162000372565b508051620000a790600490602084019062000372565b50506001600555506001600160a01b038316620000d657600680546001600160a01b0319163317905562000187565b600980546001600160a01b0319166001600160a01b03851690811790915560408051630c059efb60e21b815290516330167bec91600480820192602092909190829003018186803b1580156200012b57600080fd5b505afa15801562000140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000166919062000418565b600780546001600160a01b0319166001600160a01b03929092169190911790555b6000826001600160a01b03166305268cff6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001c357600080fd5b505afa158015620001d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fe919062000418565b9050806001600160a01b03166080816001600160a01b031660601b815250506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025957600080fd5b505afa1580156200026e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000294919062000493565b9050826001600160a01b031660a0816001600160a01b031660601b815250506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002ef57600080fd5b505afa15801562000304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032a919062000493565b9050620003388282620004b8565b600090810b900b60f81b60c0525050600880546001600160a01b0319166001600160a01b039490941693909317909255506200056b915050565b8280546200038090620004ff565b90600052602060002090601f016020900481019282620003a45760008555620003ef565b82601f10620003bf57805160ff1916838001178555620003ef565b82800160010185558215620003ef579182015b82811115620003ef578251825591602001919060010190620003d2565b50620003fd92915062000401565b5090565b5b80821115620003fd576000815560010162000402565b6000602082840312156200042b57600080fd5b8151620004388162000552565b9392505050565b6000806000606084860312156200045557600080fd5b8351620004628162000552565b6020850151909350620004758162000552565b6040850151909250620004888162000552565b809150509250925092565b600060208284031215620004a657600080fd5b815160ff811681146200043857600080fd5b600081810b83820b8281128015607f19830184121615620004dd57620004dd6200053c565b81607f018313811615620004f557620004f56200053c565b5090039392505050565b600181811c908216806200051457607f821691505b602082108114156200053657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200056857600080fd5b50565b60805160601c60a05160601c60c05160f81c615ac862000630600039600081816105ba01528181610cab01528181610cd601528181610d020152610d450152600081816104cd01528181611341015281816115200152818161161f01528181611b5501528181611e1d01528181611f1c0152818161202c0152818161255501528181612e58015281816131b2015281816134120152818161382001528181613a9601528181613eba01528181613f4b0152613f8a015260006103980152615ac86000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c8063923b6a7d116101de578063be8acd3f1161010f578063d41e9720116100ad578063e0ca2df01161007c578063e0ca2df0146108af578063ec78cdfc146108c2578063ffa1dfcb146108ca578063fff6cae9146108dd57600080fd5b8063d41e97201461083a578063d6cf0b7c14610843578063dd62ed3e14610856578063deaf30b21461088f57600080fd5b8063c4c7f1d0116100e9578063c4c7f1d0146107ee578063cdd7b38a14610801578063cfd7091d14610814578063d06f3fb51461082757600080fd5b8063be8acd3f146107b0578063bff49450146107b8578063c14c723e146107db57600080fd5b8063a39d82221161017c578063a9059cbb11610156578063a9059cbb14610764578063aa1cb1ac14610777578063af1cae5d1461078a578063b64d1e521461079d57600080fd5b8063a39d82221461071e578063a457c2d71461073e578063a85c38ef1461075157600080fd5b80639c0dc751116101b85780639c0dc751146106c55780639d69dc4e146106e55780639dfd49ce146106f8578063a201ccf61461070b57600080fd5b8063923b6a7d146106a2578063944e8644146106b557806395d89b41146106bd57600080fd5b806339509351116102c35780635fa56e3111610261578063842c483511610230578063842c48351461061857806386dad91e146106205780638f1926df146106335780638f72fc771461068257600080fd5b80635fa56e311461058f57806366acc1b9146105a257806367a9257d146105b557806370a08231146105ef57600080fd5b806349e5cabe1161029d57806349e5cabe1461054b57806351c6590a1461055e5780635a812465146105735780635cae6c7a1461058657600080fd5b806339509351146104ef578063404de3611461050257806346bdc1081461052b57600080fd5b8063231053ac1161033057806330167bec1161030a57806330167bec146104a0578063313ce567146104b35780633408e470146104c257806338d52e0f146104c857600080fd5b8063231053ac1461046757806323879dcd1461047a57806323b872dd1461048d57600080fd5b80630a22d68c1161036c5780630a22d68c1461040f57806318160ddd146104265780631d2d85961461042e57806320f1fd3b1461045e57600080fd5b806305268cff1461039357806306fdde03146103d7578063095ea7b3146103ec575b600080fd5b6103ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6103df6108e5565b6040516103ce91906154ee565b6103ff6103fa366004614b7a565b610977565b60405190151581526020016103ce565b610418600d5481565b6040519081526020016103ce565b600254610418565b61045161043c366004614e76565b60156020526000908152604090205460ff1681565b6040516103ce91906154c6565b610418600a5481565b610418610475366004614e8f565b61098e565b610418610488366004614e76565b610a06565b6103ff61049b366004614b39565b610a4e565b6007546103ba906001600160a01b031681565b604051601281526020016103ce565b46610418565b6103ba7f000000000000000000000000000000000000000000000000000000000000000081565b6103ff6104fd366004614b7a565b610aff565b6103ba610510366004614e76565b6012602052600090815260409020546001600160a01b031681565b610418610539366004614e76565b60009081526011602052604090205490565b610418610559366004614ab3565b610b3b565b61057161056c366004614e76565b610d80565b005b610571610581366004614a79565b610f6c565b610418600b5481565b61041861059d366004614ba6565b6110c7565b6105716105b0366004614e76565b611129565b6105dc7f000000000000000000000000000000000000000000000000000000000000000081565b60405160009190910b81526020016103ce565b6104186105fd366004614a79565b6001600160a01b031660009081526020819052604090205490565b6105716113bd565b61057161062e366004614e09565b6114de565b61064661064136600461509a565b6116b4565b6040805196875260208701959095526001600160a01b0393841694860194909452606085019190915216608083015260a082015260c0016103ce565b61069561069036600461509a565b611716565b6040516103ce91906153d2565b6104186106b0366004614ca6565b6118df565b61057161220f565b6103df612329565b6104186106d3366004614e76565b60146020526000908152604090205481565b6008546103ba906001600160a01b031681565b610571610706366004614e76565b612338565b610571610719366004614b7a565b6123ea565b61041861072c366004614a79565b600f6020526000908152604090205481565b6103ff61074c366004614b7a565b6125c2565b61064661075f366004614e76565b61265b565b6103ff610772366004614b7a565b6126ae565b610571610785366004614d58565b6126bb565b610418610798366004614fbc565b612771565b6105716107ab36600461506d565b6128dd565b601054610418565b6104516107c6366004614e76565b60136020526000908152604090205460ff1681565b6105716107e9366004614e76565b612cef565b6105716107fc366004614e76565b612f8c565b6009546103ba906001600160a01b031681565b610418610822366004614ba6565b613226565b610418610835366004614f8f565b613266565b610418600c5481565b61057161085136600461509a565b6134f0565b610418610864366004614ab3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61041861089d366004614a79565b600e6020526000908152604090205481565b6105716108bd366004614da3565b61367f565b6104186139f9565b6104186108d8366004615046565b613a35565b610571613a77565b6060600380546108f490615909565b80601f016020809104026020016040519081016040528092919081815260200182805461092090615909565b801561096d5780601f106109425761010080835404028352916020019161096d565b820191906000526020600020905b81548152906001019060200180831161095057829003601f168201915b5050505050905090565b6000610984338484613b75565b5060015b92915050565b60004630888860208901356109a960608b0160408c01614a79565b8a606001358a8a8a8e60800160208101906109c49190614a79565b8f60a001356040516020016109e49c9b9a99989796959493929190615267565b6040516020818303038152906040528051906020012090509695505050505050565b6000466040805160208101929092526001600160601b03193060601b169082015260548101839052607401604051602081830303815290604052805190602001209050919050565b6000610a5b848484613c99565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610ae55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610af28533858403613b75565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610984918590610b36908690615740565b613b75565b600080610bb7846001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7a57600080fd5b505afa158015610b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb29190614f76565b613e60565b905080610c065760405162461bcd60e51b815260206004820152601760248201527f676f76546f6b656e20686173207072696365206f6620300000000000000000006044820152606401610adc565b6000610c44846001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7a57600080fd5b905080610c8a5760405162461bcd60e51b81526020600482015260146024820152730617373657420686173207072696365206f6620360641b6044820152606401610adc565b80610c9d83670de0b6b3a7640000615868565b610ca79190615758565b92507f000000000000000000000000000000000000000000000000000000000000000060000b15610d785760007f000000000000000000000000000000000000000000000000000000000000000060000b13610d4057610d267f0000000000000000000000000000000000000000000000000000000000000000615976565b610d3190600a6157bd565b610d3b9084615758565b610d75565b610d6b7f0000000000000000000000000000000000000000000000000000000000000000600a6157bd565b610d759084615868565b92505b505092915050565b60026005541415610da35760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b03161580610e435750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190614e59565b155b610e5f5760405162461bcd60e51b8152600401610adc90615521565b80610eac5760405162461bcd60e51b815260206004820181905260248201527f616d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610adc565b610eb63382613ea2565b90506000600b54600014610ee357600b54600254610ed49084615868565b610ede9190615758565b610ee5565b815b905081600b6000828254610ef99190615740565b90915550610f0990503382614016565b336000818152602081815260409182902054600b5483518781529283018690529282015260608101919091527fd92dda7384b5f0fa573be9bbf63d63ac81a5bbb08ebc31f00c0f066e50239609906080015b60405180910390a250506001600555565b6006546001600160a01b03163314610f8357600080fd5b6001600160a01b038116610fc85760405162461bcd60e51b815260206004820152600c60248201526b6e756c6c206164647265737360a01b6044820152606401610adc565b6009546001600160a01b0316156110105760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481a5b9a5d60a21b6044820152606401610adc565b600980546001600160a01b0319166001600160a01b03831690811790915560408051630c059efb60e21b815290516330167bec91600480820192602092909190829003018186803b15801561106457600080fd5b505afa158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c9190614a96565b600780546001600160a01b03929092166001600160a01b031992831617905560068054909116905550565b6000466040805160208101929092526001600160601b031930606090811b8216928401929092529086901b166054820152606881018490526088810183905260a8015b6040516020818303038152906040528051906020012090509392505050565b6002600554141561114c5760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806111ec5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190614e59565b155b6112085760405162461bcd60e51b8152600401610adc90615521565b600d5481111561125a5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742065786365656465642066656520746f74616c000000000000006044820152606401610adc565b80600d600082825461126c91906158c6565b909155505060085460408051622fcfcb60e31b815290516000926001600160a01b03169163017e7e58916004808301926020929190829003018186803b1580156112b557600080fd5b505afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed9190614a96565b90506001600160a01b0381166113345760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610adc565b6113686001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682846140f5565b600d54604080516001600160a01b03841681526020810185905280820192909252517f3295b018afec1388a9f05500a461d455fdcf5e033bc08f0bd5e76327f938c1c49181900360600190a150506001600555565b6008546040805163ef06095160e01b815290516000926001600160a01b03169163ef060951916004808301926020929190829003018186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190614a96565b90506001600160a01b0381166114895760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420636f6e6669672073746f726560601b6044820152606401610adc565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f6fa6ee9ec7808d2a9699505042862d79597c4068938b960a4a18d584a2aa3eea906020015b60405180910390a150565b600260055414156115015760405162461bcd60e51b8152600401610adc90615586565b600260055560085460405163b023c86560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600092839283929091169063b023c8659060240160606040518083038186803b15801561157257600080fd5b505afa158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190614aec565b92509250925060006115bc8383610b3b565b90506115f088886115ce878a8a6110c7565b846115e18b670de0b6b3a7640000615868565b6115eb9190615758565b61415d565b50506115fb866142de565b600a600082825461160c9190615887565b9091555061164690506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685886140f5565b7f8b61a5a3126da6f67e9f92df5065f5c37f8e618dccd2e2033933cf593e747a3384611671886142de565b61167a90615959565b600a54604080516001600160a01b03909416845260208401929092529082015260600160405180910390a150506001600555505050505050565b601160205281600052604060002081815481106116d057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549396509194506001600160a01b0390811693919291169086565b606060006010805480602002602001604051908101604052809291908181526020016000905b828210156117b25760008481526020908190206040805160c08101825260068602909201805483526001808201548486015260028201546001600160a01b039081169385019390935260038201546060850152600482015490921660808401526005015460a0830152908352909201910161173c565b50505050905080518410156118d85780516117cd8486615740565b11156117e3578381516117e091906158c6565b92505b826001600160401b038111156117fb576117fb6159d8565b60405190808252806020026020018201604052801561187757816020015b6118646040518060c00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160006001600160a01b03168152602001600081525090565b8152602001906001900390816118195790505b50915060005b83811015610d7857816118908683615740565b815181106118a0576118a06159c2565b60200260200101518382815181106118ba576118ba6159c2565b602002602001018190525080806118d09061593e565b91505061187d565b5092915050565b6000600260055414156119045760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806119a45750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196a57600080fd5b505afa15801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a29190614e59565b155b6119c05760405162461bcd60e51b8152600401610adc90615521565b60006119ce8984358a613226565b6020840135925090506000808281526015602052604090205460ff1660068111156119fb576119fb6159ac565b14611a185760405162461bcd60e51b8152600401610adc90615542565b6007546040516382ad711960e01b8152336004820152600160248201526001600160a01b03909116906382ad71199060440160206040518083038186803b158015611a6257600080fd5b505afa158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a9190614e59565b611ada5760405162461bcd60e51b81526020600482015260116024820152701b9bdd0818481cdd5c195c881d1c9bdb1b607a1b6044820152606401610adc565b81611ae36139f9565b1015611b3b5760405162461bcd60e51b815260206004820152602160248201527f4272696467655661756c743a20696e73756666696369656e742062616c616e636044820152606560f81b6064820152608401610adc565b6008546040516301f418ff60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000928392839283928392839283928392911690630fa0c7f89060240160c06040518083038186803b158015611bb057600080fd5b505afa158015611bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be89190614f03565b939c5091985096509450925090506001600160a01b03811615611cc357604051630946f8b960e11b81526001600160a01b0382169063128df17290611c31908e906004016155bd565b60206040518083038186803b158015611c4957600080fd5b505afa158015611c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c819190614e59565b611cc35760405162461bcd60e51b81526020600482015260136024820152721cddd85c081c1bdb1a58de481b9bdd081b595d606a1b6044820152606401610adc565b670de0b6b3a7640000611cd6838c615868565b611ce09190615758565b91508d611ced8484615740565b611cf79190615740565b9550858a11611d415760405162461bcd60e51b8152602060048201526016602482015275125b9c1d5d08185b5bdd5b9d081d1bdbc81cdb585b1b60521b6044820152606401610adc565b611d4a8a6142de565b600a6000828254611d5b9190615887565b9250508190555081600b6000828254611d749190615740565b90915550611d8490508e84615740565b600d6000828254611d959190615740565b90915550611da590508585610b3b565b9650611db1868b6158c6565b99505050505050506000611de18e8e611dce878e8b8f8f8f61098e565b856115e18a670de0b6b3a7640000615868565b506000858152601560205260409020805460ff19166002179055905086611f0f57611e126060870160408801614a79565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611e825760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610adc565b8560600135851015611ed65760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606401610adc565b611f0a611ee960a0880160808901614a79565b86611efa60608a0160408b01614a79565b6001600160a01b031691906140f5565b6121a2565b611f436001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848761432c565b60606000611f5688830160408a01614a79565b6001600160a01b03161415612011576001600160a01b038416638af139378760608a01358c8c611f8c60a08e0160808f01614a79565b8d60a001356040518763ffffffff1660e01b8152600401611fb29695949392919061564d565b600060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120089190810190614bdb565b91506121779050565b6060846001600160a01b03166365d9e64b888a606001358d8d7f00000000000000000000000000000000000000000000000000000000000000008e608001602081019061205e9190614a79565b8f60a001356040518863ffffffff1660e01b815260040161208597969594939291906155e6565b600060405180830381600087803b15801561209f57600080fd5b505af11580156120b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120db9190810190614bdb565b925090506120ef6060890160408a01614a79565b6001600160a01b0316816001835161210791906158c6565b81518110612117576121176159c2565b60200260200101516001600160a01b0316146121755760405162461bcd60e51b815260206004820181905260248201527f4272696467655661756c743a20546f6b656e206f7574206e6f74206d617463686044820152606401610adc565b505b806001825161218691906158c6565b81518110612196576121966159c2565b60200260200101519550505b336001600160a01b03168b7f405af4ab62e51efb58262d5be0d6a4ea764d026247b0a3f5a1daaf7caa8d591c838f8e8b8b600a54600b54600d546040516121f0989796959493929190615433565b60405180910390a35050600160055550909a9950505050505050505050565b60075460408051635dd2c46560e11b815290516000926001600160a01b03169163bba588ca916004808301926020929190829003018186803b15801561225457600080fd5b505afa158015612268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228c9190614a96565b90506001600160a01b0381166122db5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420636f6e6669672073746f726560601b6044820152606401610adc565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f2e622d86c9281f3be677f792b9721012fb471d4892cc764f6acd70b50d390701906020016114d3565b6060600480546108f490615909565b6002600554141561235b5760405162461bcd60e51b8152600401610adc90615586565b600260055561236a3382613ea2565b9050612375816142de565b600a600082825461238691906156ff565b909155507f8b61a5a3126da6f67e9f92df5065f5c37f8e618dccd2e2033933cf593e747a339050336123b7836142de565b600a54604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1506001600555565b6002600554141561240d5760405162461bcd60e51b8152600401610adc90615586565b60026005556001600160a01b0382166000908152600f602052604090205442101561247a5760405162461bcd60e51b815260206004820152601860248201527f4272696467655661756c743a20706c65617365207761697400000000000000006044820152606401610adc565b6001600160a01b0382166000908152600e60205260409020548111156125015760405162461bcd60e51b815260206004820152603660248201527f4272696467655661756c743a20776974686472617720616d6f756e74206578636044820152751959591959081c995c5d595cdd195908185b5bdd5b9d60521b6064820152608401610adc565b6001600160a01b0382166000908152600e6020526040812080548392906125299084906158c6565b9250508190555080600c600082825461254291906158c6565b9091555061257c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836140f5565b816001600160a01b03167f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e882600c54604051610f5b929190918252602082015260400190565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156126445760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610adc565b6126513385858403613b75565b5060019392505050565b6010818154811061266b57600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955091936001600160a01b039182169391169086565b6000610984338484613c99565b60008181526015602052604081205460ff1660068111156126de576126de6159ac565b146126fb5760405162461bcd60e51b8152600401610adc90615542565b6000612712848461270b85610a06565b600061415d565b5060008381526015602052604090819020805460ff1916600517905551909150339083907fc37546735236339b0acece7af06f4648a849e174d46dea23bc3291f3dce0a96590612763908590615420565b60405180910390a350505050565b6000600260055414156127965760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806128365750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127fc57600080fd5b505afa158015612810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128349190614e59565b155b6128525760405162461bcd60e51b8152600401610adc90615521565b60008260200151116128b55760405162461bcd60e51b815260206004820152602660248201527f696e70757420616d6f756e74206d7573742062652067726561746572207468616044820152656e207a65726f60d01b6064820152608401610adc565b6128c3338360200151613ea2565b60208301526128d282336143ed565b600160055592915050565b600260055414156129005760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806129a05750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561296657600080fd5b505afa15801561297a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299e9190614e59565b155b6129bc5760405162461bcd60e51b8152600401610adc90615521565b6000828152601260205260409020546001600160a01b03163314612a225760405162461bcd60e51b815260206004820152601b60248201527f4272696467655661756c743a206e6f742066726f6d206f776e657200000000006044820152606401610adc565b600160008381526013602052604090205460ff166006811115612a4757612a476159ac565b1480612a755750600660008381526013602052604090205460ff166006811115612a7357612a736159ac565b145b612ac15760405162461bcd60e51b815260206004820181905260248201527f4272696467655661756c743a206e6f7420612070656e64696e67206f726465726044820152606401610adc565b60108281548110612ad457612ad46159c2565b6000918252602090912060069091020154813514612b285760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103832b2b921b430b4b760791b6044820152606401610adc565b60108281548110612b3b57612b3b6159c2565b906000526020600020906006020160010154816020013514612b935760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081a5b88185b5bdd5b9d607a1b6044820152606401610adc565b600082815260116020526040902054612c4f5760008281526011602052604090206010805484908110612bc857612bc86159c2565b60009182526020808320845460018082018755958552919093206006928302909301805492909102909201908155818301549281019290925560028082015490830180546001600160a01b039283166001600160a01b0319918216179091556003808401549085015560048084015490850180549190931691161790556005908101549101555b6000828152601160209081526040822080546001810182559083529120829160060201612c7c8282615a0e565b50506000828152601360209081526040808320805460ff191660061790556011909152902054612cae906001906158c6565b827f2fb8fa589a57bc1f8d0c370def5008695ee72187df82f07b26914dac852c5c9f83604051612cde91906155bd565b60405180910390a350506001600555565b60026005541415612d125760405162461bcd60e51b8152600401610adc90615586565b60026005556000612d2260025490565b600b54612d2f9084615868565b612d399190615758565b905080600b541015612d7f5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da08199d5b99608a1b6044820152606401610adc565b80600b6000828254612d9191906158c6565b90915550612da1905033836145d4565b6008546040805163b86a185560e01b815290516000926001600160a01b03169163b86a1855916004808301926020929190829003018186803b158015612de657600080fd5b505afa158015612dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1e9190614f76565b905080158015612e4657506000600a54612e39600b546142de565b612e4391906156ff565b12155b15612ec857612e7f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846140f5565b600c5460405133917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e891612ebb91868252602082015260400190565b60405180910390a2612f22565b336000908152600e602052604081208054849290612ee7908490615740565b90915550612ef790508142615740565b336000908152600f6020526040812091909155600c8054849290612f1c908490615740565b90915550505b336000818152602081815260409182902054600b54600c548451888152938401899052838501929092526060830152608082015290517f129df1612e41e026fe9fcc6eb01bb19fa4d96c11a8597fdd777f9798d21053389181900360a00190a25050600160055550565b60026005541415612faf5760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b0316158061304f5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301557600080fd5b505afa158015613029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304d9190614e59565b155b61306b5760405162461bcd60e51b8152600401610adc90615521565b6000818152601260205260409020546001600160a01b031633146130d15760405162461bcd60e51b815260206004820152601b60248201527f4272696467655661756c743a206e6f742066726f6d206f776e657200000000006044820152606401610adc565b600460008281526013602052604090205460ff1660068111156130f6576130f66159ac565b146131525760405162461bcd60e51b815260206004820152602660248201527f4272696467655661756c743a2063616e63656c6c6174696f6e206e6f742061706044820152651c1c9bdd995960d21b6064820152608401610adc565b6000818152601360209081526040808320805460ff19166005179055601490915290205461317f906142de565b600a60008282546131909190615887565b90915550506000818152601460205260409020546131da906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033906140f5565b600a5460405133917f1a2d5de6fd207698efd8e378391657cb785c739e50cd0404749fac0eedaf3a4b9161321691858252602082015260400190565b60405180910390a2506001600555565b6040516001600160601b0319606085811b8216602084015246603484015230901b166054820152606881018390526088810182905260009060a80161110a565b6007546000906001600160a01b031615806133045750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ca57600080fd5b505afa1580156132de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133029190614e59565b155b6133205760405162461bcd60e51b8152600401610adc90615521565b600854604051633d54c44760e01b81523360048201526001600160a01b0390911690633d54c4479060240160206040518083038186803b15801561336357600080fd5b505afa158015613377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339b9190614e59565b6133e75760405162461bcd60e51b815260206004820152601960248201527f4e6f742066726f6d20617070726f7665642061646472657373000000000000006044820152606401610adc565b6133ef6139f9565b6133fd906020850135615740565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561345c57600080fd5b505afa158015613470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134949190614f76565b10156134d85760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b6044820152606401610adc565b610af86134ea36859003850185614fbc565b836143ed565b6007546001600160a01b0316158061358b5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561355157600080fd5b505afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190614e59565b155b6135a75760405162461bcd60e51b8152600401610adc90615521565b60006135b4338484613226565b90506000808281526015602052604090205460ff1660068111156135da576135da6159ac565b146136275760405162461bcd60e51b815260206004820181905260248201527f4272696467655661756c743a206e6f7420612070656e64696e67206f726465726044820152606401610adc565b600081815260156020908152604091829020805460ff1916600317905590518281528391859133917fa065d03beae5e82c80ed9f4455ae991084cfd41fa890fd5285f298f04665a7e4910160405180910390a4505050565b6007546001600160a01b0316158061371a5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136e057600080fd5b505afa1580156136f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137189190614e59565b155b6137365760405162461bcd60e51b8152600401610adc90615521565b60006010848154811061374b5761374b6159c2565b600091825260209091206006909102019050600160008581526013602052604090205460ff166006811115613782576137826159ac565b14806137b05750600660008581526013602052604090205460ff1660068111156137ae576137ae6159ac565b145b6138065760405162461bcd60e51b815260206004820152602160248201527f4272696467655661756c743a2063616e63656c206e6f742072657175657374656044820152601960fa1b6064820152608401610adc565b6008546040516301f418ff60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000928392839290911690630fa0c7f89060240160c06040518083038186803b15801561387257600080fd5b505afa158015613886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138aa9190614f03565b50945094509450505060006138bf8484610b3b565b905060006138ec8b8b6138d38c8c8c613a35565b858a60010154670de0b6b3a76400006115e19190615868565b509050600060108a81548110613904576139046159c2565b9060005260206000209060060201600101549050600089156139715761392a8986615740565b905061393681836158c6565b9150613941816142de565b600a60008282546139529190615887565b9250508190555080600d600082825461396b9190615740565b90915550505b60008b81526014602090815260408083208590556013909152902080546004919060ff19166001830217905550336001600160a01b03168b7facf66daa017de96293704c3984049e12467a31382df2706bb4ecb2024f1d4a87858d600a54600d546040516139e29493929190615497565b60405180910390a350505050505050505050505050565b6000613a30600a54613a26600d54600c54600b54613a179190615740565b613a219190615740565b6142de565b610bb291906156ff565b905090565b6000466040805160208101929092526001600160601b03193060601b16908201526054810185905283151560f81b60748201526075810183905260950161110a565b6000613a816139f9565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613ae057600080fd5b505afa158015613af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b189190614f76565b613b2291906158c6565b905080600d6000828254613b369190615740565b9091555050600d546040805183815260208101929092527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a91016114d3565b6001600160a01b038316613bd75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610adc565b6001600160a01b038216613c385760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610adc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316613cfd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610adc565b6001600160a01b038216613d5f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610adc565b6001600160a01b03831660009081526020819052604090205481811015613dd75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610adc565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290613e0e908490615740565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161276391815260200190565b50505050565b600080821215613e9e5760405162461bcd60e51b8152602060048201526009602482015268076616c7565203c20360bc1b6044820152606401610adc565b5090565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613f0457600080fd5b505afa158015613f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3c9190614f76565b9050613f736001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016843085614722565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613fd457600080fd5b505afa158015613fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400c9190614f76565b610af891906158c6565b6001600160a01b03821661406c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610adc565b806002600082825461407e9190615740565b90915550506001600160a01b038216600090815260208190526040812080548392906140ab908490615740565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b03831660248201526044810182905261415890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261475a565b505050565b6009546040516330fed77960e01b815260609160009182916001600160a01b0316906330fed779906141999033908b908b908b9060040161531d565b600060405180830381600087803b1580156141b357600080fd5b505af11580156141c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141ef91908101906150bc565b94509250905083821015806142885750600760009054906101000a90046001600160a01b03166001600160a01b031663414016d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561424d57600080fd5b505afa158015614261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142859190614f76565b81145b6142d45760405162461bcd60e51b815260206004820152601e60248201527f4272696467655661756c743a206e6f7420656e6f756768207374616b657300006044820152606401610adc565b5094509492505050565b60006001600160ff1b03821115613e9e5760405162461bcd60e51b81526020600482015260126024820152710ecc2d8eaca407c40d2dce8646a6c5cdac2f60731b6044820152606401610adc565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561437857600080fd5b505afa15801561438c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b09190614f76565b6143ba9190615740565b6040516001600160a01b038516602482015260448101829052909150613e5a90859063095ea7b360e01b90606401614121565b601080546001808201835560009283528451600683027f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672810191909155602080870180517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6738401556040808901517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae674850180546001600160a01b039283166001600160a01b03199182161790915560608b01517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67587015560808b01517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6768701805491909316911617905560a08901517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6779094019390935584865260139091529320805460ff191690911790559051614544906142de565b600a600082825461455591906156ff565b92505081905550816001600160a01b0316817fb6f9148b30582b9f81ec18599e521211dbab4e2e050a05e1ba838a23a46abb2885600a5460405161459a9291906155cb565b60405180910390a3600081815260126020526040902080546001600160a01b0319166001600160a01b039390931692909217909155919050565b6001600160a01b0382166146345760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610adc565b6001600160a01b038216600090815260208190526040902054818110156146a85760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610adc565b6001600160a01b03831660009081526020819052604081208383039055600280548492906146d79084906158c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613e5a9085906323b872dd60e01b90608401614121565b60006147af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661482c9092919063ffffffff16565b80519091501561415857808060200190518101906147cd9190614e59565b6141585760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610adc565b606061483b8484600085614843565b949350505050565b6060824710156148a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610adc565b843b6148f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610adc565b600080866001600160a01b0316858760405161490e919061524b565b60006040518083038185875af1925050503d806000811461494b576040519150601f19603f3d011682016040523d82523d6000602084013e614950565b606091505b509150915061496082828661496b565b979650505050505050565b6060831561497a575081610af8565b82511561498a5782518084602001fd5b8160405162461bcd60e51b8152600401610adc91906154ee565b60008083601f8401126149b657600080fd5b5081356001600160401b038111156149cd57600080fd5b6020830191508360208260051b85010111156149e857600080fd5b9250929050565b600082601f830112614a0057600080fd5b81516020614a15614a10836156dc565b6156ac565b80838252828201915082860187848660051b8901011115614a3557600080fd5b60005b85811015614a5457815184529284019290840190600101614a38565b5090979650505050505050565b600060c08284031215614a7357600080fd5b50919050565b600060208284031215614a8b57600080fd5b8135610af881615a6c565b600060208284031215614aa857600080fd5b8151610af881615a6c565b60008060408385031215614ac657600080fd5b8235614ad181615a6c565b91506020830135614ae181615a6c565b809150509250929050565b600080600060608486031215614b0157600080fd5b8351614b0c81615a6c565b6020850151909350614b1d81615a6c565b6040850151909250614b2e81615a6c565b809150509250925092565b600080600060608486031215614b4e57600080fd5b8335614b5981615a6c565b92506020840135614b6981615a6c565b929592945050506040919091013590565b60008060408385031215614b8d57600080fd5b8235614b9881615a6c565b946020939093013593505050565b600080600060608486031215614bbb57600080fd5b8335614bc681615a6c565b95602085013595506040909401359392505050565b60008060408385031215614bee57600080fd5b82516001600160401b0380821115614c0557600080fd5b818501915085601f830112614c1957600080fd5b81516020614c29614a10836156dc565b8083825282820191508286018a848660051b8901011115614c4957600080fd5b600096505b84871015614c75578051614c6181615a6c565b835260019690960195918301918301614c4e565b5091880151919650909350505080821115614c8f57600080fd5b50614c9c858286016149ef565b9150509250929050565b60008060008060008060008060006101808a8c031215614cc557600080fd5b89356001600160401b0380821115614cdc57600080fd5b614ce88d838e016149a4565b909b50995060208c01359150614cfd82615a6c565b90975060408b0135965060608b0135955060808b0135945060a08b01359080821115614d2857600080fd5b50614d358c828d016149a4565b9094509250614d4990508b60c08c01614a61565b90509295985092959850929598565b600080600060408486031215614d6d57600080fd5b83356001600160401b03811115614d8357600080fd5b614d8f868287016149a4565b909790965060209590950135949350505050565b600080600080600060808688031215614dbb57600080fd5b85356001600160401b03811115614dd157600080fd5b614ddd888289016149a4565b909650945050602086013592506040860135614df881615a84565b949793965091946060013592915050565b60008060008060608587031215614e1f57600080fd5b84356001600160401b03811115614e3557600080fd5b614e41878288016149a4565b90989097506020870135966040013595509350505050565b600060208284031215614e6b57600080fd5b8151610af881615a84565b600060208284031215614e8857600080fd5b5035919050565b6000806000806000806101408789031215614ea957600080fd5b8635955060208701359450614ec18860408901614a61565b935061010087013592506101208701356001600160401b03811115614ee557600080fd5b614ef189828a016149a4565b979a9699509497509295939492505050565b60008060008060008060c08789031215614f1c57600080fd5b8651614f2781615a6c565b6020880151909650614f3881615a6c565b6040880151909550614f4981615a6c565b6060880151909450614f5a81615a6c565b809350506080870151915060a087015190509295509295509295565b600060208284031215614f8857600080fd5b5051919050565b60008060e08385031215614fa257600080fd5b614fac8484614a61565b915060c0830135614ae181615a6c565b600060c08284031215614fce57600080fd5b60405160c081018181106001600160401b0382111715614ff057614ff06159d8565b80604052508235815260208301356020820152604083013561501181615a6c565b604082015260608381013590820152608083013561502e81615a6c565b608082015260a0928301359281019290925250919050565b60008060006060848603121561505b57600080fd5b833592506020840135614b6981615a84565b60008060e0838503121561508057600080fd5b823591506150918460208501614a61565b90509250929050565b600080604083850312156150ad57600080fd5b50508035926020909101359150565b6000806000606084860312156150d157600080fd5b835192506020840151915060408401516001600160401b038111156150f557600080fd5b615101868287016149ef565b9150509250925092565b8183526000602080850194508260005b8581101561514957813561512e81615a6c565b6001600160a01b03168752958201959082019060010161511b565b509495945050505050565b600081518084526020808501945080840160005b8381101561514957815187529582019590820190600101615168565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b803582526020810135602083015260408101356151c981615a6c565b6001600160a01b039081166040840152606082810135908401526080820135906151f282615a6c565b16608083015260a090810135910152565b8051825260208101516020830152604081015160018060a01b03808216604085015260608301516060850152806080840151166080850152505060a081015160a08301525050565b6000825161525d8184602087016158dd565b9190910192915050565b8c8152600060206bffffffffffffffffffffffff19808f60601b16828501528d60348501528c60548501528b6074850152808b60601b166094850152508860a88401528760c884015260e883018760005b888110156152e65781356152cb81615a6c565b6001600160a01b0316835291830191908301906001016152b8565b50506152fe818760601b6001600160601b0319169052565b84601482015260348101925050509d9c50505050505050505050505050565b6001600160a01b0385168152606060208083018290529082018490526000906080600586901b840181019190840187845b888110156153bc57868503607f190183528135368b9003601e1901811261537457600080fd5b8a0180356001600160401b0381111561538c57600080fd5b8036038c131561539b57600080fd5b6153a88782888501615184565b96505050918301919083019060010161534e565b5050505060409290920192909252949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561541457615401838551615203565b9284019260c092909201916001016153ee565b50909695505050505050565b602081526000610af86020830184615154565b60006101a08083526154478184018c615154565b6001600160a01b038b166020850152604084018a9052915061546e905060608301886151ad565b856101208301528461014083015283610160830152826101808301529998505050505050505050565b6080815260006154aa6080830187615154565b9415156020830152506040810192909252606090910152919050565b60208101600783106154e857634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000825180602084015261550d8160408501602087016158dd565b601f01601f19169190910160400192915050565b6020808252600790820152665041555345442160c81b604082015260600190565b60208082526024908201527f4272696467655661756c743a204f7264657220616c72656164792070726f63656040820152631cdcd95960e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60c0810161098882846151ad565b60e081016155d98285615203565b8260c08301529392505050565b87815286602082015260e06040820152600061560660e08301878961510b565b6001600160a01b03958616606084015293909416608082015260a081019190915280820360c09091015260048152630307830360e41b602082015260400195945050505050565b86815285602082015260c06040820152600061566d60c08301868861510b565b6001600160a01b0394909416606083015250608081019190915280820360a09091015260048152630307830360e41b6020820152604001949350505050565b604051601f8201601f191681016001600160401b03811182821017156156d4576156d46159d8565b604052919050565b60006001600160401b038211156156f5576156f56159d8565b5060051b60200190565b600080821280156001600160ff1b038490038513161561572157615721615996565b600160ff1b839003841281161561573a5761573a615996565b50500190565b6000821982111561575357615753615996565b500190565b60008261577557634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156157b557816000190482111561579b5761579b615996565b808516156157a857918102915b93841c939080029061577f565b509250929050565b6000610af860ff8416836000826157d657506001610988565b816157e357506000610988565b81600181146157f957600281146158035761581f565b6001915050610988565b60ff84111561581457615814615996565b50506001821b610988565b5060208310610133831016604e8410600b8410161715615842575081810a610988565b61584c838361577a565b806000190482111561586057615860615996565b029392505050565b600081600019048311821515161561588257615882615996565b500290565b60008083128015600160ff1b8501841216156158a5576158a5615996565b6001600160ff1b03840183138116156158c0576158c0615996565b50500390565b6000828210156158d8576158d8615996565b500390565b60005b838110156158f85781810151838201526020016158e0565b83811115613e5a5750506000910152565b600181811c9082168061591d57607f821691505b60208210811415614a7357634e487b7160e01b600052602260045260246000fd5b600060001982141561595257615952615996565b5060010190565b6000600160ff1b82141561596f5761596f615996565b5060000390565b600081810b607f1981141561598d5761598d615996565b60000392915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013560018201556040820135615a2a81615a6c565b615a3781600284016159ee565b50606082013560038201556080820135615a5081615a6c565b615a5d81600484016159ee565b5060a082013560058201555050565b6001600160a01b0381168114615a8157600080fd5b50565b8015158114615a8157600080fdfea2646970667358221220cfc94b5335c18382d77880a8d1184f9549a12a6f21a72329a51382add3920b3664736f6c63430008060033"
};

// src/contracts/OSWAP_BridgeVault.ts
var OSWAP_BridgeVault = class extends import_eth_wallet21.Contract {
  constructor(wallet, address) {
    super(wallet, address, OSWAP_BridgeVault_json_default.abi, OSWAP_BridgeVault_json_default.bytecode);
    this.assign();
  }
  deploy(params) {
    return this.__deploy([params.vaultRegistry, params.configStore, params.asset]);
  }
  parseAddLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "AddLiquidity").map((e) => this.decodeAddLiquidityEvent(e));
  }
  decodeAddLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      amount: new import_eth_wallet21.BigNumber(result.amount),
      mintAmount: new import_eth_wallet21.BigNumber(result.mintAmount),
      newBalance: new import_eth_wallet21.BigNumber(result.newBalance),
      newLpAssetBalance: new import_eth_wallet21.BigNumber(result.newLpAssetBalance),
      _event: event
    };
  }
  parseAmendOrderRequestEvent(receipt) {
    return this.parseEvents(receipt, "AmendOrderRequest").map((e) => this.decodeAmendOrderRequestEvent(e));
  }
  decodeAmendOrderRequestEvent(event) {
    let result = event.data;
    return {
      orderId: new import_eth_wallet21.BigNumber(result.orderId),
      amendment: new import_eth_wallet21.BigNumber(result.amendment),
      order: {
        peerChain: new import_eth_wallet21.BigNumber(result.order.peerChain),
        inAmount: new import_eth_wallet21.BigNumber(result.order.inAmount),
        outToken: result.order.outToken,
        minOutAmount: new import_eth_wallet21.BigNumber(result.order.minOutAmount),
        to: result.order.to,
        expire: new import_eth_wallet21.BigNumber(result.order.expire)
      },
      _event: event
    };
  }
  parseApprovalEvent(receipt) {
    return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
  }
  decodeApprovalEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      spender: result.spender,
      value: new import_eth_wallet21.BigNumber(result.value),
      _event: event
    };
  }
  parseNewOrderEvent(receipt) {
    return this.parseEvents(receipt, "NewOrder").map((e) => this.decodeNewOrderEvent(e));
  }
  decodeNewOrderEvent(event) {
    let result = event.data;
    return {
      orderId: new import_eth_wallet21.BigNumber(result.orderId),
      owner: result.owner,
      order: {
        peerChain: new import_eth_wallet21.BigNumber(result.order.peerChain),
        inAmount: new import_eth_wallet21.BigNumber(result.order.inAmount),
        outToken: result.order.outToken,
        minOutAmount: new import_eth_wallet21.BigNumber(result.order.minOutAmount),
        to: result.order.to,
        expire: new import_eth_wallet21.BigNumber(result.order.expire)
      },
      newImbalance: new import_eth_wallet21.BigNumber(result.newImbalance),
      _event: event
    };
  }
  parseOrderCanceledEvent(receipt) {
    return this.parseEvents(receipt, "OrderCanceled").map((e) => this.decodeOrderCanceledEvent(e));
  }
  decodeOrderCanceledEvent(event) {
    let result = event.data;
    return {
      orderId: new import_eth_wallet21.BigNumber(result.orderId),
      sender: result.sender,
      signers: result.signers.map((e) => new import_eth_wallet21.BigNumber(e)),
      canceledByOrderOwner: result.canceledByOrderOwner,
      newImbalance: new import_eth_wallet21.BigNumber(result.newImbalance),
      newProtocolFeeBalance: new import_eth_wallet21.BigNumber(result.newProtocolFeeBalance),
      _event: event
    };
  }
  parseRebalanceEvent(receipt) {
    return this.parseEvents(receipt, "Rebalance").map((e) => this.decodeRebalanceEvent(e));
  }
  decodeRebalanceEvent(event) {
    let result = event.data;
    return {
      rebalancer: result.rebalancer,
      amount: new import_eth_wallet21.BigNumber(result.amount),
      newImbalance: new import_eth_wallet21.BigNumber(result.newImbalance),
      _event: event
    };
  }
  parseRemoveLiquidityEvent(receipt) {
    return this.parseEvents(receipt, "RemoveLiquidity").map((e) => this.decodeRemoveLiquidityEvent(e));
  }
  decodeRemoveLiquidityEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      amount: new import_eth_wallet21.BigNumber(result.amount),
      newPendingWithdrawal: new import_eth_wallet21.BigNumber(result.newPendingWithdrawal),
      _event: event
    };
  }
  parseRemoveLiquidityRequestEvent(receipt) {
    return this.parseEvents(receipt, "RemoveLiquidityRequest").map((e) => this.decodeRemoveLiquidityRequestEvent(e));
  }
  decodeRemoveLiquidityRequestEvent(event) {
    let result = event.data;
    return {
      provider: result.provider,
      amount: new import_eth_wallet21.BigNumber(result.amount),
      burnAmount: new import_eth_wallet21.BigNumber(result.burnAmount),
      newBalance: new import_eth_wallet21.BigNumber(result.newBalance),
      newLpAssetBalance: new import_eth_wallet21.BigNumber(result.newLpAssetBalance),
      newPendingWithdrawal: new import_eth_wallet21.BigNumber(result.newPendingWithdrawal),
      _event: event
    };
  }
  parseRequestCancelOrderEvent(receipt) {
    return this.parseEvents(receipt, "RequestCancelOrder").map((e) => this.decodeRequestCancelOrderEvent(e));
  }
  decodeRequestCancelOrderEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      sourceChainId: new import_eth_wallet21.BigNumber(result.sourceChainId),
      orderId: new import_eth_wallet21.BigNumber(result.orderId),
      hashedOrderId: result.hashedOrderId,
      _event: event
    };
  }
  parseSwapEvent(receipt) {
    return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
  }
  decodeSwapEvent(event) {
    let result = event.data;
    return {
      orderId: new import_eth_wallet21.BigNumber(result.orderId),
      sender: result.sender,
      signers: result.signers.map((e) => new import_eth_wallet21.BigNumber(e)),
      owner: result.owner,
      amendment: new import_eth_wallet21.BigNumber(result.amendment),
      order: {
        peerChain: new import_eth_wallet21.BigNumber(result.order.peerChain),
        inAmount: new import_eth_wallet21.BigNumber(result.order.inAmount),
        outToken: result.order.outToken,
        minOutAmount: new import_eth_wallet21.BigNumber(result.order.minOutAmount),
        to: result.order.to,
        expire: new import_eth_wallet21.BigNumber(result.order.expire)
      },
      outAmount: new import_eth_wallet21.BigNumber(result.outAmount),
      newImbalance: new import_eth_wallet21.BigNumber(result.newImbalance),
      newLpAssetBalance: new import_eth_wallet21.BigNumber(result.newLpAssetBalance),
      newProtocolFeeBalance: new import_eth_wallet21.BigNumber(result.newProtocolFeeBalance),
      _event: event
    };
  }
  parseSyncEvent(receipt) {
    return this.parseEvents(receipt, "Sync").map((e) => this.decodeSyncEvent(e));
  }
  decodeSyncEvent(event) {
    let result = event.data;
    return {
      excess: new import_eth_wallet21.BigNumber(result.excess),
      newProtocolFeeBalance: new import_eth_wallet21.BigNumber(result.newProtocolFeeBalance),
      _event: event
    };
  }
  parseTransferEvent(receipt) {
    return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
  }
  decodeTransferEvent(event) {
    let result = event.data;
    return {
      from: result.from,
      to: result.to,
      value: new import_eth_wallet21.BigNumber(result.value),
      _event: event
    };
  }
  parseUpdateConfigStoreEvent(receipt) {
    return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
  }
  decodeUpdateConfigStoreEvent(event) {
    let result = event.data;
    return {
      newConfigStore: result.newConfigStore,
      _event: event
    };
  }
  parseUpdateTrollRegistryEvent(receipt) {
    return this.parseEvents(receipt, "UpdateTrollRegistry").map((e) => this.decodeUpdateTrollRegistryEvent(e));
  }
  decodeUpdateTrollRegistryEvent(event) {
    let result = event.data;
    return {
      newTrollRegistry: result.newTrollRegistry,
      _event: event
    };
  }
  parseVoidOrderEvent(receipt) {
    return this.parseEvents(receipt, "VoidOrder").map((e) => this.decodeVoidOrderEvent(e));
  }
  decodeVoidOrderEvent(event) {
    let result = event.data;
    return {
      orderId: result.orderId,
      sender: result.sender,
      signers: result.signers.map((e) => new import_eth_wallet21.BigNumber(e)),
      _event: event
    };
  }
  parseWithdrawUnexecutedOrderEvent(receipt) {
    return this.parseEvents(receipt, "WithdrawUnexecutedOrder").map((e) => this.decodeWithdrawUnexecutedOrderEvent(e));
  }
  decodeWithdrawUnexecutedOrderEvent(event) {
    let result = event.data;
    return {
      owner: result.owner,
      orderId: new import_eth_wallet21.BigNumber(result.orderId),
      newImbalance: new import_eth_wallet21.BigNumber(result.newImbalance),
      _event: event
    };
  }
  parseWithdrawlTrollFeeEvent(receipt) {
    return this.parseEvents(receipt, "WithdrawlTrollFee").map((e) => this.decodeWithdrawlTrollFeeEvent(e));
  }
  decodeWithdrawlTrollFeeEvent(event) {
    let result = event.data;
    return {
      feeTo: result.feeTo,
      amount: new import_eth_wallet21.BigNumber(result.amount),
      newProtocolFeeBalance: new import_eth_wallet21.BigNumber(result.newProtocolFeeBalance),
      _event: event
    };
  }
  assign() {
    let allowanceParams = (params) => [params.owner, params.spender];
    let allowance_call = async (params) => {
      let result = await this.call("allowance", allowanceParams(params));
      return new import_eth_wallet21.BigNumber(result);
    };
    this.allowance = allowance_call;
    let asset_call = async () => {
      let result = await this.call("asset");
      return result;
    };
    this.asset = asset_call;
    let assetDecimalsScale_call = async () => {
      let result = await this.call("assetDecimalsScale");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.assetDecimalsScale = assetDecimalsScale_call;
    let assetPriceAgainstGovTokenParams = (params) => [params.govTokenOracle, params.assetTokenOracle];
    let assetPriceAgainstGovToken_call = async (params) => {
      let result = await this.call("assetPriceAgainstGovToken", assetPriceAgainstGovTokenParams(params));
      return new import_eth_wallet21.BigNumber(result);
    };
    this.assetPriceAgainstGovToken = assetPriceAgainstGovToken_call;
    let balanceOf_call = async (account) => {
      let result = await this.call("balanceOf", [account]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.balanceOf = balanceOf_call;
    let configStore_call = async () => {
      let result = await this.call("configStore");
      return result;
    };
    this.configStore = configStore_call;
    let decimals_call = async () => {
      let result = await this.call("decimals");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.decimals = decimals_call;
    let getChainId_call = async () => {
      let result = await this.call("getChainId");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.getChainId = getChainId_call;
    let getOrdersParams = (params) => [import_eth_wallet21.Utils.toString(params.start), import_eth_wallet21.Utils.toString(params.length)];
    let getOrders_call = async (params) => {
      let result = await this.call("getOrders", getOrdersParams(params));
      return result.map((e) => ({
        peerChain: new import_eth_wallet21.BigNumber(e.peerChain),
        inAmount: new import_eth_wallet21.BigNumber(e.inAmount),
        outToken: e.outToken,
        minOutAmount: new import_eth_wallet21.BigNumber(e.minOutAmount),
        to: e.to,
        expire: new import_eth_wallet21.BigNumber(e.expire)
      }));
    };
    this.getOrders = getOrders_call;
    let govToken_call = async () => {
      let result = await this.call("govToken");
      return result;
    };
    this.govToken = govToken_call;
    let hashCancelOrderParamsParams = (params) => [import_eth_wallet21.Utils.toString(params.orderId), params.canceledByOrderOwner, import_eth_wallet21.Utils.toString(params.protocolFee)];
    let hashCancelOrderParams_call = async (params) => {
      let result = await this.call("hashCancelOrderParams", hashCancelOrderParamsParams(params));
      return result;
    };
    this.hashCancelOrderParams = hashCancelOrderParams_call;
    let hashOrderParams = (params) => [params.owner, import_eth_wallet21.Utils.toString(params.sourceChainId), import_eth_wallet21.Utils.toString(params.orderId)];
    let hashOrder_call = async (params) => {
      let result = await this.call("hashOrder", hashOrderParams(params));
      return result;
    };
    this.hashOrder = hashOrder_call;
    let hashSwapParamsParams = (params) => [import_eth_wallet21.Utils.stringToBytes32(params.orderId), import_eth_wallet21.Utils.toString(params.amendment), [import_eth_wallet21.Utils.toString(params.order.peerChain), import_eth_wallet21.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet21.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet21.Utils.toString(params.order.expire)], import_eth_wallet21.Utils.toString(params.protocolFee), params.pair];
    let hashSwapParams_call = async (params) => {
      let result = await this.call("hashSwapParams", hashSwapParamsParams(params));
      return result;
    };
    this.hashSwapParams = hashSwapParams_call;
    let hashVoidOrderParams_call = async (orderId) => {
      let result = await this.call("hashVoidOrderParams", [import_eth_wallet21.Utils.stringToBytes32(orderId)]);
      return result;
    };
    this.hashVoidOrderParams = hashVoidOrderParams_call;
    let hashWithdrawParamsParams = (params) => [params.owner, import_eth_wallet21.Utils.toString(params.amount), import_eth_wallet21.Utils.toString(params.nonce)];
    let hashWithdrawParams_call = async (params) => {
      let result = await this.call("hashWithdrawParams", hashWithdrawParamsParams(params));
      return result;
    };
    this.hashWithdrawParams = hashWithdrawParams_call;
    let imbalance_call = async () => {
      let result = await this.call("imbalance");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.imbalance = imbalance_call;
    let lastKnownBalance_call = async () => {
      let result = await this.call("lastKnownBalance");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.lastKnownBalance = lastKnownBalance_call;
    let lpAssetBalance_call = async () => {
      let result = await this.call("lpAssetBalance");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.lpAssetBalance = lpAssetBalance_call;
    let name_call = async () => {
      let result = await this.call("name");
      return result;
    };
    this.name = name_call;
    let orderAmendmentsParams = (params) => [import_eth_wallet21.Utils.toString(params.param1), import_eth_wallet21.Utils.toString(params.param2)];
    let orderAmendments_call = async (params) => {
      let result = await this.call("orderAmendments", orderAmendmentsParams(params));
      return {
        peerChain: new import_eth_wallet21.BigNumber(result.peerChain),
        inAmount: new import_eth_wallet21.BigNumber(result.inAmount),
        outToken: result.outToken,
        minOutAmount: new import_eth_wallet21.BigNumber(result.minOutAmount),
        to: result.to,
        expire: new import_eth_wallet21.BigNumber(result.expire)
      };
    };
    this.orderAmendments = orderAmendments_call;
    let orderAmendmentsLength_call = async (orderId) => {
      let result = await this.call("orderAmendmentsLength", [import_eth_wallet21.Utils.toString(orderId)]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.orderAmendmentsLength = orderAmendmentsLength_call;
    let orderOwner_call = async (param1) => {
      let result = await this.call("orderOwner", [import_eth_wallet21.Utils.toString(param1)]);
      return result;
    };
    this.orderOwner = orderOwner_call;
    let orderRefunds_call = async (param1) => {
      let result = await this.call("orderRefunds", [import_eth_wallet21.Utils.toString(param1)]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.orderRefunds = orderRefunds_call;
    let orderStatus_call = async (param1) => {
      let result = await this.call("orderStatus", [import_eth_wallet21.Utils.toString(param1)]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.orderStatus = orderStatus_call;
    let orders_call = async (param1) => {
      let result = await this.call("orders", [import_eth_wallet21.Utils.toString(param1)]);
      return {
        peerChain: new import_eth_wallet21.BigNumber(result.peerChain),
        inAmount: new import_eth_wallet21.BigNumber(result.inAmount),
        outToken: result.outToken,
        minOutAmount: new import_eth_wallet21.BigNumber(result.minOutAmount),
        to: result.to,
        expire: new import_eth_wallet21.BigNumber(result.expire)
      };
    };
    this.orders = orders_call;
    let ordersLength_call = async () => {
      let result = await this.call("ordersLength");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.ordersLength = ordersLength_call;
    let pendingWithdrawalAmount_call = async (param1) => {
      let result = await this.call("pendingWithdrawalAmount", [param1]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.pendingWithdrawalAmount = pendingWithdrawalAmount_call;
    let pendingWithdrawalTimeout_call = async (param1) => {
      let result = await this.call("pendingWithdrawalTimeout", [param1]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.pendingWithdrawalTimeout = pendingWithdrawalTimeout_call;
    let protocolFeeBalance_call = async () => {
      let result = await this.call("protocolFeeBalance");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.protocolFeeBalance = protocolFeeBalance_call;
    let swapOrderStatus_call = async (param1) => {
      let result = await this.call("swapOrderStatus", [import_eth_wallet21.Utils.stringToBytes32(param1)]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.swapOrderStatus = swapOrderStatus_call;
    let symbol_call = async () => {
      let result = await this.call("symbol");
      return result;
    };
    this.symbol = symbol_call;
    let totalPendingWithdrawal_call = async () => {
      let result = await this.call("totalPendingWithdrawal");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.totalPendingWithdrawal = totalPendingWithdrawal_call;
    let totalSupply_call = async () => {
      let result = await this.call("totalSupply");
      return new import_eth_wallet21.BigNumber(result);
    };
    this.totalSupply = totalSupply_call;
    let trollRegistry_call = async () => {
      let result = await this.call("trollRegistry");
      return result;
    };
    this.trollRegistry = trollRegistry_call;
    let vaultRegistry_call = async () => {
      let result = await this.call("vaultRegistry");
      return result;
    };
    this.vaultRegistry = vaultRegistry_call;
    let addLiquidity_send = async (amount) => {
      let result = await this.send("addLiquidity", [import_eth_wallet21.Utils.toString(amount)]);
      return result;
    };
    let addLiquidity_call = async (amount) => {
      let result = await this.call("addLiquidity", [import_eth_wallet21.Utils.toString(amount)]);
      return;
    };
    this.addLiquidity = Object.assign(addLiquidity_send, {
      call: addLiquidity_call
    });
    let approveParams = (params) => [params.spender, import_eth_wallet21.Utils.toString(params.amount)];
    let approve_send = async (params) => {
      let result = await this.send("approve", approveParams(params));
      return result;
    };
    let approve_call = async (params) => {
      let result = await this.call("approve", approveParams(params));
      return result;
    };
    this.approve = Object.assign(approve_send, {
      call: approve_call
    });
    let cancelOrderParams = (params) => [import_eth_wallet21.Utils.stringToBytes(params.signatures), import_eth_wallet21.Utils.toString(params.orderId), params.canceledByOrderOwner, import_eth_wallet21.Utils.toString(params.protocolFee)];
    let cancelOrder_send = async (params) => {
      let result = await this.send("cancelOrder", cancelOrderParams(params));
      return result;
    };
    let cancelOrder_call = async (params) => {
      let result = await this.call("cancelOrder", cancelOrderParams(params));
      return;
    };
    this.cancelOrder = Object.assign(cancelOrder_send, {
      call: cancelOrder_call
    });
    let decreaseAllowanceParams = (params) => [params.spender, import_eth_wallet21.Utils.toString(params.subtractedValue)];
    let decreaseAllowance_send = async (params) => {
      let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
      return result;
    };
    let decreaseAllowance_call = async (params) => {
      let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
      return result;
    };
    this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
      call: decreaseAllowance_call
    });
    let increaseAllowanceParams = (params) => [params.spender, import_eth_wallet21.Utils.toString(params.addedValue)];
    let increaseAllowance_send = async (params) => {
      let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
      return result;
    };
    let increaseAllowance_call = async (params) => {
      let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
      return result;
    };
    this.increaseAllowance = Object.assign(increaseAllowance_send, {
      call: increaseAllowance_call
    });
    let initAddress_send = async (vaultRegistry) => {
      let result = await this.send("initAddress", [vaultRegistry]);
      return result;
    };
    let initAddress_call = async (vaultRegistry) => {
      let result = await this.call("initAddress", [vaultRegistry]);
      return;
    };
    this.initAddress = Object.assign(initAddress_send, {
      call: initAddress_call
    });
    let newOrder_send = async (order) => {
      let result = await this.send("newOrder", [[import_eth_wallet21.Utils.toString(order.peerChain), import_eth_wallet21.Utils.toString(order.inAmount), order.outToken, import_eth_wallet21.Utils.toString(order.minOutAmount), order.to, import_eth_wallet21.Utils.toString(order.expire)]]);
      return result;
    };
    let newOrder_call = async (order) => {
      let result = await this.call("newOrder", [[import_eth_wallet21.Utils.toString(order.peerChain), import_eth_wallet21.Utils.toString(order.inAmount), order.outToken, import_eth_wallet21.Utils.toString(order.minOutAmount), order.to, import_eth_wallet21.Utils.toString(order.expire)]]);
      return new import_eth_wallet21.BigNumber(result);
    };
    this.newOrder = Object.assign(newOrder_send, {
      call: newOrder_call
    });
    let newOrderFromRouterParams = (params) => [[import_eth_wallet21.Utils.toString(params.order.peerChain), import_eth_wallet21.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet21.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet21.Utils.toString(params.order.expire)], params.trader];
    let newOrderFromRouter_send = async (params) => {
      let result = await this.send("newOrderFromRouter", newOrderFromRouterParams(params));
      return result;
    };
    let newOrderFromRouter_call = async (params) => {
      let result = await this.call("newOrderFromRouter", newOrderFromRouterParams(params));
      return new import_eth_wallet21.BigNumber(result);
    };
    this.newOrderFromRouter = Object.assign(newOrderFromRouter_send, {
      call: newOrderFromRouter_call
    });
    let rebalancerDeposit_send = async (assetAmount) => {
      let result = await this.send("rebalancerDeposit", [import_eth_wallet21.Utils.toString(assetAmount)]);
      return result;
    };
    let rebalancerDeposit_call = async (assetAmount) => {
      let result = await this.call("rebalancerDeposit", [import_eth_wallet21.Utils.toString(assetAmount)]);
      return;
    };
    this.rebalancerDeposit = Object.assign(rebalancerDeposit_send, {
      call: rebalancerDeposit_call
    });
    let rebalancerWithdrawParams = (params) => [import_eth_wallet21.Utils.stringToBytes(params.signatures), import_eth_wallet21.Utils.toString(params.assetAmount), import_eth_wallet21.Utils.toString(params.nonce)];
    let rebalancerWithdraw_send = async (params) => {
      let result = await this.send("rebalancerWithdraw", rebalancerWithdrawParams(params));
      return result;
    };
    let rebalancerWithdraw_call = async (params) => {
      let result = await this.call("rebalancerWithdraw", rebalancerWithdrawParams(params));
      return;
    };
    this.rebalancerWithdraw = Object.assign(rebalancerWithdraw_send, {
      call: rebalancerWithdraw_call
    });
    let removeLiquidityParams = (params) => [params.provider, import_eth_wallet21.Utils.toString(params.assetAmount)];
    let removeLiquidity_send = async (params) => {
      let result = await this.send("removeLiquidity", removeLiquidityParams(params));
      return result;
    };
    let removeLiquidity_call = async (params) => {
      let result = await this.call("removeLiquidity", removeLiquidityParams(params));
      return;
    };
    this.removeLiquidity = Object.assign(removeLiquidity_send, {
      call: removeLiquidity_call
    });
    let removeLiquidityRequest_send = async (lpTokenAmount) => {
      let result = await this.send("removeLiquidityRequest", [import_eth_wallet21.Utils.toString(lpTokenAmount)]);
      return result;
    };
    let removeLiquidityRequest_call = async (lpTokenAmount) => {
      let result = await this.call("removeLiquidityRequest", [import_eth_wallet21.Utils.toString(lpTokenAmount)]);
      return;
    };
    this.removeLiquidityRequest = Object.assign(removeLiquidityRequest_send, {
      call: removeLiquidityRequest_call
    });
    let requestAmendOrderParams = (params) => [import_eth_wallet21.Utils.toString(params.orderId), [import_eth_wallet21.Utils.toString(params.order.peerChain), import_eth_wallet21.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet21.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet21.Utils.toString(params.order.expire)]];
    let requestAmendOrder_send = async (params) => {
      let result = await this.send("requestAmendOrder", requestAmendOrderParams(params));
      return result;
    };
    let requestAmendOrder_call = async (params) => {
      let result = await this.call("requestAmendOrder", requestAmendOrderParams(params));
      return;
    };
    this.requestAmendOrder = Object.assign(requestAmendOrder_send, {
      call: requestAmendOrder_call
    });
    let requestCancelOrderParams = (params) => [import_eth_wallet21.Utils.toString(params.sourceChainId), import_eth_wallet21.Utils.toString(params.orderId)];
    let requestCancelOrder_send = async (params) => {
      let result = await this.send("requestCancelOrder", requestCancelOrderParams(params));
      return result;
    };
    let requestCancelOrder_call = async (params) => {
      let result = await this.call("requestCancelOrder", requestCancelOrderParams(params));
      return;
    };
    this.requestCancelOrder = Object.assign(requestCancelOrder_send, {
      call: requestCancelOrder_call
    });
    let swapParams = (params) => [import_eth_wallet21.Utils.stringToBytes(params.signatures), params.owner, import_eth_wallet21.Utils.toString(params.orderId), import_eth_wallet21.Utils.toString(params.amendment), import_eth_wallet21.Utils.toString(params.protocolFee), params.pair, [import_eth_wallet21.Utils.toString(params.order.peerChain), import_eth_wallet21.Utils.toString(params.order.inAmount), params.order.outToken, import_eth_wallet21.Utils.toString(params.order.minOutAmount), params.order.to, import_eth_wallet21.Utils.toString(params.order.expire)]];
    let swap_send = async (params) => {
      let result = await this.send("swap", swapParams(params));
      return result;
    };
    let swap_call = async (params) => {
      let result = await this.call("swap", swapParams(params));
      return new import_eth_wallet21.BigNumber(result);
    };
    this.swap = Object.assign(swap_send, {
      call: swap_call
    });
    let sync_send = async () => {
      let result = await this.send("sync");
      return result;
    };
    let sync_call = async () => {
      let result = await this.call("sync");
      return;
    };
    this.sync = Object.assign(sync_send, {
      call: sync_call
    });
    let transferParams = (params) => [params.recipient, import_eth_wallet21.Utils.toString(params.amount)];
    let transfer_send = async (params) => {
      let result = await this.send("transfer", transferParams(params));
      return result;
    };
    let transfer_call = async (params) => {
      let result = await this.call("transfer", transferParams(params));
      return result;
    };
    this.transfer = Object.assign(transfer_send, {
      call: transfer_call
    });
    let transferFromParams = (params) => [params.sender, params.recipient, import_eth_wallet21.Utils.toString(params.amount)];
    let transferFrom_send = async (params) => {
      let result = await this.send("transferFrom", transferFromParams(params));
      return result;
    };
    let transferFrom_call = async (params) => {
      let result = await this.call("transferFrom", transferFromParams(params));
      return result;
    };
    this.transferFrom = Object.assign(transferFrom_send, {
      call: transferFrom_call
    });
    let updateConfigStore_send = async () => {
      let result = await this.send("updateConfigStore");
      return result;
    };
    let updateConfigStore_call = async () => {
      let result = await this.call("updateConfigStore");
      return;
    };
    this.updateConfigStore = Object.assign(updateConfigStore_send, {
      call: updateConfigStore_call
    });
    let updateTrollRegistry_send = async () => {
      let result = await this.send("updateTrollRegistry");
      return result;
    };
    let updateTrollRegistry_call = async () => {
      let result = await this.call("updateTrollRegistry");
      return;
    };
    this.updateTrollRegistry = Object.assign(updateTrollRegistry_send, {
      call: updateTrollRegistry_call
    });
    let voidOrderParams = (params) => [import_eth_wallet21.Utils.stringToBytes(params.signatures), import_eth_wallet21.Utils.stringToBytes32(params.orderId)];
    let voidOrder_send = async (params) => {
      let result = await this.send("voidOrder", voidOrderParams(params));
      return result;
    };
    let voidOrder_call = async (params) => {
      let result = await this.call("voidOrder", voidOrderParams(params));
      return;
    };
    this.voidOrder = Object.assign(voidOrder_send, {
      call: voidOrder_call
    });
    let withdrawUnexecutedOrder_send = async (orderId) => {
      let result = await this.send("withdrawUnexecutedOrder", [import_eth_wallet21.Utils.toString(orderId)]);
      return result;
    };
    let withdrawUnexecutedOrder_call = async (orderId) => {
      let result = await this.call("withdrawUnexecutedOrder", [import_eth_wallet21.Utils.toString(orderId)]);
      return;
    };
    this.withdrawUnexecutedOrder = Object.assign(withdrawUnexecutedOrder_send, {
      call: withdrawUnexecutedOrder_call
    });
    let withdrawlTrollFee_send = async (amount) => {
      let result = await this.send("withdrawlTrollFee", [import_eth_wallet21.Utils.toString(amount)]);
      return result;
    };
    let withdrawlTrollFee_call = async (amount) => {
      let result = await this.call("withdrawlTrollFee", [import_eth_wallet21.Utils.toString(amount)]);
      return;
    };
    this.withdrawlTrollFee = Object.assign(withdrawlTrollFee_send, {
      call: withdrawlTrollFee_call
    });
  }
};

// src/deploy/deployMainChain.ts
var import_eth_wallet22 = __toModule(require("@ijstech/eth-wallet"));
var DefaultDeploymentOptions = {
  govToken: "",
  votingManager: "",
  superTrollNft: [],
  generalTrollNft: [],
  votingProfiles: {
    name: ["vote"],
    minExeDelay: [1],
    minVoteDuration: [0],
    maxVoteDuration: [1209600],
    minGovTokenToCreateVote: [import_eth_wallet22.Utils.toDecimals(1e5)],
    minQuorum: [import_eth_wallet22.Utils.toDecimals(2e5)]
  },
  vetoAdmin: import_eth_wallet22.Utils.nullAddress
};
async function deploy(wallet, options) {
  let result = {};
  options = options || DefaultDeploymentOptions;
  let trollRegistry = new OSWAP_MainChainTrollRegistry(wallet);
  await trollRegistry.deploy({
    govToken: options.govToken,
    superTrollNft: options.superTrollNft,
    generalTrollNft: options.generalTrollNft
  });
  result.trollRegistry = trollRegistry.address;
  let votingManager;
  if (options.votingManager) {
    votingManager = new OSWAP_VotingManager(wallet, options.votingManager);
  } else {
    votingManager = new OSWAP_VotingManager(wallet);
    result.votingManager = await votingManager.deploy({
      trollRegistry: trollRegistry.address,
      names: options.votingProfiles.name,
      minExeDelay: options.votingProfiles.minExeDelay,
      minVoteDuration: options.votingProfiles.minVoteDuration,
      maxVoteDuration: options.votingProfiles.maxVoteDuration,
      minGovTokenToCreateVote: options.votingProfiles.minGovTokenToCreateVote,
      minQuorum: options.votingProfiles.minQuorum
    });
    await votingManager.initAdmin(options.vetoAdmin);
  }
  await trollRegistry.initAddress(votingManager.address);
  let votingRegistry = new OSWAP_VotingRegistry(wallet);
  result.votingRegistry = await votingRegistry.deploy(votingManager.address);
  await votingManager.setVotingRegister(votingRegistry.address);
  let votingExecutor = new OSWAP_MainChainVotingExecutor(wallet);
  result.votingExecutor = await votingExecutor.deploy(votingManager.address);
  let chainRegistry = new OSWAP_ChainRegistry(wallet);
  result.chainRegistry = await chainRegistry.deploy(votingManager.address);
  await votingExecutor.initAddress(chainRegistry.address);
  let chainRegistryExecutor = new OSWAP_ChainRegistryExecutor(wallet);
  result.chainRegistryExecutor = await chainRegistryExecutor.deploy({ chainRegistry: chainRegistry.address, votingManager: votingManager.address });
  await votingManager.initVotingExecutor([votingExecutor.address, chainRegistryExecutor.address]);
  console.log(result);
  return result;
}

// src/deploy/deploySideChain.ts
var import_eth_wallet23 = __toModule(require("@ijstech/eth-wallet"));
var DefaultDeploymentOptions2 = {
  govToken: import_eth_wallet23.Utils.nullAddress,
  swapPolicy: import_eth_wallet23.Utils.nullAddress,
  router: import_eth_wallet23.Utils.nullAddress,
  superTrollMinCount: 2,
  generalTrollMinCount: 1,
  transactionsGap: 0,
  configStore: import_eth_wallet23.Utils.nullAddress,
  vaultTokens: [],
  bridgeVaults: {},
  baseFee: {},
  transactionFee: import_eth_wallet23.Utils.toDecimals(1e-3),
  lpWithdrawlDelay: 24 * 60 * 60,
  rebalancer: import_eth_wallet23.Utils.nullAddress,
  feeTo: import_eth_wallet23.Utils.nullAddress
};
async function deploy2(wallet, options) {
  let result = { vaultRegistry: {}, bridgeVault: {} };
  options = options || DefaultDeploymentOptions2;
  let wrapper = new OSWAP_RouterVaultWrapper(wallet);
  result.wrapper = await wrapper.deploy();
  let configStore = new OSWAP_ConfigStore(wallet);
  await configStore.deploy({
    govToken: options.govToken,
    swapPolicy: options.swapPolicy,
    lpWithdrawlDelay: options.lpWithdrawlDelay,
    transactionsGap: options.transactionsGap,
    superTrollMinCount: options.superTrollMinCount,
    generalTrollMinCount: options.generalTrollMinCount,
    transactionFee: options.transactionFee,
    router: options.router,
    rebalancer: options.rebalancer,
    feeTo: options.feeTo,
    wrapper: result.wrapper,
    asset: Object.keys(options.baseFee),
    baseFee: Object.values(options.baseFee)
  });
  result.configStore = configStore.address;
  await wrapper.initAddress(configStore.address);
  let trollRegistry = new OSWAP_SideChainTrollRegistry(wallet);
  await trollRegistry.deploy(configStore.address);
  result.trollRegistry = trollRegistry.address;
  if (await configStore.votingExecutorManager() == import_eth_wallet23.Utils.nullAddress)
    await configStore.initAddress(result.trollRegistry);
  let votingExecutor = new OSWAP_SideChainVotingExecutor(wallet);
  await votingExecutor.deploy(trollRegistry.address);
  result.votingExecutor = votingExecutor.address;
  for (let i = 0; i < options.vaultTokens.length; i++) {
    let vaultToken = options.vaultTokens[i];
    let vaultRegistry = new OSWAP_BridgeVaultTrollRegistry(wallet);
    result.vaultRegistry[vaultToken] = await vaultRegistry.deploy(trollRegistry.address);
    let bridgeVaultAddress;
    let bridgeVault;
    if (options.bridgeVaults && options.bridgeVaults[vaultToken]) {
      bridgeVaultAddress = options.bridgeVaults[vaultToken];
      bridgeVault = new OSWAP_BridgeVault(wallet, bridgeVaultAddress);
    } else {
      bridgeVault = new OSWAP_BridgeVault(wallet);
      await bridgeVault.deploy({
        vaultRegistry: vaultRegistry.address,
        configStore: configStore.address,
        asset: vaultToken
      });
      bridgeVaultAddress = bridgeVault.address;
    }
    await vaultRegistry.initAddress(bridgeVault.address);
    result.bridgeVault[vaultToken] = bridgeVaultAddress;
  }
  await trollRegistry.initAddress({
    votingExecutor: votingExecutor.address,
    tokens: Object.keys(result.bridgeVault),
    vaults: Object.values(result.bridgeVault)
  });
  console.log(result);
  return result;
}
async function deployStakingOnly(wallet, options) {
  let result = { vaultRegistry: {}, bridgeVault: {} };
  options = options || DefaultDeploymentOptions2;
  let configStore = new OSWAP_ConfigStore(wallet);
  if (options.configStore && options.configStore != import_eth_wallet23.Utils.nullAddress) {
    configStore.at(options.configStore);
  } else {
    await configStore.deploy({
      govToken: options.govToken,
      swapPolicy: options.swapPolicy,
      lpWithdrawlDelay: options.lpWithdrawlDelay,
      transactionsGap: options.transactionsGap,
      superTrollMinCount: options.superTrollMinCount,
      generalTrollMinCount: options.generalTrollMinCount,
      transactionFee: options.transactionFee,
      router: options.router,
      rebalancer: options.rebalancer,
      feeTo: options.feeTo,
      wrapper: import_eth_wallet23.Utils.nullAddress,
      asset: Object.keys(options.baseFee),
      baseFee: Object.values(options.baseFee)
    });
  }
  result.configStore = configStore.address;
  for (let i = 0; i < options.vaultTokens.length; i++) {
    let vaultToken = options.vaultTokens[i];
    let bridgeVault = new OSWAP_BridgeVault(wallet);
    if (options.bridgeVaults && options.bridgeVaults[vaultToken] && options.bridgeVaults[vaultToken] != import_eth_wallet23.Utils.nullAddress) {
      bridgeVault.at(options.bridgeVaults[vaultToken]);
    } else {
      await bridgeVault.deploy({
        vaultRegistry: import_eth_wallet23.Utils.nullAddress,
        configStore: configStore.address,
        asset: vaultToken
      });
    }
    result.bridgeVault[vaultToken] = bridgeVault.address;
  }
  console.log(result);
  return result;
}

// src/deploy/deploy.ts
async function deploy3(wallets, deployOptions, openSwapContracts, result) {
  let contracts = result && result.mainChain;
  if (!contracts) {
    contracts = await deploy(wallets[deployOptions.mainChain.chainId], Object.assign(DefaultDeploymentOptions, {
      govToken: openSwapContracts.mainChain.openSwap.address,
      superTrollMinCount: deployOptions.mainChain.superTrollMinCount,
      superTrollNft: deployOptions.mainChain.superTrollNft,
      generalTrollNft: deployOptions.mainChain.generalTrollNft,
      minStakePeriod: deployOptions.mainChain.minStakePeriod,
      rebalancer: deployOptions.mainChain.rebalancer,
      lpWithdrawlDelay: deployOptions.lpWithdrawlDelay
    }));
  }
  let sideChain;
  sideChain = {};
  for (let i = 0; i < deployOptions.sideChain.length; i++) {
    let chainId = deployOptions.sideChain[i].chainId;
    let chainName = deployOptions.sideChain[i].chainName;
    let contracts2 = result && result.sideChain[chainName];
    if (!contracts2) {
      contracts2 = await deploy2(wallets[chainId], Object.assign(DefaultDeploymentOptions2, {
        govToken: openSwapContracts.sideChain[chainName].openSwap.address,
        router: openSwapContracts.sideChain[chainName].hybridRouter.address,
        superTrollMinCount: deployOptions.sideChain[i].superTrollMinCount,
        vaultTokens: deployOptions.sideChain[i].vaultTokens,
        bridgeVaults: deployOptions.sideChain[i].bridgeVaults,
        rebalancer: deployOptions.sideChain[i].rebalancer,
        lpWithdrawlDelay: deployOptions.lpWithdrawlDelay,
        baseFee: deployOptions.sideChain[i].baseFee
      }));
    }
    let registry = new OSWAP_SideChainTrollRegistry(wallets[chainId], contracts2.trollRegistry);
    if (!await registry.isPermitted(wallets[chainId].defaultAccount))
      await registry.permit(wallets[chainId].defaultAccount);
    sideChain[chainId] = contracts2;
  }
  return { mainChain: contracts, sideChain };
}
async function initChainRegistry(crossChain, pairing) {
  let mainChain = crossChain.crossChainContracts.mainChain;
  let sideChain = crossChain.crossChainContracts.sideChain;
  let govTokens = [];
  let configStoreAddresses = [];
  let contractAddresses = [];
  for (let _chainId in sideChain) {
    let primaryConfigStore = new OSWAP_ConfigStore(crossChain.wallets[crossChain.chains.mainChain]);
    let chainId = parseInt(_chainId);
    let govToken = crossChain.oswap[chainId].address;
    let asset = await sideChain[chainId].trollRegistry.allVaultToken();
    let configStore = sideChain[chainId].configStore;
    await primaryConfigStore.deploy({
      govToken,
      swapPolicy: await configStore.swapPolicy(),
      lpWithdrawlDelay: await configStore.lpWithdrawlDelay(),
      transactionsGap: await configStore.transactionsGap(),
      superTrollMinCount: await configStore.superTrollMinCount(),
      generalTrollMinCount: await configStore.generalTrollMinCount(),
      transactionFee: await configStore.transactionsGap(),
      router: await configStore.router(),
      rebalancer: await configStore.rebalancer(),
      feeTo: await configStore.feeTo(),
      wrapper: sideChain[chainId].wrapper.address,
      asset,
      baseFee: await Promise.all(asset.map((e) => configStore.baseFee(e)))
    });
    govTokens.push(govToken);
    configStoreAddresses.push(primaryConfigStore.address);
    contractAddresses.push([
      sideChain[chainId].trollRegistry.address,
      sideChain[chainId].wrapper.address
    ]);
    await primaryConfigStore.initAddress(mainChain.votingManager.address);
  }
  let mainChainContractNames = ["TrollRegistry"];
  let mainChainContractAddress = [mainChain.trollRegistry.address];
  let contractNames = ["TrollRegistry", "RouterWrapper"];
  let tokenNames = ["USDT", "OSWAP"];
  let vaults = [];
  for (let i = 0; i < pairing.length; i++) {
    let vaults2 = [];
    for (let chainId in sideChain) {
      let asset = pairing[i][chainId];
      let vault = {
        token: asset,
        vaultRegistry: sideChain[chainId].vaultRegistry[asset].address,
        bridgeVault: sideChain[chainId].bridgeVault[asset].address
      };
      vaults2.push(vault);
    }
    vaults.push(vaults2);
  }
  await mainChain.chainRegistry.init({
    chainId: Object.keys(sideChain).map((e) => parseInt(e)),
    status: [1, 1],
    govToken: govTokens,
    configStore: configStoreAddresses,
    mainChainContractNames,
    mainChainContractAddress,
    contractNames,
    address: contractAddresses,
    tokenNames,
    vault: vaults
  });
}
async function initChainRegistryByAddress(deploymentResult, wallets, networks, pairing) {
  let mainChain = deploymentResult[networks[0].chainName].crossChainBridgeMainChain;
  let govTokens = [];
  let configStoreAddresses = [];
  let contractAddresses = [];
  for (let i = 0; i < networks.length; i++) {
    let sideChain = deploymentResult[networks[i].chainName].crossChainBridgeSideChain;
    let primaryConfigStore = new OSWAP_ConfigStore(wallets[networks[0].chainId]);
    let chainId = networks[i].chainId;
    let govToken = deploymentResult[networks[i].chainName].openswap.oswap;
    let asset = Object.keys(sideChain.vaultRegistry);
    let configStore = new OSWAP_ConfigStore(wallets[networks[i].chainId], sideChain.configStore);
    await primaryConfigStore.deploy({
      govToken,
      swapPolicy: await configStore.swapPolicy(),
      lpWithdrawlDelay: await configStore.lpWithdrawlDelay(),
      transactionsGap: await configStore.transactionsGap(),
      superTrollMinCount: await configStore.superTrollMinCount(),
      generalTrollMinCount: await configStore.generalTrollMinCount(),
      transactionFee: await configStore.transactionsGap(),
      router: await configStore.router(),
      rebalancer: await configStore.rebalancer(),
      feeTo: await configStore.feeTo(),
      wrapper: sideChain.wrapper,
      asset,
      baseFee: await Promise.all(asset.map((e) => configStore.baseFee(e)))
    });
    govTokens.push(govToken);
    configStoreAddresses.push(primaryConfigStore.address);
    contractAddresses.push([
      sideChain.trollRegistry,
      sideChain.wrapper
    ]);
    await primaryConfigStore.initAddress(mainChain.votingManager);
  }
  let mainChainContractNames = ["TrollRegistry"];
  let mainChainContractAddress = [mainChain.trollRegistry];
  let contractNames = ["TrollRegistry", "RouterWrapper"];
  let tokenNames = ["USDT", "OSWAP"];
  let vaults = [];
  if (pairing) {
    for (let i = 0; i < pairing.length; i++) {
      let vaults2 = [];
      for (let j = 0; j < networks.length; j++) {
        let sideChain = deploymentResult[networks[j].chainName].crossChainBridgeSideChain;
        let chainId = networks[j].chainId;
        let asset = pairing[i][chainId];
        let vault = {
          token: asset,
          vaultRegistry: sideChain.vaultRegistry[asset],
          bridgeVault: sideChain.bridgeVault[asset]
        };
        vaults2.push(vault);
      }
      vaults.push(vaults2);
    }
  } else {
    for (let j = 0; j < networks.length; j++) {
      let chainName = networks[j].chainName;
      let sideChain = deploymentResult[chainName].crossChainBridgeSideChain;
      let tokens = Object.keys(sideChain.bridgeVault);
      for (let i = 0; i < tokens.length; i++) {
        if (!vaults[i])
          vaults[i] = [];
        let asset = tokens[i];
        let vault = {
          token: asset,
          vaultRegistry: sideChain.vaultRegistry[asset],
          bridgeVault: sideChain.bridgeVault[asset]
        };
        vaults[i][j] = vault;
      }
    }
  }
  await new OSWAP_ChainRegistry(wallets[networks[0].chainId], mainChain.chainRegistry).init({
    chainId: networks.map((e) => e.chainId),
    status: networks.map((e) => 1),
    govToken: govTokens,
    configStore: configStoreAddresses,
    mainChainContractNames,
    mainChainContractAddress,
    contractNames,
    address: contractAddresses,
    tokenNames,
    vault: vaults
  });
}

// src/sideChainVoting.ts
var import_eth_wallet24 = __toModule(require("@ijstech/eth-wallet"));
var SideChainVoting = class {
  constructor(wallet, votingExecutor) {
    this.wallet = wallet;
    this.votingExecutor = votingExecutor;
  }
  setRouter(address) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfigAddress"),
      import_eth_wallet24.Utils.stringToBytes32("router"),
      import_eth_wallet24.Utils.addressToBytes32Right(address, true)
    ];
  }
  setRebalancer(address) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfigAddress"),
      import_eth_wallet24.Utils.stringToBytes32("rebalancer"),
      import_eth_wallet24.Utils.addressToBytes32Right(address, true)
    ];
  }
  setFeeTo(address) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfigAddress"),
      import_eth_wallet24.Utils.stringToBytes32("feeTo"),
      import_eth_wallet24.Utils.addressToBytes32Right(address, true)
    ];
  }
  setTransactionsGap(value) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig"),
      import_eth_wallet24.Utils.stringToBytes32("transactionsGap"),
      import_eth_wallet24.Utils.numberToBytes32(value, true)
    ];
  }
  setTransactionFee(value) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig"),
      import_eth_wallet24.Utils.stringToBytes32("transactionFee"),
      import_eth_wallet24.Utils.numberToBytes32(value, true)
    ];
  }
  setLpWithdrawlDelay(value) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig"),
      import_eth_wallet24.Utils.stringToBytes32("lpWithdrawlDelay"),
      import_eth_wallet24.Utils.numberToBytes32(value, true)
    ];
  }
  setGeneralTrollMinCount(count) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig"),
      import_eth_wallet24.Utils.stringToBytes32("generalTrollMinCount"),
      import_eth_wallet24.Utils.numberToBytes32(count, true)
    ];
  }
  setSuperTrollMinCount(count) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig"),
      import_eth_wallet24.Utils.stringToBytes32("superTrollMinCount"),
      import_eth_wallet24.Utils.numberToBytes32(count, true)
    ];
  }
  setOracle(params) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig2"),
      import_eth_wallet24.Utils.stringToBytes32("oracle"),
      import_eth_wallet24.Utils.addressToBytes32Right(params.asset, true),
      import_eth_wallet24.Utils.addressToBytes32Right(params.oracle, true)
    ];
  }
  setConfigStore(address) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("upgradeConfigStore"),
      import_eth_wallet24.Utils.addressToBytes32Right(address, true)
    ];
  }
  setIsApprovedProxy(wrapper, isApprovedProxy) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig2"),
      import_eth_wallet24.Utils.stringToBytes32("isApprovedProxy"),
      import_eth_wallet24.Utils.addressToBytes32Right(wrapper, true),
      import_eth_wallet24.Utils.numberToBytes32(isApprovedProxy ? 1 : 0, true)
    ];
  }
  setBaseFee(asset, baseFee) {
    return [
      import_eth_wallet24.Utils.stringToBytes32("setConfig2"),
      import_eth_wallet24.Utils.stringToBytes32("baseFee"),
      import_eth_wallet24.Utils.addressToBytes32Right(asset, true),
      import_eth_wallet24.Utils.numberToBytes32(baseFee, true)
    ];
  }
  async getHash(params) {
    let hash = this.wallet.web3.utils.soliditySha3({ t: "uint", v: await this.wallet.getChainId() }, { t: "address", v: this.votingExecutor.address }, { t: "bytes32[]", v: params.params }, { t: "uint", v: "0x" + params.nonce.toString(16) });
    return hash;
  }
  static parseExecuteEventParams(params) {
    let nChain = new import_eth_wallet24.BigNumber(params[2]).toNumber();
    let chains = [];
    for (let i = 0; i < nChain; i++) {
      chains.push(new import_eth_wallet24.BigNumber(params[3 + i]).toNumber());
    }
    params = [params[1], ...params.slice(3 + nChain)];
    return { chains, params };
  }
  async execute(params) {
    return this.votingExecutor.execute(params);
  }
};

// src/mainChainVoting.ts
var import_eth_wallet25 = __toModule(require("@ijstech/eth-wallet"));
var MainChainVoting = class {
  constructor(wallet, votingManager, votingRegistry, votingExecutor) {
    this.wallet = wallet;
    this.votingManager = votingManager;
    this.votingRegistry = votingRegistry;
    this.votingExecutor = votingExecutor;
  }
  async setTransactionsGap(params) {
    return await this.newVote(params.delay, "setConfig", params.quorum, [import_eth_wallet25.Utils.numberToBytes32(params.chainId.length, true), ...params.chainId.map((e) => import_eth_wallet25.Utils.numberToBytes32(e, true)), import_eth_wallet25.Utils.stringToBytes32("transactionsGap"), import_eth_wallet25.Utils.numberToBytes32(params.count, true)]);
  }
  async setSuperTrollMinCount(params) {
    return await this.newVote(params.delay, "setConfig", params.quorum, [import_eth_wallet25.Utils.numberToBytes32(params.chainId.length, true), ...params.chainId.map((e) => import_eth_wallet25.Utils.numberToBytes32(e, true)), import_eth_wallet25.Utils.stringToBytes32("superTrollMinCount"), import_eth_wallet25.Utils.numberToBytes32(params.count, true)]);
  }
  async setGeneralTrollMinCount(params) {
    return await this.newVote(params.delay, "setConfig", params.quorum, [import_eth_wallet25.Utils.numberToBytes32(params.chainId.length, true), ...params.chainId.map((e) => import_eth_wallet25.Utils.numberToBytes32(e, true)), import_eth_wallet25.Utils.stringToBytes32("generalTrollMinCount"), import_eth_wallet25.Utils.numberToBytes32(params.count, true)]);
  }
  async setRouter(params) {
    return await this.newVote(params.delay, "setConfigAddress", params.quorum, [import_eth_wallet25.Utils.numberToBytes32(1, true), import_eth_wallet25.Utils.numberToBytes32(params.chainId, true), import_eth_wallet25.Utils.stringToBytes32("router"), import_eth_wallet25.Utils.addressToBytes32Right(params.router, true)]);
  }
  async shutdown(params) {
    return await this.newVote(params.delay, "shutdown", params.quorum, []);
  }
  async resume(params) {
    return await this.newVote(params.delay, "resume", params.quorum, []);
  }
  async newVote(delay, type, quorum, param, executor) {
    let now = (await this.wallet.web3.eth.getBlock("latest")).timestamp;
    let votingConfig = await this.votingManager.votingConfigs(import_eth_wallet25.Utils.stringToBytes32("vote"));
    if (!quorum)
      quorum = votingConfig.minQuorum;
    else {
      quorum = import_eth_wallet25.Utils.toDecimals(quorum);
      if (quorum.lt(votingConfig.minQuorum)) {
        throw new Error("quorum too small");
      }
    }
    let threshold = import_eth_wallet25.Utils.toDecimals("0.5");
    let voteEndTime = now + votingConfig.minVoteDuration.toNumber() + delay;
    let exeDelay = votingConfig.minExeDelay.toNumber();
    let executeParam = param;
    let name;
    if (type.startsWith("setConfig")) {
      executeParam = [import_eth_wallet25.Utils.stringToBytes32("sideChainConfig"), import_eth_wallet25.Utils.stringToBytes32(type)].concat(executeParam);
      name = "sideChainConfig_" + type;
    } else {
      executeParam = [import_eth_wallet25.Utils.stringToBytes32(type)].concat(param);
      name = type;
    }
    let receipt = await this.votingRegistry.newVote({
      executor: executor || this.votingExecutor.address,
      name: import_eth_wallet25.Utils.stringToBytes32(name),
      options: [import_eth_wallet25.Utils.stringToBytes32("Y"), import_eth_wallet25.Utils.stringToBytes32("N")],
      quorum,
      threshold,
      voteEndTime,
      executeDelay: exeDelay,
      executeParam
    });
    let event = this.votingManager.parseNewVoteEvent(receipt)[0];
    let voteAddr = event.vote;
    console.log("voting address " + voteAddr);
    let voting = new OSWAP_VotingContract(this.wallet, voteAddr);
    return voting;
  }
};

// src/crossChain.ts
var import_sdk = __toModule(require("@openswap/sdk"));

// src/wrappers/bridgeVault.ts
var import_eth_wallet26 = __toModule(require("@ijstech/eth-wallet"));
var BridgeVault = class {
  constructor(wallet, address, tokenList) {
    this.address = address;
    this._bridgeVault = new OSWAP_BridgeVault(wallet, address);
    this.__tokenList = tokenList;
  }
  async deploy(params) {
    this.address = await this._bridgeVault.deploy(params);
    return this.address;
  }
  toNumber(f) {
    return async () => (await f).toNumber();
  }
  getTokenDecimals(chainId, tokenAddress) {
    if (tokenAddress == import_eth_wallet26.Utils.nullAddress) {
      return 18;
    } else {
      let token = this.__tokenList[chainId].find((e) => e.address == tokenAddress);
      if (!token) {
        throw new Error("unknown token");
      }
      return token.decimals;
    }
  }
  async addLiquidity(amount) {
    let assetDecimals = await (await this.asset).decimals;
    amount = import_eth_wallet26.Utils.toDecimals(amount, assetDecimals);
    let receipt = await this._bridgeVault.addLiquidity(amount);
    let event = this._bridgeVault.parseAddLiquidityEvent(receipt)[0];
    event.amount = import_eth_wallet26.Utils.fromDecimals(event.amount, assetDecimals);
    event.mintAmount = import_eth_wallet26.Utils.fromDecimals(event.mintAmount);
    event.newBalance = import_eth_wallet26.Utils.fromDecimals(event.newBalance);
    event.newLpAssetBalance = import_eth_wallet26.Utils.fromDecimals(event.newLpAssetBalance, assetDecimals);
    let mintEvent = this._bridgeVault.parseTransferEvent(receipt)[0];
    mintEvent.value = import_eth_wallet26.Utils.fromDecimals(mintEvent.value);
    let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    assetTransferEvent.value = import_eth_wallet26.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
    return { addLiquidityEvent: event, mintEvent, assetTransferEvent };
  }
  async allowance(params) {
    return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.allowance(params));
  }
  async approve(params) {
    let clone = __spreadValues({}, params);
    clone.amount = import_eth_wallet26.Utils.toDecimals(clone.amount);
    let receipt = await this._bridgeVault.approve(clone);
    let event = this._bridgeVault.parseApprovalEvent(receipt)[0];
    event.value = import_eth_wallet26.Utils.fromDecimals(event.value);
    return event;
  }
  get asset() {
    return new Promise(async (resolve, reject) => {
      try {
        if (!this.__asset)
          this.__asset = new import_eth_wallet26.Erc20(this._bridgeVault.wallet, await this._bridgeVault.asset());
        resolve(this.__asset);
      } catch (e) {
        reject(e);
      }
    });
  }
  get assetDecimalsScale() {
    return (async () => (await this._bridgeVault.assetDecimalsScale()).toNumber())();
  }
  async assetPriceAgainstGovToken(params) {
    return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.assetPriceAgainstGovToken(params));
  }
  async balanceOf(account) {
    return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.balanceOf(account));
  }
  async cancelOrder(params) {
    let clone = __spreadValues({}, params);
    let assetDecimals = await (await this.asset).decimals;
    clone.protocolFee = import_eth_wallet26.Utils.toDecimals(clone.protocolFee, assetDecimals);
    let receipt = await this._bridgeVault.cancelOrder(clone);
    let event = this._bridgeVault.parseOrderCanceledEvent(receipt)[0];
    event.newProtocolFeeBalance = import_eth_wallet26.Utils.fromDecimals(event.newProtocolFeeBalance, assetDecimals);
    event.newImbalance = import_eth_wallet26.Utils.fromDecimals(event.newImbalance, assetDecimals);
    return event;
  }
  get configStore() {
    return this._bridgeVault.configStore();
  }
  get decimals() {
    return new Promise(async (resolve, reject) => {
      try {
        if (!this.__decimals)
          this.__decimals = (await this._bridgeVault.decimals()).toNumber();
        resolve(this.__decimals);
      } catch (e) {
        reject(e);
      }
    });
  }
  async decreaseAllowance(params) {
    let clone = __spreadValues({}, params);
    clone.subtractedValue = import_eth_wallet26.Utils.toDecimals(clone.subtractedValue);
    let receipt = await this._bridgeVault.decreaseAllowance(clone);
    let event = this._bridgeVault.parseApprovalEvent(receipt)[0];
    event.value = import_eth_wallet26.Utils.fromDecimals(event.value);
    return event;
  }
  get getChainId() {
    return (async () => (await this._bridgeVault.getChainId()).toNumber())();
  }
  async getOrders(params) {
    let assetDecimals = await (await this.asset).decimals;
    let orders = await this._bridgeVault.getOrders(params);
    orders.forEach((order) => {
      order.inAmount = import_eth_wallet26.Utils.fromDecimals(order.inAmount, assetDecimals);
      let outTokenDecimals = this.getTokenDecimals(order.peerChain.toNumber(), order.outToken);
      order.minOutAmount = import_eth_wallet26.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
    });
    return orders;
  }
  get govToken() {
    return new Promise(async (resolve, reject) => {
      try {
        if (!this.__govToken)
          this.__govToken = new import_eth_wallet26.Erc20(this._bridgeVault.wallet, await this._bridgeVault.govToken());
        resolve(this.__govToken);
      } catch (e) {
        reject(e);
      }
    });
  }
  async hashCancelOrderParams(params) {
    return this._bridgeVault.hashCancelOrderParams(params);
  }
  async hashOrder(params) {
    return this._bridgeVault.hashOrder(params);
  }
  async hashSwapParams(params) {
    let clone = __spreadValues({}, params);
    clone.order = __spreadValues({}, clone.order);
    let assetDecimals = await (await this.asset).decimals;
    clone.order.inAmount = import_eth_wallet26.Utils.toDecimals(clone.order.inAmount, assetDecimals);
    let chainId = typeof clone.order.peerChain === "number" ? clone.order.peerChain : clone.order.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(chainId, clone.order.outToken);
    clone.order.minOutAmount = import_eth_wallet26.Utils.toDecimals(clone.order.minOutAmount, outTokenDecimals);
    return this._bridgeVault.hashSwapParams(clone);
  }
  async hashVoidOrderParams(orderId) {
    return this._bridgeVault.hashVoidOrderParams(orderId);
  }
  async hashWithdrawParams(params) {
    let clone = __spreadValues({}, params);
    let assetDecimals = await (await this.asset).decimals;
    clone.amount = import_eth_wallet26.Utils.toDecimals(clone.amount, assetDecimals);
    return this._bridgeVault.hashWithdrawParams(clone);
  }
  get imbalance() {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.imbalance(), await (await this.asset).decimals);
    })();
  }
  async increaseAllowance(params) {
    let clone = __spreadValues({}, params);
    clone.addedValue = import_eth_wallet26.Utils.toDecimals(clone.addedValue);
    let receipt = await this._bridgeVault.increaseAllowance(clone);
    let event = this._bridgeVault.parseApprovalEvent(receipt)[0];
    event.value = import_eth_wallet26.Utils.fromDecimals(event.value);
    return event;
  }
  async initAddress(vaultRegistry) {
    return this._bridgeVault.initAddress(vaultRegistry);
  }
  get lastKnownBalance() {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.lastKnownBalance(), await (await this.asset).decimals);
    })();
  }
  get lpAssetBalance() {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.lpAssetBalance(), await (await this.asset).decimals);
    })();
  }
  get name() {
    return this._bridgeVault.govToken();
  }
  async newOrder(order) {
    let clone = __spreadValues({}, order);
    let assetDecimals = await (await this.asset).decimals;
    clone.inAmount = import_eth_wallet26.Utils.toDecimals(clone.inAmount, assetDecimals);
    let peerChainId = typeof clone.peerChain === "number" ? clone.peerChain : clone.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(peerChainId, clone.outToken);
    clone.minOutAmount = import_eth_wallet26.Utils.toDecimals(clone.minOutAmount, outTokenDecimals);
    let receipt = await this._bridgeVault.newOrder(clone);
    let event = this._bridgeVault.parseNewOrderEvent(receipt)[0];
    event.order.inAmount = import_eth_wallet26.Utils.fromDecimals(event.order.inAmount, assetDecimals);
    event.order.minOutAmount = import_eth_wallet26.Utils.fromDecimals(event.order.minOutAmount, outTokenDecimals);
    event.newImbalance = import_eth_wallet26.Utils.fromDecimals(event.newImbalance, assetDecimals);
    let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    assetTransferEvent.value = import_eth_wallet26.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
    return { newOrderEvent: event, assetTransferEvent };
  }
  async parseNewOrderEvent(receipt) {
    let event = this._bridgeVault.parseNewOrderEvent(receipt)[0];
    event.order = await this._decodeNewOrder(event.order);
    return event;
  }
  async decodeNewOrderEvent(event) {
    let newOrderEvent = this._bridgeVault.decodeNewOrderEvent(event);
    newOrderEvent.order = await this._decodeNewOrder(newOrderEvent.order);
    newOrderEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(newOrderEvent.newImbalance, await (await this.asset).decimals);
    return newOrderEvent;
  }
  async decodeAmendOrderRequestEvent(event) {
    let amendOrderRequestEvent = this._bridgeVault.decodeAmendOrderRequestEvent(event);
    amendOrderRequestEvent.order = await this._decodeNewOrder(amendOrderRequestEvent.order);
    return amendOrderRequestEvent;
  }
  async _decodeNewOrder(order) {
    let assetDecimals = await (await this.asset).decimals;
    let dstChainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(dstChainId, order.outToken);
    order.inAmount = import_eth_wallet26.Utils.fromDecimals(order.inAmount, assetDecimals);
    order.minOutAmount = import_eth_wallet26.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
    return order;
  }
  async decodeSwapEvent(event) {
    let swapEvent = this._bridgeVault.decodeSwapEvent(event);
    let assetDecimals = await (await this.asset).decimals;
    swapEvent.order.peerChain = new import_eth_wallet26.BigNumber(swapEvent.order.peerChain);
    let srcChainId = swapEvent.order.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(await this._bridgeVault.wallet.getChainId(), swapEvent.order.outToken);
    swapEvent.order.inAmount = import_eth_wallet26.Utils.fromDecimals(swapEvent.order.inAmount, assetDecimals);
    swapEvent.order.minOutAmount = import_eth_wallet26.Utils.fromDecimals(swapEvent.order.minOutAmount, outTokenDecimals);
    swapEvent.outAmount = import_eth_wallet26.Utils.fromDecimals(swapEvent.outAmount, outTokenDecimals);
    swapEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(swapEvent.newImbalance, assetDecimals);
    swapEvent.newLpAssetBalance = import_eth_wallet26.Utils.fromDecimals(swapEvent.newLpAssetBalance, assetDecimals);
    swapEvent.newProtocolFeeBalance = import_eth_wallet26.Utils.fromDecimals(swapEvent.newProtocolFeeBalance, assetDecimals);
    return swapEvent;
  }
  async decodeOrderCanceledEvent(event) {
    let cancelEvent = this._bridgeVault.decodeOrderCanceledEvent(event);
    let assetDecimals = await (await this.asset).decimals;
    cancelEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(cancelEvent.newImbalance, assetDecimals);
    cancelEvent.newProtocolFeeBalance = import_eth_wallet26.Utils.fromDecimals(cancelEvent.newProtocolFeeBalance, assetDecimals);
    return cancelEvent;
  }
  async newOrderFromRouterWei(params) {
    let receipt = await this._bridgeVault.newOrderFromRouter(params);
    return this._bridgeVault.parseNewOrderEvent(receipt)[0];
  }
  async orderAmendments(params) {
    let order = await this._bridgeVault.orderAmendments({ param1: params.orderId, param2: params.amendment });
    let assetDecimals = await (await this.asset).decimals;
    let chainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(chainId, order.outToken);
    let minOutAmount = import_eth_wallet26.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
    ;
    return {
      peerChain: order.peerChain,
      inAmount: import_eth_wallet26.Utils.fromDecimals(order.inAmount, assetDecimals),
      outToken: order.outToken,
      minOutAmount,
      to: order.to,
      expire: new import_eth_wallet26.BigNumber(order.expire)
    };
  }
  async orderAmendmentsLength(orderId) {
    return (async () => {
      return (await this._bridgeVault.orderAmendmentsLength(orderId)).toNumber();
    })();
  }
  async orderOwner(orderId) {
    return this._bridgeVault.orderOwner(orderId);
  }
  async orderRefunds(orderId) {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.orderRefunds(orderId), await (await this.asset).decimals);
    })();
  }
  async orderStatus(orderId) {
    return this._bridgeVault.orderStatus(orderId);
  }
  async orders(orderId) {
    let order = await this._bridgeVault.orders(orderId);
    let assetDecimals = await (await this.asset).decimals;
    let chainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(chainId, order.outToken);
    let minOutAmount = import_eth_wallet26.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
    return {
      peerChain: order.peerChain,
      inAmount: import_eth_wallet26.Utils.fromDecimals(order.inAmount, assetDecimals),
      outToken: order.outToken,
      minOutAmount,
      to: order.to,
      expire: new Date(order.expire.toNumber() * 1e3)
    };
  }
  get ordersLength() {
    return (async () => {
      return (await this._bridgeVault.ordersLength()).toNumber();
    })();
  }
  async pendingWithdrawalAmount(liquidityProvider) {
    return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.pendingWithdrawalAmount(liquidityProvider), await (await this.asset).decimals);
  }
  async pendingWithdrawalTimeout(liquidityProvider) {
    return new Date((await this._bridgeVault.pendingWithdrawalTimeout(liquidityProvider)).toNumber() * 1e3);
  }
  get protocolFeeBalance() {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.protocolFeeBalance(), await (await this.asset).decimals);
    })();
  }
  async rebalancerDeposit(assetAmount) {
    let assetDecimals = await (await this.asset).decimals;
    assetAmount = import_eth_wallet26.Utils.toDecimals(assetAmount, assetDecimals);
    let receipt = await this._bridgeVault.rebalancerDeposit(assetAmount);
    let rebalanceEvent = this._bridgeVault.parseRebalanceEvent(receipt)[0];
    rebalanceEvent.amount = import_eth_wallet26.Utils.fromDecimals(rebalanceEvent.amount, assetDecimals);
    rebalanceEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(rebalanceEvent.newImbalance, assetDecimals);
    let transferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    transferEvent.value = import_eth_wallet26.Utils.fromDecimals(transferEvent.value, assetDecimals);
    return { rebalanceEvent, transferEvent };
  }
  async rebalancerWithdraw(params) {
    let clone = __spreadValues({}, params);
    let assetDecimals = await (await this.asset).decimals;
    clone.assetAmount = import_eth_wallet26.Utils.toDecimals(clone.assetAmount, assetDecimals);
    let receipt = await this._bridgeVault.rebalancerWithdraw(clone);
    let rebalanceEvent = this._bridgeVault.parseRebalanceEvent(receipt)[0];
    rebalanceEvent.amount = import_eth_wallet26.Utils.fromDecimals(rebalanceEvent.amount, assetDecimals);
    rebalanceEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(rebalanceEvent.newImbalance, assetDecimals);
    let transferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    transferEvent.value = import_eth_wallet26.Utils.fromDecimals(transferEvent.value, assetDecimals);
    return { rebalanceEvent, transferEvent };
  }
  async removeLiquidity(params) {
    let clone = __spreadValues({}, params);
    let assetDecimals = await (await this.asset).decimals;
    clone.assetAmount = import_eth_wallet26.Utils.toDecimals(clone.assetAmount, assetDecimals);
    let receipt = await this._bridgeVault.removeLiquidity(clone);
    let event = this._bridgeVault.parseRemoveLiquidityEvent(receipt)[0];
    event.amount = import_eth_wallet26.Utils.fromDecimals(event.amount, assetDecimals);
    event.newPendingWithdrawal = import_eth_wallet26.Utils.fromDecimals(event.newPendingWithdrawal, assetDecimals);
    let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    assetTransferEvent.value = import_eth_wallet26.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
    return { removeLiquidityEvent: event, assetTransferEvent };
  }
  async removeLiquidityRequest(lpTokenAmount) {
    let assetDecimals = await (await this.asset).decimals;
    lpTokenAmount = import_eth_wallet26.Utils.toDecimals(lpTokenAmount);
    let receipt = await this._bridgeVault.removeLiquidityRequest(lpTokenAmount);
    let event = this._bridgeVault.parseRemoveLiquidityRequestEvent(receipt)[0];
    event.amount = import_eth_wallet26.Utils.fromDecimals(event.amount, assetDecimals);
    event.burnAmount = import_eth_wallet26.Utils.fromDecimals(event.burnAmount);
    event.newBalance = import_eth_wallet26.Utils.fromDecimals(event.newBalance);
    event.newLpAssetBalance = import_eth_wallet26.Utils.fromDecimals(event.newLpAssetBalance, assetDecimals);
    event.newPendingWithdrawal = import_eth_wallet26.Utils.fromDecimals(event.newPendingWithdrawal, assetDecimals);
    let burnEvent = this._bridgeVault.parseTransferEvent(receipt)[0];
    burnEvent.value = import_eth_wallet26.Utils.fromDecimals(burnEvent.value);
    let assetTransferEvents = (await this.asset).parseTransferEvent(receipt);
    if (assetTransferEvents && assetTransferEvents[0])
      assetTransferEvents[0].value = import_eth_wallet26.Utils.fromDecimals(assetTransferEvents[0].value, assetDecimals);
    return { RemoveLiquidityRequestEvent: event, burnEvent, assetTransferEvent: assetTransferEvents[0] };
    ;
  }
  async requestCancelOrder(params) {
    let receipt = await this._bridgeVault.requestCancelOrder(params);
    let event = this._bridgeVault.parseRequestCancelOrderEvent(receipt)[0];
    return event;
  }
  async requestAmendOrder(params) {
    let clone = __spreadValues({}, params);
    clone.order = __spreadValues({}, clone.order);
    let assetDecimals = await (await this.asset).decimals;
    let order = clone.order;
    order.inAmount = import_eth_wallet26.Utils.toDecimals(order.inAmount, assetDecimals);
    let peerChainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
    let outTokenDecimals = this.getTokenDecimals(peerChainId, order.outToken);
    order.minOutAmount = import_eth_wallet26.Utils.toDecimals(order.minOutAmount, outTokenDecimals);
    let receipt = await this._bridgeVault.requestAmendOrder({ orderId: clone.orderId, order });
    let amendOrderEvent = this._bridgeVault.parseAmendOrderRequestEvent(receipt)[0];
    amendOrderEvent.order.inAmount = import_eth_wallet26.Utils.fromDecimals(amendOrderEvent.order.inAmount, assetDecimals);
    amendOrderEvent.order.minOutAmount = import_eth_wallet26.Utils.fromDecimals(amendOrderEvent.order.minOutAmount, outTokenDecimals);
    return amendOrderEvent;
  }
  async swap(params) {
    let clone = __spreadValues({}, params);
    clone.order = __spreadValues({}, clone.order);
    let assetDecimals = await (await this.asset).decimals;
    let chainId = await this._bridgeVault.wallet.getChainId();
    let outTokenDecimals = this.getTokenDecimals(chainId, params.order.outToken);
    clone.order.inAmount = import_eth_wallet26.Utils.toDecimals(clone.order.inAmount, assetDecimals);
    clone.order.minOutAmount = import_eth_wallet26.Utils.toDecimals(clone.order.minOutAmount, outTokenDecimals);
    clone.protocolFee = import_eth_wallet26.Utils.toDecimals(clone.protocolFee, assetDecimals);
    let receipt = await this._bridgeVault.swap(clone);
    let swapEvent = this._bridgeVault.parseSwapEvent(receipt)[0];
    swapEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(swapEvent.newImbalance, assetDecimals);
    swapEvent.newLpAssetBalance = import_eth_wallet26.Utils.fromDecimals(swapEvent.newLpAssetBalance, assetDecimals);
    swapEvent.newProtocolFeeBalance = import_eth_wallet26.Utils.fromDecimals(swapEvent.newProtocolFeeBalance, assetDecimals);
    let transferEvent;
    if (params.order.outToken != import_eth_wallet26.Utils.nullAddress) {
      transferEvent = new import_eth_wallet26.Erc20(this._bridgeVault.wallet, params.order.outToken).parseTransferEvent(receipt)[0];
      transferEvent.value = import_eth_wallet26.Utils.fromDecimals(transferEvent.value, assetDecimals);
    }
    return { swapEvent, transferEvent };
  }
  async swapOrderStatus(orderId) {
    return (await this._bridgeVault.swapOrderStatus(orderId)).toNumber();
  }
  get symbol() {
    return this._bridgeVault.symbol();
  }
  async sync() {
    let assetDecimals = await (await this.asset).decimals;
    let receipt = await this._bridgeVault.sync();
    let syncEvent = this._bridgeVault.parseSyncEvent(receipt)[0];
    syncEvent.excess = import_eth_wallet26.Utils.fromDecimals(syncEvent.excess, assetDecimals);
    syncEvent.newProtocolFeeBalance = import_eth_wallet26.Utils.fromDecimals(syncEvent.newProtocolFeeBalance, assetDecimals);
    return syncEvent;
  }
  get totalPendingWithdrawal() {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.totalPendingWithdrawal(), await (await this.asset).decimals);
    })();
  }
  get totalSupply() {
    return (async () => {
      return import_eth_wallet26.Utils.fromDecimals(await this._bridgeVault.totalSupply());
    })();
  }
  async transfer(params) {
    let clone = __spreadValues({}, params);
    clone.amount = import_eth_wallet26.Utils.toDecimals(clone.amount);
    let receipt = await this._bridgeVault.transfer(clone);
    let event = this._bridgeVault.parseTransferEvent(receipt)[0];
    event.value = import_eth_wallet26.Utils.fromDecimals(event.value);
    return event;
  }
  async transferFrom(params) {
    let clone = __spreadValues({}, params);
    clone.amount = import_eth_wallet26.Utils.toDecimals(clone.amount);
    let receipt = await this._bridgeVault.transferFrom(clone);
    let transfer = this._bridgeVault.parseTransferEvent(receipt)[0];
    transfer.value = import_eth_wallet26.Utils.fromDecimals(transfer.value);
    let approval = this._bridgeVault.parseApprovalEvent(receipt)[0];
    approval.value = import_eth_wallet26.Utils.fromDecimals(approval.value);
    return { transfer, approval };
  }
  get trollRegistry() {
    return this._bridgeVault.trollRegistry();
  }
  async updateConfigStore() {
    let receipt = await this._bridgeVault.updateConfigStore();
    let event = this._bridgeVault.parseUpdateConfigStoreEvent(receipt)[0];
    return event;
  }
  async updateTrollRegistry() {
    let receipt = await this._bridgeVault.updateTrollRegistry();
    let event = this._bridgeVault.parseUpdateTrollRegistryEvent(receipt)[0];
    return event;
  }
  get vaultRegistry() {
    return this._bridgeVault.vaultRegistry();
  }
  async voidOrder(params) {
    let receipt = await this._bridgeVault.voidOrder(params);
    let event = this._bridgeVault.parseVoidOrderEvent(receipt)[0];
    return event;
  }
  async withdrawUnexecutedOrder(orderId) {
    let assetDecimals = await (await this.asset).decimals;
    let receipt = await this._bridgeVault.withdrawUnexecutedOrder(orderId);
    let withdrawUnexecutedOrderEvent = this._bridgeVault.parseWithdrawUnexecutedOrderEvent(receipt)[0];
    withdrawUnexecutedOrderEvent.newImbalance = import_eth_wallet26.Utils.fromDecimals(withdrawUnexecutedOrderEvent.newImbalance, assetDecimals);
    let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    assetTransferEvent.value = import_eth_wallet26.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
    return { withdrawUnexecutedOrderEvent, assetTransferEvent };
  }
  async withdrawlTrollFee(amount) {
    let assetDecimals = await (await this.asset).decimals;
    amount = import_eth_wallet26.Utils.toDecimals(amount, assetDecimals);
    let receipt = await this._bridgeVault.withdrawlTrollFee(amount);
    let widhdrawEvent = this._bridgeVault.parseWithdrawlTrollFeeEvent(receipt)[0];
    widhdrawEvent.amount = import_eth_wallet26.Utils.fromDecimals(widhdrawEvent.amount, assetDecimals);
    widhdrawEvent.newProtocolFeeBalance = import_eth_wallet26.Utils.fromDecimals(widhdrawEvent.newProtocolFeeBalance, assetDecimals);
    let transferEvent = (await this.asset).parseTransferEvent(receipt)[0];
    transferEvent.value = import_eth_wallet26.Utils.fromDecimals(transferEvent.value, assetDecimals);
    return { widhdrawEvent, transferEvent };
  }
};

// src/wrappers/bridgeVaultTrollRegistry.ts
var import_eth_wallet27 = __toModule(require("@ijstech/eth-wallet"));
var BridgeVaultTrollRegistry = class {
  constructor(wallet, address) {
    this.address = address;
    this._bridgeVaultTrollRegistry = new OSWAP_BridgeVaultTrollRegistry(wallet, address);
  }
  async deploy(trollRegistry) {
    this.address = await this._bridgeVaultTrollRegistry.deploy(trollRegistry);
    return this.address;
  }
  async decodeStakeEvent(event) {
    let stakeEvent = this._bridgeVaultTrollRegistry.decodeStakeEvent(event);
    stakeEvent.amount = import_eth_wallet27.Utils.fromDecimals(stakeEvent.amount);
    stakeEvent.shares = import_eth_wallet27.Utils.fromDecimals(stakeEvent.shares);
    stakeEvent.backerBalance = import_eth_wallet27.Utils.fromDecimals(stakeEvent.backerBalance);
    stakeEvent.trollBalance = import_eth_wallet27.Utils.fromDecimals(stakeEvent.trollBalance);
    stakeEvent.totalShares = import_eth_wallet27.Utils.fromDecimals(stakeEvent.totalShares);
    return stakeEvent;
  }
  async parseUnstakeRequestEvent(receipt) {
    let unstakeEvent = this._bridgeVaultTrollRegistry.parseUnstakeRequestEvent(receipt)[0];
    unstakeEvent.shares = import_eth_wallet27.Utils.fromDecimals(unstakeEvent.shares);
    unstakeEvent.backerBalance = import_eth_wallet27.Utils.fromDecimals(unstakeEvent.backerBalance);
    return unstakeEvent;
  }
  async decodeUnstakeRequestEvent(event) {
    let unstakeEvent = this._bridgeVaultTrollRegistry.decodeUnstakeRequestEvent(event);
    unstakeEvent.shares = import_eth_wallet27.Utils.fromDecimals(unstakeEvent.shares);
    unstakeEvent.backerBalance = import_eth_wallet27.Utils.fromDecimals(unstakeEvent.backerBalance);
    return unstakeEvent;
  }
  async parseUnstakeApprovalEvent(receipt) {
    let unstakeEvent = this._bridgeVaultTrollRegistry.parseUnstakeApprovalEvent(receipt)[0];
    unstakeEvent.shares = import_eth_wallet27.Utils.fromDecimals(unstakeEvent.shares);
    return unstakeEvent;
  }
  async decodeUnstakeApprovalEvent(event) {
    let unstakeEvent = this._bridgeVaultTrollRegistry.decodeUnstakeApprovalEvent(event);
    unstakeEvent.shares = import_eth_wallet27.Utils.fromDecimals(unstakeEvent.shares);
    return unstakeEvent;
  }
  async backerStakes(backer) {
    let result = await this._bridgeVaultTrollRegistry.backerStakes(backer);
    result.shares = import_eth_wallet27.Utils.fromDecimals(result.shares);
    result.pendingWithdrawal = import_eth_wallet27.Utils.fromDecimals(result.pendingWithdrawal);
    result.approvedWithdrawal = import_eth_wallet27.Utils.fromDecimals(result.approvedWithdrawal);
    return result;
  }
  get configStore() {
    return this._bridgeVaultTrollRegistry.configStore();
  }
  async getBackers(trollProfileIndex) {
    return this._bridgeVaultTrollRegistry.getBackers(trollProfileIndex);
  }
  get govToken() {
    return new Promise(async (resolve, reject) => {
      try {
        if (!this.__govToken)
          this.__govToken = new import_eth_wallet27.Erc20(this._bridgeVaultTrollRegistry.wallet, await this._bridgeVaultTrollRegistry.govToken());
        resolve(this.__govToken);
      } catch (e) {
        reject(e);
      }
    });
  }
  async hashUnstakeRequest(params) {
    return this._bridgeVaultTrollRegistry.hashUnstakeRequest(params);
  }
  async lastTrollTxCount(troll) {
    return (async () => (await this._bridgeVaultTrollRegistry.lastTrollTxCount(troll)).toNumber())();
  }
  async maxWithdrawal(backer) {
    return this._bridgeVaultTrollRegistry.maxWithdrawal(backer);
  }
  async penalizeSuperTroll(params) {
    let receipt = await this._bridgeVaultTrollRegistry.penalizeSuperTroll(params);
    let event = this._bridgeVaultTrollRegistry.parsePenaltyEvent(receipt)[0];
    event.amount = import_eth_wallet27.Utils.fromDecimals(event.amount);
    return event;
  }
  async stake(params) {
    params.amount = import_eth_wallet27.Utils.toDecimals(params.amount);
    let receipt = await this._bridgeVaultTrollRegistry.stake(params);
    let event = this._bridgeVaultTrollRegistry.parseStakeEvent(receipt)[0];
    event.amount = import_eth_wallet27.Utils.fromDecimals(event.amount);
    event.shares = import_eth_wallet27.Utils.fromDecimals(event.shares);
    event.backerBalance = import_eth_wallet27.Utils.fromDecimals(event.backerBalance);
    event.trollBalance = import_eth_wallet27.Utils.fromDecimals(event.trollBalance);
    let govToken = await this.govToken;
    let transferEvent = govToken.parseTransferEvent(receipt)[0];
    transferEvent.value = import_eth_wallet27.Utils.fromDecimals(transferEvent.value, await govToken.decimals);
    return { stakeEvent: event, transferEvent };
  }
  async stakedBy(params) {
    let backer = await this._bridgeVaultTrollRegistry.stakedBy({ param1: params.trollProfileIndex, param2: params.index });
    return backer;
  }
  async stakedByInv(params) {
    let stakedByIdx = await this._bridgeVaultTrollRegistry.stakedByInv({ param1: params.trollProfileIndex, param2: params.backer });
    return stakedByIdx.toNumber();
  }
  async stakedByLength(trollProfileIndex) {
    return (async () => {
      return (await this._bridgeVaultTrollRegistry.stakedByLength(trollProfileIndex)).toNumber();
    })();
  }
  get transactionsCount() {
    return (async () => {
      return (await this._bridgeVaultTrollRegistry.transactionsCount()).toNumber();
    })();
  }
  get trollRegistry() {
    return this._bridgeVaultTrollRegistry.trollRegistry();
  }
  async trollStakesBalances(trollProfileIndex) {
    return import_eth_wallet27.Utils.fromDecimals(await this._bridgeVaultTrollRegistry.trollStakesBalances(trollProfileIndex));
  }
  async trollStakesTotalShares(trollProfileIndex) {
    return import_eth_wallet27.Utils.fromDecimals(await this._bridgeVaultTrollRegistry.trollStakesTotalShares(trollProfileIndex));
  }
  async unstake(params) {
    params.shares = import_eth_wallet27.Utils.toDecimals(params.shares);
    let receipt = await this._bridgeVaultTrollRegistry.unstake(params);
    let event = this._bridgeVaultTrollRegistry.parseUnstakeEvent(receipt)[0];
    event.amount = import_eth_wallet27.Utils.fromDecimals(event.amount);
    event.shares = import_eth_wallet27.Utils.fromDecimals(event.shares);
    event.trollBalance = import_eth_wallet27.Utils.fromDecimals(event.trollBalance);
    let govToken = await this.govToken;
    let transferEvent = govToken.parseTransferEvent(receipt)[0];
    transferEvent.value = import_eth_wallet27.Utils.fromDecimals(transferEvent.value, await govToken.decimals);
    return { unstakeEvent: event, transferEvent };
    ;
  }
  async unstakeApprove(params) {
    params.shares = import_eth_wallet27.Utils.toDecimals(params.shares);
    let receipt = await this._bridgeVaultTrollRegistry.unstakeApprove(params);
    let event = this._bridgeVaultTrollRegistry.parseUnstakeApprovalEvent(receipt)[0];
    event.shares = import_eth_wallet27.Utils.fromDecimals(event.shares);
    return event;
  }
  async unstakeRequest(shares) {
    shares = import_eth_wallet27.Utils.toDecimals(shares);
    let receipt = await this._bridgeVaultTrollRegistry.unstakeRequest(shares);
    let event = this._bridgeVaultTrollRegistry.parseUnstakeRequestEvent(receipt)[0];
    event.shares = import_eth_wallet27.Utils.fromDecimals(event.shares);
    event.backerBalance = import_eth_wallet27.Utils.fromDecimals(event.backerBalance);
    return event;
  }
  async updateConfigStore() {
    let receipt = await this._bridgeVaultTrollRegistry.updateConfigStore();
    return this._bridgeVaultTrollRegistry.parseUpdateConfigStoreEvent(receipt)[0];
  }
  async updateTrollRegistry() {
    let receipt = await this._bridgeVaultTrollRegistry.updateTrollRegistry();
    return this._bridgeVaultTrollRegistry.parseUpdateTrollRegistryEvent(receipt)[0];
  }
  async usedNonce(nonce) {
    return this._bridgeVaultTrollRegistry.usedNonce(nonce);
  }
  async verifyStakedValue(params) {
    return this._bridgeVaultTrollRegistry.verifyStakedValue(params);
  }
};

// src/crossChain.ts
function MainChain(wallet, result, tokenList) {
  let votingManager = new OSWAP_VotingManager(wallet, result.votingManager);
  let votingRegistry = new OSWAP_VotingRegistry(wallet, result.votingRegistry);
  let votingExecutor = new OSWAP_MainChainVotingExecutor(wallet, result.votingExecutor);
  return {
    votingManager,
    trollRegistry: new OSWAP_MainChainTrollRegistry(wallet, result.trollRegistry),
    votingRegistry,
    votingExecutor,
    voting: new MainChainVoting(wallet, votingManager, votingRegistry, votingExecutor),
    chainRegistry: new OSWAP_ChainRegistry(wallet, result.chainRegistry)
  };
}
function SideChain(wallet, result, tokenList) {
  let _vaultRegistry = {};
  let _bridgeVault = {};
  for (let v in result.bridgeVault) {
    _vaultRegistry[v] = _vaultRegistry[result.vaultRegistry[v]] = _vaultRegistry[result.bridgeVault[v]] = new BridgeVaultTrollRegistry(wallet, result.vaultRegistry[v]);
    _bridgeVault[v] = _bridgeVault[result.bridgeVault[v]] = _bridgeVault[result.vaultRegistry[v]] = new BridgeVault(wallet, result.bridgeVault[v], tokenList);
  }
  let votingExecutor = new OSWAP_SideChainVotingExecutor(wallet, result.votingExecutor);
  let wrapper = new OSWAP_RouterVaultWrapper(wallet, result.wrapper);
  return {
    configStore: new OSWAP_ConfigStore(wallet, result.configStore),
    trollRegistry: new OSWAP_SideChainTrollRegistry(wallet, result.trollRegistry),
    votingExecutor,
    vaultRegistry: _vaultRegistry,
    bridgeVault: _bridgeVault,
    voting: new SideChainVoting(wallet, votingExecutor),
    wrapper
  };
}
var CrossChainSingle = class {
  constructor(_oswap, contractsAddresses, chains, tokenList) {
    this._oswap = {};
    for (let chainId in _oswap) {
      this._oswap[chainId] = _oswap[chainId];
    }
    this.contractsAddresses = contractsAddresses;
    this.chains = chains;
    this.tokenList = tokenList;
  }
  onChainChange(wallet, chainId) {
    this.wallet = wallet;
    this.chainId = chainId;
    if (!this._oswap[chainId]) {
      throw new Error("Invalid chainId");
    }
    this.oswap = new import_sdk.OpenSwap(wallet, this._oswap[chainId]);
    this.mainChain = chainId == this.chains.mainChain ? MainChain(wallet, this.contractsAddresses.mainChain, this.tokenList) : null;
    let contracts = this.contractsAddresses.sideChain[chainId];
    this.crossChainContracts = contracts ? SideChain(wallet, contracts, this.tokenList) : null;
  }
};
var CrossChainMulti = class {
  constructor(wallets, oswap, contractsAddresses, chains, tokenList, wrappedTokens, tokenPair) {
    this.wallets = wallets;
    this.oswap = {};
    for (let chainId in oswap) {
      this.oswap[chainId] = new import_sdk.OpenSwap(wallets[chainId], oswap[chainId]);
    }
    this.contractsAddresses = contractsAddresses;
    this.chains = chains;
    this.crossChainContracts = {};
    if (contractsAddresses.mainChain)
      this.crossChainContracts.mainChain = MainChain(wallets[chains.mainChain], contractsAddresses.mainChain, tokenList);
    this.crossChainContracts.sideChain = {};
    for (let i = 0; i < chains.sideChain.length; i++) {
      let chainId = chains.sideChain[i];
      if (!wallets[chainId]) {
        throw new Error("Invalid chain id");
      }
      this.crossChainContracts.sideChain[chainId] = SideChain(wallets[chainId], contractsAddresses.sideChain[chainId], tokenList);
    }
    this.tokenList = tokenList;
    this.wrappedTokens = wrappedTokens;
    this.tokenPair = tokenPair;
  }
};
function buildTokenPairBySymbol(tokenList, pairing) {
  let tokenPair = {};
  pairing.forEach((pair) => {
    for (let srcChain in pair) {
      if (!tokenPair[srcChain])
        tokenPair[srcChain] = {};
      let address = tokenList[srcChain].find((e) => e.symbol == pair[srcChain]).address;
      tokenPair[srcChain][address] = {};
      for (let dstChain in pair) {
        if (srcChain != dstChain) {
          tokenPair[srcChain][address][dstChain] = tokenList[dstChain].find((e) => e.symbol == pair[dstChain]).address;
        }
      }
    }
  });
  return tokenPair;
}
function buildTokenPairByAddress(pairing) {
  let tokenPair = {};
  pairing.forEach((pair) => {
    for (let srcChain in pair) {
      if (!tokenPair[srcChain])
        tokenPair[srcChain] = {};
      let address = pair[srcChain];
      tokenPair[srcChain][address] = {};
      for (let dstChain in pair) {
        if (srcChain != dstChain) {
          tokenPair[srcChain][address][dstChain] = pair[dstChain];
        }
      }
    }
  });
  return tokenPair;
}
async function getCrossChain(wallets, chains, tokenList, wrappedTokens, chainRegistryAddress) {
  let oswap = {};
  let sideChain = {};
  let chainRegistry = new OSWAP_ChainRegistry(wallets[chains.mainChain], chainRegistryAddress);
  let allChainIds = (await chainRegistry.allChains()).map((e) => e.toNumber());
  let vaultsLength = (await chainRegistry.vaultsLength()).toNumber();
  let mainChain;
  {
    let _trollRegistry = await chainRegistry.mainChainContractAddress("TrollRegistry");
    let trollRegistry = new OSWAP_MainChainTrollRegistry(wallets[chains.mainChain], _trollRegistry);
    let _votingManager = await trollRegistry.votingManager();
    let votingManager = new OSWAP_VotingManager(wallets[chains.mainChain], _votingManager);
    let _votingExecutor = await votingManager.votingExecutor(0);
    let _votingRegistry = await votingManager.votingRegister();
    mainChain = {
      trollRegistry: _trollRegistry,
      votingExecutor: _votingExecutor,
      votingManager: _votingManager,
      votingRegistry: _votingRegistry,
      chainRegistry: chainRegistry.address
    };
  }
  let pairing = [];
  for (let chainId of allChainIds) {
    let status = (await chainRegistry.status(chainId)).toNumber();
    if (status == 1) {
      oswap[chainId] = await chainRegistry.govToken(chainId);
      let _trollRegistry = await chainRegistry.sideChainContractAddress({ param1: chainId, param2: "TrollRegistry" });
      let trollRegistry = new OSWAP_SideChainTrollRegistry(wallets[chainId], _trollRegistry);
      let _configStore = await trollRegistry.configStore();
      let configStore = new OSWAP_ConfigStore(wallets[chainId], _configStore);
      let _router = await configStore.router();
      let _wrapper = await chainRegistry.sideChainContractAddress({ param1: chainId, param2: "RouterWrapper" });
      let votingExecutor = await trollRegistry.votingExecutor(0);
      let vaultRegistry = {}, bridgeVault = {};
      for (let i = 0; i < vaultsLength; i++) {
        let vault = await chainRegistry.vaults({ param1: i, param2: chainId });
        vaultRegistry[vault.token] = vault.vaultRegistry;
        bridgeVault[vault.token] = vault.bridgeVault;
        if (!pairing[i])
          pairing.push({});
        pairing[i][chainId] = vault.token;
      }
      sideChain[chainId] = {
        configStore: _configStore,
        trollRegistry: _trollRegistry,
        votingExecutor,
        wrapper: _wrapper,
        vaultRegistry,
        bridgeVault
      };
    }
  }
  let tokenPair = buildTokenPairByAddress(pairing);
  for (let srcChain in tokenPair)
    for (let srcToken in tokenPair[srcChain])
      for (let dstChain in tokenPair[srcChain][srcToken]) {
        let dstToken = tokenPair[srcChain][srcToken][dstChain];
        let dstVault = sideChain[dstChain].bridgeVault[dstToken];
        let srcVault = sideChain[srcChain].bridgeVault[srcToken];
        if (!tokenPair[parseInt(srcChain)][srcVault])
          tokenPair[parseInt(srcChain)][srcVault] = {};
        tokenPair[parseInt(srcChain)][srcVault][parseInt(dstChain)] = dstVault;
      }
  let crossChain = new CrossChainMulti(wallets, oswap, { mainChain, sideChain }, chains, tokenList, wrappedTokens, tokenPair);
  return crossChain;
}

// src/troll.ts
var import_eth_wallet29 = __toModule(require("@ijstech/eth-wallet"));

// src/generalTroll.ts
var import_eth_wallet28 = __toModule(require("@ijstech/eth-wallet"));
var GeneralTroll = class {
  constructor(address, crosschain, isSuperTroll, config, trollProfileIndex) {
    this.address = address;
    this.crosschain = crosschain;
    this.trollProfileIndex = trollProfileIndex;
    this.isSuperTroll = isSuperTroll;
    this.vaults = {};
    let vaults;
    let sideChains = crosschain.crossChainContracts.sideChain;
    for (let chain in sideChains) {
      this.vaults[chain] = {};
      vaults = sideChains[chain].bridgeVault;
      for (let vault in vaults)
        this.vaults[chain][vaults[vault].address] = vaults[vault];
    }
    this.config = config;
  }
  init(trollProfileIndex) {
    this.trollProfileIndex = trollProfileIndex;
  }
  async _isGeneralTroll(params) {
    let chain = this.getChain(params.chainId);
    return await chain.trollRegistry.isGeneralTroll({ troll: this.address, returnFalseIfBlocked: params.returnFalseIfBlocked });
  }
  getChain(chainId) {
    return this.crosschain.crossChainContracts.sideChain[chainId];
  }
  async getTargetOrderId2(params) {
    let srcVault = this.crosschain.crossChainContracts.sideChain[params.sourceChain].bridgeVault[params.srcToken];
    let order = await srcVault.orders(params.orderId);
    let owner = await srcVault.orderOwner(params.orderId);
    let targetChain = order.peerChain.toNumber();
    let inToken = this.crosschain.tokenPair[params.sourceChain][(await srcVault.asset).address][targetChain];
    let targetVault = this.crosschain.crossChainContracts.sideChain[targetChain].bridgeVault[inToken];
    let wallet = this.crosschain.wallets[targetChain];
    let targetOrderId = wallet.web3.utils.soliditySha3({ t: "address", v: owner }, { t: "uint256", v: await wallet.getChainId() }, { t: "address", v: targetVault.address }, { t: "uint256", v: params.sourceChain.toString() }, { t: "uint256", v: params.orderId.toString() });
    return { targetChain, targetVault: targetVault.address, targetOrderId };
  }
  async getTargetOrderId(order) {
    let wallet = this.crosschain.wallets[order.targetChain];
    let chainId = order.targetChain;
    let targetVault = this.getChain(chainId).bridgeVault[order.inToken];
    let orderId = wallet.web3.utils.soliditySha3({ t: "address", v: order.owner }, { t: "uint256", v: await wallet.getChainId() }, { t: "address", v: targetVault.address }, { t: "uint256", v: order.sourceChain.toString() }, { t: "uint256", v: order.orderId.toString() });
    return orderId;
  }
  async signAddress(params) {
    let wallet = this.crosschain.wallets[params.chainId];
    let signatures = await wallet.signMessage(wallet.web3.utils.soliditySha3({ t: "address", v: params.address }));
    return signatures;
  }
  async hashOrderForSigning(params) {
    let wallet = this.crosschain.wallets[params.order.targetChain];
    let chainId = params.order.targetChain;
    let chain = this.getChain(chainId);
    let vault = chain.bridgeVault[params.order.inToken];
    let decimals = await (await vault.asset).decimals;
    let outTokenDecimals = params.order.outToken == import_eth_wallet28.Utils.nullAddress ? this.crosschain.wrappedTokens[chainId].decimals : this.crosschain.tokenList[chainId].find((e) => e.address == params.order.outToken).decimals;
    let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: vault.address }, { t: "bytes32", v: import_eth_wallet28.Utils.stringToBytes32(await this.getTargetOrderId(params.order)) }, { t: "uint", v: params.order.amendment.toFixed() }, { t: "uint", v: import_eth_wallet28.Utils.toDecimals(params.order.inAmount, decimals).toFixed() }, { t: "address", v: params.order.outToken }, { t: "uint", v: import_eth_wallet28.Utils.toDecimals(params.order.minOutAmount, outTokenDecimals).toFixed() }, { t: "uint", v: import_eth_wallet28.Utils.toDecimals(params.order.protocolFee, decimals).toFixed() }, { t: "address[]", v: params.pair }, { t: "address", v: params.order.to }, { t: "uint", v: params.order.expire.toFixed() });
    return hash;
  }
  async hashCancelOrderForSigning(cancelOrder) {
    let wallet = this.crosschain.wallets[cancelOrder.sourceChainId];
    let chain = this.getChain(cancelOrder.sourceChainId);
    let vault = chain.bridgeVault[cancelOrder.srcToken];
    let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: vault.address }, { t: "uint", v: cancelOrder.orderId.toString() }, { t: "uint8", v: cancelOrder.canceledByOrderOwner ? 1 : 0 }, { t: "uint", v: import_eth_wallet28.Utils.toDecimals(cancelOrder.protocolFee.toFixed(), await (await vault.asset).decimals).toFixed() });
    return hash;
  }
  async hashUnstakeBondRequestForSigning(params) {
    let wallet = this.crosschain.wallets[params.chainId];
    let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: params.event._event.address }, { t: "address", v: params.event.backer }, { t: "uint", v: params.event.trollProfileIndex.toFixed() }, { t: "uint", v: import_eth_wallet28.Utils.toDecimals(params.event.shares).toFixed() }, { t: "uint", v: "0x" + params.nonce.toString(16) });
    return hash;
  }
  async hashRebalancerWithdrawForSigning(params) {
    let chain = this.getChain(params.chainId);
    let to = await chain.configStore.rebalancer();
    let wallet = this.crosschain.wallets[params.chainId];
    let vault = chain.bridgeVault[params.asset];
    let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: vault.address }, { t: "address", v: to }, { t: "uint256", v: import_eth_wallet28.Utils.toDecimals(params.assetAmount, await (await vault.asset).decimals).toString() }, { t: "uint256", v: "0x" + params.nonce.toString(16) });
    return hash;
  }
  async hashVoidOrderForSigning(params) {
    let wallet = this.crosschain.wallets[params.targetChain];
    let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: params.targetChain }, { t: "address", v: params.targetVault }, { t: "bytes32", v: params.targetOrderId });
    return hash;
  }
};

// src/troll.ts
var Troll = class extends GeneralTroll {
  async _isSuperTroll(params) {
    let chain = this.getChain(params.chainId);
    return await chain.trollRegistry.isSuperTroll({ troll: this.address, returnFalseIfBlocked: params.returnFalseIfBlocked });
  }
  async canCreateTransactionSideChainRegistry(chainId) {
    if (!await this._isSuperTroll({ chainId, returnFalseIfBlocked: false }))
      return false;
    let chain = this.getChain(chainId);
    let gap = (await chain.configStore.transactionsGap()).toNumber();
    let registry = this.crosschain.crossChainContracts.sideChain[chainId].trollRegistry;
    let last = (await registry.lastTrollTxCount(this.address)).toNumber();
    let count = (await registry.transactionsCount()).toNumber();
    return last + gap <= count || count < gap;
  }
  async canTrollCreateTransactionSideChainRegistry(params) {
    let chain = this.getChain(params.chainId);
    if (!await chain.trollRegistry.isSuperTroll({ troll: params.troll, returnFalseIfBlocked: false }))
      return false;
    let gap = (await chain.configStore.transactionsGap()).toNumber();
    let registry = chain.trollRegistry;
    let last = (await registry.lastTrollTxCount(params.troll)).toNumber();
    let count = (await registry.transactionsCount()).toNumber();
    return last + gap <= count || count < gap;
  }
  async canCreateTransaction(params) {
    let chain = this.getChain(params.chainId);
    let vaultRegistry = chain.vaultRegistry[params.asset];
    let gap = (await chain.configStore.transactionsGap()).toNumber();
    let last = await vaultRegistry.lastTrollTxCount(this.address);
    let count = await vaultRegistry.transactionsCount;
    return last + gap <= count || count < gap;
  }
  async canTrollCreateTransaction(params) {
    let chain = this.getChain(params.chainId);
    if (!await chain.trollRegistry.isSuperTroll({ troll: params.troll, returnFalseIfBlocked: false }))
      return false;
    let vaultRegistry = chain.vaultRegistry[params.asset];
    let gap = (await chain.configStore.transactionsGap()).toNumber();
    let last = await vaultRegistry.lastTrollTxCount(params.troll);
    let count = await vaultRegistry.transactionsCount;
    return last + gap <= count || count < gap;
  }
  async hashAddTrollForSigning(params) {
    let chain = this.crosschain.crossChainContracts.sideChain[params.chainId];
    let wallet = this.crosschain.wallets[params.chainId];
    if (!wallet) {
      throw new Error("invalid chain id");
    }
    let troll = await this.crosschain.crossChainContracts.mainChain.trollRegistry.trollProfiles(params.addTrollEvent.trollProfileIndex);
    let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: chain.trollRegistry.address }, { t: "uint", v: params.addTrollEvent.trollProfileIndex.toString() }, { t: "address", v: troll.troll }, { t: "uint8", v: troll.trollType.toNumber() == 1 ? 1 : 0 }, { t: "uint", v: "0x" + params.nonce.toString(16) });
    return hash;
  }
  async addTrollSideChain(params) {
    let chain = this.crosschain.crossChainContracts.sideChain[params.chainId];
    if (!chain) {
      throw new Error("Invalid chainId");
    }
    let wallet = this.crosschain.wallets[params.chainId];
    let registry = chain.trollRegistry;
    let troll = await this.crosschain.crossChainContracts.mainChain.trollRegistry.trollProfiles(params.event.trollProfileIndex);
    let receipt = await registry.addTroll({ signatures: params.signatures, trollProfileIndex: params.event.trollProfileIndex, troll: troll.troll, isSuperTroll: troll.trollType.toNumber() == 1, nonce: params.nonce });
    let event = registry.parseAddTrollEvent(receipt)[0];
    return event;
  }
  async _prepareNewOrder(sourceChain, vaultAddress, order, owner, orderId, raw) {
    let srcVault = this.vaults[sourceChain][vaultAddress];
    let srcToken = await srcVault.asset;
    let targetChain = parseInt(order.peerChain.toString());
    let inTokenAddress = this.crosschain.tokenPair[sourceChain][srcToken.address][targetChain];
    let inToken = new import_eth_wallet29.Erc20(this.crosschain.wallets[targetChain], inTokenAddress);
    let inAmount = new import_eth_wallet29.BigNumber(order.inAmount);
    if (raw)
      inAmount = import_eth_wallet29.Utils.fromDecimals(inAmount, await srcToken.decimals);
    inAmount = inAmount.dp(await inToken.decimals, import_eth_wallet29.BigNumber.ROUND_DOWN);
    let outToken;
    if (order.outToken == import_eth_wallet29.Utils.nullAddress) {
      outToken = this.crosschain.wrappedTokens[targetChain];
    } else {
      outToken = this.crosschain.tokenList[targetChain].find((e) => e.address.toLowerCase() == order.outToken.toLowerCase());
    }
    if (!outToken) {
      throw new Error("unknown token");
    }
    let outTokenDecimals = outToken ? outToken.decimals : 18;
    let minOutAmount = new import_eth_wallet29.BigNumber(order.minOutAmount);
    if (raw)
      minOutAmount = import_eth_wallet29.Utils.fromDecimals(minOutAmount, outTokenDecimals);
    let protocolFee = inAmount.times(this.config.protocolFeeRate).dp(await inToken.decimals, import_eth_wallet29.BigNumber.ROUND_DOWN);
    let imbalance = await this.crosschain.crossChainContracts.sideChain[targetChain].bridgeVault[inToken.address]._bridgeVault.imbalance();
    imbalance = imbalance.minus(order.inAmount);
    let imbalanceFee = imbalance.lt(0) ? imbalance.times(this.config.imbalanceFeeRate).dp(await inToken.decimals, import_eth_wallet29.BigNumber.ROUND_DOWN) : new import_eth_wallet29.BigNumber(0);
    if (imbalanceFee.eq(0))
      imbalanceFee = new import_eth_wallet29.BigNumber(0);
    let _order = {
      owner,
      orderId: parseInt(orderId.toString()),
      amendment: 0,
      sourceChain,
      targetChain,
      srcToken: srcToken.address,
      inToken: inTokenAddress,
      inAmount,
      outToken: order.outToken,
      minOutAmount,
      protocolFee,
      imbalanceFee,
      to: order.to,
      expire: parseInt(order.expire.toString())
    };
    return _order;
  }
  async prepareNewOrder(params) {
    let _order = await this._prepareNewOrder(params.sourceChain, params.orderEvent._event.address, {
      peerChain: params.orderEvent.order.peerChain,
      inAmount: params.orderEvent.order.inAmount,
      outToken: params.orderEvent.order.outToken,
      minOutAmount: params.orderEvent.order.minOutAmount,
      to: params.orderEvent.order.to,
      expire: params.orderEvent.order.expire
    }, params.orderEvent.owner, params.orderEvent.orderId, params.raw);
    return _order;
  }
  async prepareAmendOrder(params) {
    let srcVault = this.vaults[params.sourceChain][params.amendOrderRequestEvent._event.address];
    let owner = await srcVault.orderOwner(params.amendOrderRequestEvent.orderId);
    let _order = await this._prepareNewOrder(params.sourceChain, params.amendOrderRequestEvent._event.address, {
      peerChain: params.amendOrderRequestEvent.order.peerChain,
      inAmount: params.amendOrderRequestEvent.order.inAmount,
      outToken: params.amendOrderRequestEvent.order.outToken,
      minOutAmount: params.amendOrderRequestEvent.order.minOutAmount,
      to: params.amendOrderRequestEvent.order.to,
      expire: params.amendOrderRequestEvent.order.expire
    }, owner, params.amendOrderRequestEvent.orderId, params.raw);
    _order.amendment = params.amendOrderRequestEvent.amendment.toNumber();
    return _order;
  }
  async prepareCancelOrder(params) {
    let targetChain = this.getChain(params.targetChainId);
    let inToken = await targetChain.bridgeVault[params.event._event.address].asset;
    let srcChainId = params.event.sourceChainId.toNumber();
    let srcToken = this.crosschain.tokenPair[params.targetChainId][inToken._address][srcChainId];
    let srcChain = this.getChain(srcChainId);
    let srcVault = srcChain.bridgeVault[srcToken];
    let order = await srcChain.bridgeVault[srcVault.address].orders(params.event.orderId);
    let protocolFee = order.inAmount.times(this.config.protocolFeeRate).dp(await (await srcVault.asset).decimals, import_eth_wallet29.BigNumber.ROUND_DOWN);
    return { sourceChainId: parseInt(params.event.sourceChainId.toString()), srcToken, orderId: params.event.orderId, owner: params.event.owner, canceledByOrderOwner: true, protocolFee };
  }
  async prepareCancelOrderFromUnexecuteOrder(params) {
    let srcChain = this.getChain(params.srcChainId);
    let srcVault = srcChain.bridgeVault[params.srcToken].address;
    let owner = await srcChain.bridgeVault[srcVault].orderOwner(params.orderId);
    let protocolFee = new import_eth_wallet29.BigNumber(0);
    return { sourceChainId: params.srcChainId, srcToken: params.srcToken, srcVault, orderId: params.orderId, owner, canceledByOrderOwner: false, protocolFee };
  }
  async swap(params) {
    let wallet = this.crosschain.wallets[params.order.targetChain];
    let chainId = params.order.targetChain;
    let chain = this.getChain(chainId);
    let vault = chain.bridgeVault[params.order.inToken];
    let _params = {
      signatures: params.signatures,
      owner: params.order.owner,
      orderId: params.order.orderId,
      amendment: params.order.amendment,
      protocolFee: params.order.protocolFee,
      pair: params.pair,
      order: {
        peerChain: params.order.sourceChain,
        inAmount: params.order.inAmount,
        outToken: params.order.outToken,
        minOutAmount: params.order.minOutAmount,
        to: params.order.to,
        expire: params.order.expire
      }
    };
    let event = await vault.swap(_params);
    return event;
  }
  async cancelOrder(params) {
    let chain = this.getChain(params.cancelOrder.sourceChainId);
    let srcVault = chain.bridgeVault[params.cancelOrder.srcToken];
    let event = await srcVault.cancelOrder({ signatures: params.signatures, orderId: params.cancelOrder.orderId, canceledByOrderOwner: params.cancelOrder.canceledByOrderOwner, protocolFee: params.cancelOrder.protocolFee });
    return event;
  }
  async unstakeApprove(params) {
    let chainId = params.chainId;
    let chain = this.getChain(chainId);
    let vaultRegistry = chain.vaultRegistry[params.event._event.address];
    if (!vaultRegistry) {
      throw new Error("vault registry not found");
    }
    let receipt = await vaultRegistry.unstakeApprove({ signatures: params.signatures, backer: params.event.backer, trollProfileIndex: params.event.trollProfileIndex, shares: params.event.shares, nonce: params.nonce });
    return receipt;
  }
  async hashUpdateTrollForSigning(params) {
    let wallet = this.crosschain.wallets[params.chainId];
    let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry.address }, { t: "uint256", v: params.event.trollProfileIndex.toString() }, { t: "address", v: params.event.newTroll }, { t: "uint256", v: params.event._event.transactionHash });
    return hash;
  }
  async updateTrollSideChain(params) {
    let chain = this.crosschain.crossChainContracts.sideChain[params.chainId];
    if (!chain) {
      throw new Error("Invalid chainId");
    }
    let wallet = this.crosschain.wallets[params.chainId];
    let registry = chain.trollRegistry;
    let receipt = await registry.updateTroll({ signatures: params.signatures, trollProfileIndex: params.event.trollProfileIndex, newTroll: params.event.newTroll, nonce: new import_eth_wallet29.BigNumber(params.event._event.transactionHash) });
    let event = registry.parseAddTrollEvent(receipt)[0];
    return event;
  }
  async hashRemoveTrollForSigning(params) {
    let wallet = this.crosschain.wallets[params.chainId];
    let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry.address }, { t: "uint256", v: params.trollProfileIndex.toString() }, { t: "address", v: params.newTroll }, { t: "uint256", v: "0x" + params.nonce.toString(16) });
    return hash;
  }
  async hashUnlockTrollForSigning(params) {
    let wallet = this.crosschain.wallets[params.chainId];
    let decimals = await this.crosschain.oswap[params.chainId].decimals;
    let penalty = Object.values(params.penalties).map((e) => import_eth_wallet29.Utils.toDecimals(e, decimals));
    let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry.address }, { t: "uint256", v: params.trollProfileIndex.toString() }, { t: "uint8", v: params.unlock ? 1 : 0 }, { t: "address[]", v: Object.keys(params.penalties) }, { t: "uint256[]", v: penalty }, { t: "uint256", v: "0x" + params.nonce.toString(16) });
    return hash;
  }
  async unlockSuperTroll(params) {
    let penalty = [];
    let decimals = await this.crosschain.oswap[params.chainId].decimals;
    for (let vault in params.penalties) {
      penalty.push(import_eth_wallet29.Utils.toDecimals(params.penalties[vault], decimals));
    }
    let registry = this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry;
    let receipt = await registry.unlockSuperTroll({
      signatures: params.signatures,
      trollProfileIndex: params.trollProfileIndex,
      unlock: params.unlock,
      vaultRegistry: Object.keys(params.penalties),
      penalty,
      nonce: params.nonce
    });
    return registry.parseUnlockSuperTrollEvent(receipt);
  }
  hashVotingExecutionForSigning(params) {
    return this.crosschain.crossChainContracts.sideChain[params.chainId].voting.getHash({ params: params.params, nonce: params.nonce });
  }
  executeVoting(params) {
    return this.crosschain.crossChainContracts.sideChain[params.chainId].votingExecutor.execute(params);
  }
  async rebalancerWithdraw(params) {
    let chain = this.getChain(params.chainId);
    let vault = chain.bridgeVault[params.asset];
    let event = await vault.rebalancerWithdraw({
      signatures: params.signatures,
      assetAmount: params.assetAmount,
      nonce: params.nonce
    });
    return event;
  }
  async voidOrder(params) {
    let chain = this.getChain(params.order.targetChain);
    let vault = chain.bridgeVault[params.order.targetVault];
    let event = vault.voidOrder({ signatures: params.signatures, orderId: params.order.targetOrderId });
    return event;
  }
};

// src/owner.ts
var Owner = class {
  constructor(crosschain) {
    this.crosschain = crosschain;
  }
  async addTroll(params) {
    let chain = this.crosschain.mainChain;
    if (!chain) {
      throw new Error("not on main chain");
    }
    if (this.crosschain.chains.mainChain != this.crosschain.chainId) {
      throw new Error("not on main chain");
    }
    let registry = chain.trollRegistry;
    let receipt = await registry.addTroll(params);
    let event = registry.parseAddTrollEvent(receipt)[0];
    return event;
  }
  async updateTroll(params) {
    let chain = this.crosschain.mainChain;
    if (!chain) {
      throw new Error("not on main chain");
    }
    if (this.crosschain.chains.mainChain != this.crosschain.chainId) {
      throw new Error("not on main chain");
    }
    let registry = chain.trollRegistry;
    let receipt = await registry.updateTroll(params);
    let event = registry.parseUpdateTrollEvent(receipt)[0];
    return event;
  }
};

// src/backer.ts
var Nft = __toModule(require("@openswap/troll-nft-sdk"));
var Backer = class {
  constructor(crosschain) {
    this.crosschain = crosschain;
  }
  async stakeTroll(params) {
    let chain = this.crosschain;
    if (!chain.mainChain) {
      throw new Error("not on main chain");
    }
    if (chain.chains.mainChain != this.crosschain.chainId) {
      throw new Error("Not on main chain");
    }
    let registry = chain.mainChain.trollRegistry;
    let receipt = await (params.isSuperTroll ? registry.stakeSuperTroll(params) : registry.stakeGeneralTroll(params));
    let stakeEvent = params.isSuperTroll ? registry.parseStakeSuperTollEvent(receipt)[0] : registry.parseStakeGeneralTollEvent(receipt)[0];
    let transferEvent = new Nft.Contracts.TrollNFT(this.crosschain.wallet, params.nft).parseTransferEvent(receipt)[0];
    return { stakeEvent, transferEvent };
  }
  async unstakeTroll(params) {
    let chain = this.crosschain;
    if (!chain.mainChain) {
      throw new Error("not on main chain");
    }
    if (chain.chains.mainChain != this.crosschain.chainId) {
      throw new Error("Not on main chain");
    }
    let registry = chain.mainChain.trollRegistry;
    let stakedByInv = await registry.stakedByInv({ param1: params.nft, param2: params.tokenId });
    if (stakedByInv.trollProfileIndex.eq(0)) {
      throw new Error("Not staked");
    }
    let type = (await registry.trollProfiles(stakedByInv.trollProfileIndex)).trollType.toNumber();
    let receipt = await (type == 1 || type == 3 ? registry.unstakeSuperTroll(params) : registry.unstakeGeneralTroll(params));
    let unstakeEvent = type == 1 ? registry.parseUnstakeSuperTollEvent(receipt)[0] : registry.parseUnstakeGeneralTollEvent(receipt)[0];
    let transferEvent = new Nft.Contracts.TrollNFT(this.crosschain.wallet, params.nft).parseTransferEvent(receipt)[0];
    return { unstakeEvent, transferEvent };
  }
  async addStakes(params) {
    let chain = this.crosschain;
    if (!chain.mainChain) {
      throw new Error("not on main chain");
    }
    if (chain.chains.mainChain != this.crosschain.chainId) {
      throw new Error("Not on main chain");
    }
    let registry = chain.mainChain.trollRegistry;
    let stakedByInv = await registry.stakedByInv({ param1: params.nft, param2: params.tokenId });
    if (stakedByInv.trollProfileIndex.eq(0)) {
      throw new Error("Not staked");
    }
    let type = (await registry.trollProfiles(stakedByInv.trollProfileIndex)).trollType.toNumber();
    let receipt = await (type == 1 || type == 3 ? registry.addStakesSuperTroll(params) : registry.addStakesGeneralTroll(params));
    let addStakesEvent = new Nft.Contracts.TrollNFTV2(this.crosschain.wallet, params.nft).parseAddStakesEvent(receipt)[0];
    let transferEvent = chain.oswap._oswap.parseTransferEvent(receipt)[0];
    return { addStakesEvent, transferEvent };
  }
  async getStakedBridgeVaultBond(token) {
    let vault = this.crosschain.crossChainContracts.vaultRegistry[token.address];
    if (!vault) {
      throw new Error("vault not found");
    }
    let staked = await vault.backerStakes(this.crosschain.wallet.defaultAccount);
    return staked;
  }
  async approveToStake(params) {
    let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    let oswap = this.crosschain.oswap;
    return oswap.approve({ spender: vault.address, amount: params.oswapAmount });
  }
  async stakeBridgeVaultBond(params) {
    let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    let backer = this.crosschain.wallet.defaultAccount;
    if ((await this.crosschain.oswap.balanceOf(backer)).lt(params.oswapAmount)) {
      throw new Error("Insufficient balance");
    }
    if ((await this.crosschain.oswap.allowance({ owner: backer, spender: vault.address })).lt(params.oswapAmount)) {
      throw new Error("Insufficient allowance");
    }
    let event = await vault.stake({ trollProfileIndex: params.trollProfileIndex, amount: params.oswapAmount });
    return event;
  }
  async stakes(asset) {
    let vault = this.crosschain.crossChainContracts.vaultRegistry[asset.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    let backer = this.crosschain.wallet.defaultAccount;
    let stakes = await vault.backerStakes(backer);
    return stakes;
  }
  async unstakeRequest(params) {
    let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    let backer = this.crosschain.wallet.defaultAccount;
    let stakes = await vault.backerStakes(backer);
    if (stakes.shares.lt(params.shares)) {
      throw new Error("Insufficient balance");
    }
    let event = await vault.unstakeRequest(params.shares);
    return event;
  }
  async unstake(params) {
    let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    let backer = this.crosschain.wallet.defaultAccount;
    let stakes = await vault.backerStakes(backer);
    if (stakes.approvedWithdrawal.lt(params.shares)) {
      throw new Error("Insufficient withdraw approval");
    }
    let event = await vault.unstake({ backer: this.crosschain.wallet.defaultAccount, shares: params.shares });
    return event;
  }
};

// src/liquidityProvider.ts
var import_eth_wallet30 = __toModule(require("@ijstech/eth-wallet"));
var LiquidityProvider = class {
  constructor(crosschain) {
    this.crosschain = crosschain;
  }
  async getLiquidityBalance(token) {
    let chain = this.crosschain.crossChainContracts;
    let vault = chain.bridgeVault[token.address];
    let lp = this.crosschain.wallet.defaultAccount;
    if (!vault) {
      throw new Error("vault not found");
    }
    let amount = await vault.balanceOf(lp);
    let totalSupply = await vault.totalSupply;
    let lpAssetBalance = await vault.lpAssetBalance;
    amount = totalSupply.eq(0) ? new import_eth_wallet30.BigNumber(0) : amount.times(lpAssetBalance).idiv(totalSupply);
    return amount;
  }
  async approveToAddLiquidity(params) {
    let vault = this.crosschain.crossChainContracts.bridgeVault[params.asset.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    return params.asset.approve({ spender: vault.address, amount: params.amount });
  }
  async addLiquidity(params) {
    let chain = this.crosschain.crossChainContracts;
    let vault = chain.bridgeVault[params.token.address];
    let lp = this.crosschain.wallet.defaultAccount;
    if (!vault) {
      throw new Error("vault not found");
    }
    if ((await params.token.balanceOf(lp)).lt(params.amount)) {
      throw new Error("Insufficient balance");
    }
    if ((await params.token.allowance({ owner: lp, spender: vault.address })).lt(params.amount)) {
      throw new Error("Insufficient allowance");
    }
    let events = await vault.addLiquidity(params.amount);
    return events;
  }
  async removeLiquidityRequest(params) {
    let chain = this.crosschain.crossChainContracts;
    let vault = chain.bridgeVault[params.token.address];
    let lp = this.crosschain.wallet.defaultAccount;
    if ((await vault.balanceOf(lp)).lt(params.lpTokenAmount)) {
      throw new Error("Insufficient balance");
    }
    let events = await vault.removeLiquidityRequest(params.lpTokenAmount);
    return events;
  }
  async removeLiquidity(params) {
    let chain = this.crosschain.crossChainContracts;
    let vault = chain.bridgeVault[params.token.address];
    let lp = this.crosschain.wallet.defaultAccount;
    if ((await vault.pendingWithdrawalAmount(lp)).lt(params.amount)) {
      throw new Error("Request exceeded previous request");
    }
    if ((await vault.pendingWithdrawalTimeout(lp)).getTime() < Math.round(Date.now() / 1e3)) {
      throw new Error("Timeout not passed yet");
    }
    let events = await vault.removeLiquidity({ provider: this.crosschain.wallet.defaultAccount, assetAmount: params.amount });
    return events;
  }
};

// src/trader.ts
var import_eth_wallet31 = __toModule(require("@ijstech/eth-wallet"));
var Trader = class {
  constructor(crosschain) {
    this.crosschain = crosschain;
  }
  async approveToNewOrder(params) {
    let vault = this.crosschain.crossChainContracts.bridgeVault[params.inToken.address];
    if (!vault) {
      throw new Error("Vault not found");
    }
    params.amount = import_eth_wallet31.Utils.toDecimals(params.amount, await params.inToken.decimals);
    return params.inToken.approve({ spender: vault.address, amount: params.amount });
  }
  async newOrder(params) {
    let sourceChain = this.crosschain.crossChainContracts;
    let vault = sourceChain.bridgeVault[params.inToken.address];
    let trader = this.crosschain.wallet.defaultAccount;
    if (!vault) {
      throw new Error("vault not found");
    }
    if ((await params.inToken.balanceOf(trader)).lt(params.inAmount)) {
      throw new Error("Insufficient balance");
    }
    if ((await params.inToken.allowance({ owner: trader, spender: vault.address })).lt(params.inAmount)) {
      throw new Error("Insufficient allowance");
    }
    let _params = {
      peerChain: params.targetChain,
      inAmount: params.inAmount,
      outToken: params.outToken ? params.outToken.address : import_eth_wallet31.Utils.nullAddress,
      minOutAmount: params.minOutAmount,
      to: params.to,
      expire: params.expire
    };
    let events = await vault.newOrder(_params);
    return events;
  }
  async amendOrder(params) {
    let sourceChain = this.crosschain.crossChainContracts;
    let vault = sourceChain.bridgeVault[params.inToken.address];
    return await vault.requestAmendOrder(params);
  }
  async swapOrderStatus(params) {
    let targetChain = this.crosschain.crossChainContracts;
    let vault = targetChain.bridgeVault[params.inToken];
    let hash = await vault.hashOrder({ owner: this.crosschain.wallet.defaultAccount, sourceChainId: params.sourceChainId, orderId: params.orderId });
    return vault.swapOrderStatus(hash);
  }
  async cancelOrderOnSideChain(params) {
    let targetChain = this.crosschain.crossChainContracts;
    let vault = targetChain.bridgeVault[params.inToken];
    if (!vault) {
      new Error("vault not found");
    }
    let trader = this.crosschain.wallet.defaultAccount;
    let event = vault.requestCancelOrder(params);
    return event;
  }
  async withdrawUnexecutedOrder(params) {
    let targetChain = this.crosschain.crossChainContracts;
    let vault = targetChain.bridgeVault[params.srcToken];
    if (!vault) {
      new Error("vault not found");
    }
    if (await vault.orderOwner(params.orderId) != this.crosschain.wallet.defaultAccount) {
      new Error("not from the owner of order");
    }
    let event = await vault.withdrawUnexecutedOrder(params.orderId);
    return event;
  }
};

});