define("@staking/staking-utils",(require, exports)=>{
  var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key;
            for (i = 0; i < arguments.length; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token2);
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i;
          for (i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4;
        }));
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        for (i = 0; i < token2.length; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
            this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      });
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
            this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
            this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn("Locale " + key + " not found. Did you forget to load it?");
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
      });
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens2.length; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false;
        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function(obj) {
          return obj && parseInt(obj, 10);
        });
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      });
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset2, "m"), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      });
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case "isoWeek":
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));
          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      });
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
      proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
      proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
      proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
      proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
      hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.1";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      return hooks;
    });
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.json.js
var require_ERC20_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "60806040523480156200001157600080fd5b5060405162000ded38038062000ded8339810160408190526200003491620001c1565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610b62806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610a2a565b60405180910390f35b6100ff6100fa366004610a01565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109c6565b6102aa565b604051601281526020016100e3565b6100ff610151366004610a01565b6102ce565b610113610164366004610973565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031a565b6100ff6101a2366004610a01565b610329565b6100ff6101b5366004610a01565b6103ff565b6101136101c8366004610994565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610ad8565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610ad8565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040d565b5060019392505050565b6000336102b88582856105c0565b6102c3858585610697565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610315908790610a9b565b61040d565b60606004805461020f90610ad8565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c3828686840361040d565b6000336102a0818585610697565b73ffffffffffffffffffffffffffffffffffffffff83166104af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8216610552576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106915781811015610684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e9565b610691848484840361040d565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff82166107dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103e9565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815290812080548492906108d7908490610a9b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161093d91815260200190565b60405180910390a3610691565b803573ffffffffffffffffffffffffffffffffffffffff8116811461096e57600080fd5b919050565b600060208284031215610984578081fd5b61098d8261094a565b9392505050565b600080604083850312156109a6578081fd5b6109af8361094a565b91506109bd6020840161094a565b90509250929050565b6000806000606084860312156109da578081fd5b6109e38461094a565b92506109f16020850161094a565b9150604084013590509250925092565b60008060408385031215610a13578182fd5b610a1c8361094a565b946020939093013593505050565b6000602080835283518082850152825b81811015610a5657858101830151858201604001528201610a3a565b81811115610a675783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610ad3577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b500190565b600181811c90821680610aec57607f821691505b60208210811415610b26577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea26469706673582212207e1188179a2ec2d71a830e14508575abf5fda1df1955826b145b51f575550cdc64736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.js
var require_ERC20 = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC20 = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var ERC20_json_1 = __importDefault(require_ERC20_json());
    var ERC20 = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, ERC20_json_1.default.abi, ERC20_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          spender: result.spender,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      assign() {
        let allowanceParams = (params) => [params.owner, params.spender];
        let allowance_call = async (params) => {
          let result = await this.call("allowance", allowanceParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.allowance = allowance_call;
        let balanceOf_call = async (account) => {
          let result = await this.call("balanceOf", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.amount)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return result;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let decreaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.subtractedValue)];
        let decreaseAllowance_send = async (params) => {
          let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        let decreaseAllowance_call = async (params) => {
          let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
          call: decreaseAllowance_call
        });
        let increaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.addedValue)];
        let increaseAllowance_send = async (params) => {
          let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        let increaseAllowance_call = async (params) => {
          let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        this.increaseAllowance = Object.assign(increaseAllowance_send, {
          call: increaseAllowance_call
        });
        let transferParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.amount)];
        let transfer_send = async (params) => {
          let result = await this.send("transfer", transferParams(params));
          return result;
        };
        let transfer_call = async (params) => {
          let result = await this.call("transfer", transferParams(params));
          return result;
        };
        this.transfer = Object.assign(transfer_send, {
          call: transfer_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.amount)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return result;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
      }
    };
    exports.ERC20 = ERC20;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.json.js
var require_ERC20PresetMinterPauser_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Paused", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }], "name": "RoleAdminChanged", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleGranted", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleRevoked", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Unpaused", "type": "event" },
        { "inputs": [], "name": "DEFAULT_ADMIN_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "MINTER_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "PAUSER_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burnFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleAdmin", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "getRoleMember", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleMemberCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "grantRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "hasRole", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "pause", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "renounceRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "revokeRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "unpause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.js
var require_ERC20PresetMinterPauser = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC20PresetMinterPauser = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var ERC20PresetMinterPauser_json_1 = __importDefault(require_ERC20PresetMinterPauser_json());
    var ERC20PresetMinterPauser = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, ERC20PresetMinterPauser_json_1.default.abi, ERC20PresetMinterPauser_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          spender: result.spender,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parsePausedEvent(receipt) {
        return this.parseEvents(receipt, "Paused").map((e) => this.decodePausedEvent(e));
      }
      decodePausedEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      parseRoleAdminChangedEvent(receipt) {
        return this.parseEvents(receipt, "RoleAdminChanged").map((e) => this.decodeRoleAdminChangedEvent(e));
      }
      decodeRoleAdminChangedEvent(event) {
        let result = event.data;
        return {
          role: result.role,
          previousAdminRole: result.previousAdminRole,
          newAdminRole: result.newAdminRole,
          _event: event
        };
      }
      parseRoleGrantedEvent(receipt) {
        return this.parseEvents(receipt, "RoleGranted").map((e) => this.decodeRoleGrantedEvent(e));
      }
      decodeRoleGrantedEvent(event) {
        let result = event.data;
        return {
          role: result.role,
          account: result.account,
          sender: result.sender,
          _event: event
        };
      }
      parseRoleRevokedEvent(receipt) {
        return this.parseEvents(receipt, "RoleRevoked").map((e) => this.decodeRoleRevokedEvent(e));
      }
      decodeRoleRevokedEvent(event) {
        let result = event.data;
        return {
          role: result.role,
          account: result.account,
          sender: result.sender,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseUnpausedEvent(receipt) {
        return this.parseEvents(receipt, "Unpaused").map((e) => this.decodeUnpausedEvent(e));
      }
      decodeUnpausedEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      assign() {
        let DEFAULT_ADMIN_ROLE_call = async () => {
          let result = await this.call("DEFAULT_ADMIN_ROLE");
          return result;
        };
        this.DEFAULT_ADMIN_ROLE = DEFAULT_ADMIN_ROLE_call;
        let MINTER_ROLE_call = async () => {
          let result = await this.call("MINTER_ROLE");
          return result;
        };
        this.MINTER_ROLE = MINTER_ROLE_call;
        let PAUSER_ROLE_call = async () => {
          let result = await this.call("PAUSER_ROLE");
          return result;
        };
        this.PAUSER_ROLE = PAUSER_ROLE_call;
        let allowanceParams = (params) => [params.owner, params.spender];
        let allowance_call = async (params) => {
          let result = await this.call("allowance", allowanceParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.allowance = allowance_call;
        let balanceOf_call = async (account) => {
          let result = await this.call("balanceOf", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let getRoleAdmin_call = async (role) => {
          let result = await this.call("getRoleAdmin", [eth_wallet_1.Utils.stringToBytes32(role)]);
          return result;
        };
        this.getRoleAdmin = getRoleAdmin_call;
        let getRoleMemberParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), eth_wallet_1.Utils.toString(params.index)];
        let getRoleMember_call = async (params) => {
          let result = await this.call("getRoleMember", getRoleMemberParams(params));
          return result;
        };
        this.getRoleMember = getRoleMember_call;
        let getRoleMemberCount_call = async (role) => {
          let result = await this.call("getRoleMemberCount", [eth_wallet_1.Utils.stringToBytes32(role)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getRoleMemberCount = getRoleMemberCount_call;
        let hasRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let hasRole_call = async (params) => {
          let result = await this.call("hasRole", hasRoleParams(params));
          return result;
        };
        this.hasRole = hasRole_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let paused_call = async () => {
          let result = await this.call("paused");
          return result;
        };
        this.paused = paused_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.amount)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return result;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let burn_send = async (amount) => {
          let result = await this.send("burn", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let burn_call = async (amount) => {
          let result = await this.call("burn", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.burn = Object.assign(burn_send, {
          call: burn_call
        });
        let burnFromParams = (params) => [params.account, eth_wallet_1.Utils.toString(params.amount)];
        let burnFrom_send = async (params) => {
          let result = await this.send("burnFrom", burnFromParams(params));
          return result;
        };
        let burnFrom_call = async (params) => {
          let result = await this.call("burnFrom", burnFromParams(params));
          return;
        };
        this.burnFrom = Object.assign(burnFrom_send, {
          call: burnFrom_call
        });
        let decreaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.subtractedValue)];
        let decreaseAllowance_send = async (params) => {
          let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        let decreaseAllowance_call = async (params) => {
          let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
          call: decreaseAllowance_call
        });
        let grantRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let grantRole_send = async (params) => {
          let result = await this.send("grantRole", grantRoleParams(params));
          return result;
        };
        let grantRole_call = async (params) => {
          let result = await this.call("grantRole", grantRoleParams(params));
          return;
        };
        this.grantRole = Object.assign(grantRole_send, {
          call: grantRole_call
        });
        let increaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.addedValue)];
        let increaseAllowance_send = async (params) => {
          let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        let increaseAllowance_call = async (params) => {
          let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        this.increaseAllowance = Object.assign(increaseAllowance_send, {
          call: increaseAllowance_call
        });
        let mintParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.amount)];
        let mint_send = async (params) => {
          let result = await this.send("mint", mintParams(params));
          return result;
        };
        let mint_call = async (params) => {
          let result = await this.call("mint", mintParams(params));
          return;
        };
        this.mint = Object.assign(mint_send, {
          call: mint_call
        });
        let pause_send = async () => {
          let result = await this.send("pause");
          return result;
        };
        let pause_call = async () => {
          let result = await this.call("pause");
          return;
        };
        this.pause = Object.assign(pause_send, {
          call: pause_call
        });
        let renounceRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let renounceRole_send = async (params) => {
          let result = await this.send("renounceRole", renounceRoleParams(params));
          return result;
        };
        let renounceRole_call = async (params) => {
          let result = await this.call("renounceRole", renounceRoleParams(params));
          return;
        };
        this.renounceRole = Object.assign(renounceRole_send, {
          call: renounceRole_call
        });
        let revokeRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let revokeRole_send = async (params) => {
          let result = await this.send("revokeRole", revokeRoleParams(params));
          return result;
        };
        let revokeRole_call = async (params) => {
          let result = await this.call("revokeRole", revokeRoleParams(params));
          return;
        };
        this.revokeRole = Object.assign(revokeRole_send, {
          call: revokeRole_call
        });
        let transferParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.amount)];
        let transfer_send = async (params) => {
          let result = await this.send("transfer", transferParams(params));
          return result;
        };
        let transfer_call = async (params) => {
          let result = await this.call("transfer", transferParams(params));
          return result;
        };
        this.transfer = Object.assign(transfer_send, {
          call: transfer_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.amount)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return result;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let unpause_send = async () => {
          let result = await this.send("unpause");
          return result;
        };
        let unpause_call = async () => {
          let result = await this.call("unpause");
          return;
        };
        this.unpause = Object.assign(unpause_send, {
          call: unpause_call
        });
      }
    };
    exports.ERC20PresetMinterPauser = ERC20PresetMinterPauser;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/Rewards.json.js
var require_Rewards_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/Rewards.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract TimeIsMoneyI", "name": "timeIsMoney_", "type": "address" }, { "internalType": "contract IERC20", "name": "token_", "type": "address" }, { "internalType": "uint256", "name": "multiplier_", "type": "uint256" }, { "internalType": "uint256", "name": "initialReward_", "type": "uint256" }, { "internalType": "uint256", "name": "vestingPeriod_", "type": "uint256" }, { "internalType": "uint256", "name": "claimDeadline_", "type": "uint256" }, { "internalType": "address", "name": "admin_", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "AdminDrain", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "totalSoFar", "type": "uint256" }], "name": "Claim", "type": "event" },
        { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "claim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "claimDeadline", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "claimFor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "claimSoFar", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "initialReward", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "multiplier", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "putFund", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "reward", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "rewardForAccount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeUnclaimed", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "timeIsMoney", "outputs": [{ "internalType": "contract TimeIsMoneyI", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "token", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "unclaimed", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "unclaimedForAccount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "vestingPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "6101806040523480156200001257600080fd5b5060405162001728380380620017288339810160408190526200003591620001ab565b6001600055670de0b6b3a7640000841115620000985760405162461bcd60e51b815260206004820152601860248201527f496e697469616c2072657761726420746f6f206c61726765000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000f05760405162461bcd60e51b815260206004820152601560248201527f496e76616c69642061646d696e2061646472657373000000000000000000000060448201526064016200008f565b6001600160a01b038616620001485760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642072657761726420746f6b656e00000000000000000000000060448201526064016200008f565b6001600160601b0319606087811b821660805288901b1660a05260c085905260e08490526200018084670de0b6b3a764000062000226565b61010052610120929092526101405260601b6001600160601b03191661016052506200026392505050565b600080600080600080600060e0888a031215620001c6578283fd5b8751620001d3816200024a565b6020890151909750620001e6816200024a565b8096505060408801519450606088015193506080880151925060a0880151915060c088015162000216816200024a565b8091505092959891949750929550565b6000828210156200024557634e487b7160e01b81526011600452602481fd5b500390565b6001600160a01b03811681146200026057600080fd5b50565b60805160601c60a05160601c60c05160e0516101005161012051610140516101605160601c6113e6620003426000396000818161028b015281816102de0152818161056201526107fb0152600081816101ad015281816105ed01526106750152600081816101e401528181610b080152610b60015260008181610b320152610b8501526000818161021e0152610ad701526000818161011f0152610bd0015260008181610161015281816109840152610c560152600081816102ba0152818161039a0152818161072e015281816107d90152610dc901526113e66000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063828fd19d11610097578063eca679c311610066578063eca679c314610273578063f851a44014610286578063fbad76cb146102ad578063fc0c546a146102b557600080fd5b8063828fd19d14610206578063abee967c14610219578063ddeae03314610240578063e073bb4f1461025357600080fd5b80633ba86c44116100d35780633ba86c44146101a85780634e71d92d146101cf578063669416b8146101d75780637313ee5a146101df57600080fd5b80630d890369146101055780631b3ed7221461011a578063228cb733146101545780632b23c16e1461015c575b600080fd5b6101186101133660046111e2565b6102dc565b005b6101417f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6101416103c6565b6101837f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161014b565b6101417f000000000000000000000000000000000000000000000000000000000000000081565b6101186103d6565b610141610458565b6101417f000000000000000000000000000000000000000000000000000000000000000081565b6101416102143660046111c8565b61047d565b6101417f000000000000000000000000000000000000000000000000000000000000000081565b61011861024e3660046111c8565b61048e565b6101416102613660046111c8565b60016020526000908152604090205481565b6101416102813660046111c8565b610511565b6101837f000000000000000000000000000000000000000000000000000000000000000081565b61011861054a565b6101837f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314610380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f742066726f6d2061646d696e00000000000000000000000000000000000060448201526064015b60405180910390fd5b6103c273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016833084610856565b5050565b60006103d133610938565b905090565b60026000541415610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610377565b600260005561045133610cef565b6001600055565b33600081815260016020526040812054909161047390610938565b6103d1919061133e565b600061048882610938565b92915050565b600260005414156104fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610377565b600260005561050981610cef565b506001600055565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604081205461054083610938565b610488919061133e565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79207468652061646d696e2063616e20646f20746869732100000000006044820152606401610377565b60007f000000000000000000000000000000000000000000000000000000000000000011610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f20636c61696d20646561646c696e65207365742e000000000000000000006044820152606401610377565b7f00000000000000000000000000000000000000000000000000000000000000004210156106fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4974277320746f6f206561726c7920746f20646f20746869732e0000000000006044820152606401610377565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561078557600080fd5b505afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd919061122b565b905061082073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610e46565b6040518181527f146bbc9b753597a27f70129b547228bac3f0a1fd36ee128a15367d259ab427149060200160405180910390a150565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109329085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ea1565b50505050565b6040517f34265c4800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091829182917f0000000000000000000000000000000000000000000000000000000000000000909116906334265c489060240160206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a00919061122b565b905060008111610a6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f596f7520617265206e6f74206120706172746974696f6e65722e0000000000006044820152606401610377565b804211610ad5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5265776172647320686173206e6f742073746172746564207965742e000000006044820152606401610377565b7f000000000000000000000000000000000000000000000000000000000000000091506000610b04824261133e565b90507f00000000000000000000000000000000000000000000000000000000000000008110610b5e57610b577f0000000000000000000000000000000000000000000000000000000000000000846112b0565b9250610bc0565b7f0000000000000000000000000000000000000000000000000000000000000000610ba9827f0000000000000000000000000000000000000000000000000000000000000000611301565b610bb391906112c8565b610bbd90846112b0565b92505b6000670de0b6b3a7640000610bf57f000000000000000000000000000000000000000000000000000000000000000086611301565b610bff91906112c8565b6040517f57344e6f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152919250600091670de0b6b3a76400009184917f000000000000000000000000000000000000000000000000000000000000000016906357344e6f9060240160206040518083038186803b158015610c9857600080fd5b505afa158015610cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd0919061122b565b610cda9190611301565b610ce491906112c8565b979650505050505050565b6000610cfa82610938565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081205491925090610d2e908361133e565b905060008111610d9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f596f752068617665206e6f7468696e6720746f20636c61696d210000000000006044820152606401610377565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600160205260409020839055610df0907f0000000000000000000000000000000000000000000000000000000000000000168483610e46565b604080518281526020810184905273ffffffffffffffffffffffffffffffffffffffff8516917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7910160405180910390a2505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610e9c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016108b0565b505050565b6000610f03826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610fad9092919063ffffffff16565b805190915015610e9c5780806020019051810190610f21919061120b565b610e9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610377565b6060610fbc8484600085610fc6565b90505b9392505050565b606082471015611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610377565b73ffffffffffffffffffffffffffffffffffffffff85163b6110d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610377565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110ff9190611243565b60006040518083038185875af1925050503d806000811461113c576040519150601f19603f3d011682016040523d82523d6000602084013e611141565b606091505b5091509150610ce48282866060831561115b575081610fbf565b82511561116b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610377919061125f565b803573ffffffffffffffffffffffffffffffffffffffff811681146111c357600080fd5b919050565b6000602082840312156111d9578081fd5b610fbf8261119f565b600080604083850312156111f4578081fd5b6111fd8361119f565b946020939093013593505050565b60006020828403121561121c578081fd5b81518015158114610fbf578182fd5b60006020828403121561123c578081fd5b5051919050565b60008251611255818460208701611355565b9190910192915050565b602081526000825180602084015261127e816040850160208701611355565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156112c3576112c3611381565b500190565b6000826112fc577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561133957611339611381565b500290565b60008282101561135057611350611381565b500390565b60005b83811015611370578181015183820152602001611358565b838111156109325750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220ff3ed5ebd018521381881ebded5cc125de897128b1250079a65fc7cf05468c3664736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/Rewards.js
var require_Rewards = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/Rewards.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Rewards = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Rewards_json_1 = __importDefault(require_Rewards_json());
    var Rewards = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, Rewards_json_1.default.abi, Rewards_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.timeIsMoney, params.token, eth_wallet_1.Utils.toString(params.multiplier), eth_wallet_1.Utils.toString(params.initialReward), eth_wallet_1.Utils.toString(params.vestingPeriod), eth_wallet_1.Utils.toString(params.claimDeadline), params.admin]);
      }
      parseAdminDrainEvent(receipt) {
        return this.parseEvents(receipt, "AdminDrain").map((e) => this.decodeAdminDrainEvent(e));
      }
      decodeAdminDrainEvent(event) {
        let result = event.data;
        return {
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseClaimEvent(receipt) {
        return this.parseEvents(receipt, "Claim").map((e) => this.decodeClaimEvent(e));
      }
      decodeClaimEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          totalSoFar: new eth_wallet_1.BigNumber(result.totalSoFar),
          _event: event
        };
      }
      assign() {
        let admin_call = async () => {
          let result = await this.call("admin");
          return result;
        };
        this.admin = admin_call;
        let claimDeadline_call = async () => {
          let result = await this.call("claimDeadline");
          return new eth_wallet_1.BigNumber(result);
        };
        this.claimDeadline = claimDeadline_call;
        let claimSoFar_call = async (param1) => {
          let result = await this.call("claimSoFar", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.claimSoFar = claimSoFar_call;
        let initialReward_call = async () => {
          let result = await this.call("initialReward");
          return new eth_wallet_1.BigNumber(result);
        };
        this.initialReward = initialReward_call;
        let multiplier_call = async () => {
          let result = await this.call("multiplier");
          return new eth_wallet_1.BigNumber(result);
        };
        this.multiplier = multiplier_call;
        let reward_call = async () => {
          let result = await this.call("reward");
          return new eth_wallet_1.BigNumber(result);
        };
        this.reward = reward_call;
        let rewardForAccount_call = async (account) => {
          let result = await this.call("rewardForAccount", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.rewardForAccount = rewardForAccount_call;
        let timeIsMoney_call = async () => {
          let result = await this.call("timeIsMoney");
          return result;
        };
        this.timeIsMoney = timeIsMoney_call;
        let token_call = async () => {
          let result = await this.call("token");
          return result;
        };
        this.token = token_call;
        let unclaimed_call = async () => {
          let result = await this.call("unclaimed");
          return new eth_wallet_1.BigNumber(result);
        };
        this.unclaimed = unclaimed_call;
        let unclaimedForAccount_call = async (account) => {
          let result = await this.call("unclaimedForAccount", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.unclaimedForAccount = unclaimedForAccount_call;
        let vestingPeriod_call = async () => {
          let result = await this.call("vestingPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.vestingPeriod = vestingPeriod_call;
        let claim_send = async () => {
          let result = await this.send("claim");
          return result;
        };
        let claim_call = async () => {
          let result = await this.call("claim");
          return;
        };
        this.claim = Object.assign(claim_send, {
          call: claim_call
        });
        let claimFor_send = async (account) => {
          let result = await this.send("claimFor", [account]);
          return result;
        };
        let claimFor_call = async (account) => {
          let result = await this.call("claimFor", [account]);
          return;
        };
        this.claimFor = Object.assign(claimFor_send, {
          call: claimFor_call
        });
        let putFundParams = (params) => [params.from, eth_wallet_1.Utils.toString(params.amount)];
        let putFund_send = async (params) => {
          let result = await this.send("putFund", putFundParams(params));
          return result;
        };
        let putFund_call = async (params) => {
          let result = await this.call("putFund", putFundParams(params));
          return;
        };
        this.putFund = Object.assign(putFund_send, {
          call: putFund_call
        });
        let takeUnclaimed_send = async () => {
          let result = await this.send("takeUnclaimed");
          return result;
        };
        let takeUnclaimed_call = async () => {
          let result = await this.call("takeUnclaimed");
          return;
        };
        this.takeUnclaimed = Object.assign(takeUnclaimed_send, {
          call: takeUnclaimed_call
        });
      }
    };
    exports.Rewards = Rewards;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/RewardsCommonStartDate.json.js
var require_RewardsCommonStartDate_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/RewardsCommonStartDate.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract TimeIsMoneyI", "name": "timeIsMoney_", "type": "address" }, { "internalType": "contract IERC20", "name": "token_", "type": "address" }, { "internalType": "uint256", "name": "multiplier_", "type": "uint256" }, { "internalType": "uint256", "name": "initialReward_", "type": "uint256" }, { "internalType": "uint256", "name": "vestingStartDate_", "type": "uint256" }, { "internalType": "uint256", "name": "vestingPeriod_", "type": "uint256" }, { "internalType": "uint256", "name": "claimDeadline_", "type": "uint256" }, { "internalType": "address", "name": "admin_", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "AdminDrain", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "totalSoFar", "type": "uint256" }], "name": "Claim", "type": "event" },
        { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "claim", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "claimDeadline", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "claimFor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "claimSoFar", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "initialReward", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "multiplier", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "putFund", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "reward", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "rewardForAccount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeUnclaimed", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "timeIsMoney", "outputs": [{ "internalType": "contract TimeIsMoneyI", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "token", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "unclaimed", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "unclaimedForAccount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "vestingPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "vestingStartDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "6101a06040523480156200001257600080fd5b50604051620018b5380380620018b58339810160408190526200003591620002f9565b6001600055670de0b6b3a7640000851115620000985760405162461bcd60e51b815260206004820152601860248201527f496e697469616c2072657761726420746f6f206c61726765000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000f05760405162461bcd60e51b815260206004820152601560248201527f496e76616c69642061646d696e2061646472657373000000000000000000000060448201526064016200008f565b6001600160a01b038716620001485760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642072657761726420746f6b656e00000000000000000000000060448201526064016200008f565b876001600160a01b031663ed6d0c5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018257600080fd5b505afa15801562000197573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001bd91906200037e565b886001600160a01b031663302ef3f36040518163ffffffff1660e01b815260040160206040518083038186803b158015620001f757600080fd5b505afa1580156200020c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023291906200037e565b6200023e919062000397565b8410156200028f5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642076657374696e67207374617274206461746500000000000060448201526064016200008f565b6001600160601b0319606088811b821660805289901b1660a05260c086905260e0859052620002c785670de0b6b3a7640000620003b2565b6101005261012093909352610140919091526101605260601b6001600160601b0319166101805250620003fb92505050565b600080600080600080600080610100898b03121562000316578384fd5b88516200032381620003e2565b60208a01519098506200033681620003e2565b8097505060408901519550606089015194506080890151935060a0890151925060c0890151915060e08901516200036d81620003e2565b809150509295985092959890939650565b60006020828403121562000390578081fd5b5051919050565b60008219821115620003ad57620003ad620003cc565b500190565b600082821015620003c757620003c7620003cc565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114620003f857600080fd5b50565b60805160601c60a05160601c60c05160e051610100516101205161014051610160516101805160601c6113c9620004ec600039600081816102cd01528181610505015261079e0152600081816101c801528181610590015261061801526000818161022601528181610aeb0152610b430152600081816101f701528181610a110152610ac2015260008181610b150152610b680152600081816102600152610a9a01526000818161013a0152610bb301526000818161017c015281816109270152610c390152600081816102fc01528181610338015281816106d10152818161077c0152610dac01526113c96000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80637313ee5a116100b2578063e073bb4f11610081578063f851a44011610066578063f851a440146102c8578063fbad76cb146102ef578063fc0c546a146102f757600080fd5b8063e073bb4f14610295578063eca679c3146102b557600080fd5b80637313ee5a14610221578063828fd19d14610248578063abee967c1461025b578063ddeae0331461028257600080fd5b80633ba86c44116100ee5780633ba86c44146101c35780634e71d92d146101ea578063579acacc146101f2578063669416b81461021957600080fd5b80630d890369146101205780631b3ed72214610135578063228cb7331461016f5780632b23c16e14610177575b600080fd5b61013361012e3660046111c5565b61031e565b005b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61015c610364565b61019e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610166565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b610133610374565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c6103fb565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c6102563660046111ab565b610420565b61015c7f000000000000000000000000000000000000000000000000000000000000000081565b6101336102903660046111ab565b610431565b61015c6102a33660046111ab565b60016020526000908152604090205481565b61015c6102c33660046111ab565b6104b4565b61019e7f000000000000000000000000000000000000000000000000000000000000000081565b6101336104ed565b61019e7f000000000000000000000000000000000000000000000000000000000000000081565b61036073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168330846107f9565b5050565b600061036f336108db565b905090565b600260005414156103e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556103f433610cd2565b6001600055565b336000818152600160205260408120549091610416906108db565b61036f9190611321565b600061042b826108db565b92915050565b6002600054141561049e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103dd565b60026000556104ac81610cd2565b506001600055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600160205260408120546104e3836108db565b61042b9190611321565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461058c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f6e6c79207468652061646d696e2063616e20646f207468697321000000000060448201526064016103dd565b60007f000000000000000000000000000000000000000000000000000000000000000011610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f20636c61696d20646561646c696e65207365742e0000000000000000000060448201526064016103dd565b7f00000000000000000000000000000000000000000000000000000000000000004210156106a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4974277320746f6f206561726c7920746f20646f20746869732e00000000000060448201526064016103dd565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561072857600080fd5b505afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610760919061120e565b90506107c373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610e29565b6040518181527f146bbc9b753597a27f70129b547228bac3f0a1fd36ee128a15367d259ab427149060200160405180910390a150565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526108d59085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610e84565b50505050565b6040517f34265c4800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152600091829182917f0000000000000000000000000000000000000000000000000000000000000000909116906334265c489060240160206040518083038186803b15801561096b57600080fd5b505afa15801561097f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a3919061120e565b905060008111610a0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f596f7520617265206e6f74206120706172746974696f6e65722e00000000000060448201526064016103dd565b7f00000000000000000000000000000000000000000000000000000000000000004211610a98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f5265776172647320686173206e6f742073746172746564207965742e0000000060448201526064016103dd565b7f000000000000000000000000000000000000000000000000000000000000000091506000610ae77f000000000000000000000000000000000000000000000000000000000000000042611321565b90507f00000000000000000000000000000000000000000000000000000000000000008110610b4157610b3a7f000000000000000000000000000000000000000000000000000000000000000084611293565b9250610ba3565b7f0000000000000000000000000000000000000000000000000000000000000000610b8c827f00000000000000000000000000000000000000000000000000000000000000006112e4565b610b9691906112ab565b610ba09084611293565b92505b6000670de0b6b3a7640000610bd87f0000000000000000000000000000000000000000000000000000000000000000866112e4565b610be291906112ab565b6040517f57344e6f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152919250600091670de0b6b3a76400009184917f000000000000000000000000000000000000000000000000000000000000000016906357344e6f9060240160206040518083038186803b158015610c7b57600080fd5b505afa158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb3919061120e565b610cbd91906112e4565b610cc791906112ab565b979650505050505050565b6000610cdd826108db565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604081205491925090610d119083611321565b905060008111610d7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f596f752068617665206e6f7468696e6720746f20636c61696d2100000000000060448201526064016103dd565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600160205260409020839055610dd3907f0000000000000000000000000000000000000000000000000000000000000000168483610e29565b604080518281526020810184905273ffffffffffffffffffffffffffffffffffffffff8516917f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf7910160405180910390a2505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610e7f9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610853565b505050565b6000610ee6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f909092919063ffffffff16565b805190915015610e7f5780806020019051810190610f0491906111ee565b610e7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103dd565b6060610f9f8484600085610fa9565b90505b9392505050565b60608247101561103b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103dd565b73ffffffffffffffffffffffffffffffffffffffff85163b6110b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103dd565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516110e29190611226565b60006040518083038185875af1925050503d806000811461111f576040519150601f19603f3d011682016040523d82523d6000602084013e611124565b606091505b5091509150610cc78282866060831561113e575081610fa2565b82511561114e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd9190611242565b803573ffffffffffffffffffffffffffffffffffffffff811681146111a657600080fd5b919050565b6000602082840312156111bc578081fd5b610fa282611182565b600080604083850312156111d7578081fd5b6111e083611182565b946020939093013593505050565b6000602082840312156111ff578081fd5b81518015158114610fa2578182fd5b60006020828403121561121f578081fd5b5051919050565b60008251611238818460208701611338565b9190910192915050565b6020815260008251806020840152611261816040850160208701611338565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156112a6576112a6611364565b500190565b6000826112df577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561131c5761131c611364565b500290565b60008282101561133357611333611364565b500390565b60005b8381101561135357818101518382015260200161133b565b838111156108d55750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220123bc438f07092d9d350677e4d8109af289f13d9266926fb30ec8d42df37e1dc64736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/RewardsCommonStartDate.js
var require_RewardsCommonStartDate = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/RewardsCommonStartDate.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RewardsCommonStartDate = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var RewardsCommonStartDate_json_1 = __importDefault(require_RewardsCommonStartDate_json());
    var RewardsCommonStartDate = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, RewardsCommonStartDate_json_1.default.abi, RewardsCommonStartDate_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.timeIsMoney, params.token, eth_wallet_1.Utils.toString(params.multiplier), eth_wallet_1.Utils.toString(params.initialReward), eth_wallet_1.Utils.toString(params.vestingStartDate), eth_wallet_1.Utils.toString(params.vestingPeriod), eth_wallet_1.Utils.toString(params.claimDeadline), params.admin]);
      }
      parseAdminDrainEvent(receipt) {
        return this.parseEvents(receipt, "AdminDrain").map((e) => this.decodeAdminDrainEvent(e));
      }
      decodeAdminDrainEvent(event) {
        let result = event.data;
        return {
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseClaimEvent(receipt) {
        return this.parseEvents(receipt, "Claim").map((e) => this.decodeClaimEvent(e));
      }
      decodeClaimEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          totalSoFar: new eth_wallet_1.BigNumber(result.totalSoFar),
          _event: event
        };
      }
      assign() {
        let admin_call = async () => {
          let result = await this.call("admin");
          return result;
        };
        this.admin = admin_call;
        let claimDeadline_call = async () => {
          let result = await this.call("claimDeadline");
          return new eth_wallet_1.BigNumber(result);
        };
        this.claimDeadline = claimDeadline_call;
        let claimSoFar_call = async (param1) => {
          let result = await this.call("claimSoFar", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.claimSoFar = claimSoFar_call;
        let initialReward_call = async () => {
          let result = await this.call("initialReward");
          return new eth_wallet_1.BigNumber(result);
        };
        this.initialReward = initialReward_call;
        let multiplier_call = async () => {
          let result = await this.call("multiplier");
          return new eth_wallet_1.BigNumber(result);
        };
        this.multiplier = multiplier_call;
        let reward_call = async () => {
          let result = await this.call("reward");
          return new eth_wallet_1.BigNumber(result);
        };
        this.reward = reward_call;
        let rewardForAccount_call = async (account) => {
          let result = await this.call("rewardForAccount", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.rewardForAccount = rewardForAccount_call;
        let timeIsMoney_call = async () => {
          let result = await this.call("timeIsMoney");
          return result;
        };
        this.timeIsMoney = timeIsMoney_call;
        let token_call = async () => {
          let result = await this.call("token");
          return result;
        };
        this.token = token_call;
        let unclaimed_call = async () => {
          let result = await this.call("unclaimed");
          return new eth_wallet_1.BigNumber(result);
        };
        this.unclaimed = unclaimed_call;
        let unclaimedForAccount_call = async (account) => {
          let result = await this.call("unclaimedForAccount", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.unclaimedForAccount = unclaimedForAccount_call;
        let vestingPeriod_call = async () => {
          let result = await this.call("vestingPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.vestingPeriod = vestingPeriod_call;
        let vestingStartDate_call = async () => {
          let result = await this.call("vestingStartDate");
          return new eth_wallet_1.BigNumber(result);
        };
        this.vestingStartDate = vestingStartDate_call;
        let claim_send = async () => {
          let result = await this.send("claim");
          return result;
        };
        let claim_call = async () => {
          let result = await this.call("claim");
          return;
        };
        this.claim = Object.assign(claim_send, {
          call: claim_call
        });
        let claimFor_send = async (account) => {
          let result = await this.send("claimFor", [account]);
          return result;
        };
        let claimFor_call = async (account) => {
          let result = await this.call("claimFor", [account]);
          return;
        };
        this.claimFor = Object.assign(claimFor_send, {
          call: claimFor_call
        });
        let putFundParams = (params) => [params.from, eth_wallet_1.Utils.toString(params.amount)];
        let putFund_send = async (params) => {
          let result = await this.send("putFund", putFundParams(params));
          return result;
        };
        let putFund_call = async (params) => {
          let result = await this.call("putFund", putFundParams(params));
          return;
        };
        this.putFund = Object.assign(putFund_send, {
          call: putFund_call
        });
        let takeUnclaimed_send = async () => {
          let result = await this.send("takeUnclaimed");
          return result;
        };
        let takeUnclaimed_call = async () => {
          let result = await this.call("takeUnclaimed");
          return;
        };
        this.takeUnclaimed = Object.assign(takeUnclaimed_send, {
          call: takeUnclaimed_call
        });
      }
    };
    exports.RewardsCommonStartDate = RewardsCommonStartDate;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoney.json.js
var require_TimeIsMoney_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoney.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "address", "name": "token_", "type": "address" }, { "internalType": "uint256", "name": "maximumTotalLock_", "type": "uint256" }, { "internalType": "uint256", "name": "minimumLockTime_", "type": "uint256" }, { "internalType": "uint256", "name": "startOfEntryPeriod_", "type": "uint256" }, { "internalType": "uint256", "name": "endOfEntryPeriod_", "type": "uint256" }, { "internalType": "uint256", "name": "perAddressCap_", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Deposit", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "heldLongEnough", "type": "bool" }], "name": "Withdrawal", "type": "event" },
        { "inputs": [], "name": "endOfEntryPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "getCredit", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "lock", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lockAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "maximumTotalLock", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumLockTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "perAddressCap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "readyToWithdraw", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "releaseTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "startOfEntryPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "token", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalLocked", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bool", "name": "allowWithdrawalBeforeRelease", "type": "bool" }], "name": "withdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "withdrawn", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "61014060405234801561001157600080fd5b5060405161133738038061133783398101604081905261003091610064565b600160005560609590951b6001600160601b03191660805260a09390935260c09190915260e05261010052610120526100c1565b60008060008060008060c0878903121561007c578182fd5b86516001600160a01b0381168114610092578283fd5b6020880151604089015160608a015160808b015160a0909b0151939c929b509099909850965090945092505050565b60805160601c60a05160c05160e05161010051610120516111ec61014b60003960008181610171015261098901526000818161011c01526107f9015260008181610246015261076f01526000818161026d0152610b6401526000818161020c0152610a1a015260008181610294015281816105d50152818161067a0152610b0d01526111ec6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806395bc3bd01161008c578063dd46706411610066578063dd4670641461022e578063e76a5de014610241578063ed6d0c5b14610268578063fc0c546a1461028f57600080fd5b806395bc3bd0146101d2578063a810a54c146101f2578063cbc2efbe1461020757600080fd5b806347dd5172116100c857806347dd51721461016c578063568914121461019357806357344e6f1461019c5780636ef61092146101af57600080fd5b80630a469e7a146100ef578063302ef3f31461011757806334265c481461014c575b600080fd5b6101026100fd36600461102a565b6102db565b60405190151581526020015b60405180910390f35b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010e565b61013e61015a36600461102a565b60036020526000908152604090205481565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e60015481565b61013e6101aa36600461102a565b61036c565b6101026101bd36600461102a565b60046020526000908152604090205460ff1681565b61013e6101e036600461102a565b60026020526000908152604090205481565b61020561020036600461105e565b6103ca565b005b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61020561023c366004611096565b6106fb565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b61013e7f000000000000000000000000000000000000000000000000000000000000000081565b6102b67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205415801590610334575073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020544210155b8015610366575073ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff16155b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120544210156103a157506000919050565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b6002600054141561043c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081553381526004602052604090205460ff1615801561046e57503360009081526002602052604090205415155b6104d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6f20746f6b656e7320617661696c61626c6520746f2077697468647261772e6044820152606401610433565b3360009081526002602090815260408083205460039092529091205442101561063c5781610584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f596f757220746f6b656e732077657265206e6f74206c6f636b6564206c6f6e6760448201527f20656e6f756768210000000000000000000000000000000000000000000000006064820152608401610433565b33600090815260026020908152604080832083905560039091528120819055600180548392906105b5908490611133565b909155506105fc905073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163383610bdf565b604080518281526000602082015233917f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a910160405180910390a26106f2565b33600081815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556106b6907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169083610bdf565b604080518281526001602082015233917f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a910160405180910390a25b50506001600055565b60026000541415610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610433565b60026000557f00000000000000000000000000000000000000000000000000000000000000004210156107f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4974277320746f6f206561726c7920746f20646f2074686973210000000000006044820152606401610433565b7f00000000000000000000000000000000000000000000000000000000000000004210610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f536f7272792c20796f752061746520746f6f206c6174652100000000000000006044820152606401610433565b336000908152600260205260409020541561091d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f596f75206861766520616c72656164792070617274696369706174656420696e60448201527f20746869732e00000000000000000000000000000000000000000000000000006064820152608401610433565b60008111610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f596f752063616e6e6f74206c6f636b206e6f7468696e672100000000000000006044820152606401610433565b7f0000000000000000000000000000000000000000000000000000000000000000811115610a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f596f752063616e6e6f74206c6f636b206f76657220746865206c696d697421006044820152606401610433565b600154610a3e907f0000000000000000000000000000000000000000000000000000000000000000611133565b811115610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604760248201527f54686973206465706f73697420776f756c64206361757365206f757220746f7460448201527f616c206c6f636b656420616d6f756e7420746f2065786365656420746865206d60648201527f6178696d756d2e00000000000000000000000000000000000000000000000000608482015260a401610433565b610b3573ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610cb8565b33600090815260026020526040812082905560018054839290610b5990849061111b565b90915550610b8990507f00000000000000000000000000000000000000000000000000000000000000004261111b565b33600081815260036020526040908190209290925590517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90610bcf9084815260200190565b60405180910390a2506001600055565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610cb39084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610d1c565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610d169085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610c31565b50505050565b6000610d7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e289092919063ffffffff16565b805190915015610cb35780806020019051810190610d9c919061107a565b610cb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610433565b6060610e378484600085610e41565b90505b9392505050565b606082471015610ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610433565b73ffffffffffffffffffffffffffffffffffffffff85163b610f51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610433565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f7a91906110ae565b60006040518083038185875af1925050503d8060008114610fb7576040519150601f19603f3d011682016040523d82523d6000602084013e610fbc565b606091505b5091509150610fcc828286610fd7565b979650505050505050565b60608315610fe6575081610e3a565b825115610ff65782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043391906110ca565b60006020828403121561103b578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610e3a578182fd5b60006020828403121561106f578081fd5b8135610e3a816111a5565b60006020828403121561108b578081fd5b8151610e3a816111a5565b6000602082840312156110a7578081fd5b5035919050565b600082516110c081846020870161114a565b9190910192915050565b60208152600082518060208401526110e981604085016020870161114a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561112e5761112e611176565b500190565b60008282101561114557611145611176565b500390565b60005b8381101561116557818101518382015260200161114d565b83811115610d165750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80151581146111b357600080fd5b5056fea2646970667358221220d97e87a8c428325cadb382f9267cb2c1c82b1c1a7411090c012660530f62700664736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoney.js
var require_TimeIsMoney = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoney.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimeIsMoney = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TimeIsMoney_json_1 = __importDefault(require_TimeIsMoney_json());
    var TimeIsMoney = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TimeIsMoney_json_1.default.abi, TimeIsMoney_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.token, eth_wallet_1.Utils.toString(params.maximumTotalLock), eth_wallet_1.Utils.toString(params.minimumLockTime), eth_wallet_1.Utils.toString(params.startOfEntryPeriod), eth_wallet_1.Utils.toString(params.endOfEntryPeriod), eth_wallet_1.Utils.toString(params.perAddressCap)]);
      }
      parseDepositEvent(receipt) {
        return this.parseEvents(receipt, "Deposit").map((e) => this.decodeDepositEvent(e));
      }
      decodeDepositEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseWithdrawalEvent(receipt) {
        return this.parseEvents(receipt, "Withdrawal").map((e) => this.decodeWithdrawalEvent(e));
      }
      decodeWithdrawalEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          heldLongEnough: result.heldLongEnough,
          _event: event
        };
      }
      assign() {
        let endOfEntryPeriod_call = async () => {
          let result = await this.call("endOfEntryPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.endOfEntryPeriod = endOfEntryPeriod_call;
        let getCredit_call = async (account) => {
          let result = await this.call("getCredit", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getCredit = getCredit_call;
        let lockAmount_call = async (param1) => {
          let result = await this.call("lockAmount", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lockAmount = lockAmount_call;
        let maximumTotalLock_call = async () => {
          let result = await this.call("maximumTotalLock");
          return new eth_wallet_1.BigNumber(result);
        };
        this.maximumTotalLock = maximumTotalLock_call;
        let minimumLockTime_call = async () => {
          let result = await this.call("minimumLockTime");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumLockTime = minimumLockTime_call;
        let perAddressCap_call = async () => {
          let result = await this.call("perAddressCap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.perAddressCap = perAddressCap_call;
        let readyToWithdraw_call = async (account) => {
          let result = await this.call("readyToWithdraw", [account]);
          return result;
        };
        this.readyToWithdraw = readyToWithdraw_call;
        let releaseTime_call = async (param1) => {
          let result = await this.call("releaseTime", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.releaseTime = releaseTime_call;
        let startOfEntryPeriod_call = async () => {
          let result = await this.call("startOfEntryPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.startOfEntryPeriod = startOfEntryPeriod_call;
        let token_call = async () => {
          let result = await this.call("token");
          return result;
        };
        this.token = token_call;
        let totalLocked_call = async () => {
          let result = await this.call("totalLocked");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalLocked = totalLocked_call;
        let withdrawn_call = async (param1) => {
          let result = await this.call("withdrawn", [param1]);
          return result;
        };
        this.withdrawn = withdrawn_call;
        let lock_send = async (amount) => {
          let result = await this.send("lock", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let lock_call = async (amount) => {
          let result = await this.call("lock", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.lock = Object.assign(lock_send, {
          call: lock_call
        });
        let withdraw_send = async (allowWithdrawalBeforeRelease) => {
          let result = await this.send("withdraw", [allowWithdrawalBeforeRelease]);
          return result;
        };
        let withdraw_call = async (allowWithdrawalBeforeRelease) => {
          let result = await this.call("withdraw", [allowWithdrawalBeforeRelease]);
          return;
        };
        this.withdraw = Object.assign(withdraw_send, {
          call: withdraw_call
        });
      }
    };
    exports.TimeIsMoney = TimeIsMoney;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoneyEther.json.js
var require_TimeIsMoneyEther_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoneyEther.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "uint256", "name": "maximumTotalLock_", "type": "uint256" }, { "internalType": "uint256", "name": "minimumLockTime_", "type": "uint256" }, { "internalType": "uint256", "name": "startOfEntryPeriod_", "type": "uint256" }, { "internalType": "uint256", "name": "endOfEntryPeriod_", "type": "uint256" }, { "internalType": "uint256", "name": "perAddressCap_", "type": "uint256" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Deposit", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "heldLongEnough", "type": "bool" }], "name": "Withdrawal", "type": "event" },
        { "inputs": [], "name": "endOfEntryPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "getCredit", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "lock", "outputs": [], "stateMutability": "payable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lockAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "maximumTotalLock", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumLockTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "perAddressCap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "readyToWithdraw", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "releaseTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "startOfEntryPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalLocked", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bool", "name": "allowWithdrawalBeforeRelease", "type": "bool" }], "name": "withdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "withdrawn", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "61012060405234801561001157600080fd5b50604051610e9b380380610e9b83398101604081905261003091610050565b600160005560809490945260a09290925260c05260e0526101005261008f565b600080600080600060a08688031215610067578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60805160a05160c05160e05161010051610da56100f66000396000818161018d015261095a01526000818161011e01526107ca0152600081816102aa01526107400152600081816102de0152610af301526000818161027601526109eb0152610da56000f3fe6080604052600436106100d25760003560e01c80636ef610921161007f578063cbc2efbe11610059578063cbc2efbe14610264578063e76a5de014610298578063ed6d0c5b146102cc578063f83d08ba1461030057600080fd5b80636ef61092146101e557806395bc3bd014610215578063a810a54c1461024257600080fd5b806347dd5172116100b057806347dd51721461017b57806356891412146101af57806357344e6f146101c557600080fd5b80630a469e7a146100d7578063302ef3f31461010c57806334265c481461014e575b600080fd5b3480156100e357600080fd5b506100f76100f2366004610c7d565b610308565b60405190151581526020015b60405180910390f35b34801561011857600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b34801561015a57600080fd5b50610140610169366004610c7d565b60036020526000908152604090205481565b34801561018757600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b3480156101bb57600080fd5b5061014060015481565b3480156101d157600080fd5b506101406101e0366004610c7d565b610399565b3480156101f157600080fd5b506100f7610200366004610c7d565b60046020526000908152604090205460ff1681565b34801561022157600080fd5b50610140610230366004610c7d565b60026020526000908152604090205481565b34801561024e57600080fd5b5061026261025d366004610cb8565b6103f7565b005b34801561027057600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a457600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d857600080fd5b506101407f000000000000000000000000000000000000000000000000000000000000000081565b6102626106cb565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205415801590610361575073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260409020544210155b8015610393575073ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff16155b92915050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120544210156103ce57506000919050565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b60026000541415610469576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260009081553381526004602052604090205460ff1615801561049b57503360009081526002602052604090205415155b610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6f2065746865727320617661696c61626c6520746f2077697468647261772e6044820152606401610460565b3360009081526002602090815260408083205460039092529091205442101561063257816105b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f596f7572206574686572732077657265206e6f74206c6f636b6564206c6f6e6760448201527f20656e6f756768210000000000000000000000000000000000000000000000006064820152608401610460565b33600090815260026020908152604080832083905560039091528120819055600180548392906105e2908490610d29565b909155506105f290503382610b6e565b604080518281526000602082015233917f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a910160405180910390a26106c2565b33600081815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556106749082610b6e565b336000818152600260209081526040918290205482519081526001918101919091527f06e0c61e7e9f4912ee1f3ce060b59207b98f9a232d711462af3166aeeed1250a910160405180910390a25b50506001600055565b60026000541415610738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610460565b6002600055347f00000000000000000000000000000000000000000000000000000000000000004210156107c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4974277320746f6f206561726c7920746f20646f2074686973210000000000006044820152606401610460565b7f00000000000000000000000000000000000000000000000000000000000000004210610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f536f7272792c20796f752061746520746f6f206c6174652100000000000000006044820152606401610460565b33600090815260026020526040902054156108ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f596f75206861766520616c72656164792070617274696369706174656420696e60448201527f20746869732e00000000000000000000000000000000000000000000000000006064820152608401610460565b60008111610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f596f752063616e6e6f74206c6f636b206e6f7468696e672100000000000000006044820152606401610460565b7f00000000000000000000000000000000000000000000000000000000000000008111156109e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f596f752063616e6e6f74206c6f636b206f76657220746865206c696d697421006044820152606401610460565b600154610a0f907f0000000000000000000000000000000000000000000000000000000000000000610d29565b811115610ac4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604760248201527f54686973206465706f73697420776f756c64206361757365206f757220746f7460448201527f616c206c6f636b656420616d6f756e7420746f2065786365656420746865206d60648201527f6178696d756d2e00000000000000000000000000000000000000000000000000608482015260a401610460565b33600090815260026020526040812082905560018054839290610ae8908490610d11565b90915550610b1890507f000000000000000000000000000000000000000000000000000000000000000042610d11565b33600081815260036020526040908190209290925590517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90610b5e9084815260200190565b60405180910390a2506001600055565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610ba59190610cd8565b60006040518083038185875af1925050503d8060008114610be2576040519150601f19603f3d011682016040523d82523d6000602084013e610be7565b606091505b5050905080610c78576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c454400000000000000000000000000000000000000000000000000000000006064820152608401610460565b505050565b600060208284031215610c8e578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610cb1578182fd5b9392505050565b600060208284031215610cc9578081fd5b81358015158114610cb1578182fd5b60008251815b81811015610cf85760208186018101518583015201610cde565b81811115610d065782828501525b509190910192915050565b60008219821115610d2457610d24610d40565b500190565b600082821015610d3b57610d3b610d40565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220d7246743a80fbbba5b2260eee4fb6ef67a0ecfffcc3249f9cf2a36774cca5ea564736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoneyEther.js
var require_TimeIsMoneyEther = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/TimeIsMoneyEther.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TimeIsMoneyEther = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TimeIsMoneyEther_json_1 = __importDefault(require_TimeIsMoneyEther_json());
    var TimeIsMoneyEther = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TimeIsMoneyEther_json_1.default.abi, TimeIsMoneyEther_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([eth_wallet_1.Utils.toString(params.maximumTotalLock), eth_wallet_1.Utils.toString(params.minimumLockTime), eth_wallet_1.Utils.toString(params.startOfEntryPeriod), eth_wallet_1.Utils.toString(params.endOfEntryPeriod), eth_wallet_1.Utils.toString(params.perAddressCap)]);
      }
      parseDepositEvent(receipt) {
        return this.parseEvents(receipt, "Deposit").map((e) => this.decodeDepositEvent(e));
      }
      decodeDepositEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseWithdrawalEvent(receipt) {
        return this.parseEvents(receipt, "Withdrawal").map((e) => this.decodeWithdrawalEvent(e));
      }
      decodeWithdrawalEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          heldLongEnough: result.heldLongEnough,
          _event: event
        };
      }
      assign() {
        let endOfEntryPeriod_call = async () => {
          let result = await this.call("endOfEntryPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.endOfEntryPeriod = endOfEntryPeriod_call;
        let getCredit_call = async (account) => {
          let result = await this.call("getCredit", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getCredit = getCredit_call;
        let lockAmount_call = async (param1) => {
          let result = await this.call("lockAmount", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lockAmount = lockAmount_call;
        let maximumTotalLock_call = async () => {
          let result = await this.call("maximumTotalLock");
          return new eth_wallet_1.BigNumber(result);
        };
        this.maximumTotalLock = maximumTotalLock_call;
        let minimumLockTime_call = async () => {
          let result = await this.call("minimumLockTime");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumLockTime = minimumLockTime_call;
        let perAddressCap_call = async () => {
          let result = await this.call("perAddressCap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.perAddressCap = perAddressCap_call;
        let readyToWithdraw_call = async (account) => {
          let result = await this.call("readyToWithdraw", [account]);
          return result;
        };
        this.readyToWithdraw = readyToWithdraw_call;
        let releaseTime_call = async (param1) => {
          let result = await this.call("releaseTime", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.releaseTime = releaseTime_call;
        let startOfEntryPeriod_call = async () => {
          let result = await this.call("startOfEntryPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.startOfEntryPeriod = startOfEntryPeriod_call;
        let totalLocked_call = async () => {
          let result = await this.call("totalLocked");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalLocked = totalLocked_call;
        let withdrawn_call = async (param1) => {
          let result = await this.call("withdrawn", [param1]);
          return result;
        };
        this.withdrawn = withdrawn_call;
        let lock_send = async (_value) => {
          let result = await this.send("lock", [], { value: _value });
          return result;
        };
        let lock_call = async (_value) => {
          let result = await this.call("lock", [], { value: _value });
          return;
        };
        this.lock = Object.assign(lock_send, {
          call: lock_call
        });
        let withdraw_send = async (allowWithdrawalBeforeRelease) => {
          let result = await this.send("withdraw", [allowWithdrawalBeforeRelease]);
          return result;
        };
        let withdraw_call = async (allowWithdrawalBeforeRelease) => {
          let result = await this.call("withdraw", [allowWithdrawalBeforeRelease]);
          return;
        };
        this.withdraw = Object.assign(withdraw_send, {
          call: withdraw_call
        });
      }
    };
    exports.TimeIsMoneyEther = TimeIsMoneyEther;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/test/FakeTimeIsMoney.json.js
var require_FakeTimeIsMoney_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/test/FakeTimeIsMoney.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract IERC20", "name": "token_", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Deposit", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "heldLongEnough", "type": "bool" }], "name": "Withdrawal", "type": "event" },
        { "inputs": [], "name": "amount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "endOfEntryPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "pure", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "getCredit", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "lock", "outputs": [], "stateMutability": "pure", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lockAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "maximumTotalLock", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumLockTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "pure", "type": "function" },
        { "inputs": [], "name": "perAddressCap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "readyToWithdraw", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "pure", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "releaseTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "pure", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount_", "type": "uint256" }], "name": "setAmount", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "startOfEntryPeriod", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "pure", "type": "function" },
        { "inputs": [], "name": "token", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalLocked", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "name": "withdraw", "outputs": [], "stateMutability": "pure", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "withdrawn", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "pure", "type": "function" }
      ],
      "bytecode": "60a060405234801561001057600080fd5b506040516103a63803806103a683398101604081905261002f91610050565b60601b6001600160601b031916608052678ac7230489e8000060005561007e565b600060208284031215610061578081fd5b81516001600160a01b0381168114610077578182fd5b9392505050565b60805160601c61030a61009c60003960006101b4015261030a6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806395bc3bd011610097578063dd46706411610066578063dd467064146101a1578063e76a5de014610143578063ed6d0c5b14610143578063fc0c546a146101af57600080fd5b806395bc3bd014610170578063a810a54c14610185578063aa8c217c14610198578063cbc2efbe1461016857600080fd5b806347dd5172116100d357806347dd517214610168578063568914121461016857806357344e6f146101705780636ef610921461010557600080fd5b80630a469e7a14610105578063271f88b41461012e578063302ef3f31461014357806334265c4814610154575b600080fd5b610119610113366004610261565b50600190565b60405190151581526020015b60405180910390f35b61014161013c3660046102bc565b600055565b005b60005b604051908152602001610125565b610146610162366004610261565b50600090565b600054610146565b61014661017e366004610261565b5060005490565b61014161019336600461029c565b6101fb565b61014660005481565b6101416101933660046102bc565b6101d67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610125565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4e6f7420737570706f72746564206f6e2046616b6554696d6549734d6f6e6579604482015260640160405180910390fd5b600060208284031215610272578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610295578182fd5b9392505050565b6000602082840312156102ad578081fd5b81358015158114610295578182fd5b6000602082840312156102cd578081fd5b503591905056fea2646970667358221220c7c48f7df02dc285c76f39bec35d44229b6683107277c589e6b18e73eb33a74a64736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/test/FakeTimeIsMoney.js
var require_FakeTimeIsMoney = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/test/FakeTimeIsMoney.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FakeTimeIsMoney = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var FakeTimeIsMoney_json_1 = __importDefault(require_FakeTimeIsMoney_json());
    var FakeTimeIsMoney = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, FakeTimeIsMoney_json_1.default.abi, FakeTimeIsMoney_json_1.default.bytecode);
        this.assign();
      }
      deploy(token) {
        return this.__deploy([token]);
      }
      parseDepositEvent(receipt) {
        return this.parseEvents(receipt, "Deposit").map((e) => this.decodeDepositEvent(e));
      }
      decodeDepositEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseWithdrawalEvent(receipt) {
        return this.parseEvents(receipt, "Withdrawal").map((e) => this.decodeWithdrawalEvent(e));
      }
      decodeWithdrawalEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          amount: new eth_wallet_1.BigNumber(result.amount),
          heldLongEnough: result.heldLongEnough,
          _event: event
        };
      }
      assign() {
        let amount_call = async () => {
          let result = await this.call("amount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.amount = amount_call;
        let endOfEntryPeriod_call = async () => {
          let result = await this.call("endOfEntryPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.endOfEntryPeriod = endOfEntryPeriod_call;
        let getCredit_call = async (param1) => {
          let result = await this.call("getCredit", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getCredit = getCredit_call;
        let lock_call = async (param1) => {
          let result = await this.call("lock", [eth_wallet_1.Utils.toString(param1)]);
          return;
        };
        this.lock = lock_call;
        let lockAmount_call = async (param1) => {
          let result = await this.call("lockAmount", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lockAmount = lockAmount_call;
        let maximumTotalLock_call = async () => {
          let result = await this.call("maximumTotalLock");
          return new eth_wallet_1.BigNumber(result);
        };
        this.maximumTotalLock = maximumTotalLock_call;
        let minimumLockTime_call = async () => {
          let result = await this.call("minimumLockTime");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumLockTime = minimumLockTime_call;
        let perAddressCap_call = async () => {
          let result = await this.call("perAddressCap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.perAddressCap = perAddressCap_call;
        let readyToWithdraw_call = async (param1) => {
          let result = await this.call("readyToWithdraw", [param1]);
          return result;
        };
        this.readyToWithdraw = readyToWithdraw_call;
        let releaseTime_call = async (param1) => {
          let result = await this.call("releaseTime", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.releaseTime = releaseTime_call;
        let startOfEntryPeriod_call = async () => {
          let result = await this.call("startOfEntryPeriod");
          return new eth_wallet_1.BigNumber(result);
        };
        this.startOfEntryPeriod = startOfEntryPeriod_call;
        let token_call = async () => {
          let result = await this.call("token");
          return result;
        };
        this.token = token_call;
        let totalLocked_call = async () => {
          let result = await this.call("totalLocked");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalLocked = totalLocked_call;
        let withdraw_call = async (param1) => {
          let result = await this.call("withdraw", [param1]);
          return;
        };
        this.withdraw = withdraw_call;
        let withdrawn_call = async (param1) => {
          let result = await this.call("withdrawn", [param1]);
          return result;
        };
        this.withdrawn = withdrawn_call;
        let setAmount_send = async (amount) => {
          let result = await this.send("setAmount", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let setAmount_call = async (amount) => {
          let result = await this.call("setAmount", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.setAmount = Object.assign(setAmount_send, {
          call: setAmount_call
        });
      }
    };
    exports.FakeTimeIsMoney = FakeTimeIsMoney;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/test/TestERC20.json.js
var require_TestERC20_json = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/test/TestERC20.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "name", "type": "string" }, { "internalType": "string", "name": "symbol", "type": "string" }, { "internalType": "uint8", "name": "__decimals", "type": "uint8" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Paused", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "previousAdminRole", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "newAdminRole", "type": "bytes32" }], "name": "RoleAdminChanged", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleGranted", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }], "name": "RoleRevoked", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Unpaused", "type": "event" },
        { "inputs": [], "name": "DEFAULT_ADMIN_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "MINTER_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "PAUSER_ROLE", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "_decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burnFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleAdmin", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "getRoleMember", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }], "name": "getRoleMemberCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "grantRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "hasRole", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "pause", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "renounceRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "role", "type": "bytes32" }, { "internalType": "address", "name": "account", "type": "address" }], "name": "revokeRole", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "unpause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "60a06040523480156200001157600080fd5b50604051620026f0380380620026f08339810160408190526200003491620003c9565b8282818181600590805190602001906200005092919062000270565b5080516200006690600690602084019062000270565b50506007805460ff1916905550620000806000336200010b565b620000ac7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200010b565b620000d87f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200010b565b505060f81b7fff0000000000000000000000000000000000000000000000000000000000000016608052506200049d9050565b6200011782826200011b565b5050565b6200013282826200015e60201b62000afb1760201c565b60008281526001602090815260409091206200015991839062000beb620001fe821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000117576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ba3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000215836001600160a01b0384166200021e565b90505b92915050565b6000818152600183016020526040812054620002675750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000218565b50600062000218565b8280546200027e906200044a565b90600052602060002090601f016020900481019282620002a25760008555620002ed565b82601f10620002bd57805160ff1916838001178555620002ed565b82800160010185558215620002ed579182015b82811115620002ed578251825591602001919060010190620002d0565b50620002fb929150620002ff565b5090565b5b80821115620002fb576000815560010162000300565b600082601f83011262000327578081fd5b81516001600160401b038082111562000344576200034462000487565b604051601f8301601f19908116603f011681019082821181831017156200036f576200036f62000487565b816040528381526020925086838588010111156200038b578485fd5b8491505b83821015620003ae57858201830151818301840152908201906200038f565b83821115620003bf57848385830101525b9695505050505050565b600080600060608486031215620003de578283fd5b83516001600160401b0380821115620003f5578485fd5b620004038783880162000316565b9450602086015191508082111562000419578384fd5b50620004288682870162000316565b925050604084015160ff811681146200043f578182fd5b809150509250925092565b600181811c908216806200045f57607f821691505b602082108114156200048157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160f81c61222d620004c36000396000818161028301526102ba015261222d6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80635c975abb11610104578063a217fddf116100a2578063d539139311610071578063d539139314610451578063d547741f14610478578063dd62ed3e1461048b578063e63ab1e9146104d157600080fd5b8063a217fddf14610410578063a457c2d714610418578063a9059cbb1461042b578063ca15c8731461043e57600080fd5b80638456cb59116100de5780638456cb59146103845780639010d07c1461038c57806391d14854146103c457806395d89b411461040857600080fd5b80635c975abb1461033057806370a082311461033b57806379cc67901461037157600080fd5b8063313ce56711610171578063395093511161014b57806339509351146102ef5780633f4ba83a1461030257806340c10f191461030a57806342966c681461031d57600080fd5b8063313ce5671461028157806332424aa3146102b557806336568abe146102dc57600080fd5b806318160ddd116101ad57806318160ddd1461022457806323b872dd14610236578063248a9ca3146102495780632f2ff15d1461026c57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063095ea7b314610211575b600080fd5b6101e76101e2366004611f95565b6104f8565b60405190151581526020015b60405180910390f35b610204610554565b6040516101f39190612056565b6101e761021f366004611f11565b6105e6565b6004545b6040519081526020016101f3565b6101e7610244366004611ed6565b6105fe565b610228610257366004611f3a565b60009081526020819052604090206001015490565b61027f61027a366004611f52565b610622565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405160ff90911681526020016101f3565b6102a37f000000000000000000000000000000000000000000000000000000000000000081565b61027f6102ea366004611f52565b61064d565b6101e76102fd366004611f11565b610705565b61027f610751565b61027f610318366004611f11565b610811565b61027f61032b366004611f3a565b6108d1565b60075460ff166101e7565b610228610349366004611e8a565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205490565b61027f61037f366004611f11565b6108de565b61027f6108f3565b61039f61039a366004611f74565b6109b1565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b6101e76103d2366004611f52565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6102046109d0565b610228600081565b6101e7610426366004611f11565b6109df565b6101e7610439366004611f11565b610ab0565b61022861044c366004611f3a565b610abe565b6102287f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61027f610486366004611f52565b610ad5565b610228610499366004611ea4565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260036020908152604080832093909416825291909152205490565b6102287f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f00000000000000000000000000000000000000000000000000000000148061054e575061054e82610c0d565b92915050565b60606005805461056390612174565b80601f016020809104026020016040519081016040528092919081815260200182805461058f90612174565b80156105dc5780601f106105b1576101008083540402835291602001916105dc565b820191906000526020600020905b8154815290600101906020018083116105bf57829003601f168201915b5050505050905090565b6000336105f4818585610ca4565b5060019392505050565b60003361060c858285610e57565b610617858585610f2e565b506001949350505050565b60008281526020819052604090206001015461063e81336111ec565b61064883836112bc565b505050565b73ffffffffffffffffffffffffffffffffffffffff811633146106f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61070182826112de565b5050565b33600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906105f4908290869061074c9087906120a7565b610ca4565b61077b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336103d2565b610807576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20756e70617573650000000000000060648201526084016106ee565b61080f611300565b565b61083b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336103d2565b6108c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f7665206d696e74657220726f6c6520746f206d696e740000000000000000000060648201526084016106ee565b61070182826113e1565b6108db338261150d565b50565b6108e9823383610e57565b610701828261150d565b61091d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336103d2565b6109a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f45524332305072657365744d696e7465725061757365723a206d75737420686160448201527f76652070617573657220726f6c6520746f20706175736500000000000000000060648201526084016106ee565b61080f611706565b60008281526001602052604081206109c990836117c6565b9392505050565b60606006805461056390612174565b33600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610aa3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016106ee565b6106178286868403610ca4565b6000336105f4818585610f2e565b600081815260016020526040812061054e906117d2565b600082815260208190526040902060010154610af181336111ec565b61064883836112de565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166107015760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610b8d3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006109c98373ffffffffffffffffffffffffffffffffffffffff84166117dc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061054e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461054e565b73ffffffffffffffffffffffffffffffffffffffff8316610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016106ee565b73ffffffffffffffffffffffffffffffffffffffff8216610de9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016106ee565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600360209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f285781811015610f1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106ee565b610f288484848403610ca4565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610fd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016106ee565b73ffffffffffffffffffffffffffffffffffffffff8216611074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106ee565b61107f83838361182b565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205481811015611135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016106ee565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600260205260408082208585039055918516815290812080548492906111799084906120a7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111df91815260200190565b60405180910390a3610f28565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610701576112428173ffffffffffffffffffffffffffffffffffffffff166014611836565b61124d836020611836565b60405160200161125e929190611fd5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526106ee91600401612056565b6112c68282610afb565b60008281526001602052604090206106489082610beb565b6112e88282611b3c565b60008281526001602052604090206106489082611bf3565b60075460ff1661136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016106ee565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b73ffffffffffffffffffffffffffffffffffffffff821661145e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ee565b61146a6000838361182b565b806004600082825461147c91906120a7565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040812080548392906114b69084906120a7565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82166115b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106ee565b6115bc8260008361182b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604090205481811015611672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016106ee565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604081208383039055600480548492906116ae9084906120fc565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60075460ff1615611773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016106ee565b600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113b73390565b60006109c98383611c15565b600061054e825490565b60008181526001830160205260408120546118235750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561054e565b50600061054e565b610648838383611c66565b606060006118458360026120bf565b6118509060026120a7565b67ffffffffffffffff81111561188f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156118b9576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611917577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106119a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006119dd8460026120bf565b6119e89060016120a7565b90505b6001811115611ad3577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611a50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110611a8d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611acc8161213f565b90506119eb565b5083156109c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ee565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156107015760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006109c98373ffffffffffffffffffffffffffffffffffffffff8416611cf9565b6000826000018281548110611c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60075460ff1615610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f45524332305061757361626c653a20746f6b656e207472616e7366657220776860448201527f696c65207061757365640000000000000000000000000000000000000000000060648201526084016106ee565b60008181526001830160205260408120548015611e57576000611d1d6001836120fc565b8554909150600090611d31906001906120fc565b9050818114611de4576000866000018281548110611d78577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611dc2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e1c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061054e565b600091505061054e565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e8557600080fd5b919050565b600060208284031215611e9b578081fd5b6109c982611e61565b60008060408385031215611eb6578081fd5b611ebf83611e61565b9150611ecd60208401611e61565b90509250929050565b600080600060608486031215611eea578081fd5b611ef384611e61565b9250611f0160208501611e61565b9150604084013590509250925092565b60008060408385031215611f23578182fd5b611f2c83611e61565b946020939093013593505050565b600060208284031215611f4b578081fd5b5035919050565b60008060408385031215611f64578182fd5b82359150611ecd60208401611e61565b60008060408385031215611f86578182fd5b50508035926020909101359150565b600060208284031215611fa6578081fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109c9578182fd5b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161200d816017850160208801612113565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161204a816028840160208801612113565b01602801949350505050565b6020815260008251806020840152612075816040850160208701612113565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600082198211156120ba576120ba6121c8565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156120f7576120f76121c8565b500290565b60008282101561210e5761210e6121c8565b500390565b60005b8381101561212e578181015183820152602001612116565b83811115610f285750506000910152565b60008161214e5761214e6121c8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600181811c9082168061218857607f821691505b602082108114156121c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212203bd3c022fddd917bb80cb9b5d07459f32cd74e6fe6200c575edbb22783bcdc4764736f6c63430008040033"
    };
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/test/TestERC20.js
var require_TestERC20 = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/test/TestERC20.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestERC20 = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TestERC20_json_1 = __importDefault(require_TestERC20_json());
    var TestERC20 = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TestERC20_json_1.default.abi, TestERC20_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol, eth_wallet_1.Utils.toString(params.decimals)]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          spender: result.spender,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parsePausedEvent(receipt) {
        return this.parseEvents(receipt, "Paused").map((e) => this.decodePausedEvent(e));
      }
      decodePausedEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      parseRoleAdminChangedEvent(receipt) {
        return this.parseEvents(receipt, "RoleAdminChanged").map((e) => this.decodeRoleAdminChangedEvent(e));
      }
      decodeRoleAdminChangedEvent(event) {
        let result = event.data;
        return {
          role: result.role,
          previousAdminRole: result.previousAdminRole,
          newAdminRole: result.newAdminRole,
          _event: event
        };
      }
      parseRoleGrantedEvent(receipt) {
        return this.parseEvents(receipt, "RoleGranted").map((e) => this.decodeRoleGrantedEvent(e));
      }
      decodeRoleGrantedEvent(event) {
        let result = event.data;
        return {
          role: result.role,
          account: result.account,
          sender: result.sender,
          _event: event
        };
      }
      parseRoleRevokedEvent(receipt) {
        return this.parseEvents(receipt, "RoleRevoked").map((e) => this.decodeRoleRevokedEvent(e));
      }
      decodeRoleRevokedEvent(event) {
        let result = event.data;
        return {
          role: result.role,
          account: result.account,
          sender: result.sender,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseUnpausedEvent(receipt) {
        return this.parseEvents(receipt, "Unpaused").map((e) => this.decodeUnpausedEvent(e));
      }
      decodeUnpausedEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      assign() {
        let DEFAULT_ADMIN_ROLE_call = async () => {
          let result = await this.call("DEFAULT_ADMIN_ROLE");
          return result;
        };
        this.DEFAULT_ADMIN_ROLE = DEFAULT_ADMIN_ROLE_call;
        let MINTER_ROLE_call = async () => {
          let result = await this.call("MINTER_ROLE");
          return result;
        };
        this.MINTER_ROLE = MINTER_ROLE_call;
        let PAUSER_ROLE_call = async () => {
          let result = await this.call("PAUSER_ROLE");
          return result;
        };
        this.PAUSER_ROLE = PAUSER_ROLE_call;
        let _decimals_call = async () => {
          let result = await this.call("_decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this._decimals = _decimals_call;
        let allowanceParams = (params) => [params.owner, params.spender];
        let allowance_call = async (params) => {
          let result = await this.call("allowance", allowanceParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.allowance = allowance_call;
        let balanceOf_call = async (account) => {
          let result = await this.call("balanceOf", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let getRoleAdmin_call = async (role) => {
          let result = await this.call("getRoleAdmin", [eth_wallet_1.Utils.stringToBytes32(role)]);
          return result;
        };
        this.getRoleAdmin = getRoleAdmin_call;
        let getRoleMemberParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), eth_wallet_1.Utils.toString(params.index)];
        let getRoleMember_call = async (params) => {
          let result = await this.call("getRoleMember", getRoleMemberParams(params));
          return result;
        };
        this.getRoleMember = getRoleMember_call;
        let getRoleMemberCount_call = async (role) => {
          let result = await this.call("getRoleMemberCount", [eth_wallet_1.Utils.stringToBytes32(role)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getRoleMemberCount = getRoleMemberCount_call;
        let hasRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let hasRole_call = async (params) => {
          let result = await this.call("hasRole", hasRoleParams(params));
          return result;
        };
        this.hasRole = hasRole_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let paused_call = async () => {
          let result = await this.call("paused");
          return result;
        };
        this.paused = paused_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.amount)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return result;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let burn_send = async (amount) => {
          let result = await this.send("burn", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let burn_call = async (amount) => {
          let result = await this.call("burn", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.burn = Object.assign(burn_send, {
          call: burn_call
        });
        let burnFromParams = (params) => [params.account, eth_wallet_1.Utils.toString(params.amount)];
        let burnFrom_send = async (params) => {
          let result = await this.send("burnFrom", burnFromParams(params));
          return result;
        };
        let burnFrom_call = async (params) => {
          let result = await this.call("burnFrom", burnFromParams(params));
          return;
        };
        this.burnFrom = Object.assign(burnFrom_send, {
          call: burnFrom_call
        });
        let decreaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.subtractedValue)];
        let decreaseAllowance_send = async (params) => {
          let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        let decreaseAllowance_call = async (params) => {
          let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
          call: decreaseAllowance_call
        });
        let grantRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let grantRole_send = async (params) => {
          let result = await this.send("grantRole", grantRoleParams(params));
          return result;
        };
        let grantRole_call = async (params) => {
          let result = await this.call("grantRole", grantRoleParams(params));
          return;
        };
        this.grantRole = Object.assign(grantRole_send, {
          call: grantRole_call
        });
        let increaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.addedValue)];
        let increaseAllowance_send = async (params) => {
          let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        let increaseAllowance_call = async (params) => {
          let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        this.increaseAllowance = Object.assign(increaseAllowance_send, {
          call: increaseAllowance_call
        });
        let mintParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.amount)];
        let mint_send = async (params) => {
          let result = await this.send("mint", mintParams(params));
          return result;
        };
        let mint_call = async (params) => {
          let result = await this.call("mint", mintParams(params));
          return;
        };
        this.mint = Object.assign(mint_send, {
          call: mint_call
        });
        let pause_send = async () => {
          let result = await this.send("pause");
          return result;
        };
        let pause_call = async () => {
          let result = await this.call("pause");
          return;
        };
        this.pause = Object.assign(pause_send, {
          call: pause_call
        });
        let renounceRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let renounceRole_send = async (params) => {
          let result = await this.send("renounceRole", renounceRoleParams(params));
          return result;
        };
        let renounceRole_call = async (params) => {
          let result = await this.call("renounceRole", renounceRoleParams(params));
          return;
        };
        this.renounceRole = Object.assign(renounceRole_send, {
          call: renounceRole_call
        });
        let revokeRoleParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.role), params.account];
        let revokeRole_send = async (params) => {
          let result = await this.send("revokeRole", revokeRoleParams(params));
          return result;
        };
        let revokeRole_call = async (params) => {
          let result = await this.call("revokeRole", revokeRoleParams(params));
          return;
        };
        this.revokeRole = Object.assign(revokeRole_send, {
          call: revokeRole_call
        });
        let transferParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.amount)];
        let transfer_send = async (params) => {
          let result = await this.send("transfer", transferParams(params));
          return result;
        };
        let transfer_call = async (params) => {
          let result = await this.call("transfer", transferParams(params));
          return result;
        };
        this.transfer = Object.assign(transfer_send, {
          call: transfer_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.amount)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return result;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let unpause_send = async () => {
          let result = await this.send("unpause");
          return result;
        };
        let unpause_call = async () => {
          let result = await this.call("unpause");
          return;
        };
        this.unpause = Object.assign(unpause_send, {
          call: unpause_call
        });
      }
    };
    exports.TestERC20 = TestERC20;
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/contracts/index.js
var require_contracts = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/contracts/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestERC20 = exports.FakeTimeIsMoney = exports.TimeIsMoneyEther = exports.TimeIsMoney = exports.RewardsCommonStartDate = exports.Rewards = exports.ERC20PresetMinterPauser = exports.ERC20 = void 0;
    var ERC20_1 = require_ERC20();
    Object.defineProperty(exports, "ERC20", { enumerable: true, get: function() {
      return ERC20_1.ERC20;
    } });
    var ERC20PresetMinterPauser_1 = require_ERC20PresetMinterPauser();
    Object.defineProperty(exports, "ERC20PresetMinterPauser", { enumerable: true, get: function() {
      return ERC20PresetMinterPauser_1.ERC20PresetMinterPauser;
    } });
    var Rewards_1 = require_Rewards();
    Object.defineProperty(exports, "Rewards", { enumerable: true, get: function() {
      return Rewards_1.Rewards;
    } });
    var RewardsCommonStartDate_1 = require_RewardsCommonStartDate();
    Object.defineProperty(exports, "RewardsCommonStartDate", { enumerable: true, get: function() {
      return RewardsCommonStartDate_1.RewardsCommonStartDate;
    } });
    var TimeIsMoney_1 = require_TimeIsMoney();
    Object.defineProperty(exports, "TimeIsMoney", { enumerable: true, get: function() {
      return TimeIsMoney_1.TimeIsMoney;
    } });
    var TimeIsMoneyEther_1 = require_TimeIsMoneyEther();
    Object.defineProperty(exports, "TimeIsMoneyEther", { enumerable: true, get: function() {
      return TimeIsMoneyEther_1.TimeIsMoneyEther;
    } });
    var FakeTimeIsMoney_1 = require_FakeTimeIsMoney();
    Object.defineProperty(exports, "FakeTimeIsMoney", { enumerable: true, get: function() {
      return FakeTimeIsMoney_1.FakeTimeIsMoney;
    } });
    var TestERC20_1 = require_TestERC20();
    Object.defineProperty(exports, "TestERC20", { enumerable: true, get: function() {
      return TestERC20_1.TestERC20;
    } });
  }
});

// node_modules/@validapp/time-is-money-sdk/lib/index.js
var require_lib = __commonJS({
  "node_modules/@validapp/time-is-money-sdk/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contracts = void 0;
    exports.Contracts = __importStar(require_contracts());
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/AggregatorProxy.json.js
var require_AggregatorProxy_json = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/AggregatorProxy.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "address", "name": "_aggregator", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "int256", "name": "current", "type": "int256" }, { "indexed": true, "internalType": "uint256", "name": "roundId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "updatedAt", "type": "uint256" }], "name": "AnswerUpdated", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "roundId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "startedBy", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "startedAt", "type": "uint256" }], "name": "NewRound", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "OwnershipTransferRequested", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
        { "inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "aggregator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_aggregator", "type": "address" }], "name": "confirmAggregator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "description", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_roundId", "type": "uint256" }], "name": "getAnswer", "outputs": [{ "internalType": "int256", "name": "answer", "type": "int256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint80", "name": "_roundId", "type": "uint80" }], "name": "getRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_roundId", "type": "uint256" }], "name": "getTimestamp", "outputs": [{ "internalType": "uint256", "name": "updatedAt", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestAnswer", "outputs": [{ "internalType": "int256", "name": "answer", "type": "int256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestRound", "outputs": [{ "internalType": "uint256", "name": "roundId", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestTimestamp", "outputs": [{ "internalType": "uint256", "name": "updatedAt", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }], "name": "phaseAggregators", "outputs": [{ "internalType": "contract AggregatorV2V3Interface", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "phaseId", "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_aggregator", "type": "address" }], "name": "proposeAggregator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "proposedAggregator", "outputs": [{ "internalType": "contract AggregatorV2V3Interface", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint80", "name": "_roundId", "type": "uint80" }], "name": "proposedGetRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "proposedLatestRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_to", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "version", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "608060405234801561001057600080fd5b5060405161161f38038061161f8339818101604052602081101561003357600080fd5b5051600080546001600160a01b03191633179055610059816001600160e01b0361005f16565b506100ce565b60028054604080518082018252600161ffff80851691909101168082526001600160a01b0395909516602091820181905261ffff19909316851762010000600160b01b0319166201000084021790935560009384526004909252912080546001600160a01b0319169091179055565b611542806100dd6000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80638da5cb5b116100d8578063b633620c1161008c578063f2fde38b11610066578063f2fde38b146103da578063f8a2abd31461040d578063feaf968c1461044057610177565b8063b633620c14610394578063c1597304146103b1578063e8c4be30146103d257610177565b80639a6fc8f5116100bd5780639a6fc8f51461031b578063a928c09614610344578063b5ab58dc1461037757610177565b80638da5cb5b1461030b5780638f6b4d911461031357610177565b80636001ac531161012f5780637284e416116101145780637284e4161461027c57806379ba5097146102f95780638205bf6a1461030357610177565b80636001ac531461020c578063668a0f021461027457610177565b806350d25bcd1161016057806350d25bcd146101cb57806354fd4d50146101e557806358303b10146101ed57610177565b8063245a7bfc1461017c578063313ce567146101ad575b600080fd5b610184610448565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101b561046a565b6040805160ff9092168252519081900360200190f35b6101d3610508565b60408051918252519081900360200190f35b6101d3610575565b6101f56105e2565b6040805161ffff9092168252519081900360200190f35b6102356004803603602081101561022257600080fd5b503569ffffffffffffffffffff166105ec565b6040805169ffffffffffffffffffff96871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b6101d361074b565b610284610822565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102be5781810151838201526020016102a6565b50505050905090810190601f1680156102eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61030161099f565b005b6101d3610aa1565b610184610b0e565b610235610b2a565b6102356004803603602081101561033157600080fd5b503569ffffffffffffffffffff16610c73565b6103016004803603602081101561035a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610da6565b6101d36004803603602081101561038d57600080fd5b5035610ee9565b6101d3600480360360208110156103aa57600080fd5b5035610fe3565b610184600480360360208110156103c757600080fd5b503561ffff166110a6565b6101846110ce565b610301600480360360208110156103f057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166110ea565b6103016004803603602081101561042357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111e6565b6102356112b3565b60025462010000900473ffffffffffffffffffffffffffffffffffffffff1690565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d602081101561050157600080fd5b5051905090565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b60025461ffff1690565b600354600090819081908190819073ffffffffffffffffffffffffffffffffffffffff1661067b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600354604080517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff89166004820152905173ffffffffffffffffffffffffffffffffffffffff90921691639a6fc8f59160248082019260a092909190829003018186803b1580156106f857600080fd5b505afa15801561070c573d6000803e3d6000fd5b505050506040513d60a081101561072257600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b60006107556114f5565b5060408051808201825260025461ffff81168083526201000090910473ffffffffffffffffffffffffffffffffffffffff16602080840182905284517f668a0f02000000000000000000000000000000000000000000000000000000008152945193946108109463668a0f0292600480840193919291829003018186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d602081101561080957600080fd5b50516113d0565b69ffffffffffffffffffff1691505090565b6060600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156108ea57600080fd5b810190808051604051939291908464010000000082111561090a57600080fd5b90830190602082018581111561091f57600080fd5b825164010000000081118282018810171561093957600080fd5b82525081516020918201929091019080838360005b8381101561096657818101518382015260200161094e565b50505050905090810190601f1680156109935780820380516001836020036101000a031916815260200191505b50604052505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a2557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d757600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600354600090819081908190819073ffffffffffffffffffffffffffffffffffffffff16610bb957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d60a0811015610c4b57600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b6000806000806000806000610c938869ffffffffffffffffffff166113f0565b61ffff821660009081526004602081905260408083205481517f9a6fc8f500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff86169381019390935290519496509294509092839283928392839273ffffffffffffffffffffffffffffffffffffffff1691639a6fc8f59160248083019260a0929190829003018186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d60a0811015610d5957600080fd5b50805160208201516040830151606084015160809094015192985090965094509092509050610d8c85858585858c6113f8565b9b509b509b509b509b505050505050505091939590929450565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e2c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff828116911614610eb557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e76616c69642070726f706f7365642061676772656761746f720000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055610ee68161142e565b50565b600069ffffffffffffffffffff821115610f0557506000610fde565b600080610f11846113f0565b61ffff8216600090815260046020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff1680610f515760009350505050610fde565b8073ffffffffffffffffffffffffffffffffffffffff1663b5ab58dc836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d6020811015610fd657600080fd5b505193505050505b919050565b600069ffffffffffffffffffff821115610fff57506000610fde565b60008061100b846113f0565b61ffff8216600090815260046020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff168061104b5760009350505050610fde565b8073ffffffffffffffffffffffffffffffffffffffff1663b633620c836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b158015610fac57600080fd5b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461117057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005473ffffffffffffffffffffffffffffffffffffffff16331461126c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008060008060006112c36114f5565b5060408051808201825260025461ffff8116825262010000900473ffffffffffffffffffffffffffffffffffffffff166020820181905282517ffeaf968c0000000000000000000000000000000000000000000000000000000081529251919260009283928392839283929163feaf968c9160048083019260a0929190829003018186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d60a081101561137e57600080fd5b5080516020820151604083015160608401516080909401518a5193995091975095509193509091506113b990869086908690869086906113f8565b9a509a509a509a509a505050505050509091929394565b67ffffffffffffffff1660409190911b69ffff0000000000000000161790565b604081901c91565b600080600080600061140a868c6113d0565b8a8a8a6114178a8c6113d0565b939f929e50909c509a509098509650505050505050565b60028054604080518082018252600161ffff808516919091011680825273ffffffffffffffffffffffffffffffffffffffff9590951660209182018190527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090931685177fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000084021790935560009384526004909252912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b60408051808201909152600080825260208201529056fea264697066735822122023d8586f950acba6a0ffe61d2fe942dfed8f1e17cfa21687beac243094dd484c64736f6c63430006060033"
    };
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/AggregatorProxy.js
var require_AggregatorProxy = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/AggregatorProxy.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AggregatorProxy = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var AggregatorProxy_json_1 = __importDefault(require_AggregatorProxy_json());
    var AggregatorProxy = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, AggregatorProxy_json_1.default.abi, AggregatorProxy_json_1.default.bytecode);
        this.assign();
      }
      deploy(aggregator) {
        return this.__deploy([aggregator]);
      }
      parseAnswerUpdatedEvent(receipt) {
        return this.parseEvents(receipt, "AnswerUpdated").map((e) => this.decodeAnswerUpdatedEvent(e));
      }
      decodeAnswerUpdatedEvent(event) {
        let result = event.data;
        return {
          current: new eth_wallet_1.BigNumber(result.current),
          roundId: new eth_wallet_1.BigNumber(result.roundId),
          updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
          _event: event
        };
      }
      parseNewRoundEvent(receipt) {
        return this.parseEvents(receipt, "NewRound").map((e) => this.decodeNewRoundEvent(e));
      }
      decodeNewRoundEvent(event) {
        let result = event.data;
        return {
          roundId: new eth_wallet_1.BigNumber(result.roundId),
          startedBy: result.startedBy,
          startedAt: new eth_wallet_1.BigNumber(result.startedAt),
          _event: event
        };
      }
      parseOwnershipTransferRequestedEvent(receipt) {
        return this.parseEvents(receipt, "OwnershipTransferRequested").map((e) => this.decodeOwnershipTransferRequestedEvent(e));
      }
      decodeOwnershipTransferRequestedEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          _event: event
        };
      }
      parseOwnershipTransferredEvent(receipt) {
        return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
      }
      decodeOwnershipTransferredEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          _event: event
        };
      }
      assign() {
        let aggregator_call = async () => {
          let result = await this.call("aggregator");
          return result;
        };
        this.aggregator = aggregator_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let description_call = async () => {
          let result = await this.call("description");
          return result;
        };
        this.description = description_call;
        let getAnswer_call = async (roundId) => {
          let result = await this.call("getAnswer", [eth_wallet_1.Utils.toString(roundId)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getAnswer = getAnswer_call;
        let getRoundData_call = async (roundId) => {
          let result = await this.call("getRoundData", [eth_wallet_1.Utils.toString(roundId)]);
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.getRoundData = getRoundData_call;
        let getTimestamp_call = async (roundId) => {
          let result = await this.call("getTimestamp", [eth_wallet_1.Utils.toString(roundId)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getTimestamp = getTimestamp_call;
        let latestAnswer_call = async () => {
          let result = await this.call("latestAnswer");
          return new eth_wallet_1.BigNumber(result);
        };
        this.latestAnswer = latestAnswer_call;
        let latestRound_call = async () => {
          let result = await this.call("latestRound");
          return new eth_wallet_1.BigNumber(result);
        };
        this.latestRound = latestRound_call;
        let latestRoundData_call = async () => {
          let result = await this.call("latestRoundData");
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.latestRoundData = latestRoundData_call;
        let latestTimestamp_call = async () => {
          let result = await this.call("latestTimestamp");
          return new eth_wallet_1.BigNumber(result);
        };
        this.latestTimestamp = latestTimestamp_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let phaseAggregators_call = async (param1) => {
          let result = await this.call("phaseAggregators", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.phaseAggregators = phaseAggregators_call;
        let phaseId_call = async () => {
          let result = await this.call("phaseId");
          return new eth_wallet_1.BigNumber(result);
        };
        this.phaseId = phaseId_call;
        let proposedAggregator_call = async () => {
          let result = await this.call("proposedAggregator");
          return result;
        };
        this.proposedAggregator = proposedAggregator_call;
        let proposedGetRoundData_call = async (roundId) => {
          let result = await this.call("proposedGetRoundData", [eth_wallet_1.Utils.toString(roundId)]);
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.proposedGetRoundData = proposedGetRoundData_call;
        let proposedLatestRoundData_call = async () => {
          let result = await this.call("proposedLatestRoundData");
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.proposedLatestRoundData = proposedLatestRoundData_call;
        let version_call = async () => {
          let result = await this.call("version");
          return new eth_wallet_1.BigNumber(result);
        };
        this.version = version_call;
        let acceptOwnership_send = async () => {
          let result = await this.send("acceptOwnership");
          return result;
        };
        let acceptOwnership_call = async () => {
          let result = await this.call("acceptOwnership");
          return;
        };
        this.acceptOwnership = Object.assign(acceptOwnership_send, {
          call: acceptOwnership_call
        });
        let confirmAggregator_send = async (aggregator) => {
          let result = await this.send("confirmAggregator", [aggregator]);
          return result;
        };
        let confirmAggregator_call = async (aggregator) => {
          let result = await this.call("confirmAggregator", [aggregator]);
          return;
        };
        this.confirmAggregator = Object.assign(confirmAggregator_send, {
          call: confirmAggregator_call
        });
        let proposeAggregator_send = async (aggregator) => {
          let result = await this.send("proposeAggregator", [aggregator]);
          return result;
        };
        let proposeAggregator_call = async (aggregator) => {
          let result = await this.call("proposeAggregator", [aggregator]);
          return;
        };
        this.proposeAggregator = Object.assign(proposeAggregator_send, {
          call: proposeAggregator_call
        });
        let transferOwnership_send = async (to) => {
          let result = await this.send("transferOwnership", [to]);
          return result;
        };
        let transferOwnership_call = async (to) => {
          let result = await this.call("transferOwnership", [to]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
      }
    };
    exports.AggregatorProxy = AggregatorProxy;
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/EACAggregatorProxy.json.js
var require_EACAggregatorProxy_json = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/EACAggregatorProxy.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "address", "name": "_aggregator", "type": "address" }, { "internalType": "address", "name": "_accessController", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "int256", "name": "current", "type": "int256" }, { "indexed": true, "internalType": "uint256", "name": "roundId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "updatedAt", "type": "uint256" }], "name": "AnswerUpdated", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "roundId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "startedBy", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "startedAt", "type": "uint256" }], "name": "NewRound", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "OwnershipTransferRequested", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
        { "inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "accessController", "outputs": [{ "internalType": "contract AccessControllerInterface", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "aggregator", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_aggregator", "type": "address" }], "name": "confirmAggregator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "description", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_roundId", "type": "uint256" }], "name": "getAnswer", "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint80", "name": "_roundId", "type": "uint80" }], "name": "getRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_roundId", "type": "uint256" }], "name": "getTimestamp", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestAnswer", "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestRound", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "latestTimestamp", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }], "name": "phaseAggregators", "outputs": [{ "internalType": "contract AggregatorV2V3Interface", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "phaseId", "outputs": [{ "internalType": "uint16", "name": "", "type": "uint16" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_aggregator", "type": "address" }], "name": "proposeAggregator", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "proposedAggregator", "outputs": [{ "internalType": "contract AggregatorV2V3Interface", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint80", "name": "_roundId", "type": "uint80" }], "name": "proposedGetRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "proposedLatestRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_accessController", "type": "address" }], "name": "setController", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_to", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "version", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60806040523480156200001157600080fd5b50604051620026e8380380620026e8833981810160405260408110156200003757600080fd5b508051602090910151600080546001600160a01b031916331790558162000067816001600160e01b036200008416565b506200007c816001600160e01b03620000f316565b505062000175565b60028054604080518082018252600161ffff80851691909101168082526001600160a01b0395909516602091820181905261ffff19909316851762010000600160b01b0319166201000084021790935560009384526004909252912080546001600160a01b0319169091179055565b6000546001600160a01b0316331462000153576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b61256380620001856000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80638f6b4d91116100e3578063bc43cbaf1161008c578063f2fde38b11610066578063f2fde38b1461042b578063f8a2abd31461045e578063feaf968c146104915761018d565b8063bc43cbaf146103fa578063c159730414610402578063e8c4be30146104235761018d565b8063a928c096116100bd578063a928c0961461038d578063b5ab58dc146103c0578063b633620c146103dd5761018d565b80638f6b4d911461032957806392eefe9b146103315780639a6fc8f5146103645761018d565b80636001ac531161014557806379ba50971161011f57806379ba50971461030f5780638205bf6a146103195780638da5cb5b146103215761018d565b80636001ac5314610222578063668a0f021461028a5780637284e416146102925761018d565b806350d25bcd1161017657806350d25bcd146101e157806354fd4d50146101fb57806358303b10146102035761018d565b8063245a7bfc14610192578063313ce567146101c3575b600080fd5b61019a610499565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101cb6104bb565b6040805160ff9092168252519081900360200190f35b6101e9610559565b60408051918252519081900360200190f35b6101e96106e0565b61020b61074d565b6040805161ffff9092168252519081900360200190f35b61024b6004803603602081101561023857600080fd5b503569ffffffffffffffffffff16610757565b6040805169ffffffffffffffffffff96871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b6101e9610978565b61029a610af9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102d45781810151838201526020016102bc565b50505050905090810190601f1680156103015780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610317610c76565b005b6101e9610d78565b61019a610ef9565b61024b610f15565b6103176004803603602081101561034757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611134565b61024b6004803603602081101561037a57600080fd5b503569ffffffffffffffffffff16611201565b610317600480360360208110156103a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661138b565b6101e9600480360360208110156103d657600080fd5b50356114ce565b6101e9600480360360208110156103f357600080fd5b5035611657565b61019a6117d9565b61019a6004803603602081101561041857600080fd5b503561ffff166117f5565b61019a61181d565b6103176004803603602081101561044157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611839565b6103176004803603602081101561047457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611935565b61024b611a02565b60025462010000900473ffffffffffffffffffffffffffffffffffffffff1690565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561052857600080fd5b505afa15801561053c573d6000803e3d6000fd5b505050506040513d602081101561055257600080fd5b5051905090565b60055460009073ffffffffffffffffffffffffffffffffffffffff168015806106675750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d602081101561066457600080fd5b50515b6106d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6106da611b8b565b91505090565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561052857600080fd5b60025461ffff1690565b600554600090819081908190819073ffffffffffffffffffffffffffffffffffffffff1680158061086d5750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561084057600080fd5b505afa158015610854573d6000803e3d6000fd5b505050506040513d602081101561086a57600080fd5b50515b6108d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff1661095c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b61096587611bf8565b939b929a50909850965090945092505050565b60055460009073ffffffffffffffffffffffffffffffffffffffff16801580610a865750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b158015610a5957600080fd5b505afa158015610a6d573d6000803e3d6000fd5b505050506040513d6020811015610a8357600080fd5b50515b610af157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6106da611d57565b6060600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b158015610b6657600080fd5b505afa158015610b7a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015610bc157600080fd5b8101908080516040519392919084640100000000821115610be157600080fd5b908301906020820185811115610bf657600080fd5b8251640100000000811182820188101715610c1057600080fd5b82525081516020918201929091019080838360005b83811015610c3d578181015183820152602001610c25565b50505050905090810190601f168015610c6a5780820380516001836020036101000a031916815260200191505b50604052505050905090565b60015473ffffffffffffffffffffffffffffffffffffffff163314610cfc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60055460009073ffffffffffffffffffffffffffffffffffffffff16801580610e865750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d6020811015610e8357600080fd5b50515b610ef157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6106da611e2e565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600554600090819081908190819073ffffffffffffffffffffffffffffffffffffffff1680158061102b5750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d602081101561102857600080fd5b50515b61109657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff1661111a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b611122611e9b565b95509550955095509550509091929394565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600554600090819081908190819073ffffffffffffffffffffffffffffffffffffffff168015806113175750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b1580156112ea57600080fd5b505afa1580156112fe573d6000803e3d6000fd5b505050506040513d602081101561131457600080fd5b50515b61138257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61096587611fe4565b60005473ffffffffffffffffffffffffffffffffffffffff16331461141157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b60035473ffffffffffffffffffffffffffffffffffffffff82811691161461149a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f496e76616c69642070726f706f7365642061676772656761746f720000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556114cb81612117565b50565b60055460009073ffffffffffffffffffffffffffffffffffffffff168015806115dc5750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b1580156115af57600080fd5b505afa1580156115c3573d6000803e3d6000fd5b505050506040513d60208110156115d957600080fd5b50515b61164757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611650836121de565b9392505050565b60055460009073ffffffffffffffffffffffffffffffffffffffff168015806117655750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b15801561173857600080fd5b505afa15801561174c573d6000803e3d6000fd5b505050506040513d602081101561176257600080fd5b50515b6117d057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611650836122d8565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1633146118bf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146119bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600554600090819081908190819073ffffffffffffffffffffffffffffffffffffffff16801580611b185750604080517f6b14daf8000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452366044840181905273ffffffffffffffffffffffffffffffffffffffff861694636b14daf8946000939190606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b158015611aeb57600080fd5b505afa158015611aff573d6000803e3d6000fd5b505050506040513d6020811015611b1557600080fd5b50515b611b8357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f206163636573730000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61112261239b565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561052857600080fd5b600354600090819081908190819073ffffffffffffffffffffffffffffffffffffffff16611c8757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600354604080517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff89166004820152905173ffffffffffffffffffffffffffffffffffffffff90921691639a6fc8f59160248082019260a092909190829003018186803b158015611d0457600080fd5b505afa158015611d18573d6000803e3d6000fd5b505050506040513d60a0811015611d2e57600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b6000611d61612516565b5060408051808201825260025461ffff81168083526201000090910473ffffffffffffffffffffffffffffffffffffffff16602080840182905284517f668a0f0200000000000000000000000000000000000000000000000000000000815294519394611e1c9463668a0f0292600480840193919291829003018186803b158015611deb57600080fd5b505afa158015611dff573d6000803e3d6000fd5b505050506040513d6020811015611e1557600080fd5b50516124b8565b69ffffffffffffffffffff1691505090565b6000600260000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561052857600080fd5b600354600090819081908190819073ffffffffffffffffffffffffffffffffffffffff16611f2a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4e6f2070726f706f7365642061676772656761746f722070726573656e740000604482015290519081900360640190fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611f9257600080fd5b505afa158015611fa6573d6000803e3d6000fd5b505050506040513d60a0811015611fbc57600080fd5b5080516020820151604083015160608401516080909401519299919850965091945092509050565b60008060008060008060006120048869ffffffffffffffffffff166124d8565b61ffff821660009081526004602081905260408083205481517f9a6fc8f500000000000000000000000000000000000000000000000000000000815267ffffffffffffffff86169381019390935290519496509294509092839283928392839273ffffffffffffffffffffffffffffffffffffffff1691639a6fc8f59160248083019260a0929190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d60a08110156120ca57600080fd5b508051602082015160408301516060840151608090940151929850909650945090925090506120fd85858585858c6124e0565b9b509b509b509b509b505050505050505091939590929450565b60028054604080518082018252600161ffff808516919091011680825273ffffffffffffffffffffffffffffffffffffffff9590951660209182018190527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090931685177fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000084021790935560009384526004909252912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b600069ffffffffffffffffffff8211156121fa575060006122d3565b600080612206846124d8565b61ffff8216600090815260046020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff168061224657600093505050506122d3565b8073ffffffffffffffffffffffffffffffffffffffff1663b5ab58dc836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b1580156122a157600080fd5b505afa1580156122b5573d6000803e3d6000fd5b505050506040513d60208110156122cb57600080fd5b505193505050505b919050565b600069ffffffffffffffffffff8211156122f4575060006122d3565b600080612300846124d8565b61ffff8216600090815260046020526040902054919350915073ffffffffffffffffffffffffffffffffffffffff168061234057600093505050506122d3565b8073ffffffffffffffffffffffffffffffffffffffff1663b633620c836040518263ffffffff1660e01b8152600401808267ffffffffffffffff16815260200191505060206040518083038186803b1580156122a157600080fd5b60008060008060006123ab612516565b5060408051808201825260025461ffff8116825262010000900473ffffffffffffffffffffffffffffffffffffffff166020820181905282517ffeaf968c0000000000000000000000000000000000000000000000000000000081529251919260009283928392839283929163feaf968c9160048083019260a0929190829003018186803b15801561243c57600080fd5b505afa158015612450573d6000803e3d6000fd5b505050506040513d60a081101561246657600080fd5b5080516020820151604083015160608401516080909401518a5193995091975095509193509091506124a190869086908690869086906124e0565b9a509a509a509a509a505050505050509091929394565b67ffffffffffffffff1660409190911b69ffff0000000000000000161790565b604081901c91565b60008060008060006124f2868c6124b8565b8a8a8a6124ff8a8c6124b8565b939f929e50909c509a509098509650505050505050565b60408051808201909152600080825260208201529056fea264697066735822122040161c76b658b26184655c863805897d7962d2515124e25c8f3fbe3321d99d0264736f6c63430006060033"
    };
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/EACAggregatorProxy.js
var require_EACAggregatorProxy = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/EACAggregatorProxy.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EACAggregatorProxy = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var EACAggregatorProxy_json_1 = __importDefault(require_EACAggregatorProxy_json());
    var EACAggregatorProxy = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, EACAggregatorProxy_json_1.default.abi, EACAggregatorProxy_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.aggregator, params.accessController]);
      }
      parseAnswerUpdatedEvent(receipt) {
        return this.parseEvents(receipt, "AnswerUpdated").map((e) => this.decodeAnswerUpdatedEvent(e));
      }
      decodeAnswerUpdatedEvent(event) {
        let result = event.data;
        return {
          current: new eth_wallet_1.BigNumber(result.current),
          roundId: new eth_wallet_1.BigNumber(result.roundId),
          updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
          _event: event
        };
      }
      parseNewRoundEvent(receipt) {
        return this.parseEvents(receipt, "NewRound").map((e) => this.decodeNewRoundEvent(e));
      }
      decodeNewRoundEvent(event) {
        let result = event.data;
        return {
          roundId: new eth_wallet_1.BigNumber(result.roundId),
          startedBy: result.startedBy,
          startedAt: new eth_wallet_1.BigNumber(result.startedAt),
          _event: event
        };
      }
      parseOwnershipTransferRequestedEvent(receipt) {
        return this.parseEvents(receipt, "OwnershipTransferRequested").map((e) => this.decodeOwnershipTransferRequestedEvent(e));
      }
      decodeOwnershipTransferRequestedEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          _event: event
        };
      }
      parseOwnershipTransferredEvent(receipt) {
        return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
      }
      decodeOwnershipTransferredEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          _event: event
        };
      }
      assign() {
        let accessController_call = async () => {
          let result = await this.call("accessController");
          return result;
        };
        this.accessController = accessController_call;
        let aggregator_call = async () => {
          let result = await this.call("aggregator");
          return result;
        };
        this.aggregator = aggregator_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let description_call = async () => {
          let result = await this.call("description");
          return result;
        };
        this.description = description_call;
        let getAnswer_call = async (roundId) => {
          let result = await this.call("getAnswer", [eth_wallet_1.Utils.toString(roundId)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getAnswer = getAnswer_call;
        let getRoundData_call = async (roundId) => {
          let result = await this.call("getRoundData", [eth_wallet_1.Utils.toString(roundId)]);
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.getRoundData = getRoundData_call;
        let getTimestamp_call = async (roundId) => {
          let result = await this.call("getTimestamp", [eth_wallet_1.Utils.toString(roundId)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getTimestamp = getTimestamp_call;
        let latestAnswer_call = async () => {
          let result = await this.call("latestAnswer");
          return new eth_wallet_1.BigNumber(result);
        };
        this.latestAnswer = latestAnswer_call;
        let latestRound_call = async () => {
          let result = await this.call("latestRound");
          return new eth_wallet_1.BigNumber(result);
        };
        this.latestRound = latestRound_call;
        let latestRoundData_call = async () => {
          let result = await this.call("latestRoundData");
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.latestRoundData = latestRoundData_call;
        let latestTimestamp_call = async () => {
          let result = await this.call("latestTimestamp");
          return new eth_wallet_1.BigNumber(result);
        };
        this.latestTimestamp = latestTimestamp_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let phaseAggregators_call = async (param1) => {
          let result = await this.call("phaseAggregators", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.phaseAggregators = phaseAggregators_call;
        let phaseId_call = async () => {
          let result = await this.call("phaseId");
          return new eth_wallet_1.BigNumber(result);
        };
        this.phaseId = phaseId_call;
        let proposedAggregator_call = async () => {
          let result = await this.call("proposedAggregator");
          return result;
        };
        this.proposedAggregator = proposedAggregator_call;
        let proposedGetRoundData_call = async (roundId) => {
          let result = await this.call("proposedGetRoundData", [eth_wallet_1.Utils.toString(roundId)]);
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.proposedGetRoundData = proposedGetRoundData_call;
        let proposedLatestRoundData_call = async () => {
          let result = await this.call("proposedLatestRoundData");
          return {
            roundId: new eth_wallet_1.BigNumber(result.roundId),
            answer: new eth_wallet_1.BigNumber(result.answer),
            startedAt: new eth_wallet_1.BigNumber(result.startedAt),
            updatedAt: new eth_wallet_1.BigNumber(result.updatedAt),
            answeredInRound: new eth_wallet_1.BigNumber(result.answeredInRound)
          };
        };
        this.proposedLatestRoundData = proposedLatestRoundData_call;
        let version_call = async () => {
          let result = await this.call("version");
          return new eth_wallet_1.BigNumber(result);
        };
        this.version = version_call;
        let acceptOwnership_send = async () => {
          let result = await this.send("acceptOwnership");
          return result;
        };
        let acceptOwnership_call = async () => {
          let result = await this.call("acceptOwnership");
          return;
        };
        this.acceptOwnership = Object.assign(acceptOwnership_send, {
          call: acceptOwnership_call
        });
        let confirmAggregator_send = async (aggregator) => {
          let result = await this.send("confirmAggregator", [aggregator]);
          return result;
        };
        let confirmAggregator_call = async (aggregator) => {
          let result = await this.call("confirmAggregator", [aggregator]);
          return;
        };
        this.confirmAggregator = Object.assign(confirmAggregator_send, {
          call: confirmAggregator_call
        });
        let proposeAggregator_send = async (aggregator) => {
          let result = await this.send("proposeAggregator", [aggregator]);
          return result;
        };
        let proposeAggregator_call = async (aggregator) => {
          let result = await this.call("proposeAggregator", [aggregator]);
          return;
        };
        this.proposeAggregator = Object.assign(proposeAggregator_send, {
          call: proposeAggregator_call
        });
        let setController_send = async (accessController) => {
          let result = await this.send("setController", [accessController]);
          return result;
        };
        let setController_call = async (accessController) => {
          let result = await this.call("setController", [accessController]);
          return;
        };
        this.setController = Object.assign(setController_send, {
          call: setController_call
        });
        let transferOwnership_send = async (to) => {
          let result = await this.send("transferOwnership", [to]);
          return result;
        };
        let transferOwnership_call = async (to) => {
          let result = await this.call("transferOwnership", [to]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
      }
    };
    exports.EACAggregatorProxy = EACAggregatorProxy;
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/Owned.json.js
var require_Owned_json = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/Owned.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "OwnershipTransferRequested", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }], "name": "OwnershipTransferred", "type": "event" },
        { "inputs": [], "name": "acceptOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_to", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610304806100326000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b14610081575b600080fd5b61004e6100b4565b005b6100586101b6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61004e6004803603602081101561009757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101d2565b60015473ffffffffffffffffffffffffffffffffffffffff16331461013a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015290519081900360640190fd5b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461025857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a35056fea2646970667358221220fe6ae21e019f9dcc0c6ea44e0cb663dd8253cb37aea96939f5a880ca5956887964736f6c63430006060033"
    };
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/Owned.js
var require_Owned = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/Owned.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Owned = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Owned_json_1 = __importDefault(require_Owned_json());
    var Owned = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, Owned_json_1.default.abi, Owned_json_1.default.bytecode);
        this.assign();
      }
      deploy() {
        return this.__deploy();
      }
      parseOwnershipTransferRequestedEvent(receipt) {
        return this.parseEvents(receipt, "OwnershipTransferRequested").map((e) => this.decodeOwnershipTransferRequestedEvent(e));
      }
      decodeOwnershipTransferRequestedEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          _event: event
        };
      }
      parseOwnershipTransferredEvent(receipt) {
        return this.parseEvents(receipt, "OwnershipTransferred").map((e) => this.decodeOwnershipTransferredEvent(e));
      }
      decodeOwnershipTransferredEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          _event: event
        };
      }
      assign() {
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let acceptOwnership_send = async () => {
          let result = await this.send("acceptOwnership");
          return result;
        };
        let acceptOwnership_call = async () => {
          let result = await this.call("acceptOwnership");
          return;
        };
        this.acceptOwnership = Object.assign(acceptOwnership_send, {
          call: acceptOwnership_call
        });
        let transferOwnership_send = async (to) => {
          let result = await this.send("transferOwnership", [to]);
          return result;
        };
        let transferOwnership_call = async (to) => {
          let result = await this.call("transferOwnership", [to]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
      }
    };
    exports.Owned = Owned;
  }
});

// node_modules/@validapp/chainlink-sdk/lib/contracts/index.js
var require_contracts2 = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/contracts/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Owned = exports.EACAggregatorProxy = exports.AggregatorProxy = void 0;
    var AggregatorProxy_1 = require_AggregatorProxy();
    Object.defineProperty(exports, "AggregatorProxy", { enumerable: true, get: function() {
      return AggregatorProxy_1.AggregatorProxy;
    } });
    var EACAggregatorProxy_1 = require_EACAggregatorProxy();
    Object.defineProperty(exports, "EACAggregatorProxy", { enumerable: true, get: function() {
      return EACAggregatorProxy_1.EACAggregatorProxy;
    } });
    var Owned_1 = require_Owned();
    Object.defineProperty(exports, "Owned", { enumerable: true, get: function() {
      return Owned_1.Owned;
    } });
  }
});

// node_modules/@validapp/chainlink-sdk/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@validapp/chainlink-sdk/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contracts = void 0;
    exports.Contracts = __importStar(require_contracts2());
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.json.js
var require_ERC1967Proxy_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "address", "name": "_logic", "type": "address" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "stateMutability": "payable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "previousAdmin", "type": "address" }, { "indexed": false, "internalType": "address", "name": "newAdmin", "type": "address" }], "name": "AdminChanged", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "beacon", "type": "address" }], "name": "BeaconUpgraded", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "implementation", "type": "address" }], "name": "Upgraded", "type": "event" },
        { "stateMutability": "payable", "type": "fallback" },
        { "stateMutability": "payable", "type": "receive" }
      ],
      "bytecode": "6080604052604051610810380380610810833981016040819052610022916102f5565b61004d60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610412565b6000805160206107c98339815191521461006957610069610463565b6100758282600061007c565b505061048f565b610085836100b2565b6000825111806100925750805b156100ad576100ab83836100f260201b6100291760201c565b505b505050565b6100bb8161011e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061011783836040518060600160405280602781526020016107e9602791396101de565b9392505050565b610131816102b360201b6100551760201c565b6101985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101bd6000805160206107c983398151915260001b6102b960201b61005b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060833b61023d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161018f565b600080856001600160a01b03168560405161025891906103c3565b600060405180830381855af49150503d8060008114610293576040519150601f19603f3d011682016040523d82523d6000602084013e610298565b606091505b5090925090506102a98282866102bc565b9695505050505050565b3b151590565b90565b606083156102cb575081610117565b8251156102db5782518084602001fd5b8160405162461bcd60e51b815260040161018f91906103df565b6000806040838503121561030857600080fd5b82516001600160a01b038116811461031f57600080fd5b60208401519092506001600160401b038082111561033c57600080fd5b818501915085601f83011261035057600080fd5b81518181111561036257610362610479565b604051601f8201601f19908116603f0116810190838211818310171561038a5761038a610479565b816040528281528860208487010111156103a357600080fd5b6103b4836020830160208801610437565b80955050505050509250929050565b600082516103d5818460208701610437565b9190910192915050565b60208152600082518060208401526103fe816040850160208701610437565b601f01601f19169190910160400192915050565b60008282101561043257634e487b7160e01b600052601160045260246000fd5b500390565b60005b8381101561045257818101518382015260200161043a565b838111156100ab5750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61032b8061049e6000396000f3fe60806040523661001357610011610017565b005b6100115b61002761002261005e565b6100a3565b565b606061004e83836040518060600160405280602781526020016102cf602791396100c7565b9392505050565b3b151590565b90565b600061009e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100c2573d6000f35b3d6000fd5b6060833b61015c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101849190610231565b600060405180830381855af49150503d80600081146101bf576040519150601f19603f3d011682016040523d82523d6000602084013e6101c4565b606091505b50915091506101d48282866101de565b9695505050505050565b606083156101ed57508161004e565b8251156101fd5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610153919061024d565b6000825161024381846020870161029e565b9190910192915050565b602081526000825180602084015261026c81604085016020870161029e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b838110156102b95781810151838201526020016102a1565b838111156102c8576000848401525b5050505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205e82e06267113368ac5e81850eec016b82ffeb4d25a7f02c1821132b8760d32464736f6c63430008060033360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.js
var require_ERC1967Proxy = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC1967Proxy = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var ERC1967Proxy_json_1 = __importDefault(require_ERC1967Proxy_json());
    var ERC1967Proxy = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, ERC1967Proxy_json_1.default.abi, ERC1967Proxy_json_1.default.bytecode);
        this.assign();
      }
      deploy(params, _value) {
        return this.__deploy([params.logic, eth_wallet_1.Utils.stringToBytes(params.data)], { value: _value });
      }
      parseAdminChangedEvent(receipt) {
        return this.parseEvents(receipt, "AdminChanged").map((e) => this.decodeAdminChangedEvent(e));
      }
      decodeAdminChangedEvent(event) {
        let result = event.data;
        return {
          previousAdmin: result.previousAdmin,
          newAdmin: result.newAdmin,
          _event: event
        };
      }
      parseBeaconUpgradedEvent(receipt) {
        return this.parseEvents(receipt, "BeaconUpgraded").map((e) => this.decodeBeaconUpgradedEvent(e));
      }
      decodeBeaconUpgradedEvent(event) {
        let result = event.data;
        return {
          beacon: result.beacon,
          _event: event
        };
      }
      parseUpgradedEvent(receipt) {
        return this.parseEvents(receipt, "Upgraded").map((e) => this.decodeUpgradedEvent(e));
      }
      decodeUpgradedEvent(event) {
        let result = event.data;
        return {
          implementation: result.implementation,
          _event: event
        };
      }
      assign() {
      }
    };
    exports.ERC1967Proxy = ERC1967Proxy;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.json.js
var require_ERC20_json2 = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "60806040523480156200001157600080fd5b5060405162000de938038062000de98339810160408190526200003491620001c5565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000282565b82805462000076906200022f565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200012057600080fd5b81516001600160401b03808211156200013d576200013d6200026c565b604051601f8301601f19908116603f011681019082821181831017156200016857620001686200026c565b816040528381526020925086838588010111156200018557600080fd5b600091505b83821015620001a957858201830151818301840152908201906200018a565b83821115620001bb5760008385830101525b9695505050505050565b60008060408385031215620001d957600080fd5b82516001600160401b0380821115620001f157600080fd5b620001ff868387016200010e565b935060208501519150808211156200021657600080fd5b5062000225858286016200010e565b9150509250929050565b600181811c908216806200024457607f821691505b602082108114156200026657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610b5780620002926000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610a1b565b60405180910390f35b6100ff6100fa3660046109f1565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109b5565b6102a8565b604051601281526020016100e3565b6100ff6101513660046109f1565b610393565b610113610164366004610960565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d66103dc565b6100ff6101a23660046109f1565b6103eb565b6100ff6101b53660046109f1565b6104c3565b6101136101c8366004610982565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610acd565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610acd565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b600061029f3384846104d0565b50600192915050565b60006102b5848484610683565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602090815260408083203384529091529020548281101561037b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61038885338584036104d0565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909161029f9185906103d7908690610a8e565b6104d0565b60606004805461020f90610acd565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828110156104ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610372565b6104b933858584036104d0565b5060019392505050565b600061029f338484610683565b73ffffffffffffffffffffffffffffffffffffffff8316610572576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff8216610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316610726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff82166107c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101561087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610372565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152602081905260408082208585039055918516815290812080548492906108c3908490610a8e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092991815260200190565b60405180910390a350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461095b57600080fd5b919050565b60006020828403121561097257600080fd5b61097b82610937565b9392505050565b6000806040838503121561099557600080fd5b61099e83610937565b91506109ac60208401610937565b90509250929050565b6000806000606084860312156109ca57600080fd5b6109d384610937565b92506109e160208501610937565b9150604084013590509250925092565b60008060408385031215610a0457600080fd5b610a0d83610937565b946020939093013593505050565b600060208083528351808285015260005b81811015610a4857858101830151858201604001528201610a2c565b81811115610a5a576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60008219821115610ac8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b600181811c90821680610ae157607f821691505b60208210811415610b1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b5091905056fea264697066735822122017723ba9d5ddac57dfd4d7f65a4b3bbc8fbff767240352cc4ee8441fd418477464736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.js
var require_ERC202 = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC20/ERC20.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC20 = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var ERC20_json_1 = __importDefault(require_ERC20_json2());
    var ERC20 = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, ERC20_json_1.default.abi, ERC20_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          spender: result.spender,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      assign() {
        let allowanceParams = (params) => [params.owner, params.spender];
        let allowance_call = async (params) => {
          let result = await this.call("allowance", allowanceParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.allowance = allowance_call;
        let balanceOf_call = async (account) => {
          let result = await this.call("balanceOf", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.amount)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return result;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let decreaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.subtractedValue)];
        let decreaseAllowance_send = async (params) => {
          let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        let decreaseAllowance_call = async (params) => {
          let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
          call: decreaseAllowance_call
        });
        let increaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.addedValue)];
        let increaseAllowance_send = async (params) => {
          let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        let increaseAllowance_call = async (params) => {
          let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        this.increaseAllowance = Object.assign(increaseAllowance_send, {
          call: increaseAllowance_call
        });
        let transferParams = (params) => [params.recipient, eth_wallet_1.Utils.toString(params.amount)];
        let transfer_send = async (params) => {
          let result = await this.send("transfer", transferParams(params));
          return result;
        };
        let transfer_call = async (params) => {
          let result = await this.call("transfer", transferParams(params));
          return result;
        };
        this.transfer = Object.assign(transfer_send, {
          call: transfer_call
        });
        let transferFromParams = (params) => [params.sender, params.recipient, eth_wallet_1.Utils.toString(params.amount)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return result;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
      }
    };
    exports.ERC20 = ERC20;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.json.js
var require_ERC721Holder_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "608060405234801561001057600080fd5b50610224806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61006761003e3660046100c5565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b919050565b600080600080608085870312156100db57600080fd5b6100e48561009c565b93506100f26020860161009c565b925060408501359150606085013567ffffffffffffffff8082111561011657600080fd5b818701915087601f83011261012a57600080fd5b81358181111561013c5761013c6101bf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610182576101826101bf565b816040528281528a602084870101111561019b57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212207f1085253fbc415f1d5bb612ddbc49ef949ae74620cf131a5dad9d03ed3c765b64736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.js
var require_ERC721Holder = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721Holder = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var ERC721Holder_json_1 = __importDefault(require_ERC721Holder_json());
    var ERC721Holder = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, ERC721Holder_json_1.default.abi, ERC721Holder_json_1.default.bytecode);
        this.assign();
      }
      deploy() {
        return this.__deploy();
      }
      assign() {
        let onERC721ReceivedParams = (params) => [params.param1, params.param2, eth_wallet_1.Utils.toString(params.param3), eth_wallet_1.Utils.stringToBytes(params.param4)];
        let onERC721Received_send = async (params) => {
          let result = await this.send("onERC721Received", onERC721ReceivedParams(params));
          return result;
        };
        let onERC721Received_call = async (params) => {
          let result = await this.call("onERC721Received", onERC721ReceivedParams(params));
          return result;
        };
        this.onERC721Received = Object.assign(onERC721Received_send, {
          call: onERC721Received_call
        });
      }
    };
    exports.ERC721Holder = ERC721Holder;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/Authorization.json.js
var require_Authorization_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/Authorization.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556104e4806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c52a7f11161005b5780639c52a7f114610109578063a2f55ae51461011c578063d4ee1d901461012f578063f2fde38b1461014f57600080fd5b80633fd8cc4e1461008257806360536172146100ba5780638da5cb5b146100c4575b600080fd5b6100a5610090366004610471565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100c2610162565b005b6000546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b1565b6100c2610117366004610471565b610290565b6100c261012a366004610471565b610337565b6001546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b6100c261015d366004610471565b6103da565b60015473ffffffffffffffffffffffffffffffffffffffff16331461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e0000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461035b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf5910161032c565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103fe57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b9060200161032c565b60006020828403121561048357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a757600080fd5b939250505056fea26469706673582212200df0fe74974461b12bd831612c9ccf2682efc6fd66a99e14372494849409b53564736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/Authorization.js
var require_Authorization = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/Authorization.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Authorization = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Authorization_json_1 = __importDefault(require_Authorization_json());
    var Authorization = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, Authorization_json_1.default.abi, Authorization_json_1.default.bytecode);
        this.assign();
      }
      deploy() {
        return this.__deploy();
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      assign() {
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
      }
    };
    exports.Authorization = Authorization;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/MOCK_TrollRegistry.json.js
var require_MOCK_TrollRegistry_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/MOCK_TrollRegistry.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract IERC20", "name": "_govToken", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "troll", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "isSuperTroll", "type": "bool" }], "name": "AddTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "DelistTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockGeneralTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockSuperTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "RemoveTroll", "type": "event" },
        { "anonymous": false, "inputs": [], "name": "Resume", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newVotingExecutor", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "isActive", "type": "bool" }], "name": "SetVotingExecutor", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }], "name": "Shutdown", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "UnlockGeneralTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "unlock", "type": "bool" }, { "indexed": false, "internalType": "address", "name": "bridgeVault", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "penalty", "type": "uint256" }], "name": "UnlockSuperTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "oldTroll", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newTroll", "type": "address" }], "name": "UpdateTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrollRegistry", "type": "address" }], "name": "Upgrade", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_VotingManager", "name": "newVotingManager", "type": "address" }], "name": "UpgradeVotingManager", "type": "event" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "addTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "generalTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newTrollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newVotingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "removeTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "resume", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "shutdownByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "shutdownByVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "superTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "trollProfileInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollProfiles", "outputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum MOCK_TrollRegistry.TrollType", "name": "trollType", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "unlock", "type": "bool" }, { "internalType": "address[]", "name": "vaultRegistry", "type": "address[]" }, { "internalType": "uint256[]", "name": "penalty", "type": "uint256[]" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "updateTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeTrollRegistry", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeTrollRegistryByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgradeVotingManager", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgradeVotingManagerByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "usedNonce", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60c06040523060601b60a0523480156200001857600080fd5b5060405162002b2638038062002b268339810160408190526200003b91620002b5565b600080546001600160a01b0319163390811782556001600160601b0319606084901b1660805280825260026020526040909120805460ff191660019081179091556200008891906200008f565b50620002fd565b6001600160a01b038216620000eb5760405162461bcd60e51b815260206004820152601760248201527f4f535741503a20496e76616c6964206578656375746f7200000000000000000060448201526064015b60405180910390fd5b600a5415806200013f57506001600160a01b0382166000818152600b6020526040902054600a80549091908110620001275762000127620002e7565b6000918252602090912001546001600160a01b031614155b15620001a757600a80546001600160a01b0384166000818152600b60205260408120839055600183018455929092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b031916909117905562000218565b6001600160a01b0382166000908152600b6020526040902054620002185760405162461bcd60e51b815260206004820152602160248201527f4f535741503a2063616e6e6f74207265736574206d61696e206578656375746f6044820152603960f91b6064820152608401620000e2565b6001600160a01b0382166000908152600c60205260409020805460ff19168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b6001600160601b031916826200027a5760006200027d565b60015b604080516d3b37ba34b733a2bc32b1baba37b960911b8152602081019390935260ff9091169082015260600160405180910390a15050565b600060208284031215620002c857600080fd5b81516001600160a01b0381168114620002e057600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b60805160601c60a05160601c6127fd6200032960003960006103960152600061032401526127fd6000f3fe608060405234801561001057600080fd5b50600436106102e85760003560e01c80638da5cb5b11610191578063bba588ca116100e3578063d81fa48711610097578063f2fde38b11610071578063f2fde38b146106a4578063f6f04d7f146106b7578063f7b1bf7e146106d757600080fd5b8063d81fa48714610473578063e19888df14610630578063ef9414fc1461064357600080fd5b8063c10ebe4b116100c8578063c10ebe4b146105ea578063c20ecd1f146105fd578063d4ee1d901461061057600080fd5b8063bba588ca146105b7578063bc69b032146105d757600080fd5b80639723fb6d11610145578063a2f55ae51161011f578063a2f55ae514610579578063a3818b3b1461058c578063b8624127146105af57600080fd5b80639723fb6d1461051e5780639c52a7f1146105415780639d69dc4e1461055457600080fd5b8063919270501161017657806391927050146104ef5780639527afb41461050257806396e9c5601461050b57600080fd5b80638da5cb5b146104bc5780638f409ae9146104dc57600080fd5b80635a8124651161024a57806364efe63f116101fe57806378a1a9fa116101d857806378a1a9fa1461049957806382ad7119146104a1578063842c4835146104b457600080fd5b806364efe63f1461037e57806372ecb9d014610473578063788ddbcb1461048657600080fd5b8063605361721161022f578063605361721461045057806364305328146104585780636468fca11461046b57600080fd5b80635a812465146104325780635c975abb1461044557600080fd5b806330167bec116102a15780633fd8cc4e116102865780633fd8cc4e146103e6578063414016d814610409578063568621751461041257600080fd5b806330167bec146103915780633820a526146103b857600080fd5b806305268cff116102d257806305268cff1461031f57806309a34aa41461036b578063290b7e781461037e57600080fd5b80622e6074146102ed578063046f7da214610315575b600080fd5b6103006102fb366004612626565b6106ea565b60405190151581526020015b60405180910390f35b61031d610784565b005b6103467f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161030c565b6103006103793660046123cc565b61086c565b61031d61038c3660046123af565b6108a4565b6103467f000000000000000000000000000000000000000000000000000000000000000081565b6103d86103c63660046123af565b60056020526000908152604090205481565b60405190815260200161030c565b6103006103f43660046123af565b60026020526000908152604090205460ff1681565b6103d860065481565b600d546103469073ffffffffffffffffffffffffffffffffffffffff1681565b61031d6104403660046123af565b6108d4565b60035460ff16610300565b61031d610a46565b61031d61046636600461260d565b610b70565b61031d610d17565b61031d6104813660046123af565b610e7b565b61031d6104943660046123cc565b610ea8565b600a546103d8565b6103006104af3660046123cc565b610eda565b61031d610f0a565b6000546103469073ffffffffffffffffffffffffffffffffffffffff1681565b61031d6104ea36600461259f565b6110af565b6103466104fd36600461260d565b6112b4565b6103d860075481565b61031d610519366004612401565b6112eb565b61030061052c36600461260d565b60086020526000908152604090205460ff1681565b61031d61054f3660046123af565b6115ec565b60035461034690610100900473ffffffffffffffffffffffffffffffffffffffff1681565b61031d6105873660046123af565b61168c565b61030061059a3660046123af565b600c6020526000908152604090205460ff1681565b61031d61172f565b6009546103469073ffffffffffffffffffffffffffffffffffffffff1681565b6103006105e5366004612626565b611753565b61031d6105f836600461259f565b6117a2565b61031d61060b366004612479565b6118dc565b6001546103469073ffffffffffffffffffffffffffffffffffffffff1681565b61031d61063e3660046124e0565b611a28565b61069661065136600461260d565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff1682565b60405161030c929190612649565b61031d6106b23660046123af565b611d21565b6103d86106c53660046123af565b600b6020526000908152604090205481565b61031d6106e536600461260d565b611db8565b6000600160008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561072b5761072b612747565b148061077d575060035b60008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561077257610772612747565b14801561077d575081155b9392505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a857600080fd5b60035460ff16610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e4f54205041555345442100000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040517f490d6d11e278f168be9be39e46297f72ea877136d5bccad9cf4993e63a29568f90600090a1565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081205461089c8184611753565b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108c857600080fd5b6108d181611f57565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f857600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c206164647265737300000000000000000000000000000000000000006044820152606401610810565b600354610100900473ffffffffffffffffffffffffffffffffffffffff16156109fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616c7265616479207365740000000000000000000000000000000000000000006044820152606401610810565b6003805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610aed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610810565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60008181526004602052604090206002815474010000000000000000000000000000000000000000900460ff166004811115610bae57610bae612747565b14610c15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6e6f7420612067656e6572616c2074726f6c6c000000000000000000000000006044820152606401610810565b610c20336000610eda565b80610c3a57503360009081526002602052604090205460ff165b610ca0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f742066726f6d2073757065722074726f6c6c0000000000000000000000006044820152606401610810565b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167404000000000000000000000000000000000000000017815560405133815282907f7f685450453775986a82112c4cad63fd255a97ece09a2fca2bbca02c420fb748906020015b60405180910390a25050565b3360009081526002602052604090205460ff16610db6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610810565b60035460ff1615610e23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f50415553454421000000000000000000000000000000000000000000000000006044820152606401610810565b600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560405133907f28b4c24cb1012c094cd2f59f98e89d791973295f8fda6eaa118022d6d318960a90600090a2565b60005473ffffffffffffffffffffffffffffffffffffffff163314610e9f57600080fd5b6108d181611fca565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ecc57600080fd5b610ed6828261203d565b5050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526005602052604081205461089c81846106ea565b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef0609516040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7457600080fd5b505afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac91906125f0565b905073ffffffffffffffffffffffffffffffffffffffff811661102b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f72650000000000000000000000006044820152606401610810565b600380547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8481168202929092179283905560405192041681527f6fa6ee9ec7808d2a9699505042862d79597c4068938b960a4a18d584a2aa3eea906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff1633146110d357600080fd5b600082815260046020526040812090815474010000000000000000000000000000000000000000900460ff16600481111561111057611110612747565b1415611178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420612076616c69642074726f6c6c0000000000000000000000000000006044820152606401610810565b60405183907f3146e37097e6cad53dc6803fe565afb42bd0fa6d1c8f2770885428ba293f672290600090a2805473ffffffffffffffffffffffffffffffffffffffff16600090815260056020908152604080832083905585835260049182905290912080547fffffffffffffffffffffff00000000000000000000000000000000000000000016908190556001917401000000000000000000000000000000000000000090910460ff169081111561123257611232612747565b14156112525760068054906000611248836126aa565b91905055506112ad565b600160008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561129157611291612747565b14156112ad57600780549060006112a7836126aa565b91905055505b5050505050565b600a81815481106112c457600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461130f57600080fd5b600084815260046020819052604082205474010000000000000000000000000000000000000000900460ff169081111561134b5761134b612747565b146113b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f616c7265616479206164646564000000000000000000000000000000000000006044820152606401610810565b60405180604001604052808473ffffffffffffffffffffffffffffffffffffffff168152602001836113e55760026113e8565b60015b60048111156113f9576113f9612747565b90526000858152600460208181526040909220835181547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff9092169182178355938501519193919284927fffffffffffffffffffffff0000000000000000000000000000000000000000001690911790740100000000000000000000000000000000000000009084908111156114a8576114a8612747565b0217905550505073ffffffffffffffffffffffffffffffffffffffff83166000908152600560205260409020849055600160008581526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561151657611516612747565b1415611536576006805490600061152c836126df565b9190505550611591565b600160008581526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561157557611575612747565b1415611591576007805490600061158b836126df565b91905055505b838373ffffffffffffffffffffffffffffffffffffffff167f8c9d891ac7160986ec470eacfe13fdd4e04741d07abc6e880cd9cdb4d1e019cb846040516115dc911515815260200190565b60405180910390a3505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461161057600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491016110a4565b60005473ffffffffffffffffffffffffffffffffffffffff1633146116b057600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf591016110a4565b60005473ffffffffffffffffffffffffffffffffffffffff163314610db657600080fd5b6000600260008481526004602081905260409091205474010000000000000000000000000000000000000000900460ff169081111561179457611794612747565b148061077d57506004610735565b60005473ffffffffffffffffffffffffffffffffffffffff1633146117c657600080fd5b600082815260046020819052604090912090815474010000000000000000000000000000000000000000900460ff16600481111561180657611806612747565b1461186d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f7420696e206c6f636b6564207374617475730000000000000000000000006044820152606401610810565b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167402000000000000000000000000000000000000000017815560405183907f5190d96f5b35d80be130fe8fdbbe793dcb5b7df2507981d58b0787851c64186c90600090a25050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461190057600080fd5b60008381526004602052604090205473ffffffffffffffffffffffffffffffffffffffff168061198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6e6f7420657869737473000000000000000000000000000000000000000000006044820152606401610810565b73ffffffffffffffffffffffffffffffffffffffff81811660008181526005602081815260408084208490558984526004825280842080547fffffffffffffffffffffffff000000000000000000000000000000000000000016968a1696871790558584529190528082208890555187917fa809954178f86ac2228f0b080243af1f1e8fa8931fde712147cc69b266967cc191a4505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611a4c57600080fd5b60008781526004602052604090206003815474010000000000000000000000000000000000000000900460ff166004811115611a8a57611a8a612747565b14611af1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f7420696e206c6f636b6564207374617475730000000000000000000000006044820152606401610810565b84838114611b5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606401610810565b8715611b9f5781547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001782555b60005b81811015611d1357878782818110611bbc57611bbc612776565b9050602002016020810190611bd191906123af565b73ffffffffffffffffffffffffffffffffffffffff1663b5155a1b8b888885818110611bff57611bff612776565b905060200201356040518363ffffffff1660e01b8152600401611c2c929190918252602082015260400190565b600060405180830381600087803b158015611c4657600080fd5b505af1158015611c5a573d6000803e3d6000fd5b50505050897fdc296d8aadc3ba5ba13b757df60241d09dc546e017a11ca07f0b71fccc55d66f8a8a8a85818110611c9357611c93612776565b9050602002016020810190611ca891906123af565b898986818110611cba57611cba612776565b90506020020135604051611cf993929190921515835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60405180910390a280611d0b816126df565b915050611ba2565b505050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d4557600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b906020016110a4565b60008181526004602052604090206001815474010000000000000000000000000000000000000000900460ff166004811115611df657611df6612747565b14611e5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f7420612073757065722074726f6c6c0000000000000000000000000000006044820152606401610810565b611e68336000610eda565b80611e8257503360009081526002602052604090205460ff165b611ee8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6e6f742066726f6d2073757065722074726f6c6c0000000000000000000000006044820152606401610810565b80547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167403000000000000000000000000000000000000000017815560405133815282907fbb4243cf85be5a0fe6bee455e2c678ca74c8796416a6880ba7f98963ad83848990602001610d0b565b600d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f951c9bd637098cf919144d7f3755ae837b05fd4ccf465318c9e4298f8e3718c5906020016110a4565b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d906020016110a4565b73ffffffffffffffffffffffffffffffffffffffff82166120ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f535741503a20496e76616c6964206578656375746f720000000000000000006044820152606401610810565b600a541580612124575073ffffffffffffffffffffffffffffffffffffffff82166000818152600b6020526040902054600a805490919081106120ff576120ff612776565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b156121af57600a805473ffffffffffffffffffffffffffffffffffffffff84166000818152600b60205260408120839055600183018455929092527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055612261565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b6020526040902054612261576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4f535741503a2063616e6e6f74207265736574206d61696e206578656375746f60448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610810565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682612304576000612307565b60015b604080517f766f74696e674578656375746f720000000000000000000000000000000000008152602081019390935260ff9091169082015260600160405180910390a15050565b60008083601f84011261236057600080fd5b50813567ffffffffffffffff81111561237857600080fd5b6020830191508360208260051b850101111561239357600080fd5b9250929050565b803580151581146123aa57600080fd5b919050565b6000602082840312156123c157600080fd5b813561077d816127a5565b600080604083850312156123df57600080fd5b82356123ea816127a5565b91506123f86020840161239a565b90509250929050565b60008060008060008060a0878903121561241a57600080fd5b863567ffffffffffffffff81111561243157600080fd5b61243d89828a0161234e565b909750955050602087013593506040870135612458816127a5565b92506124666060880161239a565b9150608087013590509295509295509295565b60008060008060006080868803121561249157600080fd5b853567ffffffffffffffff8111156124a857600080fd5b6124b48882890161234e565b9096509450506020860135925060408601356124cf816127a5565b949793965091946060013592915050565b600080600080600080600080600060c08a8c0312156124fe57600080fd5b893567ffffffffffffffff8082111561251657600080fd5b6125228d838e0161234e565b909b50995060208c0135985089915061253d60408d0161239a565b975060608c013591508082111561255357600080fd5b61255f8d838e0161234e565b909750955060808c013591508082111561257857600080fd5b506125858c828d0161234e565b9a9d999c50979a9699959894979660a00135949350505050565b600080600080606085870312156125b557600080fd5b843567ffffffffffffffff8111156125cc57600080fd5b6125d88782880161234e565b90989097506020870135966040013595509350505050565b60006020828403121561260257600080fd5b815161077d816127a5565b60006020828403121561261f57600080fd5b5035919050565b6000806040838503121561263957600080fd5b823591506123f86020840161239a565b73ffffffffffffffffffffffffffffffffffffffff83168152604081016005831061269d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b6000816126b9576126b9612718565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561271157612711612718565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146108d157600080fdfea264697066735822122052ce8f15ff29f0b3ad9d33078b09100c63333bbb57d70f10346f34fa0b4875b464736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/MOCK_TrollRegistry.js
var require_MOCK_TrollRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/MOCK_TrollRegistry.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MOCK_TrollRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var MOCK_TrollRegistry_json_1 = __importDefault(require_MOCK_TrollRegistry_json());
    var MOCK_TrollRegistry = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, MOCK_TrollRegistry_json_1.default.abi, MOCK_TrollRegistry_json_1.default.bytecode);
        this.assign();
      }
      deploy(govToken) {
        return this.__deploy([govToken]);
      }
      parseAddTrollEvent(receipt) {
        return this.parseEvents(receipt, "AddTroll").map((e) => this.decodeAddTrollEvent(e));
      }
      decodeAddTrollEvent(event) {
        let result = event.data;
        return {
          troll: result.troll,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          isSuperTroll: result.isSuperTroll,
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDelistTrollEvent(receipt) {
        return this.parseEvents(receipt, "DelistTroll").map((e) => this.decodeDelistTrollEvent(e));
      }
      decodeDelistTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          _event: event
        };
      }
      parseLockGeneralTrollEvent(receipt) {
        return this.parseEvents(receipt, "LockGeneralTroll").map((e) => this.decodeLockGeneralTrollEvent(e));
      }
      decodeLockGeneralTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          lockedBy: result.lockedBy,
          _event: event
        };
      }
      parseLockSuperTrollEvent(receipt) {
        return this.parseEvents(receipt, "LockSuperTroll").map((e) => this.decodeLockSuperTrollEvent(e));
      }
      decodeLockSuperTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          lockedBy: result.lockedBy,
          _event: event
        };
      }
      parseParamSetEvent(receipt) {
        return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
      }
      decodeParamSetEvent(event) {
        let result = event.data;
        return {
          name: result.name,
          value: result.value,
          _event: event
        };
      }
      parseParamSet2Event(receipt) {
        return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
      }
      decodeParamSet2Event(event) {
        let result = event.data;
        return {
          name: result.name,
          value1: result.value1,
          value2: result.value2,
          _event: event
        };
      }
      parseRemoveTrollEvent(receipt) {
        return this.parseEvents(receipt, "RemoveTroll").map((e) => this.decodeRemoveTrollEvent(e));
      }
      decodeRemoveTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          _event: event
        };
      }
      parseResumeEvent(receipt) {
        return this.parseEvents(receipt, "Resume").map((e) => this.decodeResumeEvent(e));
      }
      decodeResumeEvent(event) {
        let result = event.data;
        return {
          _event: event
        };
      }
      parseSetVotingExecutorEvent(receipt) {
        return this.parseEvents(receipt, "SetVotingExecutor").map((e) => this.decodeSetVotingExecutorEvent(e));
      }
      decodeSetVotingExecutorEvent(event) {
        let result = event.data;
        return {
          newVotingExecutor: result.newVotingExecutor,
          isActive: result.isActive,
          _event: event
        };
      }
      parseShutdownEvent(receipt) {
        return this.parseEvents(receipt, "Shutdown").map((e) => this.decodeShutdownEvent(e));
      }
      decodeShutdownEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnlockGeneralTrollEvent(receipt) {
        return this.parseEvents(receipt, "UnlockGeneralTroll").map((e) => this.decodeUnlockGeneralTrollEvent(e));
      }
      decodeUnlockGeneralTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          _event: event
        };
      }
      parseUnlockSuperTrollEvent(receipt) {
        return this.parseEvents(receipt, "UnlockSuperTroll").map((e) => this.decodeUnlockSuperTrollEvent(e));
      }
      decodeUnlockSuperTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          unlock: result.unlock,
          bridgeVault: result.bridgeVault,
          penalty: new eth_wallet_1.BigNumber(result.penalty),
          _event: event
        };
      }
      parseUpdateConfigStoreEvent(receipt) {
        return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
      }
      decodeUpdateConfigStoreEvent(event) {
        let result = event.data;
        return {
          newConfigStore: result.newConfigStore,
          _event: event
        };
      }
      parseUpdateTrollEvent(receipt) {
        return this.parseEvents(receipt, "UpdateTroll").map((e) => this.decodeUpdateTrollEvent(e));
      }
      decodeUpdateTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          oldTroll: result.oldTroll,
          newTroll: result.newTroll,
          _event: event
        };
      }
      parseUpgradeEvent(receipt) {
        return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
      }
      decodeUpgradeEvent(event) {
        let result = event.data;
        return {
          newTrollRegistry: result.newTrollRegistry,
          _event: event
        };
      }
      parseUpgradeVotingManagerEvent(receipt) {
        return this.parseEvents(receipt, "UpgradeVotingManager").map((e) => this.decodeUpgradeVotingManagerEvent(e));
      }
      decodeUpgradeVotingManagerEvent(event) {
        let result = event.data;
        return {
          newVotingManager: result.newVotingManager,
          _event: event
        };
      }
      assign() {
        let configStore_call = async () => {
          let result = await this.call("configStore");
          return result;
        };
        this.configStore = configStore_call;
        let generalTrollCount_call = async () => {
          let result = await this.call("generalTrollCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.generalTrollCount = generalTrollCount_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let isGeneralTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
        let isGeneralTroll_call = async (params) => {
          let result = await this.call("isGeneralTroll", isGeneralTrollParams(params));
          return result;
        };
        this.isGeneralTroll = isGeneralTroll_call;
        let isGeneralTrollByIndexParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
        let isGeneralTrollByIndex_call = async (params) => {
          let result = await this.call("isGeneralTrollByIndex", isGeneralTrollByIndexParams(params));
          return result;
        };
        this.isGeneralTrollByIndex = isGeneralTrollByIndex_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let isSuperTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
        let isSuperTroll_call = async (params) => {
          let result = await this.call("isSuperTroll", isSuperTrollParams(params));
          return result;
        };
        this.isSuperTroll = isSuperTroll_call;
        let isSuperTrollByIndexParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
        let isSuperTrollByIndex_call = async (params) => {
          let result = await this.call("isSuperTrollByIndex", isSuperTrollByIndexParams(params));
          return result;
        };
        this.isSuperTrollByIndex = isSuperTrollByIndex_call;
        let isVotingExecutor_call = async (param1) => {
          let result = await this.call("isVotingExecutor", [param1]);
          return result;
        };
        this.isVotingExecutor = isVotingExecutor_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let newTrollRegistry_call = async () => {
          let result = await this.call("newTrollRegistry");
          return result;
        };
        this.newTrollRegistry = newTrollRegistry_call;
        let newVotingManager_call = async () => {
          let result = await this.call("newVotingManager");
          return result;
        };
        this.newVotingManager = newVotingManager_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let paused_call = async () => {
          let result = await this.call("paused");
          return result;
        };
        this.paused = paused_call;
        let superTrollCount_call = async () => {
          let result = await this.call("superTrollCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.superTrollCount = superTrollCount_call;
        let trollProfileInv_call = async (param1) => {
          let result = await this.call("trollProfileInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollProfileInv = trollProfileInv_call;
        let trollProfiles_call = async (param1) => {
          let result = await this.call("trollProfiles", [eth_wallet_1.Utils.toString(param1)]);
          return {
            troll: result.troll,
            trollType: new eth_wallet_1.BigNumber(result.trollType)
          };
        };
        this.trollProfiles = trollProfiles_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let usedNonce_call = async (param1) => {
          let result = await this.call("usedNonce", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.usedNonce = usedNonce_call;
        let votingExecutor_call = async (param1) => {
          let result = await this.call("votingExecutor", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.votingExecutor = votingExecutor_call;
        let votingExecutorInv_call = async (param1) => {
          let result = await this.call("votingExecutorInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingExecutorInv = votingExecutorInv_call;
        let votingExecutorLength_call = async () => {
          let result = await this.call("votingExecutorLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingExecutorLength = votingExecutorLength_call;
        let addTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), params.troll, params.isSuperTroll, eth_wallet_1.Utils.toString(params.nonce)];
        let addTroll_send = async (params) => {
          let result = await this.send("addTroll", addTrollParams(params));
          return result;
        };
        let addTroll_call = async (params) => {
          let result = await this.call("addTroll", addTrollParams(params));
          return;
        };
        this.addTroll = Object.assign(addTroll_send, {
          call: addTroll_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let initAddress_send = async (configStore) => {
          let result = await this.send("initAddress", [configStore]);
          return result;
        };
        let initAddress_call = async (configStore) => {
          let result = await this.call("initAddress", [configStore]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let lockGeneralTroll_send = async (trollProfileIndex) => {
          let result = await this.send("lockGeneralTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return result;
        };
        let lockGeneralTroll_call = async (trollProfileIndex) => {
          let result = await this.call("lockGeneralTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return;
        };
        this.lockGeneralTroll = Object.assign(lockGeneralTroll_send, {
          call: lockGeneralTroll_call
        });
        let lockSuperTroll_send = async (trollProfileIndex) => {
          let result = await this.send("lockSuperTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return result;
        };
        let lockSuperTroll_call = async (trollProfileIndex) => {
          let result = await this.call("lockSuperTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return;
        };
        this.lockSuperTroll = Object.assign(lockSuperTroll_send, {
          call: lockSuperTroll_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let removeTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.nonce)];
        let removeTroll_send = async (params) => {
          let result = await this.send("removeTroll", removeTrollParams(params));
          return result;
        };
        let removeTroll_call = async (params) => {
          let result = await this.call("removeTroll", removeTrollParams(params));
          return;
        };
        this.removeTroll = Object.assign(removeTroll_send, {
          call: removeTroll_call
        });
        let resume_send = async () => {
          let result = await this.send("resume");
          return result;
        };
        let resume_call = async () => {
          let result = await this.call("resume");
          return;
        };
        this.resume = Object.assign(resume_send, {
          call: resume_call
        });
        let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
        let setVotingExecutor_send = async (params) => {
          let result = await this.send("setVotingExecutor", setVotingExecutorParams(params));
          return result;
        };
        let setVotingExecutor_call = async (params) => {
          let result = await this.call("setVotingExecutor", setVotingExecutorParams(params));
          return;
        };
        this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
          call: setVotingExecutor_call
        });
        let shutdownByAdmin_send = async () => {
          let result = await this.send("shutdownByAdmin");
          return result;
        };
        let shutdownByAdmin_call = async () => {
          let result = await this.call("shutdownByAdmin");
          return;
        };
        this.shutdownByAdmin = Object.assign(shutdownByAdmin_send, {
          call: shutdownByAdmin_call
        });
        let shutdownByVoting_send = async () => {
          let result = await this.send("shutdownByVoting");
          return result;
        };
        let shutdownByVoting_call = async () => {
          let result = await this.call("shutdownByVoting");
          return;
        };
        this.shutdownByVoting = Object.assign(shutdownByVoting_send, {
          call: shutdownByVoting_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let unlockGeneralTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.nonce)];
        let unlockGeneralTroll_send = async (params) => {
          let result = await this.send("unlockGeneralTroll", unlockGeneralTrollParams(params));
          return result;
        };
        let unlockGeneralTroll_call = async (params) => {
          let result = await this.call("unlockGeneralTroll", unlockGeneralTrollParams(params));
          return;
        };
        this.unlockGeneralTroll = Object.assign(unlockGeneralTroll_send, {
          call: unlockGeneralTroll_call
        });
        let unlockSuperTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), params.unlock, params.vaultRegistry, eth_wallet_1.Utils.toString(params.penalty), eth_wallet_1.Utils.toString(params.nonce)];
        let unlockSuperTroll_send = async (params) => {
          let result = await this.send("unlockSuperTroll", unlockSuperTrollParams(params));
          return result;
        };
        let unlockSuperTroll_call = async (params) => {
          let result = await this.call("unlockSuperTroll", unlockSuperTrollParams(params));
          return;
        };
        this.unlockSuperTroll = Object.assign(unlockSuperTroll_send, {
          call: unlockSuperTroll_call
        });
        let updateConfigStore_send = async () => {
          let result = await this.send("updateConfigStore");
          return result;
        };
        let updateConfigStore_call = async () => {
          let result = await this.call("updateConfigStore");
          return;
        };
        this.updateConfigStore = Object.assign(updateConfigStore_send, {
          call: updateConfigStore_call
        });
        let updateTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), params.newTroll, eth_wallet_1.Utils.toString(params.nonce)];
        let updateTroll_send = async (params) => {
          let result = await this.send("updateTroll", updateTrollParams(params));
          return result;
        };
        let updateTroll_call = async (params) => {
          let result = await this.call("updateTroll", updateTrollParams(params));
          return;
        };
        this.updateTroll = Object.assign(updateTroll_send, {
          call: updateTroll_call
        });
        let upgradeTrollRegistry_send = async (trollRegistry) => {
          let result = await this.send("upgradeTrollRegistry", [trollRegistry]);
          return result;
        };
        let upgradeTrollRegistry_call = async (trollRegistry) => {
          let result = await this.call("upgradeTrollRegistry", [trollRegistry]);
          return;
        };
        this.upgradeTrollRegistry = Object.assign(upgradeTrollRegistry_send, {
          call: upgradeTrollRegistry_call
        });
        let upgradeTrollRegistryByAdmin_send = async (trollRegistry) => {
          let result = await this.send("upgradeTrollRegistryByAdmin", [trollRegistry]);
          return result;
        };
        let upgradeTrollRegistryByAdmin_call = async (trollRegistry) => {
          let result = await this.call("upgradeTrollRegistryByAdmin", [trollRegistry]);
          return;
        };
        this.upgradeTrollRegistryByAdmin = Object.assign(upgradeTrollRegistryByAdmin_send, {
          call: upgradeTrollRegistryByAdmin_call
        });
        let upgradeVotingManager_send = async (votingManager) => {
          let result = await this.send("upgradeVotingManager", [votingManager]);
          return result;
        };
        let upgradeVotingManager_call = async (votingManager) => {
          let result = await this.call("upgradeVotingManager", [votingManager]);
          return;
        };
        this.upgradeVotingManager = Object.assign(upgradeVotingManager_send, {
          call: upgradeVotingManager_call
        });
        let upgradeVotingManagerByAdmin_send = async (votingManager) => {
          let result = await this.send("upgradeVotingManagerByAdmin", [votingManager]);
          return result;
        };
        let upgradeVotingManagerByAdmin_call = async (votingManager) => {
          let result = await this.call("upgradeVotingManagerByAdmin", [votingManager]);
          return;
        };
        this.upgradeVotingManagerByAdmin = Object.assign(upgradeVotingManagerByAdmin_send, {
          call: upgradeVotingManagerByAdmin_call
        });
      }
    };
    exports.MOCK_TrollRegistry = MOCK_TrollRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/MintableToken.json.js
var require_MintableToken_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/MintableToken.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burn", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "burnFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "mint", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/MintableToken.js
var require_MintableToken = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/MintableToken.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MintableToken = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var MintableToken_json_1 = __importDefault(require_MintableToken_json());
    var MintableToken = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, MintableToken_json_1.default.abi, MintableToken_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          spender: result.spender,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      assign() {
        let allowanceParams = (params) => [params.owner, params.spender];
        let allowance_call = async (params) => {
          let result = await this.call("allowance", allowanceParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.allowance = allowance_call;
        let balanceOf_call = async (account) => {
          let result = await this.call("balanceOf", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.amount)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return result;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let burn_send = async (amount) => {
          let result = await this.send("burn", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let burn_call = async (amount) => {
          let result = await this.call("burn", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.burn = Object.assign(burn_send, {
          call: burn_call
        });
        let burnFromParams = (params) => [params.account, eth_wallet_1.Utils.toString(params.amount)];
        let burnFrom_send = async (params) => {
          let result = await this.send("burnFrom", burnFromParams(params));
          return result;
        };
        let burnFrom_call = async (params) => {
          let result = await this.call("burnFrom", burnFromParams(params));
          return;
        };
        this.burnFrom = Object.assign(burnFrom_send, {
          call: burnFrom_call
        });
        let decreaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.subtractedValue)];
        let decreaseAllowance_send = async (params) => {
          let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        let decreaseAllowance_call = async (params) => {
          let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
          call: decreaseAllowance_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let increaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.addedValue)];
        let increaseAllowance_send = async (params) => {
          let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        let increaseAllowance_call = async (params) => {
          let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        this.increaseAllowance = Object.assign(increaseAllowance_send, {
          call: increaseAllowance_call
        });
        let mintParams = (params) => [params.account, eth_wallet_1.Utils.toString(params.amount)];
        let mint_send = async (params) => {
          let result = await this.send("mint", mintParams(params));
          return result;
        };
        let mint_call = async (params) => {
          let result = await this.call("mint", mintParams(params));
          return result;
        };
        this.mint = Object.assign(mint_send, {
          call: mint_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferParams = (params) => [params.recipient, eth_wallet_1.Utils.toString(params.amount)];
        let transfer_send = async (params) => {
          let result = await this.send("transfer", transferParams(params));
          return result;
        };
        let transfer_call = async (params) => {
          let result = await this.call("transfer", transferParams(params));
          return result;
        };
        this.transfer = Object.assign(transfer_send, {
          call: transfer_call
        });
        let transferFromParams = (params) => [params.sender, params.recipient, eth_wallet_1.Utils.toString(params.amount)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return result;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
      }
    };
    exports.MintableToken = MintableToken;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVaultTrollRegistry.json.js
var require_OSWAP_BridgeVaultTrollRegistry_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVaultTrollRegistry.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "_trollRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Penalty", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "backerBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "trollBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "totalShares", "type": "uint256" }], "name": "Stake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "approvalDecrement", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "trollBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "totalShares", "type": "uint256" }], "name": "Unstake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "address", "name": "msgSender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }], "name": "UnstakeApproval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "shares", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "backerBalance", "type": "uint256" }], "name": "UnstakeRequest", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "newTrollRegistry", "type": "address" }], "name": "UpdateTrollRegistry", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "backerStakes", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }, { "internalType": "uint256", "name": "pendingWithdrawal", "type": "uint256" }, { "internalType": "uint256", "name": "approvedWithdrawal", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "bridgeVault", "outputs": [{ "internalType": "contract IOSWAP_BridgeVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getBackers", "outputs": [{ "internalType": "address[]", "name": "backers", "type": "address[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashUnstakeRequest", "outputs": [{ "internalType": "bytes32", "name": "hash", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IOSWAP_BridgeVault", "name": "_bridgeVault", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lastTrollTxCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }], "name": "maxWithdrawal", "outputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "penalizeSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "shares", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakedBy", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "stakedByInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "stakedByLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "transactionsCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollStakesBalances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollStakesTotalShares", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "shares", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unstakeApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "shares", "type": "uint256" }], "name": "unstakeRequest", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateTrollRegistry", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "usedNonce", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "msgSender", "type": "address" }, { "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32", "name": "paramsHash", "type": "bytes32" }], "name": "verifyStakedValue", "outputs": [{ "internalType": "uint256", "name": "superTrollCount", "type": "uint256" }, { "internalType": "uint256", "name": "totalStake", "type": "uint256" }, { "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVaultTrollRegistry.js
var require_OSWAP_BridgeVaultTrollRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVaultTrollRegistry.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_BridgeVaultTrollRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_BridgeVaultTrollRegistry_json_1 = __importDefault(require_OSWAP_BridgeVaultTrollRegistry_json());
    var OSWAP_BridgeVaultTrollRegistry = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_BridgeVaultTrollRegistry_json_1.default.abi, OSWAP_BridgeVaultTrollRegistry_json_1.default.bytecode);
        this.assign();
      }
      deploy(trollRegistry) {
        return this.__deploy([trollRegistry]);
      }
      parsePenaltyEvent(receipt) {
        return this.parseEvents(receipt, "Penalty").map((e) => this.decodePenaltyEvent(e));
      }
      decodePenaltyEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStakeEvent(receipt) {
        return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
      }
      decodeStakeEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          amount: new eth_wallet_1.BigNumber(result.amount),
          shares: new eth_wallet_1.BigNumber(result.shares),
          backerBalance: new eth_wallet_1.BigNumber(result.backerBalance),
          trollBalance: new eth_wallet_1.BigNumber(result.trollBalance),
          totalShares: new eth_wallet_1.BigNumber(result.totalShares),
          _event: event
        };
      }
      parseUnstakeEvent(receipt) {
        return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
      }
      decodeUnstakeEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          amount: new eth_wallet_1.BigNumber(result.amount),
          shares: new eth_wallet_1.BigNumber(result.shares),
          approvalDecrement: new eth_wallet_1.BigNumber(result.approvalDecrement),
          trollBalance: new eth_wallet_1.BigNumber(result.trollBalance),
          totalShares: new eth_wallet_1.BigNumber(result.totalShares),
          _event: event
        };
      }
      parseUnstakeApprovalEvent(receipt) {
        return this.parseEvents(receipt, "UnstakeApproval").map((e) => this.decodeUnstakeApprovalEvent(e));
      }
      decodeUnstakeApprovalEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          msgSender: result.msgSender,
          signers: result.signers.map((e) => new eth_wallet_1.BigNumber(e)),
          shares: new eth_wallet_1.BigNumber(result.shares),
          _event: event
        };
      }
      parseUnstakeRequestEvent(receipt) {
        return this.parseEvents(receipt, "UnstakeRequest").map((e) => this.decodeUnstakeRequestEvent(e));
      }
      decodeUnstakeRequestEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          shares: new eth_wallet_1.BigNumber(result.shares),
          backerBalance: new eth_wallet_1.BigNumber(result.backerBalance),
          _event: event
        };
      }
      parseUpdateConfigStoreEvent(receipt) {
        return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
      }
      decodeUpdateConfigStoreEvent(event) {
        let result = event.data;
        return {
          newConfigStore: result.newConfigStore,
          _event: event
        };
      }
      parseUpdateTrollRegistryEvent(receipt) {
        return this.parseEvents(receipt, "UpdateTrollRegistry").map((e) => this.decodeUpdateTrollRegistryEvent(e));
      }
      decodeUpdateTrollRegistryEvent(event) {
        let result = event.data;
        return {
          newTrollRegistry: result.newTrollRegistry,
          _event: event
        };
      }
      assign() {
        let backerStakes_call = async (param1) => {
          let result = await this.call("backerStakes", [param1]);
          return {
            trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
            shares: new eth_wallet_1.BigNumber(result.shares),
            pendingWithdrawal: new eth_wallet_1.BigNumber(result.pendingWithdrawal),
            approvedWithdrawal: new eth_wallet_1.BigNumber(result.approvedWithdrawal)
          };
        };
        this.backerStakes = backerStakes_call;
        let bridgeVault_call = async () => {
          let result = await this.call("bridgeVault");
          return result;
        };
        this.bridgeVault = bridgeVault_call;
        let configStore_call = async () => {
          let result = await this.call("configStore");
          return result;
        };
        this.configStore = configStore_call;
        let getBackers_call = async (trollProfileIndex) => {
          let result = await this.call("getBackers", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return result;
        };
        this.getBackers = getBackers_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let hashUnstakeRequestParams = (params) => [params.backer, eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.shares), eth_wallet_1.Utils.toString(params.nonce)];
        let hashUnstakeRequest_call = async (params) => {
          let result = await this.call("hashUnstakeRequest", hashUnstakeRequestParams(params));
          return result;
        };
        this.hashUnstakeRequest = hashUnstakeRequest_call;
        let lastTrollTxCount_call = async (param1) => {
          let result = await this.call("lastTrollTxCount", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lastTrollTxCount = lastTrollTxCount_call;
        let maxWithdrawal_call = async (backer) => {
          let result = await this.call("maxWithdrawal", [backer]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.maxWithdrawal = maxWithdrawal_call;
        let stakedByParams = (params) => [eth_wallet_1.Utils.toString(params.param1), eth_wallet_1.Utils.toString(params.param2)];
        let stakedBy_call = async (params) => {
          let result = await this.call("stakedBy", stakedByParams(params));
          return result;
        };
        this.stakedBy = stakedBy_call;
        let stakedByInvParams = (params) => [eth_wallet_1.Utils.toString(params.param1), params.param2];
        let stakedByInv_call = async (params) => {
          let result = await this.call("stakedByInv", stakedByInvParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakedByInv = stakedByInv_call;
        let stakedByLength_call = async (trollProfileIndex) => {
          let result = await this.call("stakedByLength", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakedByLength = stakedByLength_call;
        let transactionsCount_call = async () => {
          let result = await this.call("transactionsCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.transactionsCount = transactionsCount_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let trollStakesBalances_call = async (param1) => {
          let result = await this.call("trollStakesBalances", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollStakesBalances = trollStakesBalances_call;
        let trollStakesTotalShares_call = async (param1) => {
          let result = await this.call("trollStakesTotalShares", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollStakesTotalShares = trollStakesTotalShares_call;
        let usedNonce_call = async (param1) => {
          let result = await this.call("usedNonce", [eth_wallet_1.Utils.stringToBytes32(param1)]);
          return result;
        };
        this.usedNonce = usedNonce_call;
        let initAddress_send = async (bridgeVault) => {
          let result = await this.send("initAddress", [bridgeVault]);
          return result;
        };
        let initAddress_call = async (bridgeVault) => {
          let result = await this.call("initAddress", [bridgeVault]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let penalizeSuperTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.amount)];
        let penalizeSuperTroll_send = async (params) => {
          let result = await this.send("penalizeSuperTroll", penalizeSuperTrollParams(params));
          return result;
        };
        let penalizeSuperTroll_call = async (params) => {
          let result = await this.call("penalizeSuperTroll", penalizeSuperTrollParams(params));
          return;
        };
        this.penalizeSuperTroll = Object.assign(penalizeSuperTroll_send, {
          call: penalizeSuperTroll_call
        });
        let stakeParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.amount)];
        let stake_send = async (params) => {
          let result = await this.send("stake", stakeParams(params));
          return result;
        };
        let stake_call = async (params) => {
          let result = await this.call("stake", stakeParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.stake = Object.assign(stake_send, {
          call: stake_call
        });
        let unstakeParams = (params) => [params.backer, eth_wallet_1.Utils.toString(params.shares)];
        let unstake_send = async (params) => {
          let result = await this.send("unstake", unstakeParams(params));
          return result;
        };
        let unstake_call = async (params) => {
          let result = await this.call("unstake", unstakeParams(params));
          return;
        };
        this.unstake = Object.assign(unstake_send, {
          call: unstake_call
        });
        let unstakeApproveParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), params.backer, eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.shares), eth_wallet_1.Utils.toString(params.nonce)];
        let unstakeApprove_send = async (params) => {
          let result = await this.send("unstakeApprove", unstakeApproveParams(params));
          return result;
        };
        let unstakeApprove_call = async (params) => {
          let result = await this.call("unstakeApprove", unstakeApproveParams(params));
          return;
        };
        this.unstakeApprove = Object.assign(unstakeApprove_send, {
          call: unstakeApprove_call
        });
        let unstakeRequest_send = async (shares) => {
          let result = await this.send("unstakeRequest", [eth_wallet_1.Utils.toString(shares)]);
          return result;
        };
        let unstakeRequest_call = async (shares) => {
          let result = await this.call("unstakeRequest", [eth_wallet_1.Utils.toString(shares)]);
          return;
        };
        this.unstakeRequest = Object.assign(unstakeRequest_send, {
          call: unstakeRequest_call
        });
        let updateConfigStore_send = async () => {
          let result = await this.send("updateConfigStore");
          return result;
        };
        let updateConfigStore_call = async () => {
          let result = await this.call("updateConfigStore");
          return;
        };
        this.updateConfigStore = Object.assign(updateConfigStore_send, {
          call: updateConfigStore_call
        });
        let updateTrollRegistry_send = async () => {
          let result = await this.send("updateTrollRegistry");
          return result;
        };
        let updateTrollRegistry_call = async () => {
          let result = await this.call("updateTrollRegistry");
          return;
        };
        this.updateTrollRegistry = Object.assign(updateTrollRegistry_send, {
          call: updateTrollRegistry_call
        });
        let verifyStakedValueParams = (params) => [params.msgSender, eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.stringToBytes32(params.paramsHash)];
        let verifyStakedValue_send = async (params) => {
          let result = await this.send("verifyStakedValue", verifyStakedValueParams(params));
          return result;
        };
        let verifyStakedValue_call = async (params) => {
          let result = await this.call("verifyStakedValue", verifyStakedValueParams(params));
          return {
            superTrollCount: new eth_wallet_1.BigNumber(result.superTrollCount),
            totalStake: new eth_wallet_1.BigNumber(result.totalStake),
            signers: result.signers.map((e) => new eth_wallet_1.BigNumber(e))
          };
        };
        this.verifyStakedValue = Object.assign(verifyStakedValue_send, {
          call: verifyStakedValue_call
        });
      }
    };
    exports.OSWAP_BridgeVaultTrollRegistry = OSWAP_BridgeVaultTrollRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistry.json.js
var require_OSWAP_ChainRegistry_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistry.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "_votingExecutorManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": false, "internalType": "enum OSWAP_ChainRegistry.Status", "name": "status", "type": "uint8" }, { "indexed": false, "internalType": "contract IERC20", "name": "govToken", "type": "address" }], "name": "NewChain", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": true, "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "indexed": false, "internalType": "address", "name": "_address", "type": "address" }], "name": "UpdateAddress", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "_address", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "indexed": false, "internalType": "address", "name": "_address", "type": "address" }], "name": "UpdateMainChainAddress", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "indexed": false, "internalType": "enum OSWAP_ChainRegistry.Status", "name": "status", "type": "uint8" }], "name": "UpdateStatus", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "index", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "indexed": false, "internalType": "struct OSWAP_ChainRegistry.Vault", "name": "vault", "type": "tuple" }], "name": "UpdateVault", "type": "event" },
        { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "enum OSWAP_ChainRegistry.Status", "name": "_status", "type": "uint8" }, { "internalType": "contract IERC20", "name": "_govToken", "type": "address" }, { "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }, { "internalType": "bytes32[]", "name": "contractNames", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_address", "type": "address[]" }], "name": "addChain", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "allChains", "outputs": [{ "internalType": "uint256[]", "name": "", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "chains", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "chainsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "bytes32[]", "name": "contractnames", "type": "bytes32[]" }], "name": "getChain", "outputs": [{ "internalType": "enum OSWAP_ChainRegistry.Status", "name": "_status", "type": "uint8" }, { "internalType": "contract IERC20", "name": "_govToken", "type": "address" }, { "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }, { "internalType": "address[]", "name": "_contracts", "type": "address[]" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault[]", "name": "_vaults", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256[]", "name": "chainId", "type": "uint256[]" }, { "internalType": "enum OSWAP_ChainRegistry.Status[]", "name": "_status", "type": "uint8[]" }, { "internalType": "contract IERC20[]", "name": "_govToken", "type": "address[]" }, { "internalType": "contract OSWAP_ConfigStore[]", "name": "_configStore", "type": "address[]" }, { "internalType": "bytes32[]", "name": "mainChainContractNames", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_mainChainContractAddress", "type": "address[]" }, { "internalType": "bytes32[]", "name": "contractNames", "type": "bytes32[]" }, { "internalType": "address[][]", "name": "_address", "type": "address[][]" }, { "internalType": "bytes32[]", "name": "_tokenNames", "type": "bytes32[]" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault[][]", "name": "vault", "type": "tuple[][]" }], "name": "init", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "mainChainContractAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256[]", "name": "chainId", "type": "uint256[]" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault[]", "name": "vault", "type": "tuple[]" }], "name": "newVault", "outputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "sideChainContractAddress", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "status", "outputs": [{ "internalType": "enum OSWAP_ChainRegistry.Status", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "tokenNames", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "tokenNamesLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "internalType": "address", "name": "_address", "type": "address" }], "name": "updateAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "bytes32[]", "name": "contractNames", "type": "bytes32[]" }, { "internalType": "address[]", "name": "_addresses", "type": "address[]" }], "name": "updateAddresses", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "contract OSWAP_ConfigStore", "name": "_address", "type": "address" }], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "contractName", "type": "bytes32" }, { "internalType": "address", "name": "_address", "type": "address" }], "name": "updateMainChainAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "internalType": "enum OSWAP_ChainRegistry.Status", "name": "_status", "type": "uint8" }], "name": "updateStatus", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }, { "internalType": "uint256", "name": "chainId", "type": "uint256" }, { "components": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "internalType": "struct OSWAP_ChainRegistry.Vault", "name": "vault", "type": "tuple" }], "name": "updateVault", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "vaults", "outputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "address", "name": "vaultRegistry", "type": "address" }, { "internalType": "address", "name": "bridgeVault", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "vaultsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingExecutorManager", "outputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60806040523480156200001157600080fd5b50604051620030a1380380620030a1833981016040819052620000349162000063565b600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905562000095565b6000602082840312156200007657600080fd5b81516001600160a01b03811681146200008e57600080fd5b9392505050565b612ffc80620000a56000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80637f3f94b1116100e3578063bc91a18e1161008c578063cc06597511610066578063cc0659751461040f578063df360c3414610417578063fc85a2871461045857600080fd5b8063bc91a18e146103a6578063c2b504ec146103dc578063c7e7dec6146103fc57600080fd5b8063b4f807e3116100bd578063b4f807e314610339578063b833424e1461036f578063bc0201ec1461038257600080fd5b80637f3f94b11461031457806382af54c9146103295780639ffa446a1461033157600080fd5b806342d21ef711610145578063550325b51161011f578063550325b5146102a457806366a82a51146102b757806372f423321461030157600080fd5b806342d21ef71461020657806342f064c9146102365780634e763cd01461029157600080fd5b80632a391db4116101765780632a391db4146101ba578063310495ab146101cd5780633a1b3d31146101f357600080fd5b8063010b0cc91461019257806310261785146101a7575b600080fd5b6101a56101a0366004612973565b61046b565b005b6101a56101b53660046127a6565b610585565b6101a56101c8366004612b79565b610979565b6101e06101db36600461295a565b610a96565b6040519081526020015b60405180910390f35b6101a5610201366004612b4d565b610ab7565b61022961021436600461295a565b60036020526000908152604090205460ff1681565b6040516101ea9190612cd0565b61026c61024436600461295a565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ea565b6101a561029f366004612c1b565b610d6a565b6101e06102b236600461295a565b611040565b6102ca6102c5366004612af2565b611050565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216918101919091526060016101ea565b6101a561030f366004612973565b6110a5565b61031c6112b9565b6040516101ea9190612c8c565b6009546101e0565b6002546101e0565b61026c61034736600461295a565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6101e061037d3660046129a3565b611311565b610395610390366004612a10565b61142c565b6040516101ea959493929190612d15565b61026c6103b436600461295a565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60015461026c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101a561040a366004612b14565b6116a3565b6008546101e0565b61026c610425366004612af2565b600560209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6101a5610466366004612a8f565b6118c1565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156104d457600080fd5b505afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190612931565b610577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064015b60405180910390fd5b6105818282611bff565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105a957600080fd5b60025415610613576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f616c726561647920696e69740000000000000000000000000000000000000000604482015260640161056e565b895161067b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c6964206c656e677468000000000000000000000000000000000000604482015260640161056e565b88518a5114801561068d575087518a51145b801561069a575086518a51145b80156106a7575082518a51145b61070d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b8451865114610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60005b86518110156107d2576107c087828151811061079957610799612f43565b60200260200101518783815181106107b3576107b3612f43565b6020026020010151611bff565b806107ca81612eb4565b91505061077b565b5060005b8a5181101561087c5761086a8b82815181106107f4576107f4612f43565b60200260200101518b838151811061080e5761080e612f43565b60200260200101518b848151811061082857610828612f43565b60200260200101518b858151811061084257610842612f43565b60200260200101518989878151811061085d5761085d612f43565b6020026020010151611c81565b8061087481612eb4565b9150506107d6565b5080518251146108e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60005b82518110156109445761093183828151811061090957610909612f43565b60200260200101518c84848151811061092457610924612f43565b60200260200101516120c4565b508061093c81612eb4565b9150506108eb565b5050600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055505050505050505050565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156109e257600080fd5b505afa1580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190612931565b610a80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b610a8e868686868686611c81565b505050505050565b60088181548110610aa657600080fd5b600091825260209091200154905081565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b158015610b2057600080fd5b505afa158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190612931565b610bbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008281526003602052604081205460ff166002811115610be157610be1612f14565b1415610c49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b6001816002811115610c5d57610c5d612f14565b1480610c7a57506002816002811115610c7857610c78612f14565b145b610ce0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420737461747573000000000000000000000000000000000000604482015260640161056e565b600082815260036020526040902080548291907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836002811115610d2957610d29612f14565b0217905550817f1ec5c05690dbdf3fe6eeaa13c3026d2706bba8ff773391bf70f15b407fb1658882604051610d5e9190612cd0565b60405180910390a25050565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b9190612931565b610e71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b6009548310610edc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f696e76616c696420696e64657800000000000000000000000000000000000000604482015260640161056e565b60008281526003602052604081205460ff166002811115610eff57610eff612f14565b1415610f67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b8060098481548110610f7b57610f7b612f43565b6000918252602080832086845290910181526040918290208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559285015160018301805491831691851691909117905593830151600290910180549190941691161790915551829084907f7ac7a6967f79b47c6da19bb1985e530ea9a085881a96e16869ab84d1b8ca378f90611033908590612e04565b60405180910390a3505050565b60028181548110610aa657600080fd5b6009828154811061106057600080fd5b600091825260208083209091019052908152604090208054600182015460029092015473ffffffffffffffffffffffffffffffffffffffff9182169350918116911683565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561110e57600080fd5b505afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612931565b6111ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008281526003602052604081205460ff1660028111156111cf576111cf612f14565b1415611237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b60008281526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915191825283917f40dd2b3c90b1eb7ec1e0f4266fac1a526a7d2d664c4718a4b7da0473fbdbc3359101610d5e565b6060600280548060200260200160405190810160405280929190818152602001828054801561130757602002820191906000526020600020905b8154815260200190600101908083116112f3575b5050505050905090565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015260009173ffffffffffffffffffffffffffffffffffffffff169063a3818b3b9060240160206040518083038186803b15801561137b57600080fd5b505afa15801561138f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b39190612931565b611419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b6114248484846120c4565b949350505050565b6000838152600360209081526040808320546006835281842054600790935292205460ff9092169173ffffffffffffffffffffffffffffffffffffffff9182169116606080858067ffffffffffffffff81111561148b5761148b612f72565b6040519080825280602002602001820160405280156114b4578160200160208202803683370190505b50925060005b818110156115625760008a8152600560205260408120908a8a848181106114e3576114e3612f43565b90506020020135815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684828151811061152b5761152b612f43565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061155a81612eb4565b9150506114ba565b50506009548067ffffffffffffffff81111561158057611580612f72565b6040519080825280602002602001820160405280156115e957816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161159e5790505b50915060005b81811015611696576009818154811061160a5761160a612f43565b600091825260208083208d845290910181526040918290208251606081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015481169382019390935260029091015490911691810191909152835184908390811061167857611678612f43565b6020026020010181905250808061168e90612eb4565b9150506115ef565b5050939792965093509350565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190612931565b6117aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008381526003602052604081205460ff1660028111156117cd576117cd612f14565b1415611835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b600083815260056020908152604080832085845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252839185917fb7e76be9c912c58d23e471f89ba672854363e3c92e3bd9cfce0abbbb5a1a884b9101611033565b6001546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561192a57600080fd5b505afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190612931565b6119c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e6700000000000000000000604482015260640161056e565b60008381526003602052604081205460ff1660028111156119eb576119eb612f14565b1415611a53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b815181518114611abf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60005b81811015611bf857828181518110611adc57611adc612f43565b6020026020010151600560008781526020019081526020016000206000868481518110611b0b57611b0b612f43565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838181518110611b7157611b71612f43565b6020026020010151857fb7e76be9c912c58d23e471f89ba672854363e3c92e3bd9cfce0abbbb5a1a884b858481518110611bad57611bad612f43565b6020026020010151604051611bde919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a380611bf081612eb4565b915050611ac2565b5050505050565b60008281526004602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915191825283917fe2de36ee958c6ed4c2511ad593c8cb18ad4695becc19a3c89dc73b62101648219101610d5e565b60008681526003602052604081205460ff166002811115611ca457611ca4612f14565b14611d0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f636861696e20616c726561647920657869737473000000000000000000000000604482015260640161056e565b6000856002811115611d1f57611d1f612f14565b11611d86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420737461747573000000000000000000000000000000000000604482015260640161056e565b8051825114611df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b60028054600181810183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90910188905560008881526003602052604090208054889391927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116918490811115611e6d57611e6d612f14565b02179055506000868152600660205260409081902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790555186907f625cff83fc78cbdcd27df677554d8a62577d4bde3393e3de2c49fc15cbea338c90611ef29088908890612ce4565b60405180910390a260008681526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8716908117909155915191825287917f40dd2b3c90b1eb7ec1e0f4266fac1a526a7d2d664c4718a4b7da0473fbdbc335910160405180910390a2815160005b818110156120ba57828181518110611f9e57611f9e612f43565b6020026020010151600560008a81526020019081526020016000206000868481518110611fcd57611fcd612f43565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083818151811061203357612033612f43565b6020026020010151887fb7e76be9c912c58d23e471f89ba672854363e3c92e3bd9cfce0abbbb5a1a884b85848151811061206f5761206f612f43565b60200260200101516040516120a0919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a3806120b281612eb4565b915050611f84565b5050505050505050565b81518151600091908114612134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6172726179206c656e677468206e6f74206d6174636865640000000000000000604482015260640161056e565b600980546008805460018181019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3018890558254018255600091825292505b818110156123825760006003600087848151811061219657612196612f43565b60209081029190910181015182528101919091526040016000205460ff1660028111156121c5576121c5612f14565b141561222d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f636861696e206e6f742065786973747300000000000000000000000000000000604482015260640161056e565b83818151811061223f5761223f612f43565b60200260200101516009848154811061225a5761225a612f43565b90600052602060002001600087848151811061227857612278612f43565b60209081029190910181015182528181019290925260409081016000208351815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617835593850151600183018054918316918616919091179055939091015160029091018054919093169116179055845185908290811061231757612317612f43565b6020026020010151837f7ac7a6967f79b47c6da19bb1985e530ea9a085881a96e16869ab84d1b8ca378f86848151811061235357612353612f43565b60200260200101516040516123689190612e04565b60405180910390a38061237a81612eb4565b915050612176565b50509392505050565b600082601f83011261239c57600080fd5b813560206123b16123ac83612e90565b612e41565b80838252828201915082860187848660051b89010111156123d157600080fd5b60005b858110156123f95781356123e781612fa1565b845292840192908401906001016123d4565b5090979650505050505050565b600082601f83011261241757600080fd5b813560206124276123ac83612e90565b80838252828201915082860187848660051b890101111561244757600080fd5b6000805b8681101561248a57823567ffffffffffffffff811115612469578283fd5b6124778b88838d010161238b565b865250938501939185019160010161244b565b509198975050505050505050565b600082601f8301126124a957600080fd5b813560206124b96123ac83612e90565b80838252828201915082860187848660051b89010111156124d957600080fd5b6000805b8681101561248a57823567ffffffffffffffff8111156124fb578283fd5b6125098b88838d01016126b5565b86525093850193918501916001016124dd565b600082601f83011261252d57600080fd5b8135602061253d6123ac83612e90565b80838252828201915082860187848660051b890101111561255d57600080fd5b60005b858110156123f957813584529284019290840190600101612560565b600082601f83011261258d57600080fd5b8135602061259d6123ac83612e90565b80838252828201915082860187848660051b89010111156125bd57600080fd5b60005b858110156123f95781356125d381612fa1565b845292840192908401906001016125c0565b600082601f8301126125f657600080fd5b813560206126066123ac83612e90565b80838252828201915082860187848660051b890101111561262657600080fd5b60005b858110156123f957813561263c81612fa1565b84529284019290840190600101612629565b600082601f83011261265f57600080fd5b8135602061266f6123ac83612e90565b80838252828201915082860187848660051b890101111561268f57600080fd5b60005b858110156123f9576126a38261271c565b84529284019290840190600101612692565b600082601f8301126126c657600080fd5b813560206126d66123ac83612e90565b828152818101908583016060808602880185018910156126f557600080fd5b60005b8681101561248a5761270a8a84612730565b855293850193918101916001016126f8565b80356003811061272b57600080fd5b919050565b60006060828403121561274257600080fd5b6040516060810181811067ffffffffffffffff8211171561276557612765612f72565b604052905080823561277681612fa1565b8152602083013561278681612fa1565b6020820152604083013561279981612fa1565b6040919091015292915050565b6000806000806000806000806000806101408b8d0312156127c657600080fd5b8a3567ffffffffffffffff808211156127de57600080fd5b6127ea8e838f0161251c565b9b5060208d013591508082111561280057600080fd5b61280c8e838f0161264e565b9a5060408d013591508082111561282257600080fd5b61282e8e838f0161257c565b995060608d013591508082111561284457600080fd5b6128508e838f016125e5565b985060808d013591508082111561286657600080fd5b6128728e838f0161251c565b975060a08d013591508082111561288857600080fd5b6128948e838f0161238b565b965060c08d01359150808211156128aa57600080fd5b6128b68e838f0161251c565b955060e08d01359150808211156128cc57600080fd5b6128d88e838f01612406565b94506101008d01359150808211156128ef57600080fd5b6128fb8e838f0161251c565b93506101208d013591508082111561291257600080fd5b5061291f8d828e01612498565b9150509295989b9194979a5092959850565b60006020828403121561294357600080fd5b8151801515811461295357600080fd5b9392505050565b60006020828403121561296c57600080fd5b5035919050565b6000806040838503121561298657600080fd5b82359150602083013561299881612fa1565b809150509250929050565b6000806000606084860312156129b857600080fd5b83359250602084013567ffffffffffffffff808211156129d757600080fd5b6129e38783880161251c565b935060408601359150808211156129f957600080fd5b50612a06868287016126b5565b9150509250925092565b600080600060408486031215612a2557600080fd5b83359250602084013567ffffffffffffffff80821115612a4457600080fd5b818601915086601f830112612a5857600080fd5b813581811115612a6757600080fd5b8760208260051b8501011115612a7c57600080fd5b6020830194508093505050509250925092565b600080600060608486031215612aa457600080fd5b83359250602084013567ffffffffffffffff80821115612ac357600080fd5b612acf8783880161251c565b93506040860135915080821115612ae557600080fd5b50612a068682870161238b565b60008060408385031215612b0557600080fd5b50508035926020909101359150565b600080600060608486031215612b2957600080fd5b83359250602084013591506040840135612b4281612fa1565b809150509250925092565b60008060408385031215612b6057600080fd5b82359150612b706020840161271c565b90509250929050565b60008060008060008060c08789031215612b9257600080fd5b86359550612ba26020880161271c565b94506040870135612bb281612fa1565b93506060870135612bc281612fa1565b9250608087013567ffffffffffffffff80821115612bdf57600080fd5b612beb8a838b0161251c565b935060a0890135915080821115612c0157600080fd5b50612c0e89828a0161238b565b9150509295509295509295565b600080600060a08486031215612c3057600080fd5b8335925060208401359150612c488560408601612730565b90509250925092565b60038110612c88577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015612cc457835183529284019291840191600101612ca8565b50909695505050505050565b60208101612cde8284612c51565b92915050565b60408101612cf28285612c51565b73ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b600060a08201612d258389612c51565b602073ffffffffffffffffffffffffffffffffffffffff808916828601528088166040860152606060a08187015283885180865260c088019150848a01955060005b81811015612d85578651851683529585019591850191600101612d67565b5050868103608088015287518082529084019450915082870160005b83811015612df357612de3868351805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b9482019490840190600101612da1565b50939b9a5050505050505050505050565b60608101612cde8284805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612e8857612e88612f72565b604052919050565b600067ffffffffffffffff821115612eaa57612eaa612f72565b5060051b60200190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612fc357600080fd5b5056fea26469706673582212206dfc6b74e3c1bbd6fa418ef7241d22c066d2f83c9ef186e7a36a3e538ede4d4764736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistry.js
var require_OSWAP_ChainRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistry.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ChainRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_ChainRegistry_json_1 = __importDefault(require_OSWAP_ChainRegistry_json());
    var OSWAP_ChainRegistry = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_ChainRegistry_json_1.default.abi, OSWAP_ChainRegistry_json_1.default.bytecode);
        this.assign();
      }
      deploy(votingExecutorManager) {
        return this.__deploy([votingExecutorManager]);
      }
      parseNewChainEvent(receipt) {
        return this.parseEvents(receipt, "NewChain").map((e) => this.decodeNewChainEvent(e));
      }
      decodeNewChainEvent(event) {
        let result = event.data;
        return {
          chainId: new eth_wallet_1.BigNumber(result.chainId),
          status: new eth_wallet_1.BigNumber(result.status),
          govToken: result.govToken,
          _event: event
        };
      }
      parseUpdateAddressEvent(receipt) {
        return this.parseEvents(receipt, "UpdateAddress").map((e) => this.decodeUpdateAddressEvent(e));
      }
      decodeUpdateAddressEvent(event) {
        let result = event.data;
        return {
          chainId: new eth_wallet_1.BigNumber(result.chainId),
          contractName: result.contractName,
          _address: result._address,
          _event: event
        };
      }
      parseUpdateConfigStoreEvent(receipt) {
        return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
      }
      decodeUpdateConfigStoreEvent(event) {
        let result = event.data;
        return {
          chainId: new eth_wallet_1.BigNumber(result.chainId),
          _address: result._address,
          _event: event
        };
      }
      parseUpdateMainChainAddressEvent(receipt) {
        return this.parseEvents(receipt, "UpdateMainChainAddress").map((e) => this.decodeUpdateMainChainAddressEvent(e));
      }
      decodeUpdateMainChainAddressEvent(event) {
        let result = event.data;
        return {
          contractName: result.contractName,
          _address: result._address,
          _event: event
        };
      }
      parseUpdateStatusEvent(receipt) {
        return this.parseEvents(receipt, "UpdateStatus").map((e) => this.decodeUpdateStatusEvent(e));
      }
      decodeUpdateStatusEvent(event) {
        let result = event.data;
        return {
          chainId: new eth_wallet_1.BigNumber(result.chainId),
          status: new eth_wallet_1.BigNumber(result.status),
          _event: event
        };
      }
      parseUpdateVaultEvent(receipt) {
        return this.parseEvents(receipt, "UpdateVault").map((e) => this.decodeUpdateVaultEvent(e));
      }
      decodeUpdateVaultEvent(event) {
        let result = event.data;
        return {
          index: new eth_wallet_1.BigNumber(result.index),
          chainId: new eth_wallet_1.BigNumber(result.chainId),
          vault: {
            token: result.vault.token,
            vaultRegistry: result.vault.vaultRegistry,
            bridgeVault: result.vault.bridgeVault
          },
          _event: event
        };
      }
      assign() {
        let allChains_call = async () => {
          let result = await this.call("allChains");
          return result.map((e) => new eth_wallet_1.BigNumber(e));
        };
        this.allChains = allChains_call;
        let chains_call = async (param1) => {
          let result = await this.call("chains", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.chains = chains_call;
        let chainsLength_call = async () => {
          let result = await this.call("chainsLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.chainsLength = chainsLength_call;
        let configStore_call = async (param1) => {
          let result = await this.call("configStore", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.configStore = configStore_call;
        let getChainParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), eth_wallet_1.Utils.stringToBytes32(params.contractnames)];
        let getChain_call = async (params) => {
          let result = await this.call("getChain", getChainParams(params));
          return {
            _status: new eth_wallet_1.BigNumber(result._status),
            _govToken: result._govToken,
            _configStore: result._configStore,
            _contracts: result._contracts,
            _vaults: result._vaults.map((e) => ({
              token: e.token,
              vaultRegistry: e.vaultRegistry,
              bridgeVault: e.bridgeVault
            }))
          };
        };
        this.getChain = getChain_call;
        let govToken_call = async (param1) => {
          let result = await this.call("govToken", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.govToken = govToken_call;
        let mainChainContractAddress_call = async (param1) => {
          let result = await this.call("mainChainContractAddress", [eth_wallet_1.Utils.stringToBytes32(param1)]);
          return result;
        };
        this.mainChainContractAddress = mainChainContractAddress_call;
        let sideChainContractAddressParams = (params) => [eth_wallet_1.Utils.toString(params.param1), eth_wallet_1.Utils.stringToBytes32(params.param2)];
        let sideChainContractAddress_call = async (params) => {
          let result = await this.call("sideChainContractAddress", sideChainContractAddressParams(params));
          return result;
        };
        this.sideChainContractAddress = sideChainContractAddress_call;
        let status_call = async (param1) => {
          let result = await this.call("status", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.status = status_call;
        let tokenNames_call = async (param1) => {
          let result = await this.call("tokenNames", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.tokenNames = tokenNames_call;
        let tokenNamesLength_call = async () => {
          let result = await this.call("tokenNamesLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenNamesLength = tokenNamesLength_call;
        let vaultsParams = (params) => [eth_wallet_1.Utils.toString(params.param1), eth_wallet_1.Utils.toString(params.param2)];
        let vaults_call = async (params) => {
          let result = await this.call("vaults", vaultsParams(params));
          return {
            token: result.token,
            vaultRegistry: result.vaultRegistry,
            bridgeVault: result.bridgeVault
          };
        };
        this.vaults = vaults_call;
        let vaultsLength_call = async () => {
          let result = await this.call("vaultsLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.vaultsLength = vaultsLength_call;
        let votingExecutorManager_call = async () => {
          let result = await this.call("votingExecutorManager");
          return result;
        };
        this.votingExecutorManager = votingExecutorManager_call;
        let addChainParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), eth_wallet_1.Utils.toString(params.status), params.govToken, params.configStore, eth_wallet_1.Utils.stringToBytes32(params.contractNames), params.address];
        let addChain_send = async (params) => {
          let result = await this.send("addChain", addChainParams(params));
          return result;
        };
        let addChain_call = async (params) => {
          let result = await this.call("addChain", addChainParams(params));
          return;
        };
        this.addChain = Object.assign(addChain_send, {
          call: addChain_call
        });
        let initParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), eth_wallet_1.Utils.toString(params.status), params.govToken, params.configStore, eth_wallet_1.Utils.stringToBytes32(params.mainChainContractNames), params.mainChainContractAddress, eth_wallet_1.Utils.stringToBytes32(params.contractNames), params.address, eth_wallet_1.Utils.stringToBytes32(params.tokenNames), params.vault.map((a0) => a0.map((e) => [e.token, e.vaultRegistry, e.bridgeVault]))];
        let init_send = async (params) => {
          let result = await this.send("init", initParams(params));
          return result;
        };
        let init_call = async (params) => {
          let result = await this.call("init", initParams(params));
          return;
        };
        this.init = Object.assign(init_send, {
          call: init_call
        });
        let newVaultParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.toString(params.chainId), params.vault.map((e) => [e.token, e.vaultRegistry, e.bridgeVault])];
        let newVault_send = async (params) => {
          let result = await this.send("newVault", newVaultParams(params));
          return result;
        };
        let newVault_call = async (params) => {
          let result = await this.call("newVault", newVaultParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.newVault = Object.assign(newVault_send, {
          call: newVault_call
        });
        let updateAddressParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), eth_wallet_1.Utils.stringToBytes32(params.contractName), params.address];
        let updateAddress_send = async (params) => {
          let result = await this.send("updateAddress", updateAddressParams(params));
          return result;
        };
        let updateAddress_call = async (params) => {
          let result = await this.call("updateAddress", updateAddressParams(params));
          return;
        };
        this.updateAddress = Object.assign(updateAddress_send, {
          call: updateAddress_call
        });
        let updateAddressesParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), eth_wallet_1.Utils.stringToBytes32(params.contractNames), params.addresses];
        let updateAddresses_send = async (params) => {
          let result = await this.send("updateAddresses", updateAddressesParams(params));
          return result;
        };
        let updateAddresses_call = async (params) => {
          let result = await this.call("updateAddresses", updateAddressesParams(params));
          return;
        };
        this.updateAddresses = Object.assign(updateAddresses_send, {
          call: updateAddresses_call
        });
        let updateConfigStoreParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), params.address];
        let updateConfigStore_send = async (params) => {
          let result = await this.send("updateConfigStore", updateConfigStoreParams(params));
          return result;
        };
        let updateConfigStore_call = async (params) => {
          let result = await this.call("updateConfigStore", updateConfigStoreParams(params));
          return;
        };
        this.updateConfigStore = Object.assign(updateConfigStore_send, {
          call: updateConfigStore_call
        });
        let updateMainChainAddressParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.contractName), params.address];
        let updateMainChainAddress_send = async (params) => {
          let result = await this.send("updateMainChainAddress", updateMainChainAddressParams(params));
          return result;
        };
        let updateMainChainAddress_call = async (params) => {
          let result = await this.call("updateMainChainAddress", updateMainChainAddressParams(params));
          return;
        };
        this.updateMainChainAddress = Object.assign(updateMainChainAddress_send, {
          call: updateMainChainAddress_call
        });
        let updateStatusParams = (params) => [eth_wallet_1.Utils.toString(params.chainId), eth_wallet_1.Utils.toString(params.status)];
        let updateStatus_send = async (params) => {
          let result = await this.send("updateStatus", updateStatusParams(params));
          return result;
        };
        let updateStatus_call = async (params) => {
          let result = await this.call("updateStatus", updateStatusParams(params));
          return;
        };
        this.updateStatus = Object.assign(updateStatus_send, {
          call: updateStatus_call
        });
        let updateVaultParams = (params) => [eth_wallet_1.Utils.toString(params.index), eth_wallet_1.Utils.toString(params.chainId), [params.vault.token, params.vault.vaultRegistry, params.vault.bridgeVault]];
        let updateVault_send = async (params) => {
          let result = await this.send("updateVault", updateVaultParams(params));
          return result;
        };
        let updateVault_call = async (params) => {
          let result = await this.call("updateVault", updateVaultParams(params));
          return;
        };
        this.updateVault = Object.assign(updateVault_send, {
          call: updateVault_call
        });
      }
    };
    exports.OSWAP_ChainRegistry = OSWAP_ChainRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistryExecutor.json.js
var require_OSWAP_ChainRegistryExecutor_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistryExecutor.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }, { "internalType": "contract OSWAP_ChainRegistry", "name": "_chainRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "Execute", "type": "event" },
        { "inputs": [], "name": "chainRegistry", "outputs": [{ "internalType": "contract OSWAP_ChainRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60c06040523480156200001157600080fd5b506040516200203238038062002032833981016040819052620000349162000053565b6001600160601b0319606092831b8116608052911b1660a052620000ab565b600080604083850312156200006757600080fd5b8251620000748162000092565b6020840151909250620000878162000092565b809150509250929050565b6001600160a01b0381168114620000a857600080fd5b50565b60805160601c60a05160601c611f09620001296000396000818160b0015281816105e60152818161085601528181610a1601528181610b8301528181610d5a01528181610fd0015281816110e80152818161123001528181611450015281816115e501526117ba015260008181606001526101000152611f096000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638af7c64914610046578063da1bcdf01461005b578063fd5e394a146100ab575b600080fd5b610059610054366004611987565b6100d2565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6040517fb15866e60000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b15866e69060240160206040518083038186803b15801561015757600080fd5b505afa15801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f91906119fc565b610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f535741505f566f74696e674578656375746f723a204e6f742066726f6d207660448201527f6f74696e6700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80610287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7fb98f16f9e16a613740729e6e1b35730f7ca1456ba20bff88685e53e1881bec9082826040516102b8929190611b4f565b60405180910390a16000828260008181106102d5576102d5611e75565b905060200201359050807f73696465436861696e436f6e666967000000000000000000000000000000000014156103205761031b6103168360018187611d2a565b6112fc565b505050565b807f6e65775661756c7400000000000000000000000000000000000000000000000014156106b6576006821080159061036d57506004610361600284611d84565b61036b9190611dd4565b155b6103d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b600060046103e2600285611d84565b6103ec9190611d70565b905060008167ffffffffffffffff81111561040957610409611ea4565b604051908082528060200260200182016040528015610432578160200160208202803683370190505b509050816020026084602083013760008267ffffffffffffffff81111561045b5761045b611ea4565b6040519080825280602002602001820160405280156104c457816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816104795790505b50905060006104d4846002611d58565b905060005b848110156105e3576040518060600160405280898985806104f990611d9b565b965081811061050a5761050a611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff1681526020018989858061053c90611d9b565b965081811061054d5761054d611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff1681526020018989858061057f90611d9b565b965081811061059057610590611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff168152508382815181106105c5576105c5611e75565b602002602001018190525080806105db90611d9b565b9150506104d9565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b833424e8888600181811061063357610633611e75565b9050602002013585856040518463ffffffff1660e01b815260040161065a93929190611b6b565b602060405180830381600087803b15801561067457600080fd5b505af1158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190611a5b565b5050505050505050565b807f616464436861696e00000000000000000000000000000000000000000000000014156109825760058210801590610703575060026106f7600584611d84565b6107019190611dd4565b155b610769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b60006002610778600585611d84565b6107829190611d70565b90506000610791826005611d58565b905060008267ffffffffffffffff8111156107ae576107ae611ea4565b6040519080825280602002602001820160405280156107d7578160200160208202803683370190505b50905060005b838110156108535786866107f18386611d58565b81811061080057610800611e75565b9050602002013560601c82828151811061081c5761081c611e75565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061084b81611d9b565b9150506107dd565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632a391db4878760018181106108a3576108a3611e75565b9050602002013560001c888860028181106108c0576108c0611e75565b9050602002013560001c60028111156108db576108db611e46565b898960038181106108ee576108ee611e75565b9050602002013560601c8a8a600481811061090b5761090b611e75565b602002919091013560601c90506109258860058d8f611d2a565b886040518863ffffffff1660e01b81526004016109489796959493929190611c73565b600060405180830381600087803b15801561096257600080fd5b505af1158015610976573d6000803e3d6000fd5b50505050505050505050565b807f75706461746553746174757300000000000000000000000000000000000000001415610aef5760038214610a14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633a1b3d3184846001818110610a6357610a63611e75565b9050602002013560001c85856002818110610a8057610a80611e75565b9050602002013560001c6002811115610a9b57610a9b611e46565b6040518363ffffffff1660e01b8152600401610ab8929190611c5f565b600060405180830381600087803b158015610ad257600080fd5b505af1158015610ae6573d6000803e3d6000fd5b50505050505050565b807f7570646174655661756c740000000000000000000000000000000000000000001415610cc65760068214610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634e763cd084846001818110610bd057610bd0611e75565b9050602002013560001c85856002818110610bed57610bed611e75565b9050602002013560001c604051806060016040528088886003818110610c1557610c15611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff16815260200188886004818110610c4d57610c4d611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff16815260200188886005818110610c8557610c85611e75565b9050602002013560601c73ffffffffffffffffffffffffffffffffffffffff168152506040518463ffffffff1660e01b8152600401610ab893929190611ce0565b807f75706461746541646472657373000000000000000000000000000000000000001415610e325760048214610d58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c7e7dec684846001818110610da757610da7611e75565b9050602002013560001c85856002818110610dc457610dc4611e75565b9050602002013586866003818110610dde57610dde611e75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260048101959095526024850193909352506020909102013560601c6044820152606401610ab8565b807f757064617465416464726573736573000000000000000000000000000000000014156110545760048210801590610e7e57506002610e728184611d84565b610e7c9190611dd4565b155b610ee4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b60006002610ef28185611d84565b610efc9190611d70565b90506000610f0b826002611d58565b905060008267ffffffffffffffff811115610f2857610f28611ea4565b604051908082528060200260200182016040528015610f51578160200160208202803683370190505b50905060005b83811015610fcd578686610f6b8386611d58565b818110610f7a57610f7a611e75565b9050602002013560601c828281518110610f9657610f96611e75565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610fc581611d9b565b915050610f57565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc85a2878787600181811061101d5761101d611e75565b602002919091013590506110348560028a8c611d2a565b856040518563ffffffff1660e01b81526004016109489493929190611c28565b807f7570646174654d61696e436861696e4164647265737300000000000000000000141561119c57600382146110e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663010b0cc98484600181811061113557611135611e75565b905060200201358585600281811061114f5761114f611e75565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526004810194909452602002919091013560601c602483015250604401610ab8565b807f757064617465436f6e66696753746f7265000000000000000000000000000000141561129a576003821461122e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f696e76616c696420706172616d73206c656e67746800000000000000000000006044820152606401610217565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166372f423328484600181811061127d5761127d611e75565b9050602002013560001c8585600281811061114f5761114f611e75565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152606401610217565b60028111611366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152606401610217565b60008282600081811061137b5761137b611e75565b90506020020135905060008383600181811061139957611399611e75565b6113ad926020909102013590506002611d58565b90506113ba816001611d58565b83111561129a5760008484838181106113d5576113d5611e75565b905060200201359050600085858460016113ef9190611d58565b8181106113fe576113fe611e75565b9050602002013590508260026114149190611d58565b85141561174a57837f736574436f6e666967000000000000000000000000000000000000000000000014156115b05760025b83811015610ae6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342f064c988888481811061149c5761149c611e75565b9050602002013560001c6040518263ffffffff1660e01b81526004016114c491815260200190565b60206040518083038186803b1580156114dc57600080fd5b505afa1580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190611a25565b6040517fd1fd27b3000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff919091169063d1fd27b390604401600060405180830381600087803b15801561158557600080fd5b505af1158015611599573d6000803e3d6000fd5b5050505080806115a890611d9b565b915050611446565b837f736574436f6e666967416464726573730000000000000000000000000000000014156117455760025b83811015610ae6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342f064c988888481811061163157611631611e75565b9050602002013560001c6040518263ffffffff1660e01b815260040161165991815260200190565b60206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190611a25565b6040517f9db57e1f000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9190911690639db57e1f90604401600060405180830381600087803b15801561171a57600080fd5b505af115801561172e573d6000803e3d6000fd5b50505050808061173d90611d9b565b9150506115db565b611923565b60008686611759866002611d58565b81811061176857611768611e75565b90506020020135905083600361177e9190611d58565b86141561192157847f736574436f6e666967320000000000000000000000000000000000000000000014156119215760025b848110156106ac577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342f064c989898481811061180657611806611e75565b9050602002013560001c6040518263ffffffff1660e01b815260040161182e91815260200190565b60206040518083038186803b15801561184657600080fd5b505afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e9190611a25565b6040517fdf9321a500000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044810184905273ffffffffffffffffffffffffffffffffffffffff919091169063df9321a590606401600060405180830381600087803b1580156118f657600080fd5b505af115801561190a573d6000803e3d6000fd5b50505050808061191990611d9b565b9150506117b0565b505b50506040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d657465727300000000000000000000000000006044820152606401610217565b6000806020838503121561199a57600080fd5b823567ffffffffffffffff808211156119b257600080fd5b818501915085601f8301126119c657600080fd5b8135818111156119d557600080fd5b8660208260051b85010111156119ea57600080fd5b60209290920196919550909350505050565b600060208284031215611a0e57600080fd5b81518015158114611a1e57600080fd5b9392505050565b600060208284031215611a3757600080fd5b815173ffffffffffffffffffffffffffffffffffffffff81168114611a1e57600080fd5b600060208284031215611a6d57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015611aba57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101611a88565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611af757600080fd5b8260051b8083602087013760009401602001938452509192915050565b60038110611b4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b602081526000611b63602083018486611ac5565b949350505050565b6000606080830186845260208281860152818751808452608087019150828901935060005b81811015611bac57845183529383019391830191600101611b90565b50508581036040870152865180825290820192508187019060005b81811015611c1957611c09858451805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b9385019391830191600101611bc7565b50929998505050505050505050565b848152606060208201526000611c42606083018587611ac5565b8281036040840152611c548185611a74565b979650505050505050565b82815260408101611a1e6020830184611b14565b878152611c836020820188611b14565b600073ffffffffffffffffffffffffffffffffffffffff808816604084015280871660608401525060c06080830152611cc060c083018587611ac5565b82810360a0840152611cd28185611a74565b9a9950505050505050505050565b8381526020810183905260a08101611b636040830184805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b60008085851115611d3a57600080fd5b83861115611d4757600080fd5b5050600583901b0193919092039150565b60008219821115611d6b57611d6b611de8565b500190565b600082611d7f57611d7f611e17565b500490565b600082821015611d9657611d96611de8565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611dcd57611dcd611de8565b5060010190565b600082611de357611de3611e17565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212202dcea9247161446836bd71ad0d7984e285b0376fe15cc0909e025b1e6095327964736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistryExecutor.js
var require_OSWAP_ChainRegistryExecutor = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ChainRegistryExecutor.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ChainRegistryExecutor = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_ChainRegistryExecutor_json_1 = __importDefault(require_OSWAP_ChainRegistryExecutor_json());
    var OSWAP_ChainRegistryExecutor = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_ChainRegistryExecutor_json_1.default.abi, OSWAP_ChainRegistryExecutor_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.votingManager, params.chainRegistry]);
      }
      parseExecuteEvent(receipt) {
        return this.parseEvents(receipt, "Execute").map((e) => this.decodeExecuteEvent(e));
      }
      decodeExecuteEvent(event) {
        let result = event.data;
        return {
          params: result.params,
          _event: event
        };
      }
      assign() {
        let chainRegistry_call = async () => {
          let result = await this.call("chainRegistry");
          return result;
        };
        this.chainRegistry = chainRegistry_call;
        let votingManager_call = async () => {
          let result = await this.call("votingManager");
          return result;
        };
        this.votingManager = votingManager_call;
        let execute_send = async (params) => {
          let result = await this.send("execute", [eth_wallet_1.Utils.stringToBytes32(params)]);
          return result;
        };
        let execute_call = async (params) => {
          let result = await this.call("execute", [eth_wallet_1.Utils.stringToBytes32(params)]);
          return;
        };
        this.execute = Object.assign(execute_send, {
          call: execute_call
        });
      }
    };
    exports.OSWAP_ChainRegistryExecutor = OSWAP_ChainRegistryExecutor;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStore.json.js
var require_OSWAP_ConfigStore_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStore.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "components": [{ "internalType": "contract IERC20", "name": "govToken", "type": "address" }, { "internalType": "contract IOSWAP_SwapPolicy", "name": "swapPolicy", "type": "address" }, { "internalType": "uint256", "name": "lpWithdrawlDelay", "type": "uint256" }, { "internalType": "uint256", "name": "transactionsGap", "type": "uint256" }, { "internalType": "uint256", "name": "superTrollMinCount", "type": "uint256" }, { "internalType": "uint256", "name": "generalTrollMinCount", "type": "uint256" }, { "internalType": "uint256", "name": "transactionFee", "type": "uint256" }, { "internalType": "address", "name": "router", "type": "address" }, { "internalType": "address", "name": "rebalancer", "type": "address" }, { "internalType": "address", "name": "feeTo", "type": "address" }, { "internalType": "address", "name": "wrapper", "type": "address" }, { "internalType": "contract IERC20[]", "name": "asset", "type": "address[]" }, { "internalType": "uint256[]", "name": "baseFee", "type": "uint256[]" }], "internalType": "struct OSWAP_ConfigStore.Params", "name": "params", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }], "name": "ParamSet1", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IOSWAP_VotingExecutorManager", "name": "newVotingExecutorManager", "type": "address" }], "name": "UpdateVotingExecutorManager", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "Upgrade", "type": "event" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "baseFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "feeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "generalTrollMinCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }], "name": "getBridgeParams", "outputs": [{ "internalType": "contract IOSWAP_SwapPolicy", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }], "name": "getRebalanceParams", "outputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "getSignatureVerificationParams", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "_votingExecutorManager", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isApprovedProxy", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "lpWithdrawlDelay", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newConfigStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "priceOracle", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "rebalancer", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "router", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "setConfig2", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfigAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "asset", "type": "address" }, { "internalType": "address", "name": "oracle", "type": "address" }], "name": "setOracle", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract IOSWAP_SwapPolicy", "name": "_swapPolicy", "type": "address" }], "name": "setSwapPolicy", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "superTrollMinCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "swapPolicy", "outputs": [{ "internalType": "contract IOSWAP_SwapPolicy", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "transactionFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "transactionsGap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateVotingExecutorManager", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "votingExecutorManager", "outputs": [{ "internalType": "contract IOSWAP_VotingExecutorManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60a06040523480156200001157600080fd5b5060405162001e8538038062001e858339810160408190526200003491620002e3565b60008054336001600160a01b0319918216179091558151606090811b6001600160601b031916608090815260208401516004805485166001600160a01b03928316179055604085015160085591840151600955830151600a5560a0830151600b5560c0830151600c5560e0830151600d80548416918316919091179055610100830151600e80548416918316919091179055610120830151600f80549093169116179055610180810151516101608201515114620000f157600080fd5b60005b81610160015151811015620001855781610180015181815181106200011d576200011d620004db565b6020026020010151600660008461016001518481518110620001435762000143620004db565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555080806200017c90620004b1565b915050620000f4565b506101408101516001600160a01b031615620001c4576101408101516001600160a01b03166000908152600760205260409020805460ff191660011790555b50336000908152600260205260409020805460ff1916600117905562000520565b8051620001f28162000507565b919050565b600082601f8301126200020957600080fd5b81516020620002226200021c836200048b565b62000458565b80838252828201915082860187848660051b89010111156200024357600080fd5b60005b858110156200026f5781516200025c8162000507565b8452928401929084019060010162000246565b5090979650505050505050565b600082601f8301126200028e57600080fd5b81516020620002a16200021c836200048b565b80838252828201915082860187848660051b8901011115620002c257600080fd5b60005b858110156200026f57815184529284019290840190600101620002c5565b600060208284031215620002f657600080fd5b81516001600160401b03808211156200030e57600080fd5b908301906101a082860312156200032457600080fd5b6200032e6200042c565b6200033983620001e5565b81526200034960208401620001e5565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201526200038e60e08401620001e5565b60e0820152610100620003a3818501620001e5565b90820152610120620003b7848201620001e5565b90820152610140620003cb848201620001e5565b908201526101608381015183811115620003e457600080fd5b620003f288828701620001f7565b82840152505061018080840151838111156200040d57600080fd5b6200041b888287016200027c565b918301919091525095945050505050565b6040516101a081016001600160401b0381118282101715620004525762000452620004f1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004835762000483620004f1565b604052919050565b60006001600160401b03821115620004a757620004a7620004f1565b5060051b60200190565b6000600019821415620004d457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200051d57600080fd5b50565b60805160601c6119386200054d6000396000818161027f015281816102e1015261054001526119386000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c80639a7777931161012a578063cdd7e0c4116100bd578063e5c149a91161008c578063ef06095111610071578063ef06095114610662578063f2fde38b14610682578063f887ea401461069557600080fd5b8063e5c149a914610635578063ee53f4cb1461063e57600080fd5b8063cdd7e0c4146105e6578063d1fd27b3146105ef578063d4ee1d9014610602578063df9321a51461062257600080fd5b8063a2f55ae5116100f9578063a2f55ae514610505578063b023c86514610518578063b86a1855146105bd578063c2b504ec146105c657600080fd5b80639a777793146104c35780639c52a7f1146104d65780639db57e1f146104e95780639ed3edf0146104fc57600080fd5b80633d54c447116101a25780636053617211610171578063605361721461048a578063626e6b6c1461049257806381c0dc6d1461049b5780638da5cb5b146104a357600080fd5b80633d54c4471461040e5780633fd8cc4e146104415780635a812465146104645780635c38eb3a1461047757600080fd5b80630fa0c7f8116101de5780630fa0c7f8146102b6578063123b9a0b1461038a57806325aa9c54146103b85780632951f1b2146103d857600080fd5b8063017e7e581461021057806301d22ccd1461025a57806305268cff1461027a5780630900f010146102a1575b600080fd5b600f546102309073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b600e546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102307f000000000000000000000000000000000000000000000000000000000000000081565b6102b46102af3660046117f7565b6106b5565b005b61033b6102c43660046117f7565b600454600d5473ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600090815260056020908152604080832054968416835280832054600690925290912054600c5494831696938316958316949190921692565b6040805173ffffffffffffffffffffffffffffffffffffffff978816815295871660208701529386169385019390935293166060830152608082019290925260a081019190915260c001610251565b6103aa6103983660046117f7565b60066020526000908152604090205481565b604051908152602001610251565b6004546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102306103e63660046117f7565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61043161041c3660046117f7565b60076020526000908152604090205460ff1681565b6040519015158152602001610251565b61043161044f3660046117f7565b60026020526000908152604090205460ff1681565b6102b46104723660046117f7565b61083b565b6102b461048536600461188b565b6109a3565b6102b4610b22565b6103aa600b5481565b6102b4610c4c565b6000546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102b46104d13660046117f7565b610de1565b6102b46104e43660046117f7565b610f3e565b6102b46104f736600461183d565b610fde565b6103aa600c5481565b6102b46105133660046117f7565b6112d2565b6105866105263660046117f7565b600e5473ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166000908152600560205260408082205494831682529020549181169392811692911690565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529284166020840152921691810191909152606001610251565b6103aa60085481565b6003546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6103aa60095481565b6102b46105fd36600461183d565b611375565b6001546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102b461063036600461185f565b611577565b6103aa600a5481565b600b54600a5460095460408051938452602084019290925290820152606001610251565b6010546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6102b46106903660046117f7565b611760565b600d546102309073ffffffffffffffffffffffffffffffffffffffff1681565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561071e57600080fd5b505afa158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061181b565b6107c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064015b60405180910390fd5b601080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d906020015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461085f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166108dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c2061646472657373000000000000000000000000000000000000000060448201526064016107b8565b60035473ffffffffffffffffffffffffffffffffffffffff161561095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f616c726561647920696e6974000000000000000000000000000000000000000060448201526064016107b8565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081526002602052604090205460ff16610a42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084016107b8565b73ffffffffffffffffffffffffffffffffffffffff82811660009081526005602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169385169390931790925580517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086811b8216835285901b16928101929092527f6f7261636c650000000000000000000000000000000000000000000000000000917f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706910160405180910390a25050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610bc9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084016107b8565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b600354604080517fc53bc047000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163c53bc047916004808301926020929190829003018186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef91906118c4565b905073ffffffffffffffffffffffffffffffffffffffff8116610d6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f726500000000000000000000000060448201526064016107b8565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fe74e49c9957a38058d1fefcf5aa66950c8ba0c968b7ee84424852312e657d69090602001610830565b3360009081526002602052604090205460ff16610e80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084016107b8565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055604051606082901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681527f73776170506f6c69637900000000000000000000000000000000000000000000907f88606c7ce4ded506e934ff550061fa2f46fabe388e2e70153ce425794d1c804a9060200160405180910390a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f6257600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a78849101610830565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b15801561104757600080fd5b505afa15801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f919061181b565b6110e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064016107b8565b606081901c7f726f75746572000000000000000000000000000000000000000000000000000083141561115757600d80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055611293565b827f726562616c616e6365720000000000000000000000000000000000000000000014156111c457600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055611293565b827f666565546f000000000000000000000000000000000000000000000000000000141561123157600f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055611293565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420636f6e66696700000000000000000000000000000000000060448201526064016107b8565b827f88606c7ce4ded506e934ff550061fa2f46fabe388e2e70153ce425794d1c804a836040516112c591815260200190565b60405180910390a2505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112f657600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf59101610830565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156113de57600080fd5b505afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611416919061181b565b61147c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064016107b8565b807f7472616e73616374696f6e7347617000000000000000000000000000000000008314156114af576009819055611293565b827f7472616e73616374696f6e46656500000000000000000000000000000000000014156114e157600c819055611293565b827f737570657254726f6c6c4d696e436f756e740000000000000000000000000000141561151357600a819055611293565b827f67656e6572616c54726f6c6c4d696e436f756e74000000000000000000000000141561154557600b819055611293565b827f6c7057697468647261776c44656c6179000000000000000000000000000000001415611231576008819055611293565b6003546040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a3818b3b9060240160206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611618919061181b565b61167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e670000000000000000000060448201526064016107b8565b827f626173654665650000000000000000000000000000000000000000000000000014156116c157606082901c6000908152600660205260409020819055611728565b827f6973417070726f76656450726f78790000000000000000000000000000000000141561123157606082901c600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183141790555b604080518381526020810183905284917f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb70691016112c5565b60005473ffffffffffffffffffffffffffffffffffffffff16331461178457600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b90602001610830565b60006020828403121561180957600080fd5b8135611814816118dd565b9392505050565b60006020828403121561182d57600080fd5b8151801515811461181457600080fd5b6000806040838503121561185057600080fd5b50508035926020909101359150565b60008060006060848603121561187457600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561189e57600080fd5b82356118a9816118dd565b915060208301356118b9816118dd565b809150509250929050565b6000602082840312156118d657600080fd5b8151611814815b73ffffffffffffffffffffffffffffffffffffffff811681146118ff57600080fd5b5056fea2646970667358221220bd7b47b5832b1870d2c1324baf6ff90d81c52e97411935023bfe8829833f3f0164736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStore.js
var require_OSWAP_ConfigStore = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStore.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ConfigStore = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_ConfigStore_json_1 = __importDefault(require_OSWAP_ConfigStore_json());
    var OSWAP_ConfigStore = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_ConfigStore_json_1.default.abi, OSWAP_ConfigStore_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([[params.govToken, params.swapPolicy, eth_wallet_1.Utils.toString(params.lpWithdrawlDelay), eth_wallet_1.Utils.toString(params.transactionsGap), eth_wallet_1.Utils.toString(params.superTrollMinCount), eth_wallet_1.Utils.toString(params.generalTrollMinCount), eth_wallet_1.Utils.toString(params.transactionFee), params.router, params.rebalancer, params.feeTo, params.wrapper, params.asset, eth_wallet_1.Utils.toString(params.baseFee)]]);
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseParamSet1Event(receipt) {
        return this.parseEvents(receipt, "ParamSet1").map((e) => this.decodeParamSet1Event(e));
      }
      decodeParamSet1Event(event) {
        let result = event.data;
        return {
          name: result.name,
          value1: result.value1,
          _event: event
        };
      }
      parseParamSet2Event(receipt) {
        return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
      }
      decodeParamSet2Event(event) {
        let result = event.data;
        return {
          name: result.name,
          value1: result.value1,
          value2: result.value2,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUpdateVotingExecutorManagerEvent(receipt) {
        return this.parseEvents(receipt, "UpdateVotingExecutorManager").map((e) => this.decodeUpdateVotingExecutorManagerEvent(e));
      }
      decodeUpdateVotingExecutorManagerEvent(event) {
        let result = event.data;
        return {
          newVotingExecutorManager: result.newVotingExecutorManager,
          _event: event
        };
      }
      parseUpgradeEvent(receipt) {
        return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
      }
      decodeUpgradeEvent(event) {
        let result = event.data;
        return {
          newConfigStore: result.newConfigStore,
          _event: event
        };
      }
      assign() {
        let baseFee_call = async (param1) => {
          let result = await this.call("baseFee", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.baseFee = baseFee_call;
        let feeTo_call = async () => {
          let result = await this.call("feeTo");
          return result;
        };
        this.feeTo = feeTo_call;
        let generalTrollMinCount_call = async () => {
          let result = await this.call("generalTrollMinCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.generalTrollMinCount = generalTrollMinCount_call;
        let getBridgeParams_call = async (asset) => {
          let result = await this.call("getBridgeParams", [asset]);
          return {
            param1: result[0],
            param2: result[1],
            param3: result[2],
            param4: result[3],
            param5: new eth_wallet_1.BigNumber(result[4]),
            param6: new eth_wallet_1.BigNumber(result[5])
          };
        };
        this.getBridgeParams = getBridgeParams_call;
        let getRebalanceParams_call = async (asset) => {
          let result = await this.call("getRebalanceParams", [asset]);
          return {
            param1: result[0],
            param2: result[1],
            param3: result[2]
          };
        };
        this.getRebalanceParams = getRebalanceParams_call;
        let getSignatureVerificationParams_call = async () => {
          let result = await this.call("getSignatureVerificationParams");
          return {
            param1: new eth_wallet_1.BigNumber(result[0]),
            param2: new eth_wallet_1.BigNumber(result[1]),
            param3: new eth_wallet_1.BigNumber(result[2])
          };
        };
        this.getSignatureVerificationParams = getSignatureVerificationParams_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let isApprovedProxy_call = async (param1) => {
          let result = await this.call("isApprovedProxy", [param1]);
          return result;
        };
        this.isApprovedProxy = isApprovedProxy_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let lpWithdrawlDelay_call = async () => {
          let result = await this.call("lpWithdrawlDelay");
          return new eth_wallet_1.BigNumber(result);
        };
        this.lpWithdrawlDelay = lpWithdrawlDelay_call;
        let newConfigStore_call = async () => {
          let result = await this.call("newConfigStore");
          return result;
        };
        this.newConfigStore = newConfigStore_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let priceOracle_call = async (param1) => {
          let result = await this.call("priceOracle", [param1]);
          return result;
        };
        this.priceOracle = priceOracle_call;
        let rebalancer_call = async () => {
          let result = await this.call("rebalancer");
          return result;
        };
        this.rebalancer = rebalancer_call;
        let router_call = async () => {
          let result = await this.call("router");
          return result;
        };
        this.router = router_call;
        let superTrollMinCount_call = async () => {
          let result = await this.call("superTrollMinCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.superTrollMinCount = superTrollMinCount_call;
        let swapPolicy_call = async () => {
          let result = await this.call("swapPolicy");
          return result;
        };
        this.swapPolicy = swapPolicy_call;
        let transactionFee_call = async () => {
          let result = await this.call("transactionFee");
          return new eth_wallet_1.BigNumber(result);
        };
        this.transactionFee = transactionFee_call;
        let transactionsGap_call = async () => {
          let result = await this.call("transactionsGap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.transactionsGap = transactionsGap_call;
        let votingExecutorManager_call = async () => {
          let result = await this.call("votingExecutorManager");
          return result;
        };
        this.votingExecutorManager = votingExecutorManager_call;
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let initAddress_send = async (votingExecutorManager) => {
          let result = await this.send("initAddress", [votingExecutorManager]);
          return result;
        };
        let initAddress_call = async (votingExecutorManager) => {
          let result = await this.call("initAddress", [votingExecutorManager]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let setConfigParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.value)];
        let setConfig_send = async (params) => {
          let result = await this.send("setConfig", setConfigParams(params));
          return result;
        };
        let setConfig_call = async (params) => {
          let result = await this.call("setConfig", setConfigParams(params));
          return;
        };
        this.setConfig = Object.assign(setConfig_send, {
          call: setConfig_call
        });
        let setConfig2Params = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.value1), eth_wallet_1.Utils.stringToBytes32(params.value2)];
        let setConfig2_send = async (params) => {
          let result = await this.send("setConfig2", setConfig2Params(params));
          return result;
        };
        let setConfig2_call = async (params) => {
          let result = await this.call("setConfig2", setConfig2Params(params));
          return;
        };
        this.setConfig2 = Object.assign(setConfig2_send, {
          call: setConfig2_call
        });
        let setConfigAddressParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.value)];
        let setConfigAddress_send = async (params) => {
          let result = await this.send("setConfigAddress", setConfigAddressParams(params));
          return result;
        };
        let setConfigAddress_call = async (params) => {
          let result = await this.call("setConfigAddress", setConfigAddressParams(params));
          return;
        };
        this.setConfigAddress = Object.assign(setConfigAddress_send, {
          call: setConfigAddress_call
        });
        let setOracleParams = (params) => [params.asset, params.oracle];
        let setOracle_send = async (params) => {
          let result = await this.send("setOracle", setOracleParams(params));
          return result;
        };
        let setOracle_call = async (params) => {
          let result = await this.call("setOracle", setOracleParams(params));
          return;
        };
        this.setOracle = Object.assign(setOracle_send, {
          call: setOracle_call
        });
        let setSwapPolicy_send = async (swapPolicy) => {
          let result = await this.send("setSwapPolicy", [swapPolicy]);
          return result;
        };
        let setSwapPolicy_call = async (swapPolicy) => {
          let result = await this.call("setSwapPolicy", [swapPolicy]);
          return;
        };
        this.setSwapPolicy = Object.assign(setSwapPolicy_send, {
          call: setSwapPolicy_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let updateVotingExecutorManager_send = async () => {
          let result = await this.send("updateVotingExecutorManager");
          return result;
        };
        let updateVotingExecutorManager_call = async () => {
          let result = await this.call("updateVotingExecutorManager");
          return;
        };
        this.updateVotingExecutorManager = Object.assign(updateVotingExecutorManager_send, {
          call: updateVotingExecutorManager_call
        });
        let upgrade_send = async (configStore) => {
          let result = await this.send("upgrade", [configStore]);
          return result;
        };
        let upgrade_call = async (configStore) => {
          let result = await this.call("upgrade", [configStore]);
          return;
        };
        this.upgrade = Object.assign(upgrade_send, {
          call: upgrade_call
        });
      }
    };
    exports.OSWAP_ConfigStore = OSWAP_ConfigStore;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStoreTradeVault.json.js
var require_OSWAP_ConfigStoreTradeVault_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStoreTradeVault.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "uint256", "name": "_arbitrageFee", "type": "uint256" }, { "internalType": "address", "name": "_router", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }], "name": "ParamSet1", "type": "event" },
        { "inputs": [], "name": "arbitrageFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "feeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "getTradeParam", "outputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newConfigStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStoreTradeVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "router", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32", "name": "_value", "type": "bytes32" }], "name": "setConfigAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "608060405234801561001057600080fd5b5060405161045938038061045983398101604081905261002f91610063565b600191909155600080546001600160a01b039092166001600160a01b031992831617905560038054909116301790556100a0565b6000806040838503121561007657600080fd5b825160208401519092506001600160a01b038116811461009557600080fd5b809150509250929050565b6103aa806100af6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639db57e1f1161005b5780639db57e1f14610133578063d1fd27b314610148578063ef0609511461015b578063f887ea401461017b57600080fd5b8063017e7e58146100825780633a310c3d146100cc5780639b0e64531461011c575b600080fd5b6002546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f060005460015473ffffffffffffffffffffffffffffffffffffffff90911691565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016100c3565b61012560015481565b6040519081526020016100c3565b610146610141366004610352565b61019b565b005b610146610156366004610352565b61031f565b6003546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b6000546100a29073ffffffffffffffffffffffffffffffffffffffff1681565b606081901c7f726f75746572000000000000000000000000000000000000000000000000000083141561020d57600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556102e0565b827f6e6577436f6e66696753746f7265000000000000000000000000000000000000141561027a57600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556102e0565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420636f6e666967000000000000000000000000000000000000604482015260640160405180910390fd5b827f88606c7ce4ded506e934ff550061fa2f46fabe388e2e70153ce425794d1c804a8360405161031291815260200190565b60405180910390a2505050565b807f617262697472616765466565000000000000000000000000000000000000000083141561027a5760018190556102e0565b6000806040838503121561036557600080fd5b5050803592602090910135915056fea26469706673582212204f498ae5bb655ff8c2592c0f0378734f24d9ceefd011363c61e6cbd6845df0b864736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStoreTradeVault.js
var require_OSWAP_ConfigStoreTradeVault = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ConfigStoreTradeVault.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ConfigStoreTradeVault = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_ConfigStoreTradeVault_json_1 = __importDefault(require_OSWAP_ConfigStoreTradeVault_json());
    var OSWAP_ConfigStoreTradeVault = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_ConfigStoreTradeVault_json_1.default.abi, OSWAP_ConfigStoreTradeVault_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([eth_wallet_1.Utils.toString(params.arbitrageFee), params.router]);
      }
      parseParamSet1Event(receipt) {
        return this.parseEvents(receipt, "ParamSet1").map((e) => this.decodeParamSet1Event(e));
      }
      decodeParamSet1Event(event) {
        let result = event.data;
        return {
          name: result.name,
          value1: result.value1,
          _event: event
        };
      }
      assign() {
        let arbitrageFee_call = async () => {
          let result = await this.call("arbitrageFee");
          return new eth_wallet_1.BigNumber(result);
        };
        this.arbitrageFee = arbitrageFee_call;
        let feeTo_call = async () => {
          let result = await this.call("feeTo");
          return result;
        };
        this.feeTo = feeTo_call;
        let getTradeParam_call = async () => {
          let result = await this.call("getTradeParam");
          return {
            param1: result[0],
            param2: new eth_wallet_1.BigNumber(result[1])
          };
        };
        this.getTradeParam = getTradeParam_call;
        let newConfigStore_call = async () => {
          let result = await this.call("newConfigStore");
          return result;
        };
        this.newConfigStore = newConfigStore_call;
        let router_call = async () => {
          let result = await this.call("router");
          return result;
        };
        this.router = router_call;
        let setConfigParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.value)];
        let setConfig_send = async (params) => {
          let result = await this.send("setConfig", setConfigParams(params));
          return result;
        };
        let setConfig_call = async (params) => {
          let result = await this.call("setConfig", setConfigParams(params));
          return;
        };
        this.setConfig = Object.assign(setConfig_send, {
          call: setConfig_call
        });
        let setConfigAddressParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.value)];
        let setConfigAddress_send = async (params) => {
          let result = await this.send("setConfigAddress", setConfigAddressParams(params));
          return result;
        };
        let setConfigAddress_call = async (params) => {
          let result = await this.call("setConfigAddress", setConfigAddressParams(params));
          return;
        };
        this.setConfigAddress = Object.assign(setConfigAddress_send, {
          call: setConfigAddress_call
        });
      }
    };
    exports.OSWAP_ConfigStoreTradeVault = OSWAP_ConfigStoreTradeVault;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ContractProxy.json.js
var require_OSWAP_ContractProxy_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ContractProxy.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "address", "name": "_logic", "type": "address" }, { "internalType": "address", "name": "votingManager", "type": "address" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "stateMutability": "payable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "previousAdmin", "type": "address" }, { "indexed": false, "internalType": "address", "name": "newAdmin", "type": "address" }], "name": "AdminChanged", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "beacon", "type": "address" }], "name": "BeaconUpgraded", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "implementation", "type": "address" }], "name": "Upgraded", "type": "event" },
        { "stateMutability": "payable", "type": "fallback" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "implementation", "outputs": [{ "internalType": "address", "name": "implementation_", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "oldImplementation", "type": "address" }, { "internalType": "address", "name": "newImplementation", "type": "address" }, { "internalType": "bool", "name": "finalize", "type": "bool" }], "name": "upgradeTo", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "oldImplementation", "type": "address" }, { "internalType": "address", "name": "newImplementation", "type": "address" }, { "internalType": "bytes", "name": "data", "type": "bytes" }, { "internalType": "bool", "name": "finalize", "type": "bool" }], "name": "upgradeToAndCall", "outputs": [], "stateMutability": "payable", "type": "function" },
        { "stateMutability": "payable", "type": "receive" }
      ],
      "bytecode": "60806040526040516200183b3803806200183b8339810160408190526200002691620004ee565b600080546001600160a01b0319163317905582816200006760017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd62000621565b600080516020620017f48339815191521462000087576200008762000676565b620000958282600062000113565b50620000c5905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610462000621565b600080516020620017d483398151915214620000e557620000e562000676565b620000f08262000150565b5050336000908152600260205260409020805460ff1916600117905550620006a2565b6200011e83620001ab565b6000825111806200012c5750805b156200014b57620001498383620001ed60201b62000b2f1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200017b6200021c565b604080516001600160a01b03928316815291841660208301520160405180910390a1620001a88162000255565b50565b620001b6816200030a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606200021583836040518060600160405280602781526020016200181460279139620003ad565b9392505050565b600062000246600080516020620017d483398151915260001b6200048a60201b62000b5b1760201c565b546001600160a01b0316919050565b6001600160a01b038116620002c05760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002e9600080516020620017d483398151915260001b6200048a60201b62000b5b1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b62000320816200048d60201b62000b5e1760201c565b620003845760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401620002b7565b80620002e9600080516020620017f483398151915260001b6200048a60201b62000b5b1760201c565b6060833b6200040e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401620002b7565b600080856001600160a01b0316856040516200042b9190620005ce565b600060405180830381855af49150503d806000811462000468576040519150601f19603f3d011682016040523d82523d6000602084013e6200046d565b606091505b5090925090506200048082828662000493565b9695505050505050565b90565b3b151590565b60608315620004a457508162000215565b825115620004b55782518084602001fd5b8160405162461bcd60e51b8152600401620002b79190620005ec565b80516001600160a01b0381168114620004e957600080fd5b919050565b6000806000606084860312156200050457600080fd5b6200050f84620004d1565b92506200051f60208501620004d1565b60408501519092506001600160401b03808211156200053d57600080fd5b818601915086601f8301126200055257600080fd5b8151818111156200056757620005676200068c565b604051601f8201601f19908116603f011681019083821181831017156200059257620005926200068c565b81604052828152896020848701011115620005ac57600080fd5b620005bf83602083016020880162000647565b80955050505050509250925092565b60008251620005e281846020870162000647565b9190910192915050565b60208152600082518060208401526200060d81604085016020870162000647565b601f01601f19169190910160400192915050565b6000828210156200064257634e487b7160e01b600052601160045260246000fd5b500390565b60005b83811015620006645781810151838201526020016200064a565b83811115620001495750506000910152565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61112280620006b26000396000f3fe6080604052600436106100b55760003560e01c80639c52a7f111610069578063c24bcb701161004e578063c24bcb70146101ed578063d4ee1d9014610200578063f2fde38b1461022d576100c4565b80639c52a7f1146101ad578063a2f55ae5146101cd576100c4565b8063605361721161009a578063605361721461014b578063653c3ee4146101605780638da5cb5b14610180576100c4565b80633fd8cc4e146100cc5780635c60da1b14610111576100c4565b366100c4576100c261024d565b005b6100c261024d565b3480156100d857600080fd5b506100fc6100e7366004610ef3565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561011d57600080fd5b5061012661025f565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610108565b34801561015757600080fd5b506100c261026e565b34801561016c57600080fd5b506100c261017b366004610f0e565b61039d565b34801561018c57600080fd5b506000546101269073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101b957600080fd5b506100c26101c8366004610ef3565b610661565b3480156101d957600080fd5b506100c26101e8366004610ef3565b610708565b6100c26101fb366004610f55565b6107ab565b34801561020c57600080fd5b506001546101269073ffffffffffffffffffffffffffffffffffffffff1681565b34801561023957600080fd5b506100c2610248366004610ef3565b610a98565b61025d610258610b64565b610b6e565b565b6000610269610b64565b905090565b60015473ffffffffffffffffffffffffffffffffffffffff16331461031a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b816103a6610b97565b6040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff919091169063a3818b3b9060240160206040518083038186803b15801561040d57600080fd5b505afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190610ffe565b8061045f57503360009081526002602052604090205460ff165b6104c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f7420617574680000000000000000000000000000000000000000000000006044820152606401610311565b7f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d75460ff1615610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f66696e616c697a656400000000000000000000000000000000000000000000006044820152606401610311565b610559610b64565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146105ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420636f6e7472616374000000000000000000000000000000006044820152606401610311565b6040805160008082526020820190925261060991859190610bd7565b811561065b577f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315151790555b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068557600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461072c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf591016106fd565b836107b4610b97565b6040517fa3818b3b00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff919091169063a3818b3b9060240160206040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190610ffe565b8061086d57503360009081526002602052604090205460ff165b6108d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6e6f7420617574680000000000000000000000000000000000000000000000006044820152606401610311565b7f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d75460ff161561095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f66696e616c697a656400000000000000000000000000000000000000000000006044820152606401610311565b610967610b64565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146109fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f696e76616c696420636f6e7472616374000000000000000000000000000000006044820152606401610311565b610a3e8585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610bd7915050565b8115610a90577f8bb564a0863bb1e13757a10aadba40bc2510c2e7f716e75214c9c013269256d780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168315151790555b505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610abc57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b906020016106fd565b6060610b5483836040518060600160405280602781526020016110c660279139610bfc565b9392505050565b90565b3b151590565b6000610269610d0e565b3660008037600080366000845af43d6000803e808015610b8d573d6000f35b3d6000fd5b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b5473ffffffffffffffffffffffffffffffffffffffff16919050565b610be083610d36565b600082511180610bed5750805b15610b925761065b8383610b2f565b6060833b610c8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610311565b6000808573ffffffffffffffffffffffffffffffffffffffff1685604051610cb4919061101b565b600060405180830381855af49150503d8060008114610cef576040519150601f19603f3d011682016040523d82523d6000602084013e610cf4565b606091505b5091509150610d04828286610d83565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610bbb565b610d3f81610dd6565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60608315610d92575081610b54565b825115610da25782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103119190611037565b803b610e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610311565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b803573ffffffffffffffffffffffffffffffffffffffff81168114610eee57600080fd5b919050565b600060208284031215610f0557600080fd5b610b5482610eca565b600080600060608486031215610f2357600080fd5b610f2c84610eca565b9250610f3a60208501610eca565b91506040840135610f4a816110b4565b809150509250925092565b600080600080600060808688031215610f6d57600080fd5b610f7686610eca565b9450610f8460208701610eca565b9350604086013567ffffffffffffffff80821115610fa157600080fd5b818801915088601f830112610fb557600080fd5b813581811115610fc457600080fd5b896020828501011115610fd657600080fd5b6020830195508094505050506060860135610ff0816110b4565b809150509295509295909350565b60006020828403121561101057600080fd5b8151610b54816110b4565b6000825161102d818460208701611088565b9190910192915050565b6020815260008251806020840152611056816040850160208701611088565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60005b838110156110a357818101518382015260200161108b565b8381111561065b5750506000910152565b80151581146110c257600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fd7d0582d9728a5bcf7a7531800616276c49d575ffdfb672b012fd3760506e0a64736f6c63430008060033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ContractProxy.js
var require_OSWAP_ContractProxy = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_ContractProxy.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_ContractProxy = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_ContractProxy_json_1 = __importDefault(require_OSWAP_ContractProxy_json());
    var OSWAP_ContractProxy = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_ContractProxy_json_1.default.abi, OSWAP_ContractProxy_json_1.default.bytecode);
        this.assign();
      }
      deploy(params, _value) {
        return this.__deploy([params.logic, params.votingManager, eth_wallet_1.Utils.stringToBytes(params.data)], { value: _value });
      }
      parseAdminChangedEvent(receipt) {
        return this.parseEvents(receipt, "AdminChanged").map((e) => this.decodeAdminChangedEvent(e));
      }
      decodeAdminChangedEvent(event) {
        let result = event.data;
        return {
          previousAdmin: result.previousAdmin,
          newAdmin: result.newAdmin,
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseBeaconUpgradedEvent(receipt) {
        return this.parseEvents(receipt, "BeaconUpgraded").map((e) => this.decodeBeaconUpgradedEvent(e));
      }
      decodeBeaconUpgradedEvent(event) {
        let result = event.data;
        return {
          beacon: result.beacon,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUpgradedEvent(receipt) {
        return this.parseEvents(receipt, "Upgraded").map((e) => this.decodeUpgradedEvent(e));
      }
      decodeUpgradedEvent(event) {
        let result = event.data;
        return {
          implementation: result.implementation,
          _event: event
        };
      }
      assign() {
        let implementation_call = async () => {
          let result = await this.call("implementation");
          return result;
        };
        this.implementation = implementation_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let upgradeToParams = (params) => [params.oldImplementation, params.newImplementation, params.finalize];
        let upgradeTo_send = async (params) => {
          let result = await this.send("upgradeTo", upgradeToParams(params));
          return result;
        };
        let upgradeTo_call = async (params) => {
          let result = await this.call("upgradeTo", upgradeToParams(params));
          return;
        };
        this.upgradeTo = Object.assign(upgradeTo_send, {
          call: upgradeTo_call
        });
        let upgradeToAndCallParams = (params) => [params.oldImplementation, params.newImplementation, eth_wallet_1.Utils.stringToBytes(params.data), params.finalize];
        let upgradeToAndCall_send = async (params, _value) => {
          let result = await this.send("upgradeToAndCall", upgradeToAndCallParams(params), { value: _value });
          return result;
        };
        let upgradeToAndCall_call = async (params, _value) => {
          let result = await this.call("upgradeToAndCall", upgradeToAndCallParams(params), { value: _value });
          return;
        };
        this.upgradeToAndCall = Object.assign(upgradeToAndCall_send, {
          call: upgradeToAndCall_call
        });
      }
    };
    exports.OSWAP_ContractProxy = OSWAP_ContractProxy;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainTrollRegistry.json.js
var require_OSWAP_MainChainTrollRegistry_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainTrollRegistry.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract IERC20", "name": "_govToken", "type": "address" }, { "internalType": "contract I_TrollNFT[]", "name": "_superTrollNft", "type": "address[]" }, { "internalType": "contract I_TrollNFT[]", "name": "_generalTrollNft", "type": "address[]" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "troll", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "isSuperTroll", "type": "bool" }], "name": "AddTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "blocked", "type": "bool" }], "name": "BlockNftTokenId", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [], "name": "Resume", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }], "name": "Shutdown", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "StakeGeneralToll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "StakeSuperToll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "UnstakeGeneralToll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "backer", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesChange", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "stakesBalance", "type": "uint256" }], "name": "UnstakeSuperToll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }], "name": "UpdateNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "oldTroll", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newTroll", "type": "address" }], "name": "UpdateTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_VotingManager", "name": "newVotingManager", "type": "address" }], "name": "UpdateVotingManager", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrollRegistry", "type": "address" }], "name": "Upgrade", "type": "event" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakesGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakesSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "bytes", "name": "signature", "type": "bytes" }], "name": "addTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "backerStaking", "outputs": [{ "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.StakeTo[]", "name": "stakings", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }], "name": "getStakeTo", "outputs": [{ "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.StakeTo[]", "name": "", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getStakedBy", "outputs": [{ "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.Nft[]", "name": "", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }], "name": "getStakes", "outputs": [{ "internalType": "uint256", "name": "totalStakes", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getStakesByTrollProfile", "outputs": [{ "internalType": "uint256", "name": "totalStakes", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getTrollByNft", "outputs": [{ "internalType": "address", "name": "troll", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "getTrollProperties", "outputs": [{ "components": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.TrollProfile", "name": "troll", "type": "tuple" }, { "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.Nft[]", "name": "nfts", "type": "tuple[]" }, { "internalType": "address[]", "name": "backers", "type": "address[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "trollAddress", "type": "address" }], "name": "getTrollPropertiesByAddress", "outputs": [{ "components": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.TrollProfile", "name": "troll", "type": "tuple" }, { "components": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.Nft[]", "name": "nfts", "type": "tuple[]" }, { "internalType": "address[]", "name": "backers", "type": "address[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getTrolls", "outputs": [{ "components": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "internalType": "struct OSWAP_MainChainTrollRegistry.TrollProfile[]", "name": "trolls", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newTrollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }], "name": "nftType", "outputs": [{ "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "bytes", "name": "", "type": "bytes" }], "name": "onERC721Received", "outputs": [{ "internalType": "bytes4", "name": "", "type": "bytes4" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "ownerTrolls", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "ownerTrollsLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "resume", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "shutdownByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "shutdownByVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "stakeGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "stakeOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "stakeSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakeTo", "outputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakeToInv", "outputs": [{ "internalType": "address", "name": "backer", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "backer", "type": "address" }], "name": "stakeToLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakedBy", "outputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakedByInv", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "stakedByLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "totalStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollNft", "outputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "", "type": "address" }], "name": "trollNftInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollNftLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "trollProfileInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollProfiles", "outputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }, { "internalType": "uint256", "name": "nftCount", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollProfilesLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstakeGeneralTroll", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstakeSuperTroll", "outputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract I_TrollNFT", "name": "nft", "type": "address" }, { "internalType": "enum OSWAP_MainChainTrollRegistry.TrollType", "name": "trolltype", "type": "uint8" }], "name": "updateNft", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "bytes", "name": "signature", "type": "bytes" }], "name": "updateTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateVotingManager", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainTrollRegistry.js
var require_OSWAP_MainChainTrollRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainTrollRegistry.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_MainChainTrollRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_MainChainTrollRegistry_json_1 = __importDefault(require_OSWAP_MainChainTrollRegistry_json());
    var OSWAP_MainChainTrollRegistry = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_MainChainTrollRegistry_json_1.default.abi, OSWAP_MainChainTrollRegistry_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.govToken, params.superTrollNft, params.generalTrollNft]);
      }
      parseAddTrollEvent(receipt) {
        return this.parseEvents(receipt, "AddTroll").map((e) => this.decodeAddTrollEvent(e));
      }
      decodeAddTrollEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          troll: result.troll,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          isSuperTroll: result.isSuperTroll,
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseBlockNftTokenIdEvent(receipt) {
        return this.parseEvents(receipt, "BlockNftTokenId").map((e) => this.decodeBlockNftTokenIdEvent(e));
      }
      decodeBlockNftTokenIdEvent(event) {
        let result = event.data;
        return {
          nft: result.nft,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          blocked: result.blocked,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseResumeEvent(receipt) {
        return this.parseEvents(receipt, "Resume").map((e) => this.decodeResumeEvent(e));
      }
      decodeResumeEvent(event) {
        let result = event.data;
        return {
          _event: event
        };
      }
      parseShutdownEvent(receipt) {
        return this.parseEvents(receipt, "Shutdown").map((e) => this.decodeShutdownEvent(e));
      }
      decodeShutdownEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      parseStakeGeneralTollEvent(receipt) {
        return this.parseEvents(receipt, "StakeGeneralToll").map((e) => this.decodeStakeGeneralTollEvent(e));
      }
      decodeStakeGeneralTollEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          nft: result.nft,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          stakesChange: new eth_wallet_1.BigNumber(result.stakesChange),
          stakesBalance: new eth_wallet_1.BigNumber(result.stakesBalance),
          _event: event
        };
      }
      parseStakeSuperTollEvent(receipt) {
        return this.parseEvents(receipt, "StakeSuperToll").map((e) => this.decodeStakeSuperTollEvent(e));
      }
      decodeStakeSuperTollEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          nft: result.nft,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          stakesChange: new eth_wallet_1.BigNumber(result.stakesChange),
          stakesBalance: new eth_wallet_1.BigNumber(result.stakesBalance),
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnstakeGeneralTollEvent(receipt) {
        return this.parseEvents(receipt, "UnstakeGeneralToll").map((e) => this.decodeUnstakeGeneralTollEvent(e));
      }
      decodeUnstakeGeneralTollEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          nft: result.nft,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          stakesChange: new eth_wallet_1.BigNumber(result.stakesChange),
          stakesBalance: new eth_wallet_1.BigNumber(result.stakesBalance),
          _event: event
        };
      }
      parseUnstakeSuperTollEvent(receipt) {
        return this.parseEvents(receipt, "UnstakeSuperToll").map((e) => this.decodeUnstakeSuperTollEvent(e));
      }
      decodeUnstakeSuperTollEvent(event) {
        let result = event.data;
        return {
          backer: result.backer,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          nft: result.nft,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          stakesChange: new eth_wallet_1.BigNumber(result.stakesChange),
          stakesBalance: new eth_wallet_1.BigNumber(result.stakesBalance),
          _event: event
        };
      }
      parseUpdateNFTEvent(receipt) {
        return this.parseEvents(receipt, "UpdateNFT").map((e) => this.decodeUpdateNFTEvent(e));
      }
      decodeUpdateNFTEvent(event) {
        let result = event.data;
        return {
          nft: result.nft,
          trollType: new eth_wallet_1.BigNumber(result.trollType),
          _event: event
        };
      }
      parseUpdateTrollEvent(receipt) {
        return this.parseEvents(receipt, "UpdateTroll").map((e) => this.decodeUpdateTrollEvent(e));
      }
      decodeUpdateTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          oldTroll: result.oldTroll,
          newTroll: result.newTroll,
          _event: event
        };
      }
      parseUpdateVotingManagerEvent(receipt) {
        return this.parseEvents(receipt, "UpdateVotingManager").map((e) => this.decodeUpdateVotingManagerEvent(e));
      }
      decodeUpdateVotingManagerEvent(event) {
        let result = event.data;
        return {
          newVotingManager: result.newVotingManager,
          _event: event
        };
      }
      parseUpgradeEvent(receipt) {
        return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
      }
      decodeUpgradeEvent(event) {
        let result = event.data;
        return {
          newTrollRegistry: result.newTrollRegistry,
          _event: event
        };
      }
      assign() {
        let backerStakingParams = (params) => [params.backer, eth_wallet_1.Utils.toString(params.start), eth_wallet_1.Utils.toString(params.length)];
        let backerStaking_call = async (params) => {
          let result = await this.call("backerStaking", backerStakingParams(params));
          return result.map((e) => ({
            nft: e.nft,
            tokenId: new eth_wallet_1.BigNumber(e.tokenId),
            trollProfileIndex: new eth_wallet_1.BigNumber(e.trollProfileIndex),
            timestamp: new eth_wallet_1.BigNumber(e.timestamp)
          }));
        };
        this.backerStaking = backerStaking_call;
        let getStakeTo_call = async (backer) => {
          let result = await this.call("getStakeTo", [backer]);
          return result.map((e) => ({
            nft: e.nft,
            tokenId: new eth_wallet_1.BigNumber(e.tokenId),
            trollProfileIndex: new eth_wallet_1.BigNumber(e.trollProfileIndex),
            timestamp: new eth_wallet_1.BigNumber(e.timestamp)
          }));
        };
        this.getStakeTo = getStakeTo_call;
        let getStakedBy_call = async (trollProfileIndex) => {
          let result = await this.call("getStakedBy", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return result.map((e) => ({
            nft: e.nft,
            tokenId: new eth_wallet_1.BigNumber(e.tokenId)
          }));
        };
        this.getStakedBy = getStakedBy_call;
        let getStakes_call = async (troll) => {
          let result = await this.call("getStakes", [troll]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getStakes = getStakes_call;
        let getStakesByTrollProfile_call = async (trollProfileIndex) => {
          let result = await this.call("getStakesByTrollProfile", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.getStakesByTrollProfile = getStakesByTrollProfile_call;
        let getTrollByNftParams = (params) => [params.nft, eth_wallet_1.Utils.toString(params.tokenId)];
        let getTrollByNft_call = async (params) => {
          let result = await this.call("getTrollByNft", getTrollByNftParams(params));
          return result;
        };
        this.getTrollByNft = getTrollByNft_call;
        let getTrollProperties_call = async (trollProfileIndex) => {
          let result = await this.call("getTrollProperties", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return {
            troll: {
              owner: result.troll.owner,
              troll: result.troll.troll,
              trollType: new eth_wallet_1.BigNumber(result.troll.trollType),
              nftCount: new eth_wallet_1.BigNumber(result.troll.nftCount)
            },
            nfts: result.nfts.map((e) => ({
              nft: e.nft,
              tokenId: new eth_wallet_1.BigNumber(e.tokenId)
            })),
            backers: result.backers
          };
        };
        this.getTrollProperties = getTrollProperties_call;
        let getTrollPropertiesByAddress_call = async (trollAddress) => {
          let result = await this.call("getTrollPropertiesByAddress", [trollAddress]);
          return {
            troll: {
              owner: result.troll.owner,
              troll: result.troll.troll,
              trollType: new eth_wallet_1.BigNumber(result.troll.trollType),
              nftCount: new eth_wallet_1.BigNumber(result.troll.nftCount)
            },
            nfts: result.nfts.map((e) => ({
              nft: e.nft,
              tokenId: new eth_wallet_1.BigNumber(e.tokenId)
            })),
            backers: result.backers
          };
        };
        this.getTrollPropertiesByAddress = getTrollPropertiesByAddress_call;
        let getTrollsParams = (params) => [eth_wallet_1.Utils.toString(params.start), eth_wallet_1.Utils.toString(params.length)];
        let getTrolls_call = async (params) => {
          let result = await this.call("getTrolls", getTrollsParams(params));
          return result.map((e) => ({
            owner: e.owner,
            troll: e.troll,
            trollType: new eth_wallet_1.BigNumber(e.trollType),
            nftCount: new eth_wallet_1.BigNumber(e.nftCount)
          }));
        };
        this.getTrolls = getTrolls_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let newTrollRegistry_call = async () => {
          let result = await this.call("newTrollRegistry");
          return result;
        };
        this.newTrollRegistry = newTrollRegistry_call;
        let nftType_call = async (param1) => {
          let result = await this.call("nftType", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.nftType = nftType_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let ownerTrollsParams = (params) => [params.param1, eth_wallet_1.Utils.toString(params.param2)];
        let ownerTrolls_call = async (params) => {
          let result = await this.call("ownerTrolls", ownerTrollsParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.ownerTrolls = ownerTrolls_call;
        let ownerTrollsLength_call = async (owner) => {
          let result = await this.call("ownerTrollsLength", [owner]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.ownerTrollsLength = ownerTrollsLength_call;
        let paused_call = async () => {
          let result = await this.call("paused");
          return result;
        };
        this.paused = paused_call;
        let stakeOf_call = async (param1) => {
          let result = await this.call("stakeOf", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakeOf = stakeOf_call;
        let stakeToParams = (params) => [params.param1, eth_wallet_1.Utils.toString(params.param2)];
        let stakeTo_call = async (params) => {
          let result = await this.call("stakeTo", stakeToParams(params));
          return {
            nft: result.nft,
            tokenId: new eth_wallet_1.BigNumber(result.tokenId),
            trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
            timestamp: new eth_wallet_1.BigNumber(result.timestamp)
          };
        };
        this.stakeTo = stakeTo_call;
        let stakeToInvParams = (params) => [params.param1, eth_wallet_1.Utils.toString(params.param2)];
        let stakeToInv_call = async (params) => {
          let result = await this.call("stakeToInv", stakeToInvParams(params));
          return {
            backer: result.backer,
            index: new eth_wallet_1.BigNumber(result.index)
          };
        };
        this.stakeToInv = stakeToInv_call;
        let stakeToLength_call = async (backer) => {
          let result = await this.call("stakeToLength", [backer]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakeToLength = stakeToLength_call;
        let stakedByParams = (params) => [eth_wallet_1.Utils.toString(params.param1), eth_wallet_1.Utils.toString(params.param2)];
        let stakedBy_call = async (params) => {
          let result = await this.call("stakedBy", stakedByParams(params));
          return {
            nft: result.nft,
            tokenId: new eth_wallet_1.BigNumber(result.tokenId)
          };
        };
        this.stakedBy = stakedBy_call;
        let stakedByInvParams = (params) => [params.param1, eth_wallet_1.Utils.toString(params.param2)];
        let stakedByInv_call = async (params) => {
          let result = await this.call("stakedByInv", stakedByInvParams(params));
          return {
            trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
            index: new eth_wallet_1.BigNumber(result.index)
          };
        };
        this.stakedByInv = stakedByInv_call;
        let stakedByLength_call = async (trollProfileIndex) => {
          let result = await this.call("stakedByLength", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakedByLength = stakedByLength_call;
        let totalStake_call = async () => {
          let result = await this.call("totalStake");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalStake = totalStake_call;
        let trollNft_call = async (param1) => {
          let result = await this.call("trollNft", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.trollNft = trollNft_call;
        let trollNftInv_call = async (param1) => {
          let result = await this.call("trollNftInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollNftInv = trollNftInv_call;
        let trollNftLength_call = async () => {
          let result = await this.call("trollNftLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollNftLength = trollNftLength_call;
        let trollProfileInv_call = async (param1) => {
          let result = await this.call("trollProfileInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollProfileInv = trollProfileInv_call;
        let trollProfiles_call = async (param1) => {
          let result = await this.call("trollProfiles", [eth_wallet_1.Utils.toString(param1)]);
          return {
            owner: result.owner,
            troll: result.troll,
            trollType: new eth_wallet_1.BigNumber(result.trollType),
            nftCount: new eth_wallet_1.BigNumber(result.nftCount)
          };
        };
        this.trollProfiles = trollProfiles_call;
        let trollProfilesLength_call = async () => {
          let result = await this.call("trollProfilesLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollProfilesLength = trollProfilesLength_call;
        let votingManager_call = async () => {
          let result = await this.call("votingManager");
          return result;
        };
        this.votingManager = votingManager_call;
        let addStakesGeneralTrollParams = (params) => [params.nft, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.amount)];
        let addStakesGeneralTroll_send = async (params) => {
          let result = await this.send("addStakesGeneralTroll", addStakesGeneralTrollParams(params));
          return result;
        };
        let addStakesGeneralTroll_call = async (params) => {
          let result = await this.call("addStakesGeneralTroll", addStakesGeneralTrollParams(params));
          return;
        };
        this.addStakesGeneralTroll = Object.assign(addStakesGeneralTroll_send, {
          call: addStakesGeneralTroll_call
        });
        let addStakesSuperTrollParams = (params) => [params.nft, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.amount)];
        let addStakesSuperTroll_send = async (params) => {
          let result = await this.send("addStakesSuperTroll", addStakesSuperTrollParams(params));
          return result;
        };
        let addStakesSuperTroll_call = async (params) => {
          let result = await this.call("addStakesSuperTroll", addStakesSuperTrollParams(params));
          return;
        };
        this.addStakesSuperTroll = Object.assign(addStakesSuperTroll_send, {
          call: addStakesSuperTroll_call
        });
        let addTrollParams = (params) => [params.troll, params.isSuperTroll, eth_wallet_1.Utils.stringToBytes(params.signature)];
        let addTroll_send = async (params) => {
          let result = await this.send("addTroll", addTrollParams(params));
          return result;
        };
        let addTroll_call = async (params) => {
          let result = await this.call("addTroll", addTrollParams(params));
          return;
        };
        this.addTroll = Object.assign(addTroll_send, {
          call: addTroll_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let initAddress_send = async (votingManager) => {
          let result = await this.send("initAddress", [votingManager]);
          return result;
        };
        let initAddress_call = async (votingManager) => {
          let result = await this.call("initAddress", [votingManager]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let onERC721ReceivedParams = (params) => [params.param1, params.param2, eth_wallet_1.Utils.toString(params.param3), eth_wallet_1.Utils.stringToBytes(params.param4)];
        let onERC721Received_send = async (params) => {
          let result = await this.send("onERC721Received", onERC721ReceivedParams(params));
          return result;
        };
        let onERC721Received_call = async (params) => {
          let result = await this.call("onERC721Received", onERC721ReceivedParams(params));
          return result;
        };
        this.onERC721Received = Object.assign(onERC721Received_send, {
          call: onERC721Received_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let resume_send = async () => {
          let result = await this.send("resume");
          return result;
        };
        let resume_call = async () => {
          let result = await this.call("resume");
          return;
        };
        this.resume = Object.assign(resume_send, {
          call: resume_call
        });
        let shutdownByAdmin_send = async () => {
          let result = await this.send("shutdownByAdmin");
          return result;
        };
        let shutdownByAdmin_call = async () => {
          let result = await this.call("shutdownByAdmin");
          return;
        };
        this.shutdownByAdmin = Object.assign(shutdownByAdmin_send, {
          call: shutdownByAdmin_call
        });
        let shutdownByVoting_send = async () => {
          let result = await this.send("shutdownByVoting");
          return result;
        };
        let shutdownByVoting_call = async () => {
          let result = await this.call("shutdownByVoting");
          return;
        };
        this.shutdownByVoting = Object.assign(shutdownByVoting_send, {
          call: shutdownByVoting_call
        });
        let stakeGeneralTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.nft, eth_wallet_1.Utils.toString(params.tokenId)];
        let stakeGeneralTroll_send = async (params) => {
          let result = await this.send("stakeGeneralTroll", stakeGeneralTrollParams(params));
          return result;
        };
        let stakeGeneralTroll_call = async (params) => {
          let result = await this.call("stakeGeneralTroll", stakeGeneralTrollParams(params));
          return;
        };
        this.stakeGeneralTroll = Object.assign(stakeGeneralTroll_send, {
          call: stakeGeneralTroll_call
        });
        let stakeSuperTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.nft, eth_wallet_1.Utils.toString(params.tokenId)];
        let stakeSuperTroll_send = async (params) => {
          let result = await this.send("stakeSuperTroll", stakeSuperTrollParams(params));
          return result;
        };
        let stakeSuperTroll_call = async (params) => {
          let result = await this.call("stakeSuperTroll", stakeSuperTrollParams(params));
          return;
        };
        this.stakeSuperTroll = Object.assign(stakeSuperTroll_send, {
          call: stakeSuperTroll_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let unstakeGeneralTrollParams = (params) => [params.nft, eth_wallet_1.Utils.toString(params.tokenId)];
        let unstakeGeneralTroll_send = async (params) => {
          let result = await this.send("unstakeGeneralTroll", unstakeGeneralTrollParams(params));
          return result;
        };
        let unstakeGeneralTroll_call = async (params) => {
          let result = await this.call("unstakeGeneralTroll", unstakeGeneralTrollParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.unstakeGeneralTroll = Object.assign(unstakeGeneralTroll_send, {
          call: unstakeGeneralTroll_call
        });
        let unstakeSuperTrollParams = (params) => [params.nft, eth_wallet_1.Utils.toString(params.tokenId)];
        let unstakeSuperTroll_send = async (params) => {
          let result = await this.send("unstakeSuperTroll", unstakeSuperTrollParams(params));
          return result;
        };
        let unstakeSuperTroll_call = async (params) => {
          let result = await this.call("unstakeSuperTroll", unstakeSuperTrollParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.unstakeSuperTroll = Object.assign(unstakeSuperTroll_send, {
          call: unstakeSuperTroll_call
        });
        let updateNftParams = (params) => [params.nft, eth_wallet_1.Utils.toString(params.trolltype)];
        let updateNft_send = async (params) => {
          let result = await this.send("updateNft", updateNftParams(params));
          return result;
        };
        let updateNft_call = async (params) => {
          let result = await this.call("updateNft", updateNftParams(params));
          return;
        };
        this.updateNft = Object.assign(updateNft_send, {
          call: updateNft_call
        });
        let updateTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.newTroll, eth_wallet_1.Utils.stringToBytes(params.signature)];
        let updateTroll_send = async (params) => {
          let result = await this.send("updateTroll", updateTrollParams(params));
          return result;
        };
        let updateTroll_call = async (params) => {
          let result = await this.call("updateTroll", updateTrollParams(params));
          return;
        };
        this.updateTroll = Object.assign(updateTroll_send, {
          call: updateTroll_call
        });
        let updateVotingManager_send = async () => {
          let result = await this.send("updateVotingManager");
          return result;
        };
        let updateVotingManager_call = async () => {
          let result = await this.call("updateVotingManager");
          return;
        };
        this.updateVotingManager = Object.assign(updateVotingManager_send, {
          call: updateVotingManager_call
        });
        let upgrade_send = async (trollRegistry) => {
          let result = await this.send("upgrade", [trollRegistry]);
          return result;
        };
        let upgrade_call = async (trollRegistry) => {
          let result = await this.call("upgrade", [trollRegistry]);
          return;
        };
        this.upgrade = Object.assign(upgrade_send, {
          call: upgrade_call
        });
        let upgradeByAdmin_send = async (trollRegistry) => {
          let result = await this.send("upgradeByAdmin", [trollRegistry]);
          return result;
        };
        let upgradeByAdmin_call = async (trollRegistry) => {
          let result = await this.call("upgradeByAdmin", [trollRegistry]);
          return;
        };
        this.upgradeByAdmin = Object.assign(upgradeByAdmin_send, {
          call: upgradeByAdmin_call
        });
      }
    };
    exports.OSWAP_MainChainTrollRegistry = OSWAP_MainChainTrollRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainVotingExecutor.json.js
var require_OSWAP_MainChainVotingExecutor_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainVotingExecutor.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "Execute", "type": "event" },
        { "inputs": [], "name": "chainRegistry", "outputs": [{ "internalType": "contract OSWAP_ChainRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_ChainRegistry", "name": "_chainRegistry", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60c060405234801561001057600080fd5b50604051620014f8380380620014f8833981016040819052610031916100d8565b6000816001600160a01b03166330167bec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561006c57600080fd5b505afa158015610080573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a491906100d8565b6001600160601b0319606091821b811660805292901b90911660a05250600080546001600160a01b03191633179055610114565b6000602082840312156100ea57600080fd5b81516100f5816100fc565b9392505050565b6001600160a01b038116811461011157600080fd5b50565b60805160601c60a05160601c61137b6200017d6000396000818160e9015281816101cb015281816105ba0152818161068b0152818161078d015281816109460152610a0d0152600081816071015281816103de0152818161048b0152610868015261137b6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638af7c649116100505780638af7c649146100d1578063da1bcdf0146100e4578063fd5e394a1461010b57600080fd5b806330167bec1461006c5780635a812465146100bc575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100cf6100ca3660046111b4565b61012b565b005b6100cf6100df366004611116565b61019d565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6001546100939073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461014f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600080549091169055565b6040517fb15866e60000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b15866e69060240160206040518083038186803b15801561022257600080fd5b505afa158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a919061118b565b6102eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4f535741505f566f74696e674578656375746f723a204e6f742066726f6d207660448201527f6f74696e6700000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80610352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420706172616d73206c656e677468000000000000000000000060448201526064016102e2565b7fb98f16f9e16a613740729e6e1b35730f7ca1456ba20bff88685e53e1881bec9082826040516103839291906111ee565b60405180910390a16000828260008181106103a0576103a06112f1565b602002919091013591505060018214156104f657807f73687574646f776e0000000000000000000000000000000000000000000000001415610461577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b86241276040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561044457600080fd5b505af1158015610458573d6000803e3d6000fd5b50505050505050565b807f726573756d65000000000000000000000000000000000000000000000000000014156104f1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663046f7da26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561044457600080fd5b610aee565b60008383600181811061050b5761050b6112f1565b905060200201359050817f73696465436861696e436f6e666967000000000000000000000000000000000014156105575761055161054c8460018188611243565b610b50565b50505050565b600283141561070257817f73657441646d696e0000000000000000000000000000000000000000000000001415610631576040517f704b6c02000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063704b6c0290602401600060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b5050505050505050565b817f75706772616465566f74696e674d616e6167657200000000000000000000000014156106fd576040517f0900f010000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630900f01090602401600060405180830381600087803b1580156106e457600080fd5b505af11580156106f8573d6000803e3d6000fd5b505050505b610aec565b600084846002818110610717576107176112f1565b602002919091013591505060038414156108b857827f736574566f74696e674578656375746f720000000000000000000000000000001415610806576040517f788ddbcb000000000000000000000000000000000000000000000000000000008152606083901c600482015281151560248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063788ddbcb906044015b600060405180830381600087803b1580156107e757600080fd5b505af11580156107fb573d6000803e3d6000fd5b505050505050505050565b827f7570677261646554726f6c6c526567697374727900000000000000000000000014156108b357468214156108ac576040517f0900f010000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630900f010906024016107cd565b5050505050565b610aea565b6000858560038181106108cd576108cd6112f1565b602002919091013591505060048514156109c557837f736574566f74696e67436f6e666967000000000000000000000000000000000014156109c0576040517fd9c370860000000000000000000000000000000000000000000000000000000081526004810184905260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d9c37086906064015b600060405180830381600087803b1580156109a057600080fd5b505af11580156109b4573d6000803e3d6000fd5b50505050505050505050565b610ae8565b6007851415610ae857837f616464566f74696e67436f6e66696700000000000000000000000000000000001415610ae85773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166365611e438484848a8a6004818110610a4857610a486112f1565b9050602002013560001c8b8b6005818110610a6557610a656112f1565b9050602002013560001c8c8c6006818110610a8257610a826112f1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b16815260048101989098526024880196909652506044860193909352606485019190915260848401526020909102013560a482015260c401610986565b505b505b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d6574657273000000000000000000000000000060448201526064016102e2565b60028111610bba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d6574657273000000000000000000000000000060448201526064016102e2565b600082826000818110610bcf57610bcf6112f1565b905060200201359050600083836001818110610bed57610bed6112f1565b610c01926020909102013590506002611271565b9050610c0e816001611271565b831115610aee576000848483818110610c2957610c296112f1565b90506020020135905060008585846001610c439190611271565b818110610c5257610c526112f1565b905060200201359050826002610c689190611271565b851415610f5d57837f736574436f6e66696700000000000000000000000000000000000000000000001415610de65760025b838110156104585760015473ffffffffffffffffffffffffffffffffffffffff166342f064c9888884818110610cd257610cd26112f1565b9050602002013560001c6040518263ffffffff1660e01b8152600401610cfa91815260200190565b60206040518083038186803b158015610d1257600080fd5b505afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906111d1565b6040517fd1fd27b3000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff919091169063d1fd27b390604401600060405180830381600087803b158015610dbb57600080fd5b505af1158015610dcf573d6000803e3d6000fd5b505050508080610dde90611289565b915050610c9a565b837f736574436f6e666967416464726573730000000000000000000000000000000014156108b35760025b838110156104585760015473ffffffffffffffffffffffffffffffffffffffff166342f064c9888884818110610e4957610e496112f1565b9050602002013560001c6040518263ffffffff1660e01b8152600401610e7191815260200190565b60206040518083038186803b158015610e8957600080fd5b505afa158015610e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec191906111d1565b6040517f9db57e1f000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9190911690639db57e1f90604401600060405180830381600087803b158015610f3257600080fd5b505af1158015610f46573d6000803e3d6000fd5b505050508080610f5590611289565b915050610e11565b60008686610f6c866002611271565b818110610f7b57610f7b6112f1565b905060200201359050836003610f919190611271565b861415610ae857847f736574436f6e66696732000000000000000000000000000000000000000000001415610ae85760025b848110156106275760015473ffffffffffffffffffffffffffffffffffffffff166342f064c9898984818110610ffb57610ffb6112f1565b9050602002013560001c6040518263ffffffff1660e01b815260040161102391815260200190565b60206040518083038186803b15801561103b57600080fd5b505afa15801561104f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107391906111d1565b6040517fdf9321a500000000000000000000000000000000000000000000000000000000815260048101869052602481018590526044810184905273ffffffffffffffffffffffffffffffffffffffff919091169063df9321a590606401600060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b50505050808061110e90611289565b915050610fc3565b6000806020838503121561112957600080fd5b823567ffffffffffffffff8082111561114157600080fd5b818501915085601f83011261115557600080fd5b81358181111561116457600080fd5b8660208260051b850101111561117957600080fd5b60209290920196919550909350505050565b60006020828403121561119d57600080fd5b815180151581146111ad57600080fd5b9392505050565b6000602082840312156111c657600080fd5b81356111ad81611320565b6000602082840312156111e357600080fd5b81516111ad81611320565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561122757600080fd5b8260051b80856040850137600092016040019182525092915050565b6000808585111561125357600080fd5b8386111561126057600080fd5b5050600583901b0193919092039150565b60008219821115611284576112846112c2565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112bb576112bb6112c2565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461134257600080fd5b5056fea26469706673582212204d53f7f8a617e2214f9d62d660aaae388268f9fcfa6b1116145b1c9d0da9ae8f64736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainVotingExecutor.js
var require_OSWAP_MainChainVotingExecutor = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_MainChainVotingExecutor.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_MainChainVotingExecutor = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_MainChainVotingExecutor_json_1 = __importDefault(require_OSWAP_MainChainVotingExecutor_json());
    var OSWAP_MainChainVotingExecutor = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_MainChainVotingExecutor_json_1.default.abi, OSWAP_MainChainVotingExecutor_json_1.default.bytecode);
        this.assign();
      }
      deploy(votingManager) {
        return this.__deploy([votingManager]);
      }
      parseExecuteEvent(receipt) {
        return this.parseEvents(receipt, "Execute").map((e) => this.decodeExecuteEvent(e));
      }
      decodeExecuteEvent(event) {
        let result = event.data;
        return {
          params: result.params,
          _event: event
        };
      }
      assign() {
        let chainRegistry_call = async () => {
          let result = await this.call("chainRegistry");
          return result;
        };
        this.chainRegistry = chainRegistry_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let votingManager_call = async () => {
          let result = await this.call("votingManager");
          return result;
        };
        this.votingManager = votingManager_call;
        let execute_send = async (params) => {
          let result = await this.send("execute", [eth_wallet_1.Utils.stringToBytes32(params)]);
          return result;
        };
        let execute_call = async (params) => {
          let result = await this.call("execute", [eth_wallet_1.Utils.stringToBytes32(params)]);
          return;
        };
        this.execute = Object.assign(execute_send, {
          call: execute_call
        });
        let initAddress_send = async (chainRegistry) => {
          let result = await this.send("initAddress", [chainRegistry]);
          return result;
        };
        let initAddress_call = async (chainRegistry) => {
          let result = await this.call("initAddress", [chainRegistry]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
      }
    };
    exports.OSWAP_MainChainVotingExecutor = OSWAP_MainChainVotingExecutor;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_RouterVaultWrapper.json.js
var require_OSWAP_RouterVaultWrapper_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_RouterVaultWrapper.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vault", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "address", "name": "inToken", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "inAmount", "type": "uint256" }], "name": "Swap", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
        { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapETHForExactTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapExactETHForTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "payable", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapExactTokensForTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "pair", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "amountIn", "type": "uint256" }, { "internalType": "uint256", "name": "deadline", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swapTokensForExactTokens", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "stateMutability": "payable", "type": "receive" }
      ],
      "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b03191633179055612a54806100326000396000f3fe60806040526004361061007f5760003560e01c8063842c48351161004e578063842c48351461023d5780638da5cb5b146102525780639d69dc4e146102a4578063bdfcb8b0146102d157600080fd5b806313c35abb146101c45780632211b3bd146101ea57806353613a031461020a5780635a8124651461021d57600080fd5b366101bf57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101249190612328565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420666f726d20726f75746572000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b6101d76101d23660046123b7565b6102f1565b6040519081526020015b60405180910390f35b3480156101f657600080fd5b506101d761020536600461241d565b6106c4565b6101d7610218366004612345565b610c2d565b34801561022957600080fd5b506101bd61023836600461261e565b610fb3565b34801561024957600080fd5b506101bd61117f565b34801561025e57600080fd5b5060005461027f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e1565b3480156102b057600080fd5b5060015461027f9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102dd57600080fd5b506101d76102ec366004612497565b61131a565b600032331480156103015750333b155b610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b600154604080517ff887ea40000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163f887ea40916004808301926020929190829003018186803b1580156103d257600080fd5b505afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190612328565b905060008173ffffffffffffffffffffffffffffffffffffffff1663ed3b11ce3486602001518b8b8b8b600067ffffffffffffffff81111561044e5761044e6129ca565b6040519080825280601f01601f191660200182016040528015610478576020820181803683370190505b506040518863ffffffff1660e01b815260040161049a969594939291906127d7565b6000604051808303818588803b1580156104b357600080fd5b505af11580156104c7573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261050e919081019061253a565b91505080600182516105209190612929565b815181106105305761053061299b565b602090810291909101810151908501908152604080517fd06f3fb5000000000000000000000000000000000000000000000000000000008152865160048201529151602483015285015173ffffffffffffffffffffffffffffffffffffffff90811660448301526060860151606483015260808601518116608483015260a086015160a48301523360c483015287169063d06f3fb59060e401602060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b919061263b565b92508573ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc0843360008560008151811061066c5761066c61299b565b60200260200101516040516106b1949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a2505095945050505050565b600032331480156106d45750333b155b61073a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b60008573ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078257600080fd5b505afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190612328565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561082657600080fd5b505afa15801561083a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085e9190612328565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663b66bd67c8c8c876040518463ffffffff1660e01b81526004016108a093929190612710565b60006040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109129190810190612505565b9050806000815181106109275761092761299b565b602002602001015191505061093d81338961186e565b965061096073ffffffffffffffffffffffffffffffffffffffff821683896119e3565b600073ffffffffffffffffffffffffffffffffffffffff831663c1385f2460208801358a8e8e898f8e896040519080825280601f01601f1916602001820160405280156109b4576020820181803683370190505b506040518963ffffffff1660e01b81526004016109d8989796959493929190612832565b600060405180830381600087803b1580156109f257600080fd5b505af1158015610a06573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a4c919081019061253a565b6040517fd06f3fb500000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff8b16915063d06f3fb590610aa4908990339060040161275d565b602060405180830381600087803b158015610abe57600080fd5b505af1158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af6919061263b565b94508873ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc086338585600081518110610b4657610b4661299b565b6020026020010151604051610b8b949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a280600081518110610ba657610ba661299b565b6020026020010151881115610c1f57610bfd3382600081518110610bcc57610bcc61299b565b60200260200101518a610bdf9190612929565b73ffffffffffffffffffffffffffffffffffffffff85169190611b74565b610c1f73ffffffffffffffffffffffffffffffffffffffff8316846000611bcf565b505050509695505050505050565b60003233148015610c3d5750333b155b610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b600154604080517ff887ea40000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163f887ea40916004808301926020929190829003018186803b158015610d0e57600080fd5b505afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d469190612328565b9050600073ffffffffffffffffffffffffffffffffffffffff821663e76c59753460208701358b8b8b8b886040519080825280601f01601f191660200182016040528015610d9b576020820181803683370190505b506040518863ffffffff1660e01b8152600401610dbd969594939291906127d7565b6000604051808303818588803b158015610dd657600080fd5b505af1158015610dea573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e31919081019061253a565b6040517fd06f3fb500000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff8816915063d06f3fb590610e89908790339060040161275d565b602060405180830381600087803b158015610ea357600080fd5b505af1158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb919061263b565b92508573ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc08433600085600081518110610f2c57610f2c61299b565b6020026020010151604051610f71949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a2610fa83382600081518110610f9057610f9061299b565b602002602001015134610fa39190612929565b611d60565b505095945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6e6f742066726f6d206f776e657200000000000000000000000000000000000060448201526064016101b4565b73ffffffffffffffffffffffffffffffffffffffff81166110b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6e756c6c2061646472657373000000000000000000000000000000000000000060448201526064016101b4565b60015473ffffffffffffffffffffffffffffffffffffffff1615611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f616c72656164792073657400000000000000000000000000000000000000000060448201526064016101b4565b6001805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600080549091169055565b600154604080517fef060951000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163ef060951916004808301926020929190829003018186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112229190612328565b905073ffffffffffffffffffffffffffffffffffffffff81166112a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c696420636f6e6669672073746f726500000000000000000000000060448201526064016101b4565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f6fa6ee9ec7808d2a9699505042862d79597c4068938b960a4a18d584a2aa3eea9060200160405180910390a150565b6000323314801561132a5750333b155b611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742066726f6d20656e64207573657200000000000000000000000000000060448201526064016101b4565b600154604080517ff887ea40000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163f887ea40916004808301926020929190829003018186803b1580156113fb57600080fd5b505afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114339190612328565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663b66bd67c8b8b8b73ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561149c57600080fd5b505afa1580156114b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d49190612328565b6040518463ffffffff1660e01b81526004016114f293929190612710565b60006040518083038186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526115649190810190612505565b9050806000815181106115795761157961299b565b602002602001015191505061158f81338861186e565b95506115b273ffffffffffffffffffffffffffffffffffffffff821683886119e3565b60008273ffffffffffffffffffffffffffffffffffffffff166365d9e64b8887602001518d8d878e8d600067ffffffffffffffff8111156115f5576115f56129ca565b6040519080825280601f01601f19166020018201604052801561161f576020820181803683370190505b506040518963ffffffff1660e01b8152600401611643989796959493929190612832565b600060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116b7919081019061253a565b91505080600182516116c99190612929565b815181106116d9576116d961299b565b602090810291909101810151908601908152604080517fd06f3fb5000000000000000000000000000000000000000000000000000000008152875160048201529151602483015286015173ffffffffffffffffffffffffffffffffffffffff90811660448301526060870151606483015260808701518116608483015260a087015160a48301523360c483015289169063d06f3fb59060e401602060405180830381600087803b15801561178c57600080fd5b505af11580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c4919061263b565b93508773ffffffffffffffffffffffffffffffffffffffff167fd8323ca53cfc1feaad69ff4da62bfe7b2e48f1906238193fe8f686db378e6bc0853385856000815181106118145761181461299b565b6020026020010151604051611859949392919093845273ffffffffffffffffffffffffffffffffffffffff928316602085015291166040830152606082015260800190565b60405180910390a25050509695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a082319060240160206040518083038186803b1580156118d657600080fd5b505afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e919061263b565b905061193273ffffffffffffffffffffffffffffffffffffffff8516843085611e6a565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a082319060240160206040518083038186803b15801561199957600080fd5b505afa1580156119ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d1919061263b565b6119db9190612929565b949350505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b158015611a5557600080fd5b505afa158015611a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8d919061263b565b611a979190612911565b60405173ffffffffffffffffffffffffffffffffffffffff8516602482015260448101829052909150611b6e9085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611ec8565b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611bca9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611aec565b505050565b801580611c7e57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c4457600080fd5b505afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c919061263b565b155b611d0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016101b4565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611bca9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611aec565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051611d9791906126f4565b60006040518083038185875af1925050503d8060008114611dd4576040519150601f19603f3d011682016040523d82523d6000602084013e611dd9565b606091505b5050905080611bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201527f4c4544000000000000000000000000000000000000000000000000000000000060648201526084016101b4565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052611b6e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611aec565b6000611f2a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611fd49092919063ffffffff16565b805190915015611bca5780806020019051810190611f4891906125fc565b611bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016101b4565b60606119db8484600085611fea565b9392505050565b60608247101561207c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016101b4565b843b6120e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101b4565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161210d91906126f4565b60006040518083038185875af1925050503d806000811461214a576040519150601f19603f3d011682016040523d82523d6000602084013e61214f565b606091505b509150915061215f82828661216a565b979650505050505050565b60608315612179575081611fe3565b8251156121895782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b4919061274a565b60008083601f8401126121cf57600080fd5b50813567ffffffffffffffff8111156121e757600080fd5b6020830191508360208260051b850101111561220257600080fd5b9250929050565b600082601f83011261221a57600080fd5b8151602061222f61222a836128ed565b61289e565b80838252828201915082860187848660051b890101111561224f57600080fd5b60005b85811015612277578151612265816129f9565b84529284019290840190600101612252565b5090979650505050505050565b600060c0828403121561229657600080fd5b50919050565b600060c082840312156122ae57600080fd5b60405160c0810181811067ffffffffffffffff821117156122d1576122d16129ca565b8060405250809150823581526020830135602082015260408301356122f5816129f9565b6040820152606083810135908201526080830135612312816129f9565b608082015260a092830135920191909152919050565b60006020828403121561233a57600080fd5b8151611fe3816129f9565b6000806000806000610120868803121561235e57600080fd5b853567ffffffffffffffff81111561237557600080fd5b612381888289016121bd565b9096509450506020860135612395816129f9565b9250604086013591506123ab8760608801612284565b90509295509295909350565b600080600080600061012086880312156123d057600080fd5b853567ffffffffffffffff8111156123e757600080fd5b6123f3888289016121bd565b9096509450506020860135612407816129f9565b9250604086013591506123ab876060880161229c565b600080600080600080610140878903121561243757600080fd5b863567ffffffffffffffff81111561244e57600080fd5b61245a89828a016121bd565b909750955050602087013561246e816129f9565b9350604087013592506060870135915061248b8860808901612284565b90509295509295509295565b60008060008060008061014087890312156124b157600080fd5b863567ffffffffffffffff8111156124c857600080fd5b6124d489828a016121bd565b90975095505060208701356124e8816129f9565b9350604087013592506060870135915061248b886080890161229c565b60006020828403121561251757600080fd5b815167ffffffffffffffff81111561252e57600080fd5b6119db84828501612209565b6000806040838503121561254d57600080fd5b825167ffffffffffffffff8082111561256557600080fd5b61257186838701612209565b935060209150818501518181111561258857600080fd5b85019050601f8101861361259b57600080fd5b80516125a961222a826128ed565b80828252848201915084840189868560051b87010111156125c957600080fd5b600094505b838510156125ec5780518352600194909401939185019185016125ce565b5080955050505050509250929050565b60006020828403121561260e57600080fd5b81518015158114611fe357600080fd5b60006020828403121561263057600080fd5b8135611fe3816129f9565b60006020828403121561264d57600080fd5b5051919050565b8183526000602080850194508260005b8581101561269f578135612677816129f9565b73ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101612664565b509495945050505050565b600081518084526126c2816020860160208601612940565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612706818460208701612940565b9190910192915050565b604081526000612724604083018587612654565b905073ffffffffffffffffffffffffffffffffffffffff83166020830152949350505050565b602081526000611fe360208301846126aa565b823581526020808401359082015260e08101604084013561277d816129f9565b73ffffffffffffffffffffffffffffffffffffffff808216604085015260608601356060850152608086013591506127b4826129f9565b808216608085015260a086013560a085015280851660c085015250509392505050565b86815260a0602082015260006127f160a083018789612654565b73ffffffffffffffffffffffffffffffffffffffff86166040840152846060840152828103608084015261282581856126aa565b9998505050505050505050565b88815287602082015260e06040820152600061285260e08301888a612654565b73ffffffffffffffffffffffffffffffffffffffff87811660608501528616608084015260a0830185905282810360c084015261288f81856126aa565b9b9a5050505050505050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156128e5576128e56129ca565b604052919050565b600067ffffffffffffffff821115612907576129076129ca565b5060051b60200190565b600082198211156129245761292461296c565b500190565b60008282101561293b5761293b61296c565b500390565b60005b8381101561295b578181015183820152602001612943565b83811115611b6e5750506000910152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612a1b57600080fd5b5056fea264697066735822122013576d7a312f407a52ee078ff5df3e8e1f2fe9f6f25a80908cf0574e7f12129064736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_RouterVaultWrapper.js
var require_OSWAP_RouterVaultWrapper = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_RouterVaultWrapper.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_RouterVaultWrapper = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_RouterVaultWrapper_json_1 = __importDefault(require_OSWAP_RouterVaultWrapper_json());
    var OSWAP_RouterVaultWrapper = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_RouterVaultWrapper_json_1.default.abi, OSWAP_RouterVaultWrapper_json_1.default.bytecode);
        this.assign();
      }
      deploy() {
        return this.__deploy();
      }
      parseSwapEvent(receipt) {
        return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
      }
      decodeSwapEvent(event) {
        let result = event.data;
        return {
          vault: result.vault,
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          sender: result.sender,
          inToken: result.inToken,
          inAmount: new eth_wallet_1.BigNumber(result.inAmount),
          _event: event
        };
      }
      parseUpdateConfigStoreEvent(receipt) {
        return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
      }
      decodeUpdateConfigStoreEvent(event) {
        let result = event.data;
        return {
          newConfigStore: result.newConfigStore,
          _event: event
        };
      }
      assign() {
        let configStore_call = async () => {
          let result = await this.call("configStore");
          return result;
        };
        this.configStore = configStore_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let initAddress_send = async (configStore) => {
          let result = await this.send("initAddress", [configStore]);
          return result;
        };
        let initAddress_call = async (configStore) => {
          let result = await this.call("initAddress", [configStore]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let swapETHForExactTokensParams = (params) => [params.pair, params.vault, eth_wallet_1.Utils.toString(params.deadline), [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)]];
        let swapETHForExactTokens_send = async (params, _value) => {
          let result = await this.send("swapETHForExactTokens", swapETHForExactTokensParams(params), { value: _value });
          return result;
        };
        let swapETHForExactTokens_call = async (params, _value) => {
          let result = await this.call("swapETHForExactTokens", swapETHForExactTokensParams(params), { value: _value });
          return new eth_wallet_1.BigNumber(result);
        };
        this.swapETHForExactTokens = Object.assign(swapETHForExactTokens_send, {
          call: swapETHForExactTokens_call
        });
        let swapExactETHForTokensParams = (params) => [params.pair, params.vault, eth_wallet_1.Utils.toString(params.deadline), [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)]];
        let swapExactETHForTokens_send = async (params, _value) => {
          let result = await this.send("swapExactETHForTokens", swapExactETHForTokensParams(params), { value: _value });
          return result;
        };
        let swapExactETHForTokens_call = async (params, _value) => {
          let result = await this.call("swapExactETHForTokens", swapExactETHForTokensParams(params), { value: _value });
          return new eth_wallet_1.BigNumber(result);
        };
        this.swapExactETHForTokens = Object.assign(swapExactETHForTokens_send, {
          call: swapExactETHForTokens_call
        });
        let swapExactTokensForTokensParams = (params) => [params.pair, params.vault, eth_wallet_1.Utils.toString(params.amountIn), eth_wallet_1.Utils.toString(params.deadline), [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)]];
        let swapExactTokensForTokens_send = async (params) => {
          let result = await this.send("swapExactTokensForTokens", swapExactTokensForTokensParams(params));
          return result;
        };
        let swapExactTokensForTokens_call = async (params) => {
          let result = await this.call("swapExactTokensForTokens", swapExactTokensForTokensParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.swapExactTokensForTokens = Object.assign(swapExactTokensForTokens_send, {
          call: swapExactTokensForTokens_call
        });
        let swapTokensForExactTokensParams = (params) => [params.pair, params.vault, eth_wallet_1.Utils.toString(params.amountIn), eth_wallet_1.Utils.toString(params.deadline), [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)]];
        let swapTokensForExactTokens_send = async (params) => {
          let result = await this.send("swapTokensForExactTokens", swapTokensForExactTokensParams(params));
          return result;
        };
        let swapTokensForExactTokens_call = async (params) => {
          let result = await this.call("swapTokensForExactTokens", swapTokensForExactTokensParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.swapTokensForExactTokens = Object.assign(swapTokensForExactTokens_send, {
          call: swapTokensForExactTokens_call
        });
        let updateConfigStore_send = async () => {
          let result = await this.send("updateConfigStore");
          return result;
        };
        let updateConfigStore_call = async () => {
          let result = await this.call("updateConfigStore");
          return;
        };
        this.updateConfigStore = Object.assign(updateConfigStore_send, {
          call: updateConfigStore_call
        });
      }
    };
    exports.OSWAP_RouterVaultWrapper = OSWAP_RouterVaultWrapper;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainTrollRegistry.json.js
var require_OSWAP_SideChainTrollRegistry_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainTrollRegistry.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "_configStore", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "troll", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "isSuperTroll", "type": "bool" }], "name": "AddTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "DelistTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockGeneralTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "lockedBy", "type": "address" }], "name": "LockSuperTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC20", "name": "token", "type": "address" }, { "indexed": true, "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }], "name": "NewVault", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "RemoveTroll", "type": "event" },
        { "anonymous": false, "inputs": [], "name": "Resume", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newVotingExecutor", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "isActive", "type": "bool" }], "name": "SetVotingExecutor", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }], "name": "Shutdown", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "UnlockGeneralTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": false, "internalType": "bool", "name": "unlock", "type": "bool" }, { "indexed": false, "internalType": "address", "name": "bridgeVault", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "penalty", "type": "uint256" }], "name": "UnlockSuperTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "troll", "type": "address" }], "name": "UpdateTroll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "newTrollRegistry", "type": "address" }], "name": "Upgrade", "type": "event" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "addTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "allVaultToken", "outputs": [{ "internalType": "contract IERC20[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "generalTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "_isSuperTroll", "type": "bool" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashAddTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashRegisterVault", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashRemoveTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "unlock", "type": "bool" }, { "internalType": "address[]", "name": "vaultRegistry", "type": "address[]" }, { "internalType": "uint256[]", "name": "penalty", "type": "uint256[]" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashUnlockTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashUpdateTroll", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" }, { "internalType": "contract IOSWAP_BridgeVault[]", "name": "_vaults", "type": "address[]" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isGeneralTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTroll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "returnFalseIfBlocked", "type": "bool" }], "name": "isSuperTrollByIndex", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "lastTrollTxCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }], "name": "lockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newTrollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newVotingExecutorManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "contract IERC20", "name": "token", "type": "address" }, { "internalType": "contract IOSWAP_BridgeVault", "name": "vault", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "registerVault", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "removeTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "resume", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "shutdownByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "shutdownByVoting", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "superTrollCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "transactionsCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "trollProfileInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "trollProfiles", "outputs": [{ "internalType": "address", "name": "troll", "type": "address" }, { "internalType": "enum OSWAP_SideChainTrollRegistry.TrollType", "name": "trollType", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockGeneralTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "bool", "name": "unlock", "type": "bool" }, { "internalType": "address[]", "name": "vaultRegistry", "type": "address[]" }, { "internalType": "uint256[]", "name": "penalty", "type": "uint256[]" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "unlockSuperTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "trollProfileIndex", "type": "uint256" }, { "internalType": "address", "name": "newTroll", "type": "address" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "updateTroll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_trollRegistry", "type": "address" }], "name": "upgradeByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "usedNonce", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "vaultToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "vaultTokenLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "name": "vaults", "outputs": [{ "internalType": "contract IOSWAP_BridgeVault", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "msgSender", "type": "address" }, { "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32", "name": "paramsHash", "type": "bytes32" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "verifySignatures", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainTrollRegistry.js
var require_OSWAP_SideChainTrollRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainTrollRegistry.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_SideChainTrollRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_SideChainTrollRegistry_json_1 = __importDefault(require_OSWAP_SideChainTrollRegistry_json());
    var OSWAP_SideChainTrollRegistry = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_SideChainTrollRegistry_json_1.default.abi, OSWAP_SideChainTrollRegistry_json_1.default.bytecode);
        this.assign();
      }
      deploy(configStore) {
        return this.__deploy([configStore]);
      }
      parseAddTrollEvent(receipt) {
        return this.parseEvents(receipt, "AddTroll").map((e) => this.decodeAddTrollEvent(e));
      }
      decodeAddTrollEvent(event) {
        let result = event.data;
        return {
          troll: result.troll,
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          isSuperTroll: result.isSuperTroll,
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDelistTrollEvent(receipt) {
        return this.parseEvents(receipt, "DelistTroll").map((e) => this.decodeDelistTrollEvent(e));
      }
      decodeDelistTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          _event: event
        };
      }
      parseLockGeneralTrollEvent(receipt) {
        return this.parseEvents(receipt, "LockGeneralTroll").map((e) => this.decodeLockGeneralTrollEvent(e));
      }
      decodeLockGeneralTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          lockedBy: result.lockedBy,
          _event: event
        };
      }
      parseLockSuperTrollEvent(receipt) {
        return this.parseEvents(receipt, "LockSuperTroll").map((e) => this.decodeLockSuperTrollEvent(e));
      }
      decodeLockSuperTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          lockedBy: result.lockedBy,
          _event: event
        };
      }
      parseNewVaultEvent(receipt) {
        return this.parseEvents(receipt, "NewVault").map((e) => this.decodeNewVaultEvent(e));
      }
      decodeNewVaultEvent(event) {
        let result = event.data;
        return {
          token: result.token,
          vault: result.vault,
          _event: event
        };
      }
      parseRemoveTrollEvent(receipt) {
        return this.parseEvents(receipt, "RemoveTroll").map((e) => this.decodeRemoveTrollEvent(e));
      }
      decodeRemoveTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          _event: event
        };
      }
      parseResumeEvent(receipt) {
        return this.parseEvents(receipt, "Resume").map((e) => this.decodeResumeEvent(e));
      }
      decodeResumeEvent(event) {
        let result = event.data;
        return {
          _event: event
        };
      }
      parseSetVotingExecutorEvent(receipt) {
        return this.parseEvents(receipt, "SetVotingExecutor").map((e) => this.decodeSetVotingExecutorEvent(e));
      }
      decodeSetVotingExecutorEvent(event) {
        let result = event.data;
        return {
          newVotingExecutor: result.newVotingExecutor,
          isActive: result.isActive,
          _event: event
        };
      }
      parseShutdownEvent(receipt) {
        return this.parseEvents(receipt, "Shutdown").map((e) => this.decodeShutdownEvent(e));
      }
      decodeShutdownEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnlockGeneralTrollEvent(receipt) {
        return this.parseEvents(receipt, "UnlockGeneralTroll").map((e) => this.decodeUnlockGeneralTrollEvent(e));
      }
      decodeUnlockGeneralTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          _event: event
        };
      }
      parseUnlockSuperTrollEvent(receipt) {
        return this.parseEvents(receipt, "UnlockSuperTroll").map((e) => this.decodeUnlockSuperTrollEvent(e));
      }
      decodeUnlockSuperTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          unlock: result.unlock,
          bridgeVault: result.bridgeVault,
          penalty: new eth_wallet_1.BigNumber(result.penalty),
          _event: event
        };
      }
      parseUpdateConfigStoreEvent(receipt) {
        return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
      }
      decodeUpdateConfigStoreEvent(event) {
        let result = event.data;
        return {
          newConfigStore: result.newConfigStore,
          _event: event
        };
      }
      parseUpdateTrollEvent(receipt) {
        return this.parseEvents(receipt, "UpdateTroll").map((e) => this.decodeUpdateTrollEvent(e));
      }
      decodeUpdateTrollEvent(event) {
        let result = event.data;
        return {
          trollProfileIndex: new eth_wallet_1.BigNumber(result.trollProfileIndex),
          troll: result.troll,
          _event: event
        };
      }
      parseUpgradeEvent(receipt) {
        return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
      }
      decodeUpgradeEvent(event) {
        let result = event.data;
        return {
          newTrollRegistry: result.newTrollRegistry,
          _event: event
        };
      }
      assign() {
        let allVaultToken_call = async () => {
          let result = await this.call("allVaultToken");
          return result;
        };
        this.allVaultToken = allVaultToken_call;
        let configStore_call = async () => {
          let result = await this.call("configStore");
          return result;
        };
        this.configStore = configStore_call;
        let generalTrollCount_call = async () => {
          let result = await this.call("generalTrollCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.generalTrollCount = generalTrollCount_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let hashAddTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.troll, params.isSuperTroll, eth_wallet_1.Utils.toString(params.nonce)];
        let hashAddTroll_call = async (params) => {
          let result = await this.call("hashAddTroll", hashAddTrollParams(params));
          return result;
        };
        this.hashAddTroll = hashAddTroll_call;
        let hashRegisterVaultParams = (params) => [params.token, params.vault, eth_wallet_1.Utils.toString(params.nonce)];
        let hashRegisterVault_call = async (params) => {
          let result = await this.call("hashRegisterVault", hashRegisterVaultParams(params));
          return result;
        };
        this.hashRegisterVault = hashRegisterVault_call;
        let hashRemoveTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.nonce)];
        let hashRemoveTroll_call = async (params) => {
          let result = await this.call("hashRemoveTroll", hashRemoveTrollParams(params));
          return result;
        };
        this.hashRemoveTroll = hashRemoveTroll_call;
        let hashUnlockTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.unlock, params.vaultRegistry, eth_wallet_1.Utils.toString(params.penalty), eth_wallet_1.Utils.toString(params.nonce)];
        let hashUnlockTroll_call = async (params) => {
          let result = await this.call("hashUnlockTroll", hashUnlockTrollParams(params));
          return result;
        };
        this.hashUnlockTroll = hashUnlockTroll_call;
        let hashUpdateTrollParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.newTroll, eth_wallet_1.Utils.toString(params.nonce)];
        let hashUpdateTroll_call = async (params) => {
          let result = await this.call("hashUpdateTroll", hashUpdateTrollParams(params));
          return result;
        };
        this.hashUpdateTroll = hashUpdateTroll_call;
        let isGeneralTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
        let isGeneralTroll_call = async (params) => {
          let result = await this.call("isGeneralTroll", isGeneralTrollParams(params));
          return result;
        };
        this.isGeneralTroll = isGeneralTroll_call;
        let isGeneralTrollByIndexParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
        let isGeneralTrollByIndex_call = async (params) => {
          let result = await this.call("isGeneralTrollByIndex", isGeneralTrollByIndexParams(params));
          return result;
        };
        this.isGeneralTrollByIndex = isGeneralTrollByIndex_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let isSuperTrollParams = (params) => [params.troll, params.returnFalseIfBlocked];
        let isSuperTroll_call = async (params) => {
          let result = await this.call("isSuperTroll", isSuperTrollParams(params));
          return result;
        };
        this.isSuperTroll = isSuperTroll_call;
        let isSuperTrollByIndexParams = (params) => [eth_wallet_1.Utils.toString(params.trollProfileIndex), params.returnFalseIfBlocked];
        let isSuperTrollByIndex_call = async (params) => {
          let result = await this.call("isSuperTrollByIndex", isSuperTrollByIndexParams(params));
          return result;
        };
        this.isSuperTrollByIndex = isSuperTrollByIndex_call;
        let isVotingExecutor_call = async (param1) => {
          let result = await this.call("isVotingExecutor", [param1]);
          return result;
        };
        this.isVotingExecutor = isVotingExecutor_call;
        let lastTrollTxCount_call = async (param1) => {
          let result = await this.call("lastTrollTxCount", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lastTrollTxCount = lastTrollTxCount_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let newTrollRegistry_call = async () => {
          let result = await this.call("newTrollRegistry");
          return result;
        };
        this.newTrollRegistry = newTrollRegistry_call;
        let newVotingExecutorManager_call = async () => {
          let result = await this.call("newVotingExecutorManager");
          return result;
        };
        this.newVotingExecutorManager = newVotingExecutorManager_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let paused_call = async () => {
          let result = await this.call("paused");
          return result;
        };
        this.paused = paused_call;
        let superTrollCount_call = async () => {
          let result = await this.call("superTrollCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.superTrollCount = superTrollCount_call;
        let transactionsCount_call = async () => {
          let result = await this.call("transactionsCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.transactionsCount = transactionsCount_call;
        let trollProfileInv_call = async (param1) => {
          let result = await this.call("trollProfileInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollProfileInv = trollProfileInv_call;
        let trollProfiles_call = async (param1) => {
          let result = await this.call("trollProfiles", [eth_wallet_1.Utils.toString(param1)]);
          return {
            troll: result.troll,
            trollType: new eth_wallet_1.BigNumber(result.trollType)
          };
        };
        this.trollProfiles = trollProfiles_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let usedNonce_call = async (param1) => {
          let result = await this.call("usedNonce", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.usedNonce = usedNonce_call;
        let vaultToken_call = async (param1) => {
          let result = await this.call("vaultToken", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.vaultToken = vaultToken_call;
        let vaultTokenLength_call = async () => {
          let result = await this.call("vaultTokenLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.vaultTokenLength = vaultTokenLength_call;
        let vaults_call = async (param1) => {
          let result = await this.call("vaults", [param1]);
          return result;
        };
        this.vaults = vaults_call;
        let votingExecutor_call = async (param1) => {
          let result = await this.call("votingExecutor", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.votingExecutor = votingExecutor_call;
        let votingExecutorInv_call = async (param1) => {
          let result = await this.call("votingExecutorInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingExecutorInv = votingExecutorInv_call;
        let votingExecutorLength_call = async () => {
          let result = await this.call("votingExecutorLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingExecutorLength = votingExecutorLength_call;
        let addTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), params.troll, params.isSuperTroll, eth_wallet_1.Utils.toString(params.nonce)];
        let addTroll_send = async (params) => {
          let result = await this.send("addTroll", addTrollParams(params));
          return result;
        };
        let addTroll_call = async (params) => {
          let result = await this.call("addTroll", addTrollParams(params));
          return;
        };
        this.addTroll = Object.assign(addTroll_send, {
          call: addTroll_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let initAddressParams = (params) => [params.votingExecutor, params.tokens, params.vaults];
        let initAddress_send = async (params) => {
          let result = await this.send("initAddress", initAddressParams(params));
          return result;
        };
        let initAddress_call = async (params) => {
          let result = await this.call("initAddress", initAddressParams(params));
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let lockGeneralTroll_send = async (trollProfileIndex) => {
          let result = await this.send("lockGeneralTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return result;
        };
        let lockGeneralTroll_call = async (trollProfileIndex) => {
          let result = await this.call("lockGeneralTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return;
        };
        this.lockGeneralTroll = Object.assign(lockGeneralTroll_send, {
          call: lockGeneralTroll_call
        });
        let lockSuperTroll_send = async (trollProfileIndex) => {
          let result = await this.send("lockSuperTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return result;
        };
        let lockSuperTroll_call = async (trollProfileIndex) => {
          let result = await this.call("lockSuperTroll", [eth_wallet_1.Utils.toString(trollProfileIndex)]);
          return;
        };
        this.lockSuperTroll = Object.assign(lockSuperTroll_send, {
          call: lockSuperTroll_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let registerVaultParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), params.token, params.vault, eth_wallet_1.Utils.toString(params.nonce)];
        let registerVault_send = async (params) => {
          let result = await this.send("registerVault", registerVaultParams(params));
          return result;
        };
        let registerVault_call = async (params) => {
          let result = await this.call("registerVault", registerVaultParams(params));
          return;
        };
        this.registerVault = Object.assign(registerVault_send, {
          call: registerVault_call
        });
        let removeTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.nonce)];
        let removeTroll_send = async (params) => {
          let result = await this.send("removeTroll", removeTrollParams(params));
          return result;
        };
        let removeTroll_call = async (params) => {
          let result = await this.call("removeTroll", removeTrollParams(params));
          return;
        };
        this.removeTroll = Object.assign(removeTroll_send, {
          call: removeTroll_call
        });
        let resume_send = async () => {
          let result = await this.send("resume");
          return result;
        };
        let resume_call = async () => {
          let result = await this.call("resume");
          return;
        };
        this.resume = Object.assign(resume_send, {
          call: resume_call
        });
        let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
        let setVotingExecutor_send = async (params) => {
          let result = await this.send("setVotingExecutor", setVotingExecutorParams(params));
          return result;
        };
        let setVotingExecutor_call = async (params) => {
          let result = await this.call("setVotingExecutor", setVotingExecutorParams(params));
          return;
        };
        this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
          call: setVotingExecutor_call
        });
        let shutdownByAdmin_send = async () => {
          let result = await this.send("shutdownByAdmin");
          return result;
        };
        let shutdownByAdmin_call = async () => {
          let result = await this.call("shutdownByAdmin");
          return;
        };
        this.shutdownByAdmin = Object.assign(shutdownByAdmin_send, {
          call: shutdownByAdmin_call
        });
        let shutdownByVoting_send = async () => {
          let result = await this.send("shutdownByVoting");
          return result;
        };
        let shutdownByVoting_call = async () => {
          let result = await this.call("shutdownByVoting");
          return;
        };
        this.shutdownByVoting = Object.assign(shutdownByVoting_send, {
          call: shutdownByVoting_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let unlockGeneralTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), eth_wallet_1.Utils.toString(params.nonce)];
        let unlockGeneralTroll_send = async (params) => {
          let result = await this.send("unlockGeneralTroll", unlockGeneralTrollParams(params));
          return result;
        };
        let unlockGeneralTroll_call = async (params) => {
          let result = await this.call("unlockGeneralTroll", unlockGeneralTrollParams(params));
          return;
        };
        this.unlockGeneralTroll = Object.assign(unlockGeneralTroll_send, {
          call: unlockGeneralTroll_call
        });
        let unlockSuperTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), params.unlock, params.vaultRegistry, eth_wallet_1.Utils.toString(params.penalty), eth_wallet_1.Utils.toString(params.nonce)];
        let unlockSuperTroll_send = async (params) => {
          let result = await this.send("unlockSuperTroll", unlockSuperTrollParams(params));
          return result;
        };
        let unlockSuperTroll_call = async (params) => {
          let result = await this.call("unlockSuperTroll", unlockSuperTrollParams(params));
          return;
        };
        this.unlockSuperTroll = Object.assign(unlockSuperTroll_send, {
          call: unlockSuperTroll_call
        });
        let updateConfigStore_send = async () => {
          let result = await this.send("updateConfigStore");
          return result;
        };
        let updateConfigStore_call = async () => {
          let result = await this.call("updateConfigStore");
          return;
        };
        this.updateConfigStore = Object.assign(updateConfigStore_send, {
          call: updateConfigStore_call
        });
        let updateTrollParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.trollProfileIndex), params.newTroll, eth_wallet_1.Utils.toString(params.nonce)];
        let updateTroll_send = async (params) => {
          let result = await this.send("updateTroll", updateTrollParams(params));
          return result;
        };
        let updateTroll_call = async (params) => {
          let result = await this.call("updateTroll", updateTrollParams(params));
          return;
        };
        this.updateTroll = Object.assign(updateTroll_send, {
          call: updateTroll_call
        });
        let upgrade_send = async (trollRegistry) => {
          let result = await this.send("upgrade", [trollRegistry]);
          return result;
        };
        let upgrade_call = async (trollRegistry) => {
          let result = await this.call("upgrade", [trollRegistry]);
          return;
        };
        this.upgrade = Object.assign(upgrade_send, {
          call: upgrade_call
        });
        let upgradeByAdmin_send = async (trollRegistry) => {
          let result = await this.send("upgradeByAdmin", [trollRegistry]);
          return result;
        };
        let upgradeByAdmin_call = async (trollRegistry) => {
          let result = await this.call("upgradeByAdmin", [trollRegistry]);
          return;
        };
        this.upgradeByAdmin = Object.assign(upgradeByAdmin_send, {
          call: upgradeByAdmin_call
        });
        let verifySignaturesParams = (params) => [params.msgSender, eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.stringToBytes32(params.paramsHash), eth_wallet_1.Utils.toString(params.nonce)];
        let verifySignatures_send = async (params) => {
          let result = await this.send("verifySignatures", verifySignaturesParams(params));
          return result;
        };
        let verifySignatures_call = async (params) => {
          let result = await this.call("verifySignatures", verifySignaturesParams(params));
          return;
        };
        this.verifySignatures = Object.assign(verifySignatures_send, {
          call: verifySignatures_call
        });
      }
    };
    exports.OSWAP_SideChainTrollRegistry = OSWAP_SideChainTrollRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainVotingExecutor.json.js
var require_OSWAP_SideChainVotingExecutor_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainVotingExecutor.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "_trollRegistry", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }], "name": "Execute", "type": "event" },
        { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract OSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32[]", "name": "params", "type": "bytes32[]" }, { "internalType": "uint256", "name": "nonce", "type": "uint256" }], "name": "executeHash", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_SideChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60c060405234801561001057600080fd5b50604051610ebe380380610ebe83398101604081905261002f91610169565b806001600160a01b031660a0816001600160a01b031660601b81525050806001600160a01b0316639d69dc4e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561008557600080fd5b505afa158015610099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd9190610169565b6000806101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b03166305268cff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011b57600080fd5b505afa15801561012f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101539190610169565b60601b6001600160601b031916608052506101a5565b60006020828403121561017b57600080fd5b81516101868161018d565b9392505050565b6001600160a01b03811681146101a257600080fd5b50565b60805160601c60a05160601c610ccd6101f16000396000818160c20152818161026a0152818161032c015281816103db0152818161058101526107980152600060710152610ccd6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639d69dc4e116100505780639d69dc4e146100e4578063b2286ef014610104578063c0c888501461012557600080fd5b806305268cff1461006c57806330167bec146100bd575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6000546100939073ffffffffffffffffffffffffffffffffffffffff1681565b610117610112366004610989565b61013a565b6040519081526020016100b4565b6101386101333660046109d5565b610178565b005b60405160009046906101589082903090889088908890602001610a92565b604051602081830303815290604052805190602001209150509392505050565b816101e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c696420706172616d73206c656e677468000000000000000000000060448201526064015b60405180910390fd5b7fb98f16f9e16a613740729e6e1b35730f7ca1456ba20bff88685e53e1881bec908383604051610215929190610c13565b60405180910390a1600061022a84848461013a565b6040517f099828de00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063099828de906102a79033908a908a9087908990600401610b11565b600060405180830381600087803b1580156102c157600080fd5b505af11580156102d5573d6000803e3d6000fd5b505050506000848460008181106102ee576102ee610c68565b6020029190910135915050600184141561044657807f73687574646f776e00000000000000000000000000000000000000000000000014156103b1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b86241276040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561039257600080fd5b505af11580156103a6573d6000803e3d6000fd5b505050505050610936565b807f726573756d6500000000000000000000000000000000000000000000000000001415610441577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663046f7da26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561039257600080fd5b6108d4565b60008585600181811061045b5761045b610c68565b602002919091013591505060028514156105ca57817f75706772616465436f6e66696753746f726500000000000000000000000000001415610527576000546040517f0900f010000000000000000000000000000000000000000000000000000000008152606083901c600482015273ffffffffffffffffffffffffffffffffffffffff90911690630900f010906024015b600060405180830381600087803b15801561050757600080fd5b505af115801561051b573d6000803e3d6000fd5b50505050505050610936565b817f7570677261646554726f6c6c526567697374727900000000000000000000000014156105c5576040517f0900f010000000000000000000000000000000000000000000000000000000008152606082901c60048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630900f010906024016104ed565b6108d2565b6000868660028181106105df576105df610c68565b602002919091013591505060038614156107e157827f736574436f6e666967000000000000000000000000000000000000000000000014156106b0576000546040517fd1fd27b3000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d1fd27b3906044015b600060405180830381600087803b15801561068f57600080fd5b505af11580156106a3573d6000803e3d6000fd5b5050505050505050610936565b827f736574436f6e66696741646472657373000000000000000000000000000000001415610736576000546040517f9db57e1f000000000000000000000000000000000000000000000000000000008152600481018490526024810183905273ffffffffffffffffffffffffffffffffffffffff90911690639db57e1f90604401610675565b827f736574566f74696e674578656375746f7200000000000000000000000000000014156107dc576040517f788ddbcb000000000000000000000000000000000000000000000000000000008152606083901c600482015281151560248201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063788ddbcb90604401610675565b6108d0565b6000878760038181106107f6576107f6610c68565b602002919091013591505060048714156108ce57837f736574436f6e666967320000000000000000000000000000000000000000000014156108ce576000546040517fdf9321a500000000000000000000000000000000000000000000000000000000815260048101859052602481018490526044810183905273ffffffffffffffffffffffffffffffffffffffff9091169063df9321a590606401600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b505050505050505050610936565b505b505b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420706172616d6574657273000000000000000000000000000060448201526064016101db565b5050505050565b60008083601f84011261094f57600080fd5b50813567ffffffffffffffff81111561096757600080fd5b6020830191508360208260051b850101111561098257600080fd5b9250929050565b60008060006040848603121561099e57600080fd5b833567ffffffffffffffff8111156109b557600080fd5b6109c18682870161093d565b909790965060209590950135949350505050565b6000806000806000606086880312156109ed57600080fd5b853567ffffffffffffffff80821115610a0557600080fd5b610a1189838a0161093d565b90975095506020880135915080821115610a2a57600080fd5b50610a378882890161093d565b96999598509660400135949350505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8581527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b16602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115610aef57600080fd5b8360051b80866034850137603492019182019290925260540195945050505050565b60006080820173ffffffffffffffffffffffffffffffffffffffff8816835260206080818501528187835260a08501905060a08860051b86010192508860005b89811015610bfb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6087860301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18c3603018112610bb257600080fd5b8b01803567ffffffffffffffff811115610bcb57600080fd5b8036038d1315610bda57600080fd5b610be78782888501610a49565b965050509183019190830190600101610b51565b50505050604083019490945250606001529392505050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610c4c57600080fd5b8260051b80856040850137600092016040019182525092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220ec019599262d9456571dca7e11e7f9a2baff40b3e60c0ffb0c31155505427cf164736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainVotingExecutor.js
var require_OSWAP_SideChainVotingExecutor = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_SideChainVotingExecutor.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_SideChainVotingExecutor = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_SideChainVotingExecutor_json_1 = __importDefault(require_OSWAP_SideChainVotingExecutor_json());
    var OSWAP_SideChainVotingExecutor = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_SideChainVotingExecutor_json_1.default.abi, OSWAP_SideChainVotingExecutor_json_1.default.bytecode);
        this.assign();
      }
      deploy(trollRegistry) {
        return this.__deploy([trollRegistry]);
      }
      parseExecuteEvent(receipt) {
        return this.parseEvents(receipt, "Execute").map((e) => this.decodeExecuteEvent(e));
      }
      decodeExecuteEvent(event) {
        let result = event.data;
        return {
          params: result.params,
          _event: event
        };
      }
      assign() {
        let configStore_call = async () => {
          let result = await this.call("configStore");
          return result;
        };
        this.configStore = configStore_call;
        let executeHashParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.params), eth_wallet_1.Utils.toString(params.nonce)];
        let executeHash_call = async (params) => {
          let result = await this.call("executeHash", executeHashParams(params));
          return result;
        };
        this.executeHash = executeHash_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let executeParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.stringToBytes32(params.params), eth_wallet_1.Utils.toString(params.nonce)];
        let execute_send = async (params) => {
          let result = await this.send("execute", executeParams(params));
          return result;
        };
        let execute_call = async (params) => {
          let result = await this.call("execute", executeParams(params));
          return;
        };
        this.execute = Object.assign(execute_send, {
          call: execute_call
        });
      }
    };
    exports.OSWAP_SideChainVotingExecutor = OSWAP_SideChainVotingExecutor;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingContract.json.js
var require_OSWAP_VotingContract_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingContract.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "components": [{ "internalType": "contract OSWAP_MainChainVotingExecutor", "name": "executor", "type": "address" }, { "internalType": "uint256", "name": "id", "type": "uint256" }, { "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum", "type": "uint256" }, { "internalType": "uint256", "name": "threshold", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam", "type": "bytes32[]" }], "internalType": "struct OSWAP_VotingContract.Params", "name": "params", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteOption", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "accountVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "allExecuteParam", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "allOptions", "outputs": [{ "internalType": "bytes32[]", "name": "", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "allOptionsWeight", "outputs": [{ "internalType": "uint256[]", "name": "", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "execute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "executeDelay", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "executeParam", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "executeParamLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "executed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "executor", "outputs": [{ "internalType": "contract OSWAP_MainChainVotingExecutor", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "getParams", "outputs": [{ "internalType": "address", "name": "executor_", "type": "address" }, { "internalType": "uint256", "name": "id_", "type": "uint256" }, { "internalType": "bytes32", "name": "name_", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options_", "type": "bytes32[]" }, { "internalType": "uint256", "name": "voteStartTime_", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime_", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay_", "type": "uint256" }, { "internalType": "bool[2]", "name": "status_", "type": "bool[2]" }, { "internalType": "uint256[]", "name": "optionsWeight_", "type": "uint256[]" }, { "internalType": "uint256[3]", "name": "quorum_", "type": "uint256[3]" }, { "internalType": "bytes32[]", "name": "executeParam_", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "id", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "options", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "optionsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "optionsWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "quorum", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "threshold", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalVoteWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalWeight", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "updateWeight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "vetoed", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "vote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "voteEndTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "voteStartTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingContract.js
var require_OSWAP_VotingContract = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingContract.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingContract = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_VotingContract_json_1 = __importDefault(require_OSWAP_VotingContract_json());
    var OSWAP_VotingContract = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_VotingContract_json_1.default.abi, OSWAP_VotingContract_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([[params.executor, eth_wallet_1.Utils.toString(params.id), eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.options), eth_wallet_1.Utils.toString(params.quorum), eth_wallet_1.Utils.toString(params.threshold), eth_wallet_1.Utils.toString(params.voteEndTime), eth_wallet_1.Utils.toString(params.executeDelay), eth_wallet_1.Utils.stringToBytes32(params.executeParam)]]);
      }
      assign() {
        let accountVoteOption_call = async (param1) => {
          let result = await this.call("accountVoteOption", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.accountVoteOption = accountVoteOption_call;
        let accountVoteWeight_call = async (param1) => {
          let result = await this.call("accountVoteWeight", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.accountVoteWeight = accountVoteWeight_call;
        let allExecuteParam_call = async () => {
          let result = await this.call("allExecuteParam");
          return result;
        };
        this.allExecuteParam = allExecuteParam_call;
        let allOptions_call = async () => {
          let result = await this.call("allOptions");
          return result;
        };
        this.allOptions = allOptions_call;
        let allOptionsWeight_call = async () => {
          let result = await this.call("allOptionsWeight");
          return result.map((e) => new eth_wallet_1.BigNumber(e));
        };
        this.allOptionsWeight = allOptionsWeight_call;
        let executeDelay_call = async () => {
          let result = await this.call("executeDelay");
          return new eth_wallet_1.BigNumber(result);
        };
        this.executeDelay = executeDelay_call;
        let executeParam_call = async (param1) => {
          let result = await this.call("executeParam", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.executeParam = executeParam_call;
        let executeParamLength_call = async () => {
          let result = await this.call("executeParamLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.executeParamLength = executeParamLength_call;
        let executed_call = async () => {
          let result = await this.call("executed");
          return result;
        };
        this.executed = executed_call;
        let executor_call = async () => {
          let result = await this.call("executor");
          return result;
        };
        this.executor = executor_call;
        let getParams_call = async () => {
          let result = await this.call("getParams");
          return {
            executor_: result.executor_,
            id_: new eth_wallet_1.BigNumber(result.id_),
            name_: result.name_,
            options_: result.options_,
            voteStartTime_: new eth_wallet_1.BigNumber(result.voteStartTime_),
            voteEndTime_: new eth_wallet_1.BigNumber(result.voteEndTime_),
            executeDelay_: new eth_wallet_1.BigNumber(result.executeDelay_),
            status_: result.status_,
            optionsWeight_: result.optionsWeight_.map((e) => new eth_wallet_1.BigNumber(e)),
            quorum_: result.quorum_.map((e) => new eth_wallet_1.BigNumber(e)),
            executeParam_: result.executeParam_
          };
        };
        this.getParams = getParams_call;
        let id_call = async () => {
          let result = await this.call("id");
          return new eth_wallet_1.BigNumber(result);
        };
        this.id = id_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let options_call = async (param1) => {
          let result = await this.call("options", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.options = options_call;
        let optionsLength_call = async () => {
          let result = await this.call("optionsLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.optionsLength = optionsLength_call;
        let optionsWeight_call = async (param1) => {
          let result = await this.call("optionsWeight", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.optionsWeight = optionsWeight_call;
        let quorum_call = async () => {
          let result = await this.call("quorum");
          return new eth_wallet_1.BigNumber(result);
        };
        this.quorum = quorum_call;
        let threshold_call = async () => {
          let result = await this.call("threshold");
          return new eth_wallet_1.BigNumber(result);
        };
        this.threshold = threshold_call;
        let totalVoteWeight_call = async () => {
          let result = await this.call("totalVoteWeight");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalVoteWeight = totalVoteWeight_call;
        let totalWeight_call = async () => {
          let result = await this.call("totalWeight");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalWeight = totalWeight_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let vetoed_call = async () => {
          let result = await this.call("vetoed");
          return result;
        };
        this.vetoed = vetoed_call;
        let voteEndTime_call = async () => {
          let result = await this.call("voteEndTime");
          return new eth_wallet_1.BigNumber(result);
        };
        this.voteEndTime = voteEndTime_call;
        let voteStartTime_call = async () => {
          let result = await this.call("voteStartTime");
          return new eth_wallet_1.BigNumber(result);
        };
        this.voteStartTime = voteStartTime_call;
        let votingManager_call = async () => {
          let result = await this.call("votingManager");
          return result;
        };
        this.votingManager = votingManager_call;
        let execute_send = async () => {
          let result = await this.send("execute");
          return result;
        };
        let execute_call = async () => {
          let result = await this.call("execute");
          return;
        };
        this.execute = Object.assign(execute_send, {
          call: execute_call
        });
        let updateWeight_send = async (account) => {
          let result = await this.send("updateWeight", [account]);
          return result;
        };
        let updateWeight_call = async (account) => {
          let result = await this.call("updateWeight", [account]);
          return;
        };
        this.updateWeight = Object.assign(updateWeight_send, {
          call: updateWeight_call
        });
        let veto_send = async () => {
          let result = await this.send("veto");
          return result;
        };
        let veto_call = async () => {
          let result = await this.call("veto");
          return;
        };
        this.veto = Object.assign(veto_send, {
          call: veto_call
        });
        let vote_send = async (option) => {
          let result = await this.send("vote", [eth_wallet_1.Utils.toString(option)]);
          return result;
        };
        let vote_call = async (option) => {
          let result = await this.call("vote", [eth_wallet_1.Utils.toString(option)]);
          return;
        };
        this.vote = Object.assign(vote_send, {
          call: vote_call
        });
      }
    };
    exports.OSWAP_VotingContract = OSWAP_VotingContract;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingManager.json.js
var require_OSWAP_VotingManager_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingManager.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "_trollRegistry", "type": "address" }, { "internalType": "bytes32[]", "name": "_names", "type": "bytes32[]" }, { "internalType": "uint256[]", "name": "_minExeDelay", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_maxVoteDuration", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minGovTokenToCreateVote", "type": "uint256[]" }, { "internalType": "uint256[]", "name": "_minQuorum", "type": "uint256[]" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minGovTokenToCreateVote", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "AddVotingConfig", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Executed", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "poll", "type": "address" }], "name": "NewPoll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "NewVote", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value", "type": "bytes32" }], "name": "ParamSet", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value1", "type": "bytes32" }, { "indexed": false, "internalType": "bytes32", "name": "value2", "type": "bytes32" }], "name": "ParamSet2", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "poll", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Poll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "indexed": true, "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "indexed": false, "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }], "name": "SetVotingConfig", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract OSWAP_VotingManager", "name": "newVotingManager", "type": "address" }], "name": "Upgrade", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "vote", "type": "address" }], "name": "Veto", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address" }, { "indexed": true, "internalType": "address", "name": "vote", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "Vote", "type": "event" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minGovTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "name": "addVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "admin", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "allVotings", "outputs": [{ "internalType": "address[]", "name": "", "type": "address[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }], "name": "closeVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "executed", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "getNewVoteId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getVotingConfigProfiles", "outputs": [{ "internalType": "bytes32[]", "name": "profiles", "type": "bytes32[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "getVotingCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "name", "type": "bytes32" }], "name": "getVotingParams", "outputs": [{ "internalType": "uint256", "name": "_minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "_minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "_minGovTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "_minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "count", "type": "uint256" }], "name": "getVotings", "outputs": [{ "internalType": "address[]", "name": "_votings", "type": "address[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "initAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "_votingExecutor", "type": "address[]" }], "name": "initVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "votingContract", "type": "address" }], "name": "isVotingContract", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isVotingExecutor", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "vote", "type": "address" }, { "internalType": "bool", "name": "isExecutiveVote", "type": "bool" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "newVotingExecutorManager", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newVotingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_admin", "type": "address" }], "name": "setAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "configName", "type": "bytes32" }, { "internalType": "bytes32", "name": "paramName", "type": "bytes32" }, { "internalType": "uint256", "name": "paramValue", "type": "uint256" }], "name": "setVotingConfig", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_votingExecutor", "type": "address" }, { "internalType": "bool", "name": "_bool", "type": "bool" }], "name": "setVotingExecutor", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_votingRegister", "type": "address" }], "name": "setVotingRegister", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "updateWeight", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgrade", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "name": "upgradeByAdmin", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "voting", "type": "address" }], "name": "veto", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "voteCount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bool", "name": "poll", "type": "bool" }, { "internalType": "address", "name": "account", "type": "address" }, { "internalType": "uint256", "name": "option", "type": "uint256" }], "name": "voted", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingConfigProfiles", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingConfigProfilesLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "votingConfigs", "outputs": [{ "internalType": "uint256", "name": "minExeDelay", "type": "uint256" }, { "internalType": "uint256", "name": "minVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "maxVoteDuration", "type": "uint256" }, { "internalType": "uint256", "name": "minGovTokenToCreateVote", "type": "uint256" }, { "internalType": "uint256", "name": "minQuorum", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votingExecutor", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingExecutorInv", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingExecutorLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "votingIdx", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingRegister", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "votings", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60a06040523480156200001157600080fd5b5060405162003b1d38038062003b1d833981016040819052620000349162000597565b600080546001600160a01b03199081163317909155600380546001600160a01b038a16921682179055604080516305268cff60e01b815290516305268cff91600480820192602092909190829003018186803b1580156200009457600080fd5b505afa158015620000a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cf919062000570565b60601b6001600160601b03191660805284518651148015620000f2575083518551145b801562000100575082518451145b80156200010e575081518351145b80156200011c575080518251145b6200017a5760405162461bcd60e51b815260206004820152602360248201527f4f535741503a20417267756d656e74206c656e67746873206e6f74206d6174636044820152621a195960ea1b60648201526084015b60405180910390fd5b60005b8651811015620004a65760008682815181106200019e576200019e620006dd565b6020026020010151118015620001d3575062093a80868281518110620001c857620001c8620006dd565b602002602001015111155b620002215760405162461bcd60e51b815260206004820152601a60248201527f4f535741503a20496e76616c6964206d696e45786544656c6179000000000000604482015260640162000171565b838181518110620002365762000236620006dd565b6020026020010151858281518110620002535762000253620006dd565b602002602001015110801562000288575062093a808582815181106200027d576200027d620006dd565b602002602001015111155b620002d65760405162461bcd60e51b815260206004820152601e60248201527f4f535741503a20496e76616c6964206d696e566f74654475726174696f6e0000604482015260640162000171565b600060056000898481518110620002f157620002f1620006dd565b6020026020010151815260200190815260200160002090508682815181106200031e576200031e620006dd565b60200260200101518160000181905550858281518110620003435762000343620006dd565b60200260200101518160010181905550848281518110620003685762000368620006dd565b602002602001015181600201819055508382815181106200038d576200038d620006dd565b60200260200101518160030181905550828281518110620003b257620003b2620006dd565b602002602001015181600401819055506006888381518110620003d957620003d9620006dd565b6020908102919091018101518254600181018455600093845291909220015587517f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf0912990899084908110620004315762000431620006dd565b6020026020010151826000015483600101548460020154856003015486600401546040516200048896959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a150806200049d81620006b3565b9150506200017d565b505050505050505062000722565b600082601f830112620004c657600080fd5b815160206001600160401b0380831115620004e557620004e5620006f3565b8260051b604051601f19603f830116810181811084821117156200050d576200050d620006f3565b604052848152838101925086840182880185018910156200052d57600080fd5b600092505b858310156200055257805184529284019260019290920191840162000532565b50979650505050505050565b80516200056b8162000709565b919050565b6000602082840312156200058357600080fd5b8151620005908162000709565b9392505050565b600080600080600080600060e0888a031215620005b357600080fd5b620005be886200055e565b60208901519097506001600160401b0380821115620005dc57600080fd5b620005ea8b838c01620004b4565b975060408a01519150808211156200060157600080fd5b6200060f8b838c01620004b4565b965060608a01519150808211156200062657600080fd5b620006348b838c01620004b4565b955060808a01519150808211156200064b57600080fd5b620006598b838c01620004b4565b945060a08a01519150808211156200067057600080fd5b6200067e8b838c01620004b4565b935060c08a01519150808211156200069557600080fd5b50620006a48a828b01620004b4565b91505092959891949750929550565b6000600019821415620006d657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200071f57600080fd5b50565b60805160601c6133dc62000741600039600061030901526133dc6000f3fe608060405234801561001057600080fd5b50600436106102ff5760003560e01c806378a1a9fa1161019c578063a8fd327e116100ee578063f2486f4411610097578063f851a44011610071578063f851a44014610719578063ff2a59b014610739578063ffccd8431461074157600080fd5b8063f2486f44146106d3578063f2fde38b146106e6578063f6f04d7f146106f957600080fd5b8063c6384071116100c8578063c638407114610697578063d4ee1d90146106a0578063d9c37086146106c057600080fd5b8063a8fd327e14610629578063b15866e614610666578063c53bc0471461067957600080fd5b806395e5cfa211610150578063a2f55ae51161012a578063a2f55ae5146105e0578063a3818b3b146105f3578063a598d03c1461061657600080fd5b806395e5cfa2146105a55780639c2aab5e146105c55780639c52a7f1146105cd57600080fd5b80638da5cb5b116101815780638da5cb5b1461055257806391927050146105725780639449f0131461058557600080fd5b806378a1a9fa14610537578063821077511461053f57600080fd5b80633fd8cc4e1161025557806365611e4311610209578063704b6c02116101e3578063704b6c02146104d6578063718fbb79146104e9578063788ddbcb1461052457600080fd5b806365611e431461049d57806365eaf8bc146104b05780636a333cee146104c357600080fd5b8063568621751161023a5780635686217514610462578063605361721461048257806362072e761461048a57600080fd5b80633fd8cc4e1461041c57806344fe9eb01461044f57600080fd5b806326ae21a9116102b757806330167bec1161029157806330167bec146103e157806331a38c89146104015780633b32cf421461040957600080fd5b806326ae21a9146103a657806329294e2b146103b957806329711413146103d957600080fd5b80630900f010116102e85780630900f0101461036a578063145988981461037d57806317e42ec01461039357600080fd5b806305268cff1461030457806308c4934d14610355575b600080fd5b61032b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610368610363366004612ffe565b610761565b005b610368610378366004612ffe565b610816565b610385610898565b60405190815260200161034c565b6103686103a1366004612ffe565b61095f565b6103686103b4366004612ffe565b610a24565b6103cc6103c73660046131ac565b610b52565b60405161034c91906131ce565b6103cc610c60565b60035461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b610368610ccf565b610368610417366004613057565b610dd9565b61043f61042a366004612ffe565b60026020526000908152604090205460ff1681565b604051901515815260200161034c565b61036861045d366004612ffe565b610ebc565b600e5461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b610368610ee0565b610368610498366004612ffe565b61100a565b6103686104ab366004613150565b6111de565b6103686104be3660046130cc565b61160f565b6103686104d1366004612ffe565b611786565b6103686104e4366004612ffe565b6118e9565b6104fc6104f736600461310b565b611962565b604080519586526020860194909452928401919091526060830152608082015260a00161034c565b610368610532366004613022565b6119f5565b600754610385565b61036861054d366004613022565b611a78565b60005461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b61032b61058036600461310b565b611f7b565b610385610593366004612ffe565b600c6020526000908152604090205481565b6105b86105b33660046131ac565b611fb2565b60405161034c9190613228565b600d54610385565b6103686105db366004612ffe565b61208f565b6103686105ee366004612ffe565b612136565b61043f610601366004612ffe565b60096020526000908152604090205460ff1681565b61032b61062436600461310b565b6121d9565b6104fc61063736600461310b565b600560205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b61043f610674366004612ffe565b6121e9565b600e5473ffffffffffffffffffffffffffffffffffffffff1661032b565b610385600b5481565b60015461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b6103686106ce366004613124565b612250565b6103856106e136600461310b565b6127d9565b6103686106f4366004612ffe565b6127fa565b610385610707366004612ffe565b60086020526000908152604090205481565b600a5461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b600654610385565b60045461032b9073ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461078557600080fd5b600a5473ffffffffffffffffffffffffffffffffffffffff161561080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f535741503a20416c726561647920736574000000000000000000000000000060448201526064015b60405180910390fd5b61081381612891565b50565b3360009081526009602052604090205460ff1661088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b610813816129c6565b60045460009073ffffffffffffffffffffffffffffffffffffffff163314610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f476f7665726e616e63653a204e6f742066726f6d20766f74696e67526567697360448201527f74727900000000000000000000000000000000000000000000000000000000006064820152608401610801565b600b80549060006109528361328f565b9190505550600b54905090565b60005b600d54811015610a2057600d818154811061097f5761097f613326565b6000918252602090912001546040517f17e42ec000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906317e42ec090602401600060405180830381600087803b1580156109f557600080fd5b505af1158015610a09573d6000803e3d6000fd5b505050508080610a189061328f565b915050610962565b5050565b600a5473ffffffffffffffffffffffffffffffffffffffff163314610aa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f535741503a204e6f742066726f6d2073687574646f776e2061646d696e00006044820152606401610801565b8073ffffffffffffffffffffffffffffffffffffffff1663ef9b78c66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b50505050610b0e81612a39565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f1c24a27ac669c0278656c76cc711441c8dd32d21c32227dad2b42bf6271e8fae90600090a250565b600d54606090610b628385613260565b1115610b7957600d54610b76908490613278565b91505b8167ffffffffffffffff811115610b9257610b92613355565b604051908082528060200260200182016040528015610bbb578160200160208202803683370190505b50905060005b82811015610c5957600d610bd58286613260565b81548110610be557610be5613326565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110610c2257610c22613326565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015280610c518161328f565b915050610bc1565b5092915050565b6060600d805480602002602001604051908101604052809291908181526020018280548015610cc557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c9a575b5050505050905090565b336000818152600c6020526040902054600d80549091908110610cf457610cf4613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614610da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f742060448201527f65786973747300000000000000000000000000000000000000000000000000006064820152608401610801565b610dac33612a39565b60405133907fdf42bfa876a741bbe542cf1a563269e1390bf03901b5d433a6e8afd6ee36dbfe90600090a2565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dfd57600080fd5b60075415610e67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a206578656375746f7220616c72656164792073657400000000006044820152606401610801565b8060005b81811015610eb657610ea4848483818110610e8857610e88613326565b9050602002016020810190610e9d9190612ffe565b6001612cd8565b80610eae8161328f565b915050610e6b565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461088f57600080fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610f87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610801565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b8073ffffffffffffffffffffffffffffffffffffffff1663b3ee6e406040518163ffffffff1660e01b815260040160206040518083038186803b15801561105057600080fd5b505afa158015611064573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110889190613193565b156110ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f476f7665726e616e63653a204e6f74206120506f6c6c000000000000000000006044820152606401610801565b8073ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113557600080fd5b505afa158015611149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116d9190613193565b42116111d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f476f7665726e616e63653a20566f74696e67206e6f7420656e646564000000006044820152606401610801565b61081381612a39565b3360009081526009602052604090205460ff16611257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b600354604080517f8b0e9f3f000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638b0e9f3f916004808301926020929190829003018186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa9190613193565b905060008611801561130f575062093a808611155b611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f535741503a20496e76616c6964206d696e45786544656c61790000000000006044820152606401610801565b8385108015611387575062093a808511155b6113ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a20496e76616c696420766f74654475726174696f6e00000000006044820152606401610801565b8083111561147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741503a20496e76616c6964206d696e476f76546f6b656e546f4372656160448201527f7465566f746500000000000000000000000000000000000000000000000000006064820152608401610801565b808211156114e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f535741503a20496e76616c6964206d696e51756f72756d00000000000000006044820152606401610801565b600087815260056020526040902080541561155e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f535741503a20436f6e66696720616c726561647920657869737473000000006044820152606401610801565b86815560018082018790556002820186905560038201859055600482018490556006805491820181556000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018890556040805189815260208101899052908101879052606081018690526080810185905260a081018490527f4298cd6fa0bb1aeb8e309c8da40e32f5d5383c757a49341ef32bdcfe4bf091299060c00160405180910390a15050505050505050565b336000818152600c6020526040902054600d8054909190811061163457611634613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16146116e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f742060448201527f65786973747300000000000000000000000000000000000000000000000000006064820152608401610801565b821561173c57604051818152339073ffffffffffffffffffffffffffffffffffffffff8416907f939cecbaa6409c96475d12a0cf1c30c058192b2b51716b5591c3f659ed9354a7906020015b60405180910390a3505050565b604051818152339073ffffffffffffffffffffffffffffffffffffffff8416907f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc9060200161172f565b60005473ffffffffffffffffffffffffffffffffffffffff1633146117aa57600080fd5b60045473ffffffffffffffffffffffffffffffffffffffff161561182a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f535741503a20416c72656164792073657400000000000000000000000000006044820152606401610801565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055604051606082901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681527f766f74696e675265676973746572000000000000000000000000000000000000907f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509906020015b60405180910390a250565b3360009081526009602052604090205460ff1661080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b6000818152600560205260408120600381015482918291829182916119cd57507f766f74650000000000000000000000000000000000000000000000000000000060005260056020527f9d8bd124132542d3b6ae5154dc8b70b99a1fde60a7254eb6a258ad48a511339e5b8054600182015460028301546003840154600490940154929a91995097509195509350915050565b3360009081526009602052604090205460ff16611a6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b610a208282612cd8565b60045473ffffffffffffffffffffffffffffffffffffffff163314611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f476f7665726e616e63653a204e6f742066726f6d20766f74696e67526567697360448201527f74727900000000000000000000000000000000000000000000000000000000006064820152608401610801565b73ffffffffffffffffffffffffffffffffffffffff8216611bc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f476f7665726e616e63653a20496e76616c696420766f74696e6720616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610801565b600d541580611c2c575073ffffffffffffffffffffffffffffffffffffffff82166000818152600c6020526040902054600d80549091908110611c0757611c07613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b611cb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f476f7665726e616e63653a20566f74696e6720636f6e747261637420616c726560448201527f61647920657869737473000000000000000000000000000000000000000000006064820152608401610801565b60005b600d54811015611e68576000600d8281548110611cda57611cda613326565b60009182526020918290200154604080517fb3ee6e40000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169350839263b3ee6e4092600480840193829003018186803b158015611d4c57600080fd5b505afa158015611d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d849190613193565b158015611e0d5750428173ffffffffffffffffffffffffffffffffffffffff16639e6cb42b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dd357600080fd5b505afa158015611de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0b9190613193565b105b15611e5457611e4f600d8381548110611e2857611e28613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16612a39565b611e62565b81611e5e8161328f565b9250505b50611cbb565b600d805473ffffffffffffffffffffffffffffffffffffffff85166000818152600c60205260408120839055600183018455929092527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790558115611f355760405173ffffffffffffffffffffffffffffffffffffffff8416907f3b7f4bea1b2462212751e8a9d23ca2a37a1abf7ff729725e224314f1c190c99190600090a2505050565b60405173ffffffffffffffffffffffffffffffffffffffff8416907f83f5721a5071f4aac6f77c58360d8c8618098cebdc6d3c393f1e757ef4d1082b90600090a2505050565b60078181548110611f8b57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60065460609083101561208957600654611fcc8385613260565b1115611fe357600654611fe0908490613278565b91505b8167ffffffffffffffff811115611ffc57611ffc613355565b604051908082528060200260200182016040528015612025578160200160208202803683370190505b50905060005b82811015610c5957600661203f8583613260565b8154811061204f5761204f613326565b906000526020600020015482828151811061206c5761206c613326565b6020908102919091010152806120818161328f565b91505061202b565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146120b357600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461215a57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf5910161212b565b600d8181548110611f8b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600c6020526040812054600d8054929392909190811061222757612227613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff161492915050565b3360009081526009602052604090205460ff166122c9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f535741503a204e6f742066726f6d20766f74696e67000000000000000000006044820152606401610801565b600354604080517f8b0e9f3f000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638b0e9f3f916004808301926020929190829003018186803b15801561233457600080fd5b505afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190613193565b6000858152600560205260409020549091506123e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f535741503a20436f6e666967206e6f742065786973747300000000000000006044820152606401610801565b827f6d696e45786544656c6179000000000000000000000000000000000000000000141561249b5760008211801561241f575062093a808211155b612485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4f535741503a20496e76616c6964206d696e45786544656c61790000000000006044820152606401610801565b6000848152600560205260409020829055612798565b827f6d696e566f74654475726174696f6e0000000000000000000000000000000000141561256557600084815260056020526040902060020154821080156124e6575062093a808211155b61254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a20496e76616c696420766f74654475726174696f6e00000000006044820152606401610801565b6000848152600560205260409020600101829055612798565b827f6d6178566f74654475726174696f6e00000000000000000000000000000000001415612620576000848152600560205260409020600101548211612607576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f535741503a20496e76616c696420766f74654475726174696f6e00000000006044820152606401610801565b6000848152600560205260409020600201829055612798565b827f6d696e476f76546f6b656e546f437265617465566f746500000000000000000014156126f157808211156126d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741503a20496e76616c6964206d696e476f76546f6b656e546f4372656160448201527f7465566f746500000000000000000000000000000000000000000000000000006064820152608401610801565b6000848152600560205260409020600301829055612798565b827f6d696e51756f72756d000000000000000000000000000000000000000000000014156127985780821115612783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f535741503a20496e76616c6964206d696e51756f72756d00000000000000006044820152606401610801565b60008481526005602052604090206004018290555b82847f10eff86a4e52b12bd92a6e64442cdb5baa87a9b327114811ebfc96a7c1e00281846040516127cb91815260200190565b60405180910390a350505050565b600681815481106127e957600080fd5b600091825260209091200154905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461281e57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b9060200161212b565b73ffffffffffffffffffffffffffffffffffffffff811661290e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4f535741503a20496e76616c69642061646d696e0000000000000000000000006044820152606401610801565b600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055604051606082901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001681527f61646d696e000000000000000000000000000000000000000000000000000000907f22ea5a9dcc7fb5bc447fcb472061adc51caa147724a67a6695d49a9dff162509906020016118de565b600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d9060200161212b565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c602052604090205480151580612ab757508173ffffffffffffffffffffffffffffffffffffffff16600d600081548110612a9357612a93613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16145b612b43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f476f7665726e616e63653a20566f74696e6720636f6e7472616374206e6f742060448201527f65786973747300000000000000000000000000000000000000000000000000006064820152608401610801565b600d54612b5290600190613278565b811015612c4557600d8054612b6990600190613278565b81548110612b7957612b79613326565b600091825260209091200154600d805473ffffffffffffffffffffffffffffffffffffffff9092169183908110612bb257612bb2613326565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c6000600d8481548110612c1257612c12613326565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020526040812055600d805480612c7c57612c7c6132f7565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555050565b73ffffffffffffffffffffffffffffffffffffffff8216612d55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f535741503a20496e76616c6964206578656375746f720000000000000000006044820152606401610801565b6007541580612dbf575073ffffffffffffffffffffffffffffffffffffffff8216600081815260086020526040902054600780549091908110612d9a57612d9a613326565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614155b15612e4a576007805473ffffffffffffffffffffffffffffffffffffffff84166000818152600860205260408120839055600183018455929092527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055612efc565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040902054612efc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4f535741503a2063616e6e6f74207265736574206d61696e206578656375746f60448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610801565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260096020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790557f410bdf2fedecd51e396bd4e5ca41880366c00ff01f4df34d7cc46faef60eb706606083901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682612f9f576000612fa2565b60015b604080517f766f74696e674578656375746f720000000000000000000000000000000000008152602081019390935260ff9091169082015260600160405180910390a15050565b80358015158114612ff957600080fd5b919050565b60006020828403121561301057600080fd5b813561301b81613384565b9392505050565b6000806040838503121561303557600080fd5b823561304081613384565b915061304e60208401612fe9565b90509250929050565b6000806020838503121561306a57600080fd5b823567ffffffffffffffff8082111561308257600080fd5b818501915085601f83011261309657600080fd5b8135818111156130a557600080fd5b8660208260051b85010111156130ba57600080fd5b60209290920196919550909350505050565b6000806000606084860312156130e157600080fd5b6130ea84612fe9565b925060208401356130fa81613384565b929592945050506040919091013590565b60006020828403121561311d57600080fd5b5035919050565b60008060006060848603121561313957600080fd5b505081359360208301359350604090920135919050565b60008060008060008060c0878903121561316957600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000602082840312156131a557600080fd5b5051919050565b600080604083850312156131bf57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561321c57835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016131ea565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561321c57835183529284019291840191600101613244565b60008219821115613273576132736132c8565b500190565b60008282101561328a5761328a6132c8565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132c1576132c16132c8565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461081357600080fdfea2646970667358221220c13121617842839cf37f7da21461694ce3229b8eaf7d5db4b84e0014d64ae48564736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingManager.js
var require_OSWAP_VotingManager = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingManager.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingManager = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_VotingManager_json_1 = __importDefault(require_OSWAP_VotingManager_json());
    var OSWAP_VotingManager = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_VotingManager_json_1.default.abi, OSWAP_VotingManager_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.trollRegistry, eth_wallet_1.Utils.stringToBytes32(params.names), eth_wallet_1.Utils.toString(params.minExeDelay), eth_wallet_1.Utils.toString(params.minVoteDuration), eth_wallet_1.Utils.toString(params.maxVoteDuration), eth_wallet_1.Utils.toString(params.minGovTokenToCreateVote), eth_wallet_1.Utils.toString(params.minQuorum)]);
      }
      parseAddVotingConfigEvent(receipt) {
        return this.parseEvents(receipt, "AddVotingConfig").map((e) => this.decodeAddVotingConfigEvent(e));
      }
      decodeAddVotingConfigEvent(event) {
        let result = event.data;
        return {
          name: result.name,
          minExeDelay: new eth_wallet_1.BigNumber(result.minExeDelay),
          minVoteDuration: new eth_wallet_1.BigNumber(result.minVoteDuration),
          maxVoteDuration: new eth_wallet_1.BigNumber(result.maxVoteDuration),
          minGovTokenToCreateVote: new eth_wallet_1.BigNumber(result.minGovTokenToCreateVote),
          minQuorum: new eth_wallet_1.BigNumber(result.minQuorum),
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseExecutedEvent(receipt) {
        return this.parseEvents(receipt, "Executed").map((e) => this.decodeExecutedEvent(e));
      }
      decodeExecutedEvent(event) {
        let result = event.data;
        return {
          vote: result.vote,
          _event: event
        };
      }
      parseNewPollEvent(receipt) {
        return this.parseEvents(receipt, "NewPoll").map((e) => this.decodeNewPollEvent(e));
      }
      decodeNewPollEvent(event) {
        let result = event.data;
        return {
          poll: result.poll,
          _event: event
        };
      }
      parseNewVoteEvent(receipt) {
        return this.parseEvents(receipt, "NewVote").map((e) => this.decodeNewVoteEvent(e));
      }
      decodeNewVoteEvent(event) {
        let result = event.data;
        return {
          vote: result.vote,
          _event: event
        };
      }
      parseParamSetEvent(receipt) {
        return this.parseEvents(receipt, "ParamSet").map((e) => this.decodeParamSetEvent(e));
      }
      decodeParamSetEvent(event) {
        let result = event.data;
        return {
          name: result.name,
          value: result.value,
          _event: event
        };
      }
      parseParamSet2Event(receipt) {
        return this.parseEvents(receipt, "ParamSet2").map((e) => this.decodeParamSet2Event(e));
      }
      decodeParamSet2Event(event) {
        let result = event.data;
        return {
          name: result.name,
          value1: result.value1,
          value2: result.value2,
          _event: event
        };
      }
      parsePollEvent(receipt) {
        return this.parseEvents(receipt, "Poll").map((e) => this.decodePollEvent(e));
      }
      decodePollEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          poll: result.poll,
          option: new eth_wallet_1.BigNumber(result.option),
          _event: event
        };
      }
      parseSetVotingConfigEvent(receipt) {
        return this.parseEvents(receipt, "SetVotingConfig").map((e) => this.decodeSetVotingConfigEvent(e));
      }
      decodeSetVotingConfigEvent(event) {
        let result = event.data;
        return {
          configName: result.configName,
          paramName: result.paramName,
          minExeDelay: new eth_wallet_1.BigNumber(result.minExeDelay),
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUpgradeEvent(receipt) {
        return this.parseEvents(receipt, "Upgrade").map((e) => this.decodeUpgradeEvent(e));
      }
      decodeUpgradeEvent(event) {
        let result = event.data;
        return {
          newVotingManager: result.newVotingManager,
          _event: event
        };
      }
      parseVetoEvent(receipt) {
        return this.parseEvents(receipt, "Veto").map((e) => this.decodeVetoEvent(e));
      }
      decodeVetoEvent(event) {
        let result = event.data;
        return {
          vote: result.vote,
          _event: event
        };
      }
      parseVoteEvent(receipt) {
        return this.parseEvents(receipt, "Vote").map((e) => this.decodeVoteEvent(e));
      }
      decodeVoteEvent(event) {
        let result = event.data;
        return {
          account: result.account,
          vote: result.vote,
          option: new eth_wallet_1.BigNumber(result.option),
          _event: event
        };
      }
      assign() {
        let admin_call = async () => {
          let result = await this.call("admin");
          return result;
        };
        this.admin = admin_call;
        let allVotings_call = async () => {
          let result = await this.call("allVotings");
          return result;
        };
        this.allVotings = allVotings_call;
        let getVotingConfigProfilesParams = (params) => [eth_wallet_1.Utils.toString(params.start), eth_wallet_1.Utils.toString(params.length)];
        let getVotingConfigProfiles_call = async (params) => {
          let result = await this.call("getVotingConfigProfiles", getVotingConfigProfilesParams(params));
          return result;
        };
        this.getVotingConfigProfiles = getVotingConfigProfiles_call;
        let getVotingCount_call = async () => {
          let result = await this.call("getVotingCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.getVotingCount = getVotingCount_call;
        let getVotingParams_call = async (name) => {
          let result = await this.call("getVotingParams", [eth_wallet_1.Utils.stringToBytes32(name)]);
          return {
            _minExeDelay: new eth_wallet_1.BigNumber(result._minExeDelay),
            _minVoteDuration: new eth_wallet_1.BigNumber(result._minVoteDuration),
            _maxVoteDuration: new eth_wallet_1.BigNumber(result._maxVoteDuration),
            _minGovTokenToCreateVote: new eth_wallet_1.BigNumber(result._minGovTokenToCreateVote),
            _minQuorum: new eth_wallet_1.BigNumber(result._minQuorum)
          };
        };
        this.getVotingParams = getVotingParams_call;
        let getVotingsParams = (params) => [eth_wallet_1.Utils.toString(params.start), eth_wallet_1.Utils.toString(params.count)];
        let getVotings_call = async (params) => {
          let result = await this.call("getVotings", getVotingsParams(params));
          return result;
        };
        this.getVotings = getVotings_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let isVotingContract_call = async (votingContract) => {
          let result = await this.call("isVotingContract", [votingContract]);
          return result;
        };
        this.isVotingContract = isVotingContract_call;
        let isVotingExecutor_call = async (param1) => {
          let result = await this.call("isVotingExecutor", [param1]);
          return result;
        };
        this.isVotingExecutor = isVotingExecutor_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let newVotingExecutorManager_call = async () => {
          let result = await this.call("newVotingExecutorManager");
          return result;
        };
        this.newVotingExecutorManager = newVotingExecutorManager_call;
        let newVotingManager_call = async () => {
          let result = await this.call("newVotingManager");
          return result;
        };
        this.newVotingManager = newVotingManager_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let voteCount_call = async () => {
          let result = await this.call("voteCount");
          return new eth_wallet_1.BigNumber(result);
        };
        this.voteCount = voteCount_call;
        let votingConfigProfiles_call = async (param1) => {
          let result = await this.call("votingConfigProfiles", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.votingConfigProfiles = votingConfigProfiles_call;
        let votingConfigProfilesLength_call = async () => {
          let result = await this.call("votingConfigProfilesLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingConfigProfilesLength = votingConfigProfilesLength_call;
        let votingConfigs_call = async (param1) => {
          let result = await this.call("votingConfigs", [eth_wallet_1.Utils.stringToBytes32(param1)]);
          return {
            minExeDelay: new eth_wallet_1.BigNumber(result.minExeDelay),
            minVoteDuration: new eth_wallet_1.BigNumber(result.minVoteDuration),
            maxVoteDuration: new eth_wallet_1.BigNumber(result.maxVoteDuration),
            minGovTokenToCreateVote: new eth_wallet_1.BigNumber(result.minGovTokenToCreateVote),
            minQuorum: new eth_wallet_1.BigNumber(result.minQuorum)
          };
        };
        this.votingConfigs = votingConfigs_call;
        let votingExecutor_call = async (param1) => {
          let result = await this.call("votingExecutor", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.votingExecutor = votingExecutor_call;
        let votingExecutorInv_call = async (param1) => {
          let result = await this.call("votingExecutorInv", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingExecutorInv = votingExecutorInv_call;
        let votingExecutorLength_call = async () => {
          let result = await this.call("votingExecutorLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingExecutorLength = votingExecutorLength_call;
        let votingIdx_call = async (param1) => {
          let result = await this.call("votingIdx", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.votingIdx = votingIdx_call;
        let votingRegister_call = async () => {
          let result = await this.call("votingRegister");
          return result;
        };
        this.votingRegister = votingRegister_call;
        let votings_call = async (param1) => {
          let result = await this.call("votings", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.votings = votings_call;
        let addVotingConfigParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.toString(params.minExeDelay), eth_wallet_1.Utils.toString(params.minVoteDuration), eth_wallet_1.Utils.toString(params.maxVoteDuration), eth_wallet_1.Utils.toString(params.minGovTokenToCreateVote), eth_wallet_1.Utils.toString(params.minQuorum)];
        let addVotingConfig_send = async (params) => {
          let result = await this.send("addVotingConfig", addVotingConfigParams(params));
          return result;
        };
        let addVotingConfig_call = async (params) => {
          let result = await this.call("addVotingConfig", addVotingConfigParams(params));
          return;
        };
        this.addVotingConfig = Object.assign(addVotingConfig_send, {
          call: addVotingConfig_call
        });
        let closeVote_send = async (vote) => {
          let result = await this.send("closeVote", [vote]);
          return result;
        };
        let closeVote_call = async (vote) => {
          let result = await this.call("closeVote", [vote]);
          return;
        };
        this.closeVote = Object.assign(closeVote_send, {
          call: closeVote_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let executed_send = async () => {
          let result = await this.send("executed");
          return result;
        };
        let executed_call = async () => {
          let result = await this.call("executed");
          return;
        };
        this.executed = Object.assign(executed_send, {
          call: executed_call
        });
        let getNewVoteId_send = async () => {
          let result = await this.send("getNewVoteId");
          return result;
        };
        let getNewVoteId_call = async () => {
          let result = await this.call("getNewVoteId");
          return new eth_wallet_1.BigNumber(result);
        };
        this.getNewVoteId = Object.assign(getNewVoteId_send, {
          call: getNewVoteId_call
        });
        let initAdmin_send = async (admin) => {
          let result = await this.send("initAdmin", [admin]);
          return result;
        };
        let initAdmin_call = async (admin) => {
          let result = await this.call("initAdmin", [admin]);
          return;
        };
        this.initAdmin = Object.assign(initAdmin_send, {
          call: initAdmin_call
        });
        let initVotingExecutor_send = async (votingExecutor) => {
          let result = await this.send("initVotingExecutor", [votingExecutor]);
          return result;
        };
        let initVotingExecutor_call = async (votingExecutor) => {
          let result = await this.call("initVotingExecutor", [votingExecutor]);
          return;
        };
        this.initVotingExecutor = Object.assign(initVotingExecutor_send, {
          call: initVotingExecutor_call
        });
        let newVoteParams = (params) => [params.vote, params.isExecutiveVote];
        let newVote_send = async (params) => {
          let result = await this.send("newVote", newVoteParams(params));
          return result;
        };
        let newVote_call = async (params) => {
          let result = await this.call("newVote", newVoteParams(params));
          return;
        };
        this.newVote = Object.assign(newVote_send, {
          call: newVote_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let setAdmin_send = async (admin) => {
          let result = await this.send("setAdmin", [admin]);
          return result;
        };
        let setAdmin_call = async (admin) => {
          let result = await this.call("setAdmin", [admin]);
          return;
        };
        this.setAdmin = Object.assign(setAdmin_send, {
          call: setAdmin_call
        });
        let setVotingConfigParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.configName), eth_wallet_1.Utils.stringToBytes32(params.paramName), eth_wallet_1.Utils.toString(params.paramValue)];
        let setVotingConfig_send = async (params) => {
          let result = await this.send("setVotingConfig", setVotingConfigParams(params));
          return result;
        };
        let setVotingConfig_call = async (params) => {
          let result = await this.call("setVotingConfig", setVotingConfigParams(params));
          return;
        };
        this.setVotingConfig = Object.assign(setVotingConfig_send, {
          call: setVotingConfig_call
        });
        let setVotingExecutorParams = (params) => [params.votingExecutor, params.bool];
        let setVotingExecutor_send = async (params) => {
          let result = await this.send("setVotingExecutor", setVotingExecutorParams(params));
          return result;
        };
        let setVotingExecutor_call = async (params) => {
          let result = await this.call("setVotingExecutor", setVotingExecutorParams(params));
          return;
        };
        this.setVotingExecutor = Object.assign(setVotingExecutor_send, {
          call: setVotingExecutor_call
        });
        let setVotingRegister_send = async (votingRegister) => {
          let result = await this.send("setVotingRegister", [votingRegister]);
          return result;
        };
        let setVotingRegister_call = async (votingRegister) => {
          let result = await this.call("setVotingRegister", [votingRegister]);
          return;
        };
        this.setVotingRegister = Object.assign(setVotingRegister_send, {
          call: setVotingRegister_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let updateWeight_send = async (account) => {
          let result = await this.send("updateWeight", [account]);
          return result;
        };
        let updateWeight_call = async (account) => {
          let result = await this.call("updateWeight", [account]);
          return;
        };
        this.updateWeight = Object.assign(updateWeight_send, {
          call: updateWeight_call
        });
        let upgrade_send = async (votingManager) => {
          let result = await this.send("upgrade", [votingManager]);
          return result;
        };
        let upgrade_call = async (votingManager) => {
          let result = await this.call("upgrade", [votingManager]);
          return;
        };
        this.upgrade = Object.assign(upgrade_send, {
          call: upgrade_call
        });
        let upgradeByAdmin_send = async (votingManager) => {
          let result = await this.send("upgradeByAdmin", [votingManager]);
          return result;
        };
        let upgradeByAdmin_call = async (votingManager) => {
          let result = await this.call("upgradeByAdmin", [votingManager]);
          return;
        };
        this.upgradeByAdmin = Object.assign(upgradeByAdmin_send, {
          call: upgradeByAdmin_call
        });
        let veto_send = async (voting) => {
          let result = await this.send("veto", [voting]);
          return result;
        };
        let veto_call = async (voting) => {
          let result = await this.call("veto", [voting]);
          return;
        };
        this.veto = Object.assign(veto_send, {
          call: veto_call
        });
        let votedParams = (params) => [params.poll, params.account, eth_wallet_1.Utils.toString(params.option)];
        let voted_send = async (params) => {
          let result = await this.send("voted", votedParams(params));
          return result;
        };
        let voted_call = async (params) => {
          let result = await this.call("voted", votedParams(params));
          return;
        };
        this.voted = Object.assign(voted_send, {
          call: voted_call
        });
      }
    };
    exports.OSWAP_VotingManager = OSWAP_VotingManager;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingRegistry.json.js
var require_OSWAP_VotingRegistry_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingRegistry.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "_votingManager", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "inputs": [{ "internalType": "contract OSWAP_MainChainVotingExecutor", "name": "executor", "type": "address" }, { "internalType": "bytes32", "name": "name", "type": "bytes32" }, { "internalType": "bytes32[]", "name": "options", "type": "bytes32[]" }, { "internalType": "uint256", "name": "quorum", "type": "uint256" }, { "internalType": "uint256", "name": "threshold", "type": "uint256" }, { "internalType": "uint256", "name": "voteEndTime", "type": "uint256" }, { "internalType": "uint256", "name": "executeDelay", "type": "uint256" }, { "internalType": "bytes32[]", "name": "executeParam", "type": "bytes32[]" }], "name": "newVote", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract OSWAP_MainChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "votingManager", "outputs": [{ "internalType": "contract OSWAP_VotingManager", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": "60c060405234801561001057600080fd5b5060405161334c38038061334c83398101604081905261002f916100bf565b806001600160a01b03166330167bec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561006857600080fd5b505afa15801561007c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a091906100bf565b6001600160601b0319606091821b811660805291901b1660a0526100fb565b6000602082840312156100d157600080fd5b81516100dc816100e3565b9392505050565b6001600160a01b03811681146100f857600080fd5b50565b60805160601c60a05160601c6132056101476000396000818160a201528181610126015281816102910152818161071401526108ff0152600081816051015261039201526132056000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806330167bec146200004b578063da1bcdf0146200009c578063dac642fb14620000c4575b600080fd5b620000737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b620000737f000000000000000000000000000000000000000000000000000000000000000081565b620000db620000d5366004620009f6565b620000dd565b005b6040517fa3818b3b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152821515917f00000000000000000000000000000000000000000000000000000000000000009091169063a3818b3b9060240160206040518083038186803b1580156200016b57600080fd5b505afa15801562000180573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a69190620009cb565b62000238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741505f566f74696e6752656769737472793a20496e76616c696420657860448201527f656375746f72000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008162000267577f706f6c6c0000000000000000000000000000000000000000000000000000000062000285565b838360008181106200027d576200027d62000c74565b905060200201355b905060008060008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663718fbb79876040518263ffffffff1660e01b8152600401620002eb91815260200190565b60a06040518083038186803b1580156200030457600080fd5b505afa15801562000319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033f919062000ae7565b6040517f426233600000000000000000000000000000000000000000000000000000000081523360048201529499509297509095509350915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063426233609060240160206040518083038186803b158015620003d557600080fd5b505afa158015620003ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000410919062000acd565b905082811015620004a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4f535741505f566f74696e6752656769737472793a206d696e476f76546f6b6560448201527f6e546f437265617465566f7465206e6f74206d6574000000000000000000000060648201526084016200022f565b620004b0428662000c34565b8c101562000541576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4f535741505f566f74696e6752656769737472793a206d696e566f746544757260448201527f6174696f6e206e6f74206d65740000000000000000000000000000000000000060648201526084016200022f565b6200054d428562000c34565b8c1115620005de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4f535741505f566f74696e6752656769737472793a206578636565646564206d60448201527f6178566f74654475726174696f6e00000000000000000000000000000000000060648201526084016200022f565b87156200070957818e101562000677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f535741505f566f74696e6752656769737472793a206d696e51756f72756d2060448201527f6e6f74206d65740000000000000000000000000000000000000000000000000060648201526084016200022f565b858b101562000709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f535741505f566f74696e6752656769737472793a206d696e45786544656c6160448201527f79206e6f74206d6574000000000000000000000000000000000000000000000060648201526084016200022f565b5050505050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663145988986040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200077b57600080fd5b505af115801562000790573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007b6919062000acd565b905060006040518061012001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018d81526020018c8c8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050509082525060208082018c905260408083018c9052606083018b9052608083018a90528051888302818101840190925288815260a0909301929189918991829190850190849080828437600092019190915250505091525060405162000885906200096e565b62000891919062000b65565b604051809103906000f080158015620008ae573d6000803e3d6000fd5b506040517f8210775100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015285151560248301529192507f000000000000000000000000000000000000000000000000000000000000000090911690638210775190604401600060405180830381600087803b1580156200094657600080fd5b505af11580156200095b573d6000803e3d6000fd5b5050505050505050505050505050505050565b61252c8062000ca483390190565b60008083601f8401126200098f57600080fd5b50813567ffffffffffffffff811115620009a857600080fd5b6020830191508360208260051b8501011115620009c457600080fd5b9250929050565b600060208284031215620009de57600080fd5b81518015158114620009ef57600080fd5b9392505050565b6000806000806000806000806000806101008b8d03121562000a1757600080fd5b8a3573ffffffffffffffffffffffffffffffffffffffff8116811462000a3c57600080fd5b995060208b0135985060408b013567ffffffffffffffff8082111562000a6157600080fd5b62000a6f8e838f016200097c565b909a50985060608d0135975060808d0135965060a08d0135955060c08d0135945060e08d013591508082111562000aa557600080fd5b5062000ab48d828e016200097c565b915080935050809150509295989b9194979a5092959850565b60006020828403121562000ae057600080fd5b5051919050565b600080600080600060a0868803121562000b0057600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b600081518084526020808501945080840160005b8381101562000b5a5781518752958201959082019060010162000b3c565b509495945050505050565b6020815262000b8d60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60208201516040820152604082015160608201526000606083015161012080608085015262000bc161014085018362000b28565b9150608085015160a085015260a085015160c085015260c085015160e085015260e08501516101008181870152808701519150507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403018286015262000c2a838262000b28565b9695505050505050565b6000821982111562000c6f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfe6101c06040523480156200001257600080fd5b506040516200252c3803806200252c8339810160408190526200003591620006ea565b6000336001600160a01b03166330167bec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200007157600080fd5b505afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac9190620006ca565b90506000336001600160a01b031663da1bcdf06040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ea57600080fd5b505afa158015620000ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001259190620006ca565b6001600160601b0319606082811b821660a05284901b1660805260c0840151909150421115620001a85760405162461bcd60e51b8152602060048201526024808201527f566f74696e67436f6e74726163743a20566f74696e6720616c726561647920656044820152631b99195960e21b60648201526084015b60405180910390fd5b61010083015151156200040857825160405163a3818b3b60e01b81526001600160a01b0391821660048201529082169063a3818b3b9060240160206040518083038186803b158015620001fa57600080fd5b505afa1580156200020f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023591906200069f565b620002835760405162461bcd60e51b815260206004820181905260248201527f566f74696e67436f6e74726163743a20496e76616c6964206578656375746f7260448201526064016200019f565b8260600151516002148015620002bd57508260600151600081518110620002ae57620002ae6200081f565b6020026020010151605960f81b145b8015620002ee57508260600151600181518110620002df57620002df6200081f565b6020026020010151602760f91b145b6200033c5760405162461bcd60e51b815260206004820152601f60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e730060448201526064016200019f565b670de0b6b3a76400008360a001511115620003a45760405162461bcd60e51b815260206004820152602160248201527f566f74696e67436f6e74726163743a20496e76616c6964207468726573686f6c6044820152601960fa1b60648201526084016200019f565b60008360e0015111620004085760405162461bcd60e51b815260206004820152602560248201527f566f74696e67436f6e74726163743a20496e76616c696420657865637574652060448201526464656c617960d81b60648201526084016200019f565b82600001516001600160a01b031660c0816001600160a01b031660601b81525050816001600160a01b0316638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200046357600080fd5b505afa15801562000478573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049e9190620007d9565b60065560208084015160e05260408401516101005260608401518051620004ca9260009201906200057c565b5060808301516101205260a0830151610140526060830151516001600160401b03811115620004fd57620004fd62000835565b60405190808252806020026020018201604052801562000527578160200160208202803683370190505b5080516200053e916004916020909101906200057c565b50426101605260c08301516101805260e08301516101a052610100830151805162000572916007916020909101906200057c565b5050505062000864565b828054828255906000526020600020908101928215620005ba579160200282015b82811115620005ba5782518255916020019190600101906200059d565b50620005c8929150620005cc565b5090565b5b80821115620005c85760008155600101620005cd565b600082601f830112620005f557600080fd5b815160206001600160401b038083111562000614576200061462000835565b8260051b604051601f19603f830116810181811084821117156200063c576200063c62000835565b604052848152838101925086840182880185018910156200065c57600080fd5b600092505b858310156200068157805184529284019260019290920191840162000661565b50979650505050505050565b80516200069a816200084b565b919050565b600060208284031215620006b257600080fd5b81518015158114620006c357600080fd5b9392505050565b600060208284031215620006dd57600080fd5b8151620006c3816200084b565b600060208284031215620006fd57600080fd5b81516001600160401b03808211156200071557600080fd5b9083019061012082860312156200072b57600080fd5b62000735620007f3565b62000740836200068d565b815260208301516020820152604083015160408201526060830151828111156200076957600080fd5b6200077787828601620005e3565b6060830152506080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015183811115620007ba57600080fd5b620007c888828701620005e3565b918301919091525095945050505050565b600060208284031215620007ec57600080fd5b5051919050565b60405161012081016001600160401b038111828210171562000819576200081962000835565b60405290565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200086157600080fd5b50565b60805160601c60a05160601c60c05160601c60e05161010051610120516101405161016051610180516101a051611ba962000983600039600081816103a801528181610f0701526110340152600081816103d8015281816104da01528181610ad001528181610ee501526110550152600081816102620152610ec301526000818161034501528181610e1a01526113f401526000818161022801528181610df701526112c30152600081816101ee0152610e9f0152600081816103ff0152610e7d01526000818161044101528181610e5b015261154601526000818161047001528181610762015281816115b001526116ae0152600081816102c90152818161088901528181610a2a01528181610b620152610cc70152611ba96000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063876cdb2f11610104578063c55dd801116100a2578063ede20b4611610071578063ede20b46146104a3578063ef9b78c6146104b5578063f3c49550146104bd578063f830f09c146104d057600080fd5b8063c55dd80114610463578063da1bcdf01461046b578063da918d7a14610492578063e5188f551461049a57600080fd5b8063af640d0f116100de578063af640d0f146103fa578063b3ee6e4014610421578063bd81b9a614610429578063c34c08e51461043c57600080fd5b8063876cdb2f146103a357806396c82e57146103ca5780639e6cb42b146103d357600080fd5b806330167bec1161017157806342cde4e81161014b57806342cde4e81461034057806358c0dc1d146103675780635e615a6b1461037c578063614619541461039b57600080fd5b806330167bec146102c457806331a38c8914610310578063409e22051461032d57600080fd5b806317e42ec0116101ad57806317e42ec01461024a57806318024acc1461025d5780632376a29a14610284578063281a9bdf146102a457600080fd5b80630121b93f146101d457806306fdde03146101e95780631703a01814610223575b600080fd5b6101e76101e23660046118fb565b6104d8565b005b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6101e76102583660046118be565b610ace565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6102106102923660046118be565b60036020526000908152604090205481565b6102106102b23660046118be565b60026020526000908152604090205481565b6102eb7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161021a565b60015461031d9060ff1681565b604051901515815260200161021a565b61021061033b3660046118fb565b610d2e565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b61036f610d4f565b60405161021a9190611a4f565b610384610da7565b60405161021a9b9a9998979695949392919061198b565b6101e761102f565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b61021060065481565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b6102107f000000000000000000000000000000000000000000000000000000000000000081565b600754610210565b6102106104373660046118fb565b611630565b6102eb7f000000000000000000000000000000000000000000000000000000000000000081565b600054610210565b6102eb7f000000000000000000000000000000000000000000000000000000000000000081565b61036f611640565b61021060055481565b60015461031d90610100900460ff1681565b6101e7611696565b6102106104cb3660046118fb565b61181c565b61036f61182c565b7f000000000000000000000000000000000000000000000000000000000000000042111561058d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f566f74696e67436f6e74726163743a20566f746520616c726561647920656e6460448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600154610100900460ff1615610625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792076657460448201527f6f656400000000000000000000000000000000000000000000000000000000006064820152608401610584565b60015460ff16156106b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792065786560448201527f63757465640000000000000000000000000000000000000000000000000000006064820152608401610584565b6000548110610723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a20496e76616c6964206f7074696f6e00006044820152606401610584565b6007546040517f65eaf8bc00000000000000000000000000000000000000000000000000000000815290156004820152336024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906365eaf8bc90606401600060405180830381600087803b1580156107bb57600080fd5b505af11580156107cf573d6000803e3d6000fd5b50503360009081526003602052604090205491505080156108585733600090815260026020526040902054600480548391908390811061081157610811611b44565b90600052602060002001546108269190611afe565b6004828154811061083957610839611b44565b600091825260209091200155600554610853908390611afe565b600555505b6040517f426233600000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063426233609060240160206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190611914565b9050600081116109aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f566f74696e67436f6e74726163743a204e6f74207374616b656420746f20766f60448201527f74650000000000000000000000000000000000000000000000000000000000006064820152608401610584565b3360009081526002602090815260408083208690556003909152902081905560048054829190859081106109e0576109e0611b44565b90600052602060002001546109f59190611aa9565b60048481548110610a0857610a08611b44565b600091825260209091200155600554610a22908290611aa9565b6005819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611914565b600655505050565b7f00000000000000000000000000000000000000000000000000000000000000004211158015610b065750600154610100900460ff16155b8015610b15575060015460ff16155b15610d2b576040517f4262336000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063426233609060240160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190611914565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260409020549091508015801590610c165750818114155b15610cc55773ffffffffffffffffffffffffffffffffffffffff83166000908152600260209081526040808320546003909252909120839055600480548491849184908110610c6757610c67611b44565b9060005260206000200154610c7c9190611afe565b610c869190611aa9565b60048281548110610c9957610c99611b44565b90600052602060002001819055508282600554610cb69190611afe565b610cc09190611aa9565b600555505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638b0e9f3f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b50565b60008181548110610d3e57600080fd5b600091825260209091200154905081565b60606007805480602002602001604051908101604052809291908181526020018280548015610d9d57602002820191906000526020600020905b815481526020019060010190808311610d89575b5050505050905090565b600080600060606000806000610dbb611882565b6060610dc56118a0565b60408051808201825260015460ff808216151583526101009091041615156020808301919091528251606081810185527f000000000000000000000000000000000000000000000000000000000000000082527f000000000000000000000000000000000000000000000000000000000000000082840152600654828601526000805486518186028101860190975280875291957f0000000000000000000000000000000000000000000000000000000000000000957f0000000000000000000000000000000000000000000000000000000000000000957f00000000000000000000000000000000000000000000000000000000000000009593947f0000000000000000000000000000000000000000000000000000000000000000947f0000000000000000000000000000000000000000000000000000000000000000947f00000000000000000000000000000000000000000000000000000000000000009493600493600792918a9190830182828015610f6157602002820191906000526020600020905b815481526020019060010190808311610f4d575b5050505050975082805480602002602001604051908101604052809291908181526020018280548015610fb357602002820191906000526020600020905b815481526020019060010190808311610f9f575b505050505092508080548060200260200160405190810160405280929190818152602001828054801561100557602002820191906000526020600020905b815481526020019060010190808311610ff1575b505050505090509a509a509a509a509a509a509a509a509a509a509a50909192939495969798999a565b6110797f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611aa9565b4211611107576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f566f74696e67436f6e74726163743a20457865637574652064656c6179206e6f60448201527f74207061737420796574000000000000000000000000000000000000000000006064820152608401610584565b600154610100900460ff161561119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792076657460448201527f6f656400000000000000000000000000000000000000000000000000000000006064820152608401610584565b60015460ff1615611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f566f74696e67436f6e74726163743a20566f746520616c72656164792065786560448201527f63757465640000000000000000000000000000000000000000000000000000006064820152608401610584565b6007546112c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f566f74696e67436f6e74726163743a204578656375746520706172616d206e6f60448201527f7420646566696e656400000000000000000000000000000000000000000000006064820152608401610584565b7f0000000000000000000000000000000000000000000000000000000000000000600554101561134d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f566f74696e67436f6e74726163743a2051756f72756d206e6f74206d657400006044820152606401610584565b600460018154811061136157611361611b44565b9060005260206000200154600460008154811061138057611380611b44565b9060005260206000200154116113f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f566f74696e67436f6e74726163743a204d616a6f72697479206e6f74206d65746044820152606401610584565b7f00000000000000000000000000000000000000000000000000000000000000006005546114209190611ac1565b670de0b6b3a7640000600460008154811061143d5761143d611b44565b90600052602060002001546114529190611ac1565b116114df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f566f74696e67436f6e74726163743a205468726573686f6c64206e6f74206d6560448201527f74000000000000000000000000000000000000000000000000000000000000006064820152608401610584565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790556040517f8af7c64900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638af7c6499061157c90600790600401611a62565b600060405180830381600087803b15801561159657600080fd5b505af11580156115aa573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166331a38c896040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561161657600080fd5b505af115801561162a573d6000803e3d6000fd5b50505050565b60078181548110610d3e57600080fd5b60606000805480602002602001604051908101604052809291908181526020018280548015610d9d5760200282019190600052602060002090815481526020019060010190808311610d89575050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461175b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f535741505f566f74696e67436f6e74726163743a204e6f742066726f6d204760448201527f6f7665726e616e636500000000000000000000000000000000000000000000006064820152608401610584565b60015460ff16156117ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f535741505f566f74696e67436f6e74726163743a20416c726561647920657860448201527f65637574656400000000000000000000000000000000000000000000000000006064820152608401610584565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b60048181548110610d3e57600080fd5b60606004805480602002602001604051908101604052809291908181526020018280548015610d9d5760200282019190600052602060002090815481526020019060010190808311610d89575050505050905090565b60405180604001604052806002906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b6000602082840312156118d057600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146118f457600080fd5b9392505050565b60006020828403121561190d57600080fd5b5035919050565b60006020828403121561192657600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561195d57815187529582019590820190600101611941565b509495945050505050565b8060005b600381101561162a57815184526020938401939091019060010161196c565b60006101c073ffffffffffffffffffffffffffffffffffffffff8e16835260208d818501528c60408501528160608501526119c88285018d61192d565b91508a60808501528960a08501528860c085015260e084018860005b6002811015611a035781511515835291830191908301906001016119e4565b50505050828103610120840152611a1a818761192d565b9050611a2a610140840186611968565b8281036101a0840152611a3d818561192d565b9e9d5050505050505050505050505050565b6020815260006118f4602083018461192d565b6020808252825482820181905260008481528281209092916040850190845b81811015611a9d57835483526001938401939285019201611a81565b50909695505050505050565b60008219821115611abc57611abc611b15565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611af957611af9611b15565b500290565b600082821015611b1057611b10611b15565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212202c84137a4f41b71d0ff9773151d562c55db99c6bef9ed48bf7a2d88f8240142964736f6c63430008060033a26469706673582212202a4d0f086a099ed0a6dcedb1f86c07b9279dce1980cb7d7169f2f9e16b9c963164736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingRegistry.js
var require_OSWAP_VotingRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_VotingRegistry.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_VotingRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_VotingRegistry_json_1 = __importDefault(require_OSWAP_VotingRegistry_json());
    var OSWAP_VotingRegistry = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_VotingRegistry_json_1.default.abi, OSWAP_VotingRegistry_json_1.default.bytecode);
        this.assign();
      }
      deploy(votingManager) {
        return this.__deploy([votingManager]);
      }
      assign() {
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let votingManager_call = async () => {
          let result = await this.call("votingManager");
          return result;
        };
        this.votingManager = votingManager_call;
        let newVoteParams = (params) => [params.executor, eth_wallet_1.Utils.stringToBytes32(params.name), eth_wallet_1.Utils.stringToBytes32(params.options), eth_wallet_1.Utils.toString(params.quorum), eth_wallet_1.Utils.toString(params.threshold), eth_wallet_1.Utils.toString(params.voteEndTime), eth_wallet_1.Utils.toString(params.executeDelay), eth_wallet_1.Utils.stringToBytes32(params.executeParam)];
        let newVote_send = async (params) => {
          let result = await this.send("newVote", newVoteParams(params));
          return result;
        };
        let newVote_call = async (params) => {
          let result = await this.call("newVote", newVoteParams(params));
          return;
        };
        this.newVote = Object.assign(newVote_send, {
          call: newVote_call
        });
      }
    };
    exports.OSWAP_VotingRegistry = OSWAP_VotingRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVault.json.js
var require_OSWAP_BridgeVault_json = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVault.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "contract IOSWAP_BridgeVaultTrollRegistry", "name": "_vaultRegistry", "type": "address" }, { "internalType": "contract IOSWAP_ConfigStore", "name": "_configStore", "type": "address" }, { "internalType": "contract IERC20", "name": "_asset", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "mintAmount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newLpAssetBalance", "type": "uint256" }], "name": "AddLiquidity", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "indexed": false, "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "AmendOrderRequest", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "indexed": false, "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }], "name": "NewOrder", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }, { "indexed": false, "internalType": "bool", "name": "canceledByOrderOwner", "type": "bool" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "OrderCanceled", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "rebalancer", "type": "address" }, { "indexed": false, "internalType": "int256", "name": "amount", "type": "int256" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }], "name": "Rebalance", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newPendingWithdrawal", "type": "uint256" }], "name": "RemoveLiquidity", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "provider", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "burnAmount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newLpAssetBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newPendingWithdrawal", "type": "uint256" }], "name": "RemoveLiquidityRequest", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "sourceChainId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": false, "internalType": "bytes32", "name": "hashedOrderId", "type": "bytes32" }], "name": "RequestCancelOrder", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }, { "indexed": false, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "indexed": false, "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "indexed": false, "internalType": "uint256", "name": "outAmount", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }, { "indexed": false, "internalType": "uint256", "name": "newLpAssetBalance", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "Swap", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "excess", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "Sync", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IOSWAP_ConfigStore", "name": "newConfigStore", "type": "address" }], "name": "UpdateConfigStore", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "contract IOSWAP_SideChainTrollRegistry", "name": "newTrollRegistry", "type": "address" }], "name": "UpdateTrollRegistry", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "bytes32", "name": "orderId", "type": "bytes32" }, { "indexed": true, "internalType": "address", "name": "sender", "type": "address" }, { "indexed": false, "internalType": "uint256[]", "name": "signers", "type": "uint256[]" }], "name": "VoidOrder", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "indexed": false, "internalType": "int256", "name": "newImbalance", "type": "int256" }], "name": "WithdrawUnexecutedOrder", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "feeTo", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newProtocolFeeBalance", "type": "uint256" }], "name": "WithdrawlTrollFee", "type": "event" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "spender", "type": "address" }], "name": "allowance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "approve", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "asset", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "assetDecimalsScale", "outputs": [{ "internalType": "int8", "name": "", "type": "int8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "govTokenOracle", "type": "address" }, { "internalType": "address", "name": "assetTokenOracle", "type": "address" }], "name": "assetPriceAgainstGovToken", "outputs": [{ "internalType": "uint256", "name": "price", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "account", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "internalType": "bool", "name": "canceledByOrderOwner", "type": "bool" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "cancelOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "configStore", "outputs": [{ "internalType": "contract IOSWAP_ConfigStore", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "subtractedValue", "type": "uint256" }], "name": "decreaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "getChainId", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "start", "type": "uint256" }, { "internalType": "uint256", "name": "length", "type": "uint256" }], "name": "getOrders", "outputs": [{ "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order[]", "name": "list", "type": "tuple[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "govToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "internalType": "bool", "name": "canceledByOrderOwner", "type": "bool" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }], "name": "hashCancelOrderParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_owner", "type": "address" }, { "internalType": "uint256", "name": "sourceChainId", "type": "uint256" }, { "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "hashOrder", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "orderId", "type": "bytes32" }, { "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }], "name": "hashSwapParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "orderId", "type": "bytes32" }], "name": "hashVoidOrderParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "_owner", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "hashWithdrawParams", "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "imbalance", "outputs": [{ "internalType": "int256", "name": "", "type": "int256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "spender", "type": "address" }, { "internalType": "uint256", "name": "addedValue", "type": "uint256" }], "name": "increaseAllowance", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract IOSWAP_BridgeVaultTrollRegistry", "name": "_vaultRegistry", "type": "address" }], "name": "initAddress", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "lastKnownBalance", "outputs": [{ "internalType": "uint256", "name": "balance", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "lpAssetBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "newOrder", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }, { "internalType": "address", "name": "trader", "type": "address" }], "name": "newOrderFromRouter", "outputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderAmendments", "outputs": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "orderAmendmentsLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderRefunds", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orderStatus", "outputs": [{ "internalType": "enum IOSWAP_BridgeVault.OrderStatus", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "orders", "outputs": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "ordersLength", "outputs": [{ "internalType": "uint256", "name": "length", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pendingWithdrawalAmount", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "pendingWithdrawalTimeout", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "assetAmount", "type": "uint256" }], "name": "rebalancerDeposit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "uint256", "name": "assetAmount", "type": "uint256" }, { "internalType": "uint256", "name": "_nonce", "type": "uint256" }], "name": "rebalancerWithdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "provider", "type": "address" }, { "internalType": "uint256", "name": "assetAmount", "type": "uint256" }], "name": "removeLiquidity", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "lpTokenAmount", "type": "uint256" }], "name": "removeLiquidityRequest", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "requestAmendOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "sourceChainId", "type": "uint256" }, { "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "requestCancelOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "address", "name": "_owner", "type": "address" }, { "internalType": "uint256", "name": "_orderId", "type": "uint256" }, { "internalType": "uint256", "name": "amendment", "type": "uint256" }, { "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "internalType": "address[]", "name": "pair", "type": "address[]" }, { "components": [{ "internalType": "uint256", "name": "peerChain", "type": "uint256" }, { "internalType": "uint256", "name": "inAmount", "type": "uint256" }, { "internalType": "address", "name": "outToken", "type": "address" }, { "internalType": "uint256", "name": "minOutAmount", "type": "uint256" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "expire", "type": "uint256" }], "internalType": "struct IOSWAP_BridgeVault.Order", "name": "order", "type": "tuple" }], "name": "swap", "outputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }], "name": "swapOrderStatus", "outputs": [{ "internalType": "enum IOSWAP_BridgeVault.OrderStatus", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "sync", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "totalPendingWithdrawal", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transfer", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "sender", "type": "address" }, { "internalType": "address", "name": "recipient", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "transferFrom", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "trollRegistry", "outputs": [{ "internalType": "contract IOSWAP_SideChainTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "updateConfigStore", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "updateTrollRegistry", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "vaultRegistry", "outputs": [{ "internalType": "contract IOSWAP_BridgeVaultTrollRegistry", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes[]", "name": "signatures", "type": "bytes[]" }, { "internalType": "bytes32", "name": "orderId", "type": "bytes32" }], "name": "voidOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "orderId", "type": "uint256" }], "name": "withdrawUnexecutedOrder", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawlTrollFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "60e06040523480156200001157600080fd5b50604051620060f8380380620060f883398101604081905262000034916200043f565b604080518082018252601281527113d4d5d05408109c9a5919d94815985d5b1d60721b60208083019182528351808501909452600b84526a13d4d5d0540b559055531560aa1b908401528151919291620000919160039162000372565b508051620000a790600490602084019062000372565b50506001600555506001600160a01b038316620000d657600680546001600160a01b0319163317905562000187565b600980546001600160a01b0319166001600160a01b03851690811790915560408051630c059efb60e21b815290516330167bec91600480820192602092909190829003018186803b1580156200012b57600080fd5b505afa15801562000140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000166919062000418565b600780546001600160a01b0319166001600160a01b03929092169190911790555b6000826001600160a01b03166305268cff6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001c357600080fd5b505afa158015620001d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fe919062000418565b9050806001600160a01b03166080816001600160a01b031660601b815250506000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200025957600080fd5b505afa1580156200026e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000294919062000493565b9050826001600160a01b031660a0816001600160a01b031660601b815250506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002ef57600080fd5b505afa15801562000304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032a919062000493565b9050620003388282620004b8565b600090810b900b60f81b60c0525050600880546001600160a01b0319166001600160a01b039490941693909317909255506200056b915050565b8280546200038090620004ff565b90600052602060002090601f016020900481019282620003a45760008555620003ef565b82601f10620003bf57805160ff1916838001178555620003ef565b82800160010185558215620003ef579182015b82811115620003ef578251825591602001919060010190620003d2565b50620003fd92915062000401565b5090565b5b80821115620003fd576000815560010162000402565b6000602082840312156200042b57600080fd5b8151620004388162000552565b9392505050565b6000806000606084860312156200045557600080fd5b8351620004628162000552565b6020850151909350620004758162000552565b6040850151909250620004888162000552565b809150509250925092565b600060208284031215620004a657600080fd5b815160ff811681146200043857600080fd5b600081810b83820b8281128015607f19830184121615620004dd57620004dd6200053c565b81607f018313811615620004f557620004f56200053c565b5090039392505050565b600181811c908216806200051457607f821691505b602082108114156200053657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146200056857600080fd5b50565b60805160601c60a05160601c60c05160f81c615ac862000630600039600081816105ba01528181610cab01528181610cd601528181610d020152610d450152600081816104cd01528181611341015281816115200152818161161f01528181611b5501528181611e1d01528181611f1c0152818161202c0152818161255501528181612e58015281816131b2015281816134120152818161382001528181613a9601528181613eba01528181613f4b0152613f8a015260006103980152615ac86000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c8063923b6a7d116101de578063be8acd3f1161010f578063d41e9720116100ad578063e0ca2df01161007c578063e0ca2df0146108af578063ec78cdfc146108c2578063ffa1dfcb146108ca578063fff6cae9146108dd57600080fd5b8063d41e97201461083a578063d6cf0b7c14610843578063dd62ed3e14610856578063deaf30b21461088f57600080fd5b8063c4c7f1d0116100e9578063c4c7f1d0146107ee578063cdd7b38a14610801578063cfd7091d14610814578063d06f3fb51461082757600080fd5b8063be8acd3f146107b0578063bff49450146107b8578063c14c723e146107db57600080fd5b8063a39d82221161017c578063a9059cbb11610156578063a9059cbb14610764578063aa1cb1ac14610777578063af1cae5d1461078a578063b64d1e521461079d57600080fd5b8063a39d82221461071e578063a457c2d71461073e578063a85c38ef1461075157600080fd5b80639c0dc751116101b85780639c0dc751146106c55780639d69dc4e146106e55780639dfd49ce146106f8578063a201ccf61461070b57600080fd5b8063923b6a7d146106a2578063944e8644146106b557806395d89b41146106bd57600080fd5b806339509351116102c35780635fa56e3111610261578063842c483511610230578063842c48351461061857806386dad91e146106205780638f1926df146106335780638f72fc771461068257600080fd5b80635fa56e311461058f57806366acc1b9146105a257806367a9257d146105b557806370a08231146105ef57600080fd5b806349e5cabe1161029d57806349e5cabe1461054b57806351c6590a1461055e5780635a812465146105735780635cae6c7a1461058657600080fd5b806339509351146104ef578063404de3611461050257806346bdc1081461052b57600080fd5b8063231053ac1161033057806330167bec1161030a57806330167bec146104a0578063313ce567146104b35780633408e470146104c257806338d52e0f146104c857600080fd5b8063231053ac1461046757806323879dcd1461047a57806323b872dd1461048d57600080fd5b80630a22d68c1161036c5780630a22d68c1461040f57806318160ddd146104265780631d2d85961461042e57806320f1fd3b1461045e57600080fd5b806305268cff1461039357806306fdde03146103d7578063095ea7b3146103ec575b600080fd5b6103ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6103df6108e5565b6040516103ce91906154ee565b6103ff6103fa366004614b7a565b610977565b60405190151581526020016103ce565b610418600d5481565b6040519081526020016103ce565b600254610418565b61045161043c366004614e76565b60156020526000908152604090205460ff1681565b6040516103ce91906154c6565b610418600a5481565b610418610475366004614e8f565b61098e565b610418610488366004614e76565b610a06565b6103ff61049b366004614b39565b610a4e565b6007546103ba906001600160a01b031681565b604051601281526020016103ce565b46610418565b6103ba7f000000000000000000000000000000000000000000000000000000000000000081565b6103ff6104fd366004614b7a565b610aff565b6103ba610510366004614e76565b6012602052600090815260409020546001600160a01b031681565b610418610539366004614e76565b60009081526011602052604090205490565b610418610559366004614ab3565b610b3b565b61057161056c366004614e76565b610d80565b005b610571610581366004614a79565b610f6c565b610418600b5481565b61041861059d366004614ba6565b6110c7565b6105716105b0366004614e76565b611129565b6105dc7f000000000000000000000000000000000000000000000000000000000000000081565b60405160009190910b81526020016103ce565b6104186105fd366004614a79565b6001600160a01b031660009081526020819052604090205490565b6105716113bd565b61057161062e366004614e09565b6114de565b61064661064136600461509a565b6116b4565b6040805196875260208701959095526001600160a01b0393841694860194909452606085019190915216608083015260a082015260c0016103ce565b61069561069036600461509a565b611716565b6040516103ce91906153d2565b6104186106b0366004614ca6565b6118df565b61057161220f565b6103df612329565b6104186106d3366004614e76565b60146020526000908152604090205481565b6008546103ba906001600160a01b031681565b610571610706366004614e76565b612338565b610571610719366004614b7a565b6123ea565b61041861072c366004614a79565b600f6020526000908152604090205481565b6103ff61074c366004614b7a565b6125c2565b61064661075f366004614e76565b61265b565b6103ff610772366004614b7a565b6126ae565b610571610785366004614d58565b6126bb565b610418610798366004614fbc565b612771565b6105716107ab36600461506d565b6128dd565b601054610418565b6104516107c6366004614e76565b60136020526000908152604090205460ff1681565b6105716107e9366004614e76565b612cef565b6105716107fc366004614e76565b612f8c565b6009546103ba906001600160a01b031681565b610418610822366004614ba6565b613226565b610418610835366004614f8f565b613266565b610418600c5481565b61057161085136600461509a565b6134f0565b610418610864366004614ab3565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61041861089d366004614a79565b600e6020526000908152604090205481565b6105716108bd366004614da3565b61367f565b6104186139f9565b6104186108d8366004615046565b613a35565b610571613a77565b6060600380546108f490615909565b80601f016020809104026020016040519081016040528092919081815260200182805461092090615909565b801561096d5780601f106109425761010080835404028352916020019161096d565b820191906000526020600020905b81548152906001019060200180831161095057829003601f168201915b5050505050905090565b6000610984338484613b75565b5060015b92915050565b60004630888860208901356109a960608b0160408c01614a79565b8a606001358a8a8a8e60800160208101906109c49190614a79565b8f60a001356040516020016109e49c9b9a99989796959493929190615267565b6040516020818303038152906040528051906020012090509695505050505050565b6000466040805160208101929092526001600160601b03193060601b169082015260548101839052607401604051602081830303815290604052805190602001209050919050565b6000610a5b848484613c99565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610ae55760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610af28533858403613b75565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610984918590610b36908690615740565b613b75565b600080610bb7846001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7a57600080fd5b505afa158015610b8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb29190614f76565b613e60565b905080610c065760405162461bcd60e51b815260206004820152601760248201527f676f76546f6b656e20686173207072696365206f6620300000000000000000006044820152606401610adc565b6000610c44846001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7a57600080fd5b905080610c8a5760405162461bcd60e51b81526020600482015260146024820152730617373657420686173207072696365206f6620360641b6044820152606401610adc565b80610c9d83670de0b6b3a7640000615868565b610ca79190615758565b92507f000000000000000000000000000000000000000000000000000000000000000060000b15610d785760007f000000000000000000000000000000000000000000000000000000000000000060000b13610d4057610d267f0000000000000000000000000000000000000000000000000000000000000000615976565b610d3190600a6157bd565b610d3b9084615758565b610d75565b610d6b7f0000000000000000000000000000000000000000000000000000000000000000600a6157bd565b610d759084615868565b92505b505092915050565b60026005541415610da35760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b03161580610e435750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190614e59565b155b610e5f5760405162461bcd60e51b8152600401610adc90615521565b80610eac5760405162461bcd60e51b815260206004820181905260248201527f616d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152606401610adc565b610eb63382613ea2565b90506000600b54600014610ee357600b54600254610ed49084615868565b610ede9190615758565b610ee5565b815b905081600b6000828254610ef99190615740565b90915550610f0990503382614016565b336000818152602081815260409182902054600b5483518781529283018690529282015260608101919091527fd92dda7384b5f0fa573be9bbf63d63ac81a5bbb08ebc31f00c0f066e50239609906080015b60405180910390a250506001600555565b6006546001600160a01b03163314610f8357600080fd5b6001600160a01b038116610fc85760405162461bcd60e51b815260206004820152600c60248201526b6e756c6c206164647265737360a01b6044820152606401610adc565b6009546001600160a01b0316156110105760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481a5b9a5d60a21b6044820152606401610adc565b600980546001600160a01b0319166001600160a01b03831690811790915560408051630c059efb60e21b815290516330167bec91600480820192602092909190829003018186803b15801561106457600080fd5b505afa158015611078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109c9190614a96565b600780546001600160a01b03929092166001600160a01b031992831617905560068054909116905550565b6000466040805160208101929092526001600160601b031930606090811b8216928401929092529086901b166054820152606881018490526088810183905260a8015b6040516020818303038152906040528051906020012090509392505050565b6002600554141561114c5760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806111ec5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111b257600080fd5b505afa1580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190614e59565b155b6112085760405162461bcd60e51b8152600401610adc90615521565b600d5481111561125a5760405162461bcd60e51b815260206004820152601960248201527f616d6f756e742065786365656465642066656520746f74616c000000000000006044820152606401610adc565b80600d600082825461126c91906158c6565b909155505060085460408051622fcfcb60e31b815290516000926001600160a01b03169163017e7e58916004808301926020929190829003018186803b1580156112b557600080fd5b505afa1580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed9190614a96565b90506001600160a01b0381166113345760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610adc565b6113686001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682846140f5565b600d54604080516001600160a01b03841681526020810185905280820192909252517f3295b018afec1388a9f05500a461d455fdcf5e033bc08f0bd5e76327f938c1c49181900360600190a150506001600555565b6008546040805163ef06095160e01b815290516000926001600160a01b03169163ef060951916004808301926020929190829003018186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a9190614a96565b90506001600160a01b0381166114895760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420636f6e6669672073746f726560601b6044820152606401610adc565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527f6fa6ee9ec7808d2a9699505042862d79597c4068938b960a4a18d584a2aa3eea906020015b60405180910390a150565b600260055414156115015760405162461bcd60e51b8152600401610adc90615586565b600260055560085460405163b023c86560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152600092839283929091169063b023c8659060240160606040518083038186803b15801561157257600080fd5b505afa158015611586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115aa9190614aec565b92509250925060006115bc8383610b3b565b90506115f088886115ce878a8a6110c7565b846115e18b670de0b6b3a7640000615868565b6115eb9190615758565b61415d565b50506115fb866142de565b600a600082825461160c9190615887565b9091555061164690506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685886140f5565b7f8b61a5a3126da6f67e9f92df5065f5c37f8e618dccd2e2033933cf593e747a3384611671886142de565b61167a90615959565b600a54604080516001600160a01b03909416845260208401929092529082015260600160405180910390a150506001600555505050505050565b601160205281600052604060002081815481106116d057600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549396509194506001600160a01b0390811693919291169086565b606060006010805480602002602001604051908101604052809291908181526020016000905b828210156117b25760008481526020908190206040805160c08101825260068602909201805483526001808201548486015260028201546001600160a01b039081169385019390935260038201546060850152600482015490921660808401526005015460a0830152908352909201910161173c565b50505050905080518410156118d85780516117cd8486615740565b11156117e3578381516117e091906158c6565b92505b826001600160401b038111156117fb576117fb6159d8565b60405190808252806020026020018201604052801561187757816020015b6118646040518060c00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160006001600160a01b03168152602001600081525090565b8152602001906001900390816118195790505b50915060005b83811015610d7857816118908683615740565b815181106118a0576118a06159c2565b60200260200101518382815181106118ba576118ba6159c2565b602002602001018190525080806118d09061593e565b91505061187d565b5092915050565b6000600260055414156119045760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806119a45750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196a57600080fd5b505afa15801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a29190614e59565b155b6119c05760405162461bcd60e51b8152600401610adc90615521565b60006119ce8984358a613226565b6020840135925090506000808281526015602052604090205460ff1660068111156119fb576119fb6159ac565b14611a185760405162461bcd60e51b8152600401610adc90615542565b6007546040516382ad711960e01b8152336004820152600160248201526001600160a01b03909116906382ad71199060440160206040518083038186803b158015611a6257600080fd5b505afa158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a9190614e59565b611ada5760405162461bcd60e51b81526020600482015260116024820152701b9bdd0818481cdd5c195c881d1c9bdb1b607a1b6044820152606401610adc565b81611ae36139f9565b1015611b3b5760405162461bcd60e51b815260206004820152602160248201527f4272696467655661756c743a20696e73756666696369656e742062616c616e636044820152606560f81b6064820152608401610adc565b6008546040516301f418ff60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000928392839283928392839283928392911690630fa0c7f89060240160c06040518083038186803b158015611bb057600080fd5b505afa158015611bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be89190614f03565b939c5091985096509450925090506001600160a01b03811615611cc357604051630946f8b960e11b81526001600160a01b0382169063128df17290611c31908e906004016155bd565b60206040518083038186803b158015611c4957600080fd5b505afa158015611c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c819190614e59565b611cc35760405162461bcd60e51b81526020600482015260136024820152721cddd85c081c1bdb1a58de481b9bdd081b595d606a1b6044820152606401610adc565b670de0b6b3a7640000611cd6838c615868565b611ce09190615758565b91508d611ced8484615740565b611cf79190615740565b9550858a11611d415760405162461bcd60e51b8152602060048201526016602482015275125b9c1d5d08185b5bdd5b9d081d1bdbc81cdb585b1b60521b6044820152606401610adc565b611d4a8a6142de565b600a6000828254611d5b9190615887565b9250508190555081600b6000828254611d749190615740565b90915550611d8490508e84615740565b600d6000828254611d959190615740565b90915550611da590508585610b3b565b9650611db1868b6158c6565b99505050505050506000611de18e8e611dce878e8b8f8f8f61098e565b856115e18a670de0b6b3a7640000615868565b506000858152601560205260409020805460ff19166002179055905086611f0f57611e126060870160408801614a79565b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614611e825760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610adc565b8560600135851015611ed65760405162461bcd60e51b815260206004820152601a60248201527f494e53554646494349454e545f4f55545055545f414d4f554e540000000000006044820152606401610adc565b611f0a611ee960a0880160808901614a79565b86611efa60608a0160408b01614a79565b6001600160a01b031691906140f5565b6121a2565b611f436001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848761432c565b60606000611f5688830160408a01614a79565b6001600160a01b03161415612011576001600160a01b038416638af139378760608a01358c8c611f8c60a08e0160808f01614a79565b8d60a001356040518763ffffffff1660e01b8152600401611fb29695949392919061564d565b600060405180830381600087803b158015611fcc57600080fd5b505af1158015611fe0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120089190810190614bdb565b91506121779050565b6060846001600160a01b03166365d9e64b888a606001358d8d7f00000000000000000000000000000000000000000000000000000000000000008e608001602081019061205e9190614a79565b8f60a001356040518863ffffffff1660e01b815260040161208597969594939291906155e6565b600060405180830381600087803b15801561209f57600080fd5b505af11580156120b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120db9190810190614bdb565b925090506120ef6060890160408a01614a79565b6001600160a01b0316816001835161210791906158c6565b81518110612117576121176159c2565b60200260200101516001600160a01b0316146121755760405162461bcd60e51b815260206004820181905260248201527f4272696467655661756c743a20546f6b656e206f7574206e6f74206d617463686044820152606401610adc565b505b806001825161218691906158c6565b81518110612196576121966159c2565b60200260200101519550505b336001600160a01b03168b7f405af4ab62e51efb58262d5be0d6a4ea764d026247b0a3f5a1daaf7caa8d591c838f8e8b8b600a54600b54600d546040516121f0989796959493929190615433565b60405180910390a35050600160055550909a9950505050505050505050565b60075460408051635dd2c46560e11b815290516000926001600160a01b03169163bba588ca916004808301926020929190829003018186803b15801561225457600080fd5b505afa158015612268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228c9190614a96565b90506001600160a01b0381166122db5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420636f6e6669672073746f726560601b6044820152606401610adc565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527f2e622d86c9281f3be677f792b9721012fb471d4892cc764f6acd70b50d390701906020016114d3565b6060600480546108f490615909565b6002600554141561235b5760405162461bcd60e51b8152600401610adc90615586565b600260055561236a3382613ea2565b9050612375816142de565b600a600082825461238691906156ff565b909155507f8b61a5a3126da6f67e9f92df5065f5c37f8e618dccd2e2033933cf593e747a339050336123b7836142de565b600a54604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1506001600555565b6002600554141561240d5760405162461bcd60e51b8152600401610adc90615586565b60026005556001600160a01b0382166000908152600f602052604090205442101561247a5760405162461bcd60e51b815260206004820152601860248201527f4272696467655661756c743a20706c65617365207761697400000000000000006044820152606401610adc565b6001600160a01b0382166000908152600e60205260409020548111156125015760405162461bcd60e51b815260206004820152603660248201527f4272696467655661756c743a20776974686472617720616d6f756e74206578636044820152751959591959081c995c5d595cdd195908185b5bdd5b9d60521b6064820152608401610adc565b6001600160a01b0382166000908152600e6020526040812080548392906125299084906158c6565b9250508190555080600c600082825461254291906158c6565b9091555061257c90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836140f5565b816001600160a01b03167f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e882600c54604051610f5b929190918252602082015260400190565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156126445760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610adc565b6126513385858403613b75565b5060019392505050565b6010818154811061266b57600080fd5b600091825260209091206006909102018054600182015460028301546003840154600485015460059095015493955091936001600160a01b039182169391169086565b6000610984338484613c99565b60008181526015602052604081205460ff1660068111156126de576126de6159ac565b146126fb5760405162461bcd60e51b8152600401610adc90615542565b6000612712848461270b85610a06565b600061415d565b5060008381526015602052604090819020805460ff1916600517905551909150339083907fc37546735236339b0acece7af06f4648a849e174d46dea23bc3291f3dce0a96590612763908590615420565b60405180910390a350505050565b6000600260055414156127965760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806128365750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127fc57600080fd5b505afa158015612810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128349190614e59565b155b6128525760405162461bcd60e51b8152600401610adc90615521565b60008260200151116128b55760405162461bcd60e51b815260206004820152602660248201527f696e70757420616d6f756e74206d7573742062652067726561746572207468616044820152656e207a65726f60d01b6064820152608401610adc565b6128c3338360200151613ea2565b60208301526128d282336143ed565b600160055592915050565b600260055414156129005760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b031615806129a05750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561296657600080fd5b505afa15801561297a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299e9190614e59565b155b6129bc5760405162461bcd60e51b8152600401610adc90615521565b6000828152601260205260409020546001600160a01b03163314612a225760405162461bcd60e51b815260206004820152601b60248201527f4272696467655661756c743a206e6f742066726f6d206f776e657200000000006044820152606401610adc565b600160008381526013602052604090205460ff166006811115612a4757612a476159ac565b1480612a755750600660008381526013602052604090205460ff166006811115612a7357612a736159ac565b145b612ac15760405162461bcd60e51b815260206004820181905260248201527f4272696467655661756c743a206e6f7420612070656e64696e67206f726465726044820152606401610adc565b60108281548110612ad457612ad46159c2565b6000918252602090912060069091020154813514612b285760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103832b2b921b430b4b760791b6044820152606401610adc565b60108281548110612b3b57612b3b6159c2565b906000526020600020906006020160010154816020013514612b935760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081a5b88185b5bdd5b9d607a1b6044820152606401610adc565b600082815260116020526040902054612c4f5760008281526011602052604090206010805484908110612bc857612bc86159c2565b60009182526020808320845460018082018755958552919093206006928302909301805492909102909201908155818301549281019290925560028082015490830180546001600160a01b039283166001600160a01b0319918216179091556003808401549085015560048084015490850180549190931691161790556005908101549101555b6000828152601160209081526040822080546001810182559083529120829160060201612c7c8282615a0e565b50506000828152601360209081526040808320805460ff191660061790556011909152902054612cae906001906158c6565b827f2fb8fa589a57bc1f8d0c370def5008695ee72187df82f07b26914dac852c5c9f83604051612cde91906155bd565b60405180910390a350506001600555565b60026005541415612d125760405162461bcd60e51b8152600401610adc90615586565b60026005556000612d2260025490565b600b54612d2f9084615868565b612d399190615758565b905080600b541015612d7f5760405162461bcd60e51b815260206004820152600f60248201526e1b9bdd08195b9bdd59da08199d5b99608a1b6044820152606401610adc565b80600b6000828254612d9191906158c6565b90915550612da1905033836145d4565b6008546040805163b86a185560e01b815290516000926001600160a01b03169163b86a1855916004808301926020929190829003018186803b158015612de657600080fd5b505afa158015612dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1e9190614f76565b905080158015612e4657506000600a54612e39600b546142de565b612e4391906156ff565b12155b15612ec857612e7f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846140f5565b600c5460405133917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e891612ebb91868252602082015260400190565b60405180910390a2612f22565b336000908152600e602052604081208054849290612ee7908490615740565b90915550612ef790508142615740565b336000908152600f6020526040812091909155600c8054849290612f1c908490615740565b90915550505b336000818152602081815260409182902054600b54600c548451888152938401899052838501929092526060830152608082015290517f129df1612e41e026fe9fcc6eb01bb19fa4d96c11a8597fdd777f9798d21053389181900360a00190a25050600160055550565b60026005541415612faf5760405162461bcd60e51b8152600401610adc90615586565b60026005556007546001600160a01b0316158061304f5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561301557600080fd5b505afa158015613029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304d9190614e59565b155b61306b5760405162461bcd60e51b8152600401610adc90615521565b6000818152601260205260409020546001600160a01b031633146130d15760405162461bcd60e51b815260206004820152601b60248201527f4272696467655661756c743a206e6f742066726f6d206f776e657200000000006044820152606401610adc565b600460008281526013602052604090205460ff1660068111156130f6576130f66159ac565b146131525760405162461bcd60e51b815260206004820152602660248201527f4272696467655661756c743a2063616e63656c6c6174696f6e206e6f742061706044820152651c1c9bdd995960d21b6064820152608401610adc565b6000818152601360209081526040808320805460ff19166005179055601490915290205461317f906142de565b600a60008282546131909190615887565b90915550506000818152601460205260409020546131da906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169033906140f5565b600a5460405133917f1a2d5de6fd207698efd8e378391657cb785c739e50cd0404749fac0eedaf3a4b9161321691858252602082015260400190565b60405180910390a2506001600555565b6040516001600160601b0319606085811b8216602084015246603484015230901b166054820152606881018390526088810182905260009060a80161110a565b6007546000906001600160a01b031615806133045750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156132ca57600080fd5b505afa1580156132de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133029190614e59565b155b6133205760405162461bcd60e51b8152600401610adc90615521565b600854604051633d54c44760e01b81523360048201526001600160a01b0390911690633d54c4479060240160206040518083038186803b15801561336357600080fd5b505afa158015613377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339b9190614e59565b6133e75760405162461bcd60e51b815260206004820152601960248201527f4e6f742066726f6d20617070726f7665642061646472657373000000000000006044820152606401610adc565b6133ef6139f9565b6133fd906020850135615740565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561345c57600080fd5b505afa158015613470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134949190614f76565b10156134d85760405162461bcd60e51b81526020600482015260136024820152721a5b9cdd59999a58da595b9d08185b5bdd5b9d606a1b6044820152606401610adc565b610af86134ea36859003850185614fbc565b836143ed565b6007546001600160a01b0316158061358b5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561355157600080fd5b505afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190614e59565b155b6135a75760405162461bcd60e51b8152600401610adc90615521565b60006135b4338484613226565b90506000808281526015602052604090205460ff1660068111156135da576135da6159ac565b146136275760405162461bcd60e51b815260206004820181905260248201527f4272696467655661756c743a206e6f7420612070656e64696e67206f726465726044820152606401610adc565b600081815260156020908152604091829020805460ff1916600317905590518281528391859133917fa065d03beae5e82c80ed9f4455ae991084cfd41fa890fd5285f298f04665a7e4910160405180910390a4505050565b6007546001600160a01b0316158061371a5750600760009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136e057600080fd5b505afa1580156136f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137189190614e59565b155b6137365760405162461bcd60e51b8152600401610adc90615521565b60006010848154811061374b5761374b6159c2565b600091825260209091206006909102019050600160008581526013602052604090205460ff166006811115613782576137826159ac565b14806137b05750600660008581526013602052604090205460ff1660068111156137ae576137ae6159ac565b145b6138065760405162461bcd60e51b815260206004820152602160248201527f4272696467655661756c743a2063616e63656c206e6f742072657175657374656044820152601960fa1b6064820152608401610adc565b6008546040516301f418ff60e31b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000928392839290911690630fa0c7f89060240160c06040518083038186803b15801561387257600080fd5b505afa158015613886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138aa9190614f03565b50945094509450505060006138bf8484610b3b565b905060006138ec8b8b6138d38c8c8c613a35565b858a60010154670de0b6b3a76400006115e19190615868565b509050600060108a81548110613904576139046159c2565b9060005260206000209060060201600101549050600089156139715761392a8986615740565b905061393681836158c6565b9150613941816142de565b600a60008282546139529190615887565b9250508190555080600d600082825461396b9190615740565b90915550505b60008b81526014602090815260408083208590556013909152902080546004919060ff19166001830217905550336001600160a01b03168b7facf66daa017de96293704c3984049e12467a31382df2706bb4ecb2024f1d4a87858d600a54600d546040516139e29493929190615497565b60405180910390a350505050505050505050505050565b6000613a30600a54613a26600d54600c54600b54613a179190615740565b613a219190615740565b6142de565b610bb291906156ff565b905090565b6000466040805160208101929092526001600160601b03193060601b16908201526054810185905283151560f81b60748201526075810183905260950161110a565b6000613a816139f9565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613ae057600080fd5b505afa158015613af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b189190614f76565b613b2291906158c6565b905080600d6000828254613b369190615740565b9091555050600d546040805183815260208101929092527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a91016114d3565b6001600160a01b038316613bd75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610adc565b6001600160a01b038216613c385760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610adc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316613cfd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610adc565b6001600160a01b038216613d5f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610adc565b6001600160a01b03831660009081526020819052604090205481811015613dd75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610adc565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290613e0e908490615740565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161276391815260200190565b50505050565b600080821215613e9e5760405162461bcd60e51b8152602060048201526009602482015268076616c7565203c20360bc1b6044820152606401610adc565b5090565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613f0457600080fd5b505afa158015613f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3c9190614f76565b9050613f736001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016843085614722565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015613fd457600080fd5b505afa158015613fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061400c9190614f76565b610af891906158c6565b6001600160a01b03821661406c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610adc565b806002600082825461407e9190615740565b90915550506001600160a01b038216600090815260208190526040812080548392906140ab908490615740565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b03831660248201526044810182905261415890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261475a565b505050565b6009546040516330fed77960e01b815260609160009182916001600160a01b0316906330fed779906141999033908b908b908b9060040161531d565b600060405180830381600087803b1580156141b357600080fd5b505af11580156141c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141ef91908101906150bc565b94509250905083821015806142885750600760009054906101000a90046001600160a01b03166001600160a01b031663414016d86040518163ffffffff1660e01b815260040160206040518083038186803b15801561424d57600080fd5b505afa158015614261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142859190614f76565b81145b6142d45760405162461bcd60e51b815260206004820152601e60248201527f4272696467655661756c743a206e6f7420656e6f756768207374616b657300006044820152606401610adc565b5094509492505050565b60006001600160ff1b03821115613e9e5760405162461bcd60e51b81526020600482015260126024820152710ecc2d8eaca407c40d2dce8646a6c5cdac2f60731b6044820152606401610adc565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561437857600080fd5b505afa15801561438c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b09190614f76565b6143ba9190615740565b6040516001600160a01b038516602482015260448101829052909150613e5a90859063095ea7b360e01b90606401614121565b601080546001808201835560009283528451600683027f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672810191909155602080870180517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6738401556040808901517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae674850180546001600160a01b039283166001600160a01b03199182161790915560608b01517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67587015560808b01517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6768701805491909316911617905560a08901517f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6779094019390935584865260139091529320805460ff191690911790559051614544906142de565b600a600082825461455591906156ff565b92505081905550816001600160a01b0316817fb6f9148b30582b9f81ec18599e521211dbab4e2e050a05e1ba838a23a46abb2885600a5460405161459a9291906155cb565b60405180910390a3600081815260126020526040902080546001600160a01b0319166001600160a01b039390931692909217909155919050565b6001600160a01b0382166146345760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610adc565b6001600160a01b038216600090815260208190526040902054818110156146a85760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610adc565b6001600160a01b03831660009081526020819052604081208383039055600280548492906146d79084906158c6565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613e5a9085906323b872dd60e01b90608401614121565b60006147af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661482c9092919063ffffffff16565b80519091501561415857808060200190518101906147cd9190614e59565b6141585760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610adc565b606061483b8484600085614843565b949350505050565b6060824710156148a45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610adc565b843b6148f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610adc565b600080866001600160a01b0316858760405161490e919061524b565b60006040518083038185875af1925050503d806000811461494b576040519150601f19603f3d011682016040523d82523d6000602084013e614950565b606091505b509150915061496082828661496b565b979650505050505050565b6060831561497a575081610af8565b82511561498a5782518084602001fd5b8160405162461bcd60e51b8152600401610adc91906154ee565b60008083601f8401126149b657600080fd5b5081356001600160401b038111156149cd57600080fd5b6020830191508360208260051b85010111156149e857600080fd5b9250929050565b600082601f830112614a0057600080fd5b81516020614a15614a10836156dc565b6156ac565b80838252828201915082860187848660051b8901011115614a3557600080fd5b60005b85811015614a5457815184529284019290840190600101614a38565b5090979650505050505050565b600060c08284031215614a7357600080fd5b50919050565b600060208284031215614a8b57600080fd5b8135610af881615a6c565b600060208284031215614aa857600080fd5b8151610af881615a6c565b60008060408385031215614ac657600080fd5b8235614ad181615a6c565b91506020830135614ae181615a6c565b809150509250929050565b600080600060608486031215614b0157600080fd5b8351614b0c81615a6c565b6020850151909350614b1d81615a6c565b6040850151909250614b2e81615a6c565b809150509250925092565b600080600060608486031215614b4e57600080fd5b8335614b5981615a6c565b92506020840135614b6981615a6c565b929592945050506040919091013590565b60008060408385031215614b8d57600080fd5b8235614b9881615a6c565b946020939093013593505050565b600080600060608486031215614bbb57600080fd5b8335614bc681615a6c565b95602085013595506040909401359392505050565b60008060408385031215614bee57600080fd5b82516001600160401b0380821115614c0557600080fd5b818501915085601f830112614c1957600080fd5b81516020614c29614a10836156dc565b8083825282820191508286018a848660051b8901011115614c4957600080fd5b600096505b84871015614c75578051614c6181615a6c565b835260019690960195918301918301614c4e565b5091880151919650909350505080821115614c8f57600080fd5b50614c9c858286016149ef565b9150509250929050565b60008060008060008060008060006101808a8c031215614cc557600080fd5b89356001600160401b0380821115614cdc57600080fd5b614ce88d838e016149a4565b909b50995060208c01359150614cfd82615a6c565b90975060408b0135965060608b0135955060808b0135945060a08b01359080821115614d2857600080fd5b50614d358c828d016149a4565b9094509250614d4990508b60c08c01614a61565b90509295985092959850929598565b600080600060408486031215614d6d57600080fd5b83356001600160401b03811115614d8357600080fd5b614d8f868287016149a4565b909790965060209590950135949350505050565b600080600080600060808688031215614dbb57600080fd5b85356001600160401b03811115614dd157600080fd5b614ddd888289016149a4565b909650945050602086013592506040860135614df881615a84565b949793965091946060013592915050565b60008060008060608587031215614e1f57600080fd5b84356001600160401b03811115614e3557600080fd5b614e41878288016149a4565b90989097506020870135966040013595509350505050565b600060208284031215614e6b57600080fd5b8151610af881615a84565b600060208284031215614e8857600080fd5b5035919050565b6000806000806000806101408789031215614ea957600080fd5b8635955060208701359450614ec18860408901614a61565b935061010087013592506101208701356001600160401b03811115614ee557600080fd5b614ef189828a016149a4565b979a9699509497509295939492505050565b60008060008060008060c08789031215614f1c57600080fd5b8651614f2781615a6c565b6020880151909650614f3881615a6c565b6040880151909550614f4981615a6c565b6060880151909450614f5a81615a6c565b809350506080870151915060a087015190509295509295509295565b600060208284031215614f8857600080fd5b5051919050565b60008060e08385031215614fa257600080fd5b614fac8484614a61565b915060c0830135614ae181615a6c565b600060c08284031215614fce57600080fd5b60405160c081018181106001600160401b0382111715614ff057614ff06159d8565b80604052508235815260208301356020820152604083013561501181615a6c565b604082015260608381013590820152608083013561502e81615a6c565b608082015260a0928301359281019290925250919050565b60008060006060848603121561505b57600080fd5b833592506020840135614b6981615a84565b60008060e0838503121561508057600080fd5b823591506150918460208501614a61565b90509250929050565b600080604083850312156150ad57600080fd5b50508035926020909101359150565b6000806000606084860312156150d157600080fd5b835192506020840151915060408401516001600160401b038111156150f557600080fd5b615101868287016149ef565b9150509250925092565b8183526000602080850194508260005b8581101561514957813561512e81615a6c565b6001600160a01b03168752958201959082019060010161511b565b509495945050505050565b600081518084526020808501945080840160005b8381101561514957815187529582019590820190600101615168565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b803582526020810135602083015260408101356151c981615a6c565b6001600160a01b039081166040840152606082810135908401526080820135906151f282615a6c565b16608083015260a090810135910152565b8051825260208101516020830152604081015160018060a01b03808216604085015260608301516060850152806080840151166080850152505060a081015160a08301525050565b6000825161525d8184602087016158dd565b9190910192915050565b8c8152600060206bffffffffffffffffffffffff19808f60601b16828501528d60348501528c60548501528b6074850152808b60601b166094850152508860a88401528760c884015260e883018760005b888110156152e65781356152cb81615a6c565b6001600160a01b0316835291830191908301906001016152b8565b50506152fe818760601b6001600160601b0319169052565b84601482015260348101925050509d9c50505050505050505050505050565b6001600160a01b0385168152606060208083018290529082018490526000906080600586901b840181019190840187845b888110156153bc57868503607f190183528135368b9003601e1901811261537457600080fd5b8a0180356001600160401b0381111561538c57600080fd5b8036038c131561539b57600080fd5b6153a88782888501615184565b96505050918301919083019060010161534e565b5050505060409290920192909252949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561541457615401838551615203565b9284019260c092909201916001016153ee565b50909695505050505050565b602081526000610af86020830184615154565b60006101a08083526154478184018c615154565b6001600160a01b038b166020850152604084018a9052915061546e905060608301886151ad565b856101208301528461014083015283610160830152826101808301529998505050505050505050565b6080815260006154aa6080830187615154565b9415156020830152506040810192909252606090910152919050565b60208101600783106154e857634e487b7160e01b600052602160045260246000fd5b91905290565b602081526000825180602084015261550d8160408501602087016158dd565b601f01601f19169190910160400192915050565b6020808252600790820152665041555345442160c81b604082015260600190565b60208082526024908201527f4272696467655661756c743a204f7264657220616c72656164792070726f63656040820152631cdcd95960e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60c0810161098882846151ad565b60e081016155d98285615203565b8260c08301529392505050565b87815286602082015260e06040820152600061560660e08301878961510b565b6001600160a01b03958616606084015293909416608082015260a081019190915280820360c09091015260048152630307830360e41b602082015260400195945050505050565b86815285602082015260c06040820152600061566d60c08301868861510b565b6001600160a01b0394909416606083015250608081019190915280820360a09091015260048152630307830360e41b6020820152604001949350505050565b604051601f8201601f191681016001600160401b03811182821017156156d4576156d46159d8565b604052919050565b60006001600160401b038211156156f5576156f56159d8565b5060051b60200190565b600080821280156001600160ff1b038490038513161561572157615721615996565b600160ff1b839003841281161561573a5761573a615996565b50500190565b6000821982111561575357615753615996565b500190565b60008261577557634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156157b557816000190482111561579b5761579b615996565b808516156157a857918102915b93841c939080029061577f565b509250929050565b6000610af860ff8416836000826157d657506001610988565b816157e357506000610988565b81600181146157f957600281146158035761581f565b6001915050610988565b60ff84111561581457615814615996565b50506001821b610988565b5060208310610133831016604e8410600b8410161715615842575081810a610988565b61584c838361577a565b806000190482111561586057615860615996565b029392505050565b600081600019048311821515161561588257615882615996565b500290565b60008083128015600160ff1b8501841216156158a5576158a5615996565b6001600160ff1b03840183138116156158c0576158c0615996565b50500390565b6000828210156158d8576158d8615996565b500390565b60005b838110156158f85781810151838201526020016158e0565b83811115613e5a5750506000910152565b600181811c9082168061591d57607f821691505b60208210811415614a7357634e487b7160e01b600052602260045260246000fd5b600060001982141561595257615952615996565b5060010190565b6000600160ff1b82141561596f5761596f615996565b5060000390565b600081810b607f1981141561598d5761598d615996565b60000392915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b81358155602082013560018201556040820135615a2a81615a6c565b615a3781600284016159ee565b50606082013560038201556080820135615a5081615a6c565b615a5d81600484016159ee565b5060a082013560058201555050565b6001600160a01b0381168114615a8157600080fd5b50565b8015158114615a8157600080fdfea2646970667358221220cfc94b5335c18382d77880a8d1184f9549a12a6f21a72329a51382add3920b3664736f6c63430008060033"
    };
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVault.js
var require_OSWAP_BridgeVault = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/OSWAP_BridgeVault.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_BridgeVault = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var OSWAP_BridgeVault_json_1 = __importDefault(require_OSWAP_BridgeVault_json());
    var OSWAP_BridgeVault = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, OSWAP_BridgeVault_json_1.default.abi, OSWAP_BridgeVault_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.vaultRegistry, params.configStore, params.asset]);
      }
      parseAddLiquidityEvent(receipt) {
        return this.parseEvents(receipt, "AddLiquidity").map((e) => this.decodeAddLiquidityEvent(e));
      }
      decodeAddLiquidityEvent(event) {
        let result = event.data;
        return {
          provider: result.provider,
          amount: new eth_wallet_1.BigNumber(result.amount),
          mintAmount: new eth_wallet_1.BigNumber(result.mintAmount),
          newBalance: new eth_wallet_1.BigNumber(result.newBalance),
          newLpAssetBalance: new eth_wallet_1.BigNumber(result.newLpAssetBalance),
          _event: event
        };
      }
      parseAmendOrderRequestEvent(receipt) {
        return this.parseEvents(receipt, "AmendOrderRequest").map((e) => this.decodeAmendOrderRequestEvent(e));
      }
      decodeAmendOrderRequestEvent(event) {
        let result = event.data;
        return {
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          amendment: new eth_wallet_1.BigNumber(result.amendment),
          order: {
            peerChain: new eth_wallet_1.BigNumber(result.order.peerChain),
            inAmount: new eth_wallet_1.BigNumber(result.order.inAmount),
            outToken: result.order.outToken,
            minOutAmount: new eth_wallet_1.BigNumber(result.order.minOutAmount),
            to: result.order.to,
            expire: new eth_wallet_1.BigNumber(result.order.expire)
          },
          _event: event
        };
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          spender: result.spender,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseNewOrderEvent(receipt) {
        return this.parseEvents(receipt, "NewOrder").map((e) => this.decodeNewOrderEvent(e));
      }
      decodeNewOrderEvent(event) {
        let result = event.data;
        return {
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          owner: result.owner,
          order: {
            peerChain: new eth_wallet_1.BigNumber(result.order.peerChain),
            inAmount: new eth_wallet_1.BigNumber(result.order.inAmount),
            outToken: result.order.outToken,
            minOutAmount: new eth_wallet_1.BigNumber(result.order.minOutAmount),
            to: result.order.to,
            expire: new eth_wallet_1.BigNumber(result.order.expire)
          },
          newImbalance: new eth_wallet_1.BigNumber(result.newImbalance),
          _event: event
        };
      }
      parseOrderCanceledEvent(receipt) {
        return this.parseEvents(receipt, "OrderCanceled").map((e) => this.decodeOrderCanceledEvent(e));
      }
      decodeOrderCanceledEvent(event) {
        let result = event.data;
        return {
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          sender: result.sender,
          signers: result.signers.map((e) => new eth_wallet_1.BigNumber(e)),
          canceledByOrderOwner: result.canceledByOrderOwner,
          newImbalance: new eth_wallet_1.BigNumber(result.newImbalance),
          newProtocolFeeBalance: new eth_wallet_1.BigNumber(result.newProtocolFeeBalance),
          _event: event
        };
      }
      parseRebalanceEvent(receipt) {
        return this.parseEvents(receipt, "Rebalance").map((e) => this.decodeRebalanceEvent(e));
      }
      decodeRebalanceEvent(event) {
        let result = event.data;
        return {
          rebalancer: result.rebalancer,
          amount: new eth_wallet_1.BigNumber(result.amount),
          newImbalance: new eth_wallet_1.BigNumber(result.newImbalance),
          _event: event
        };
      }
      parseRemoveLiquidityEvent(receipt) {
        return this.parseEvents(receipt, "RemoveLiquidity").map((e) => this.decodeRemoveLiquidityEvent(e));
      }
      decodeRemoveLiquidityEvent(event) {
        let result = event.data;
        return {
          provider: result.provider,
          amount: new eth_wallet_1.BigNumber(result.amount),
          newPendingWithdrawal: new eth_wallet_1.BigNumber(result.newPendingWithdrawal),
          _event: event
        };
      }
      parseRemoveLiquidityRequestEvent(receipt) {
        return this.parseEvents(receipt, "RemoveLiquidityRequest").map((e) => this.decodeRemoveLiquidityRequestEvent(e));
      }
      decodeRemoveLiquidityRequestEvent(event) {
        let result = event.data;
        return {
          provider: result.provider,
          amount: new eth_wallet_1.BigNumber(result.amount),
          burnAmount: new eth_wallet_1.BigNumber(result.burnAmount),
          newBalance: new eth_wallet_1.BigNumber(result.newBalance),
          newLpAssetBalance: new eth_wallet_1.BigNumber(result.newLpAssetBalance),
          newPendingWithdrawal: new eth_wallet_1.BigNumber(result.newPendingWithdrawal),
          _event: event
        };
      }
      parseRequestCancelOrderEvent(receipt) {
        return this.parseEvents(receipt, "RequestCancelOrder").map((e) => this.decodeRequestCancelOrderEvent(e));
      }
      decodeRequestCancelOrderEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          sourceChainId: new eth_wallet_1.BigNumber(result.sourceChainId),
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          hashedOrderId: result.hashedOrderId,
          _event: event
        };
      }
      parseSwapEvent(receipt) {
        return this.parseEvents(receipt, "Swap").map((e) => this.decodeSwapEvent(e));
      }
      decodeSwapEvent(event) {
        let result = event.data;
        return {
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          sender: result.sender,
          signers: result.signers.map((e) => new eth_wallet_1.BigNumber(e)),
          owner: result.owner,
          amendment: new eth_wallet_1.BigNumber(result.amendment),
          order: {
            peerChain: new eth_wallet_1.BigNumber(result.order.peerChain),
            inAmount: new eth_wallet_1.BigNumber(result.order.inAmount),
            outToken: result.order.outToken,
            minOutAmount: new eth_wallet_1.BigNumber(result.order.minOutAmount),
            to: result.order.to,
            expire: new eth_wallet_1.BigNumber(result.order.expire)
          },
          outAmount: new eth_wallet_1.BigNumber(result.outAmount),
          newImbalance: new eth_wallet_1.BigNumber(result.newImbalance),
          newLpAssetBalance: new eth_wallet_1.BigNumber(result.newLpAssetBalance),
          newProtocolFeeBalance: new eth_wallet_1.BigNumber(result.newProtocolFeeBalance),
          _event: event
        };
      }
      parseSyncEvent(receipt) {
        return this.parseEvents(receipt, "Sync").map((e) => this.decodeSyncEvent(e));
      }
      decodeSyncEvent(event) {
        let result = event.data;
        return {
          excess: new eth_wallet_1.BigNumber(result.excess),
          newProtocolFeeBalance: new eth_wallet_1.BigNumber(result.newProtocolFeeBalance),
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          value: new eth_wallet_1.BigNumber(result.value),
          _event: event
        };
      }
      parseUpdateConfigStoreEvent(receipt) {
        return this.parseEvents(receipt, "UpdateConfigStore").map((e) => this.decodeUpdateConfigStoreEvent(e));
      }
      decodeUpdateConfigStoreEvent(event) {
        let result = event.data;
        return {
          newConfigStore: result.newConfigStore,
          _event: event
        };
      }
      parseUpdateTrollRegistryEvent(receipt) {
        return this.parseEvents(receipt, "UpdateTrollRegistry").map((e) => this.decodeUpdateTrollRegistryEvent(e));
      }
      decodeUpdateTrollRegistryEvent(event) {
        let result = event.data;
        return {
          newTrollRegistry: result.newTrollRegistry,
          _event: event
        };
      }
      parseVoidOrderEvent(receipt) {
        return this.parseEvents(receipt, "VoidOrder").map((e) => this.decodeVoidOrderEvent(e));
      }
      decodeVoidOrderEvent(event) {
        let result = event.data;
        return {
          orderId: result.orderId,
          sender: result.sender,
          signers: result.signers.map((e) => new eth_wallet_1.BigNumber(e)),
          _event: event
        };
      }
      parseWithdrawUnexecutedOrderEvent(receipt) {
        return this.parseEvents(receipt, "WithdrawUnexecutedOrder").map((e) => this.decodeWithdrawUnexecutedOrderEvent(e));
      }
      decodeWithdrawUnexecutedOrderEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          orderId: new eth_wallet_1.BigNumber(result.orderId),
          newImbalance: new eth_wallet_1.BigNumber(result.newImbalance),
          _event: event
        };
      }
      parseWithdrawlTrollFeeEvent(receipt) {
        return this.parseEvents(receipt, "WithdrawlTrollFee").map((e) => this.decodeWithdrawlTrollFeeEvent(e));
      }
      decodeWithdrawlTrollFeeEvent(event) {
        let result = event.data;
        return {
          feeTo: result.feeTo,
          amount: new eth_wallet_1.BigNumber(result.amount),
          newProtocolFeeBalance: new eth_wallet_1.BigNumber(result.newProtocolFeeBalance),
          _event: event
        };
      }
      assign() {
        let allowanceParams = (params) => [params.owner, params.spender];
        let allowance_call = async (params) => {
          let result = await this.call("allowance", allowanceParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.allowance = allowance_call;
        let asset_call = async () => {
          let result = await this.call("asset");
          return result;
        };
        this.asset = asset_call;
        let assetDecimalsScale_call = async () => {
          let result = await this.call("assetDecimalsScale");
          return new eth_wallet_1.BigNumber(result);
        };
        this.assetDecimalsScale = assetDecimalsScale_call;
        let assetPriceAgainstGovTokenParams = (params) => [params.govTokenOracle, params.assetTokenOracle];
        let assetPriceAgainstGovToken_call = async (params) => {
          let result = await this.call("assetPriceAgainstGovToken", assetPriceAgainstGovTokenParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.assetPriceAgainstGovToken = assetPriceAgainstGovToken_call;
        let balanceOf_call = async (account) => {
          let result = await this.call("balanceOf", [account]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let configStore_call = async () => {
          let result = await this.call("configStore");
          return result;
        };
        this.configStore = configStore_call;
        let decimals_call = async () => {
          let result = await this.call("decimals");
          return new eth_wallet_1.BigNumber(result);
        };
        this.decimals = decimals_call;
        let getChainId_call = async () => {
          let result = await this.call("getChainId");
          return new eth_wallet_1.BigNumber(result);
        };
        this.getChainId = getChainId_call;
        let getOrdersParams = (params) => [eth_wallet_1.Utils.toString(params.start), eth_wallet_1.Utils.toString(params.length)];
        let getOrders_call = async (params) => {
          let result = await this.call("getOrders", getOrdersParams(params));
          return result.map((e) => ({
            peerChain: new eth_wallet_1.BigNumber(e.peerChain),
            inAmount: new eth_wallet_1.BigNumber(e.inAmount),
            outToken: e.outToken,
            minOutAmount: new eth_wallet_1.BigNumber(e.minOutAmount),
            to: e.to,
            expire: new eth_wallet_1.BigNumber(e.expire)
          }));
        };
        this.getOrders = getOrders_call;
        let govToken_call = async () => {
          let result = await this.call("govToken");
          return result;
        };
        this.govToken = govToken_call;
        let hashCancelOrderParamsParams = (params) => [eth_wallet_1.Utils.toString(params.orderId), params.canceledByOrderOwner, eth_wallet_1.Utils.toString(params.protocolFee)];
        let hashCancelOrderParams_call = async (params) => {
          let result = await this.call("hashCancelOrderParams", hashCancelOrderParamsParams(params));
          return result;
        };
        this.hashCancelOrderParams = hashCancelOrderParams_call;
        let hashOrderParams = (params) => [params.owner, eth_wallet_1.Utils.toString(params.sourceChainId), eth_wallet_1.Utils.toString(params.orderId)];
        let hashOrder_call = async (params) => {
          let result = await this.call("hashOrder", hashOrderParams(params));
          return result;
        };
        this.hashOrder = hashOrder_call;
        let hashSwapParamsParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.orderId), eth_wallet_1.Utils.toString(params.amendment), [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)], eth_wallet_1.Utils.toString(params.protocolFee), params.pair];
        let hashSwapParams_call = async (params) => {
          let result = await this.call("hashSwapParams", hashSwapParamsParams(params));
          return result;
        };
        this.hashSwapParams = hashSwapParams_call;
        let hashVoidOrderParams_call = async (orderId) => {
          let result = await this.call("hashVoidOrderParams", [eth_wallet_1.Utils.stringToBytes32(orderId)]);
          return result;
        };
        this.hashVoidOrderParams = hashVoidOrderParams_call;
        let hashWithdrawParamsParams = (params) => [params.owner, eth_wallet_1.Utils.toString(params.amount), eth_wallet_1.Utils.toString(params.nonce)];
        let hashWithdrawParams_call = async (params) => {
          let result = await this.call("hashWithdrawParams", hashWithdrawParamsParams(params));
          return result;
        };
        this.hashWithdrawParams = hashWithdrawParams_call;
        let imbalance_call = async () => {
          let result = await this.call("imbalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.imbalance = imbalance_call;
        let lastKnownBalance_call = async () => {
          let result = await this.call("lastKnownBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.lastKnownBalance = lastKnownBalance_call;
        let lpAssetBalance_call = async () => {
          let result = await this.call("lpAssetBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.lpAssetBalance = lpAssetBalance_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let orderAmendmentsParams = (params) => [eth_wallet_1.Utils.toString(params.param1), eth_wallet_1.Utils.toString(params.param2)];
        let orderAmendments_call = async (params) => {
          let result = await this.call("orderAmendments", orderAmendmentsParams(params));
          return {
            peerChain: new eth_wallet_1.BigNumber(result.peerChain),
            inAmount: new eth_wallet_1.BigNumber(result.inAmount),
            outToken: result.outToken,
            minOutAmount: new eth_wallet_1.BigNumber(result.minOutAmount),
            to: result.to,
            expire: new eth_wallet_1.BigNumber(result.expire)
          };
        };
        this.orderAmendments = orderAmendments_call;
        let orderAmendmentsLength_call = async (orderId) => {
          let result = await this.call("orderAmendmentsLength", [eth_wallet_1.Utils.toString(orderId)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.orderAmendmentsLength = orderAmendmentsLength_call;
        let orderOwner_call = async (param1) => {
          let result = await this.call("orderOwner", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.orderOwner = orderOwner_call;
        let orderRefunds_call = async (param1) => {
          let result = await this.call("orderRefunds", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.orderRefunds = orderRefunds_call;
        let orderStatus_call = async (param1) => {
          let result = await this.call("orderStatus", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.orderStatus = orderStatus_call;
        let orders_call = async (param1) => {
          let result = await this.call("orders", [eth_wallet_1.Utils.toString(param1)]);
          return {
            peerChain: new eth_wallet_1.BigNumber(result.peerChain),
            inAmount: new eth_wallet_1.BigNumber(result.inAmount),
            outToken: result.outToken,
            minOutAmount: new eth_wallet_1.BigNumber(result.minOutAmount),
            to: result.to,
            expire: new eth_wallet_1.BigNumber(result.expire)
          };
        };
        this.orders = orders_call;
        let ordersLength_call = async () => {
          let result = await this.call("ordersLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.ordersLength = ordersLength_call;
        let pendingWithdrawalAmount_call = async (param1) => {
          let result = await this.call("pendingWithdrawalAmount", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.pendingWithdrawalAmount = pendingWithdrawalAmount_call;
        let pendingWithdrawalTimeout_call = async (param1) => {
          let result = await this.call("pendingWithdrawalTimeout", [param1]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.pendingWithdrawalTimeout = pendingWithdrawalTimeout_call;
        let protocolFeeBalance_call = async () => {
          let result = await this.call("protocolFeeBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFeeBalance = protocolFeeBalance_call;
        let swapOrderStatus_call = async (param1) => {
          let result = await this.call("swapOrderStatus", [eth_wallet_1.Utils.stringToBytes32(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.swapOrderStatus = swapOrderStatus_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let totalPendingWithdrawal_call = async () => {
          let result = await this.call("totalPendingWithdrawal");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalPendingWithdrawal = totalPendingWithdrawal_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let trollRegistry_call = async () => {
          let result = await this.call("trollRegistry");
          return result;
        };
        this.trollRegistry = trollRegistry_call;
        let vaultRegistry_call = async () => {
          let result = await this.call("vaultRegistry");
          return result;
        };
        this.vaultRegistry = vaultRegistry_call;
        let addLiquidity_send = async (amount) => {
          let result = await this.send("addLiquidity", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let addLiquidity_call = async (amount) => {
          let result = await this.call("addLiquidity", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.addLiquidity = Object.assign(addLiquidity_send, {
          call: addLiquidity_call
        });
        let approveParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.amount)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return result;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let cancelOrderParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.orderId), params.canceledByOrderOwner, eth_wallet_1.Utils.toString(params.protocolFee)];
        let cancelOrder_send = async (params) => {
          let result = await this.send("cancelOrder", cancelOrderParams(params));
          return result;
        };
        let cancelOrder_call = async (params) => {
          let result = await this.call("cancelOrder", cancelOrderParams(params));
          return;
        };
        this.cancelOrder = Object.assign(cancelOrder_send, {
          call: cancelOrder_call
        });
        let decreaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.subtractedValue)];
        let decreaseAllowance_send = async (params) => {
          let result = await this.send("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        let decreaseAllowance_call = async (params) => {
          let result = await this.call("decreaseAllowance", decreaseAllowanceParams(params));
          return result;
        };
        this.decreaseAllowance = Object.assign(decreaseAllowance_send, {
          call: decreaseAllowance_call
        });
        let increaseAllowanceParams = (params) => [params.spender, eth_wallet_1.Utils.toString(params.addedValue)];
        let increaseAllowance_send = async (params) => {
          let result = await this.send("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        let increaseAllowance_call = async (params) => {
          let result = await this.call("increaseAllowance", increaseAllowanceParams(params));
          return result;
        };
        this.increaseAllowance = Object.assign(increaseAllowance_send, {
          call: increaseAllowance_call
        });
        let initAddress_send = async (vaultRegistry) => {
          let result = await this.send("initAddress", [vaultRegistry]);
          return result;
        };
        let initAddress_call = async (vaultRegistry) => {
          let result = await this.call("initAddress", [vaultRegistry]);
          return;
        };
        this.initAddress = Object.assign(initAddress_send, {
          call: initAddress_call
        });
        let newOrder_send = async (order) => {
          let result = await this.send("newOrder", [[eth_wallet_1.Utils.toString(order.peerChain), eth_wallet_1.Utils.toString(order.inAmount), order.outToken, eth_wallet_1.Utils.toString(order.minOutAmount), order.to, eth_wallet_1.Utils.toString(order.expire)]]);
          return result;
        };
        let newOrder_call = async (order) => {
          let result = await this.call("newOrder", [[eth_wallet_1.Utils.toString(order.peerChain), eth_wallet_1.Utils.toString(order.inAmount), order.outToken, eth_wallet_1.Utils.toString(order.minOutAmount), order.to, eth_wallet_1.Utils.toString(order.expire)]]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.newOrder = Object.assign(newOrder_send, {
          call: newOrder_call
        });
        let newOrderFromRouterParams = (params) => [[eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)], params.trader];
        let newOrderFromRouter_send = async (params) => {
          let result = await this.send("newOrderFromRouter", newOrderFromRouterParams(params));
          return result;
        };
        let newOrderFromRouter_call = async (params) => {
          let result = await this.call("newOrderFromRouter", newOrderFromRouterParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.newOrderFromRouter = Object.assign(newOrderFromRouter_send, {
          call: newOrderFromRouter_call
        });
        let rebalancerDeposit_send = async (assetAmount) => {
          let result = await this.send("rebalancerDeposit", [eth_wallet_1.Utils.toString(assetAmount)]);
          return result;
        };
        let rebalancerDeposit_call = async (assetAmount) => {
          let result = await this.call("rebalancerDeposit", [eth_wallet_1.Utils.toString(assetAmount)]);
          return;
        };
        this.rebalancerDeposit = Object.assign(rebalancerDeposit_send, {
          call: rebalancerDeposit_call
        });
        let rebalancerWithdrawParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.toString(params.assetAmount), eth_wallet_1.Utils.toString(params.nonce)];
        let rebalancerWithdraw_send = async (params) => {
          let result = await this.send("rebalancerWithdraw", rebalancerWithdrawParams(params));
          return result;
        };
        let rebalancerWithdraw_call = async (params) => {
          let result = await this.call("rebalancerWithdraw", rebalancerWithdrawParams(params));
          return;
        };
        this.rebalancerWithdraw = Object.assign(rebalancerWithdraw_send, {
          call: rebalancerWithdraw_call
        });
        let removeLiquidityParams = (params) => [params.provider, eth_wallet_1.Utils.toString(params.assetAmount)];
        let removeLiquidity_send = async (params) => {
          let result = await this.send("removeLiquidity", removeLiquidityParams(params));
          return result;
        };
        let removeLiquidity_call = async (params) => {
          let result = await this.call("removeLiquidity", removeLiquidityParams(params));
          return;
        };
        this.removeLiquidity = Object.assign(removeLiquidity_send, {
          call: removeLiquidity_call
        });
        let removeLiquidityRequest_send = async (lpTokenAmount) => {
          let result = await this.send("removeLiquidityRequest", [eth_wallet_1.Utils.toString(lpTokenAmount)]);
          return result;
        };
        let removeLiquidityRequest_call = async (lpTokenAmount) => {
          let result = await this.call("removeLiquidityRequest", [eth_wallet_1.Utils.toString(lpTokenAmount)]);
          return;
        };
        this.removeLiquidityRequest = Object.assign(removeLiquidityRequest_send, {
          call: removeLiquidityRequest_call
        });
        let requestAmendOrderParams = (params) => [eth_wallet_1.Utils.toString(params.orderId), [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)]];
        let requestAmendOrder_send = async (params) => {
          let result = await this.send("requestAmendOrder", requestAmendOrderParams(params));
          return result;
        };
        let requestAmendOrder_call = async (params) => {
          let result = await this.call("requestAmendOrder", requestAmendOrderParams(params));
          return;
        };
        this.requestAmendOrder = Object.assign(requestAmendOrder_send, {
          call: requestAmendOrder_call
        });
        let requestCancelOrderParams = (params) => [eth_wallet_1.Utils.toString(params.sourceChainId), eth_wallet_1.Utils.toString(params.orderId)];
        let requestCancelOrder_send = async (params) => {
          let result = await this.send("requestCancelOrder", requestCancelOrderParams(params));
          return result;
        };
        let requestCancelOrder_call = async (params) => {
          let result = await this.call("requestCancelOrder", requestCancelOrderParams(params));
          return;
        };
        this.requestCancelOrder = Object.assign(requestCancelOrder_send, {
          call: requestCancelOrder_call
        });
        let swapParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), params.owner, eth_wallet_1.Utils.toString(params.orderId), eth_wallet_1.Utils.toString(params.amendment), eth_wallet_1.Utils.toString(params.protocolFee), params.pair, [eth_wallet_1.Utils.toString(params.order.peerChain), eth_wallet_1.Utils.toString(params.order.inAmount), params.order.outToken, eth_wallet_1.Utils.toString(params.order.minOutAmount), params.order.to, eth_wallet_1.Utils.toString(params.order.expire)]];
        let swap_send = async (params) => {
          let result = await this.send("swap", swapParams(params));
          return result;
        };
        let swap_call = async (params) => {
          let result = await this.call("swap", swapParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.swap = Object.assign(swap_send, {
          call: swap_call
        });
        let sync_send = async () => {
          let result = await this.send("sync");
          return result;
        };
        let sync_call = async () => {
          let result = await this.call("sync");
          return;
        };
        this.sync = Object.assign(sync_send, {
          call: sync_call
        });
        let transferParams = (params) => [params.recipient, eth_wallet_1.Utils.toString(params.amount)];
        let transfer_send = async (params) => {
          let result = await this.send("transfer", transferParams(params));
          return result;
        };
        let transfer_call = async (params) => {
          let result = await this.call("transfer", transferParams(params));
          return result;
        };
        this.transfer = Object.assign(transfer_send, {
          call: transfer_call
        });
        let transferFromParams = (params) => [params.sender, params.recipient, eth_wallet_1.Utils.toString(params.amount)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return result;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let updateConfigStore_send = async () => {
          let result = await this.send("updateConfigStore");
          return result;
        };
        let updateConfigStore_call = async () => {
          let result = await this.call("updateConfigStore");
          return;
        };
        this.updateConfigStore = Object.assign(updateConfigStore_send, {
          call: updateConfigStore_call
        });
        let updateTrollRegistry_send = async () => {
          let result = await this.send("updateTrollRegistry");
          return result;
        };
        let updateTrollRegistry_call = async () => {
          let result = await this.call("updateTrollRegistry");
          return;
        };
        this.updateTrollRegistry = Object.assign(updateTrollRegistry_send, {
          call: updateTrollRegistry_call
        });
        let voidOrderParams = (params) => [eth_wallet_1.Utils.stringToBytes(params.signatures), eth_wallet_1.Utils.stringToBytes32(params.orderId)];
        let voidOrder_send = async (params) => {
          let result = await this.send("voidOrder", voidOrderParams(params));
          return result;
        };
        let voidOrder_call = async (params) => {
          let result = await this.call("voidOrder", voidOrderParams(params));
          return;
        };
        this.voidOrder = Object.assign(voidOrder_send, {
          call: voidOrder_call
        });
        let withdrawUnexecutedOrder_send = async (orderId) => {
          let result = await this.send("withdrawUnexecutedOrder", [eth_wallet_1.Utils.toString(orderId)]);
          return result;
        };
        let withdrawUnexecutedOrder_call = async (orderId) => {
          let result = await this.call("withdrawUnexecutedOrder", [eth_wallet_1.Utils.toString(orderId)]);
          return;
        };
        this.withdrawUnexecutedOrder = Object.assign(withdrawUnexecutedOrder_send, {
          call: withdrawUnexecutedOrder_call
        });
        let withdrawlTrollFee_send = async (amount) => {
          let result = await this.send("withdrawlTrollFee", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let withdrawlTrollFee_call = async (amount) => {
          let result = await this.call("withdrawlTrollFee", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.withdrawlTrollFee = Object.assign(withdrawlTrollFee_send, {
          call: withdrawlTrollFee_call
        });
      }
    };
    exports.OSWAP_BridgeVault = OSWAP_BridgeVault;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/contracts/index.js
var require_contracts3 = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/contracts/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OSWAP_BridgeVault = exports.OSWAP_VotingRegistry = exports.OSWAP_VotingManager = exports.OSWAP_VotingContract = exports.OSWAP_SideChainVotingExecutor = exports.OSWAP_SideChainTrollRegistry = exports.OSWAP_RouterVaultWrapper = exports.OSWAP_MainChainVotingExecutor = exports.OSWAP_MainChainTrollRegistry = exports.OSWAP_ContractProxy = exports.OSWAP_ConfigStoreTradeVault = exports.OSWAP_ConfigStore = exports.OSWAP_ChainRegistryExecutor = exports.OSWAP_ChainRegistry = exports.OSWAP_BridgeVaultTrollRegistry = exports.MintableToken = exports.MOCK_TrollRegistry = exports.Authorization = exports.ERC721Holder = exports.ERC20 = exports.ERC1967Proxy = void 0;
    var ERC1967Proxy_1 = require_ERC1967Proxy();
    Object.defineProperty(exports, "ERC1967Proxy", { enumerable: true, get: function() {
      return ERC1967Proxy_1.ERC1967Proxy;
    } });
    var ERC20_1 = require_ERC202();
    Object.defineProperty(exports, "ERC20", { enumerable: true, get: function() {
      return ERC20_1.ERC20;
    } });
    var ERC721Holder_1 = require_ERC721Holder();
    Object.defineProperty(exports, "ERC721Holder", { enumerable: true, get: function() {
      return ERC721Holder_1.ERC721Holder;
    } });
    var Authorization_1 = require_Authorization();
    Object.defineProperty(exports, "Authorization", { enumerable: true, get: function() {
      return Authorization_1.Authorization;
    } });
    var MOCK_TrollRegistry_1 = require_MOCK_TrollRegistry();
    Object.defineProperty(exports, "MOCK_TrollRegistry", { enumerable: true, get: function() {
      return MOCK_TrollRegistry_1.MOCK_TrollRegistry;
    } });
    var MintableToken_1 = require_MintableToken();
    Object.defineProperty(exports, "MintableToken", { enumerable: true, get: function() {
      return MintableToken_1.MintableToken;
    } });
    var OSWAP_BridgeVaultTrollRegistry_1 = require_OSWAP_BridgeVaultTrollRegistry();
    Object.defineProperty(exports, "OSWAP_BridgeVaultTrollRegistry", { enumerable: true, get: function() {
      return OSWAP_BridgeVaultTrollRegistry_1.OSWAP_BridgeVaultTrollRegistry;
    } });
    var OSWAP_ChainRegistry_1 = require_OSWAP_ChainRegistry();
    Object.defineProperty(exports, "OSWAP_ChainRegistry", { enumerable: true, get: function() {
      return OSWAP_ChainRegistry_1.OSWAP_ChainRegistry;
    } });
    var OSWAP_ChainRegistryExecutor_1 = require_OSWAP_ChainRegistryExecutor();
    Object.defineProperty(exports, "OSWAP_ChainRegistryExecutor", { enumerable: true, get: function() {
      return OSWAP_ChainRegistryExecutor_1.OSWAP_ChainRegistryExecutor;
    } });
    var OSWAP_ConfigStore_1 = require_OSWAP_ConfigStore();
    Object.defineProperty(exports, "OSWAP_ConfigStore", { enumerable: true, get: function() {
      return OSWAP_ConfigStore_1.OSWAP_ConfigStore;
    } });
    var OSWAP_ConfigStoreTradeVault_1 = require_OSWAP_ConfigStoreTradeVault();
    Object.defineProperty(exports, "OSWAP_ConfigStoreTradeVault", { enumerable: true, get: function() {
      return OSWAP_ConfigStoreTradeVault_1.OSWAP_ConfigStoreTradeVault;
    } });
    var OSWAP_ContractProxy_1 = require_OSWAP_ContractProxy();
    Object.defineProperty(exports, "OSWAP_ContractProxy", { enumerable: true, get: function() {
      return OSWAP_ContractProxy_1.OSWAP_ContractProxy;
    } });
    var OSWAP_MainChainTrollRegistry_1 = require_OSWAP_MainChainTrollRegistry();
    Object.defineProperty(exports, "OSWAP_MainChainTrollRegistry", { enumerable: true, get: function() {
      return OSWAP_MainChainTrollRegistry_1.OSWAP_MainChainTrollRegistry;
    } });
    var OSWAP_MainChainVotingExecutor_1 = require_OSWAP_MainChainVotingExecutor();
    Object.defineProperty(exports, "OSWAP_MainChainVotingExecutor", { enumerable: true, get: function() {
      return OSWAP_MainChainVotingExecutor_1.OSWAP_MainChainVotingExecutor;
    } });
    var OSWAP_RouterVaultWrapper_1 = require_OSWAP_RouterVaultWrapper();
    Object.defineProperty(exports, "OSWAP_RouterVaultWrapper", { enumerable: true, get: function() {
      return OSWAP_RouterVaultWrapper_1.OSWAP_RouterVaultWrapper;
    } });
    var OSWAP_SideChainTrollRegistry_1 = require_OSWAP_SideChainTrollRegistry();
    Object.defineProperty(exports, "OSWAP_SideChainTrollRegistry", { enumerable: true, get: function() {
      return OSWAP_SideChainTrollRegistry_1.OSWAP_SideChainTrollRegistry;
    } });
    var OSWAP_SideChainVotingExecutor_1 = require_OSWAP_SideChainVotingExecutor();
    Object.defineProperty(exports, "OSWAP_SideChainVotingExecutor", { enumerable: true, get: function() {
      return OSWAP_SideChainVotingExecutor_1.OSWAP_SideChainVotingExecutor;
    } });
    var OSWAP_VotingContract_1 = require_OSWAP_VotingContract();
    Object.defineProperty(exports, "OSWAP_VotingContract", { enumerable: true, get: function() {
      return OSWAP_VotingContract_1.OSWAP_VotingContract;
    } });
    var OSWAP_VotingManager_1 = require_OSWAP_VotingManager();
    Object.defineProperty(exports, "OSWAP_VotingManager", { enumerable: true, get: function() {
      return OSWAP_VotingManager_1.OSWAP_VotingManager;
    } });
    var OSWAP_VotingRegistry_1 = require_OSWAP_VotingRegistry();
    Object.defineProperty(exports, "OSWAP_VotingRegistry", { enumerable: true, get: function() {
      return OSWAP_VotingRegistry_1.OSWAP_VotingRegistry;
    } });
    var OSWAP_BridgeVault_1 = require_OSWAP_BridgeVault();
    Object.defineProperty(exports, "OSWAP_BridgeVault", { enumerable: true, get: function() {
      return OSWAP_BridgeVault_1.OSWAP_BridgeVault;
    } });
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/deploy/deployMainChain.js
var require_deployMainChain = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/deploy/deployMainChain.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deploy = exports.DefaultDeploymentOptions = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Contracts3 = __importStar(require_contracts3());
    exports.DefaultDeploymentOptions = {
      govToken: "",
      votingManager: "",
      superTrollNft: [],
      generalTrollNft: [],
      votingProfiles: {
        name: ["vote"],
        minExeDelay: [1],
        minVoteDuration: [0],
        maxVoteDuration: [1209600],
        minGovTokenToCreateVote: [eth_wallet_1.Utils.toDecimals(1e5)],
        minQuorum: [eth_wallet_1.Utils.toDecimals(2e5)]
      },
      vetoAdmin: eth_wallet_1.Utils.nullAddress
    };
    async function deploy(wallet, options) {
      let result = {};
      options = options || exports.DefaultDeploymentOptions;
      let trollRegistry = new Contracts3.OSWAP_MainChainTrollRegistry(wallet);
      await trollRegistry.deploy({
        govToken: options.govToken,
        superTrollNft: options.superTrollNft,
        generalTrollNft: options.generalTrollNft
      });
      result.trollRegistry = trollRegistry.address;
      let votingManager;
      if (options.votingManager) {
        votingManager = new Contracts3.OSWAP_VotingManager(wallet, options.votingManager);
      } else {
        votingManager = new Contracts3.OSWAP_VotingManager(wallet);
        result.votingManager = await votingManager.deploy({
          trollRegistry: trollRegistry.address,
          names: options.votingProfiles.name,
          minExeDelay: options.votingProfiles.minExeDelay,
          minVoteDuration: options.votingProfiles.minVoteDuration,
          maxVoteDuration: options.votingProfiles.maxVoteDuration,
          minGovTokenToCreateVote: options.votingProfiles.minGovTokenToCreateVote,
          minQuorum: options.votingProfiles.minQuorum
        });
        await votingManager.initAdmin(options.vetoAdmin);
      }
      await trollRegistry.initAddress(votingManager.address);
      let votingRegistry = new Contracts3.OSWAP_VotingRegistry(wallet);
      result.votingRegistry = await votingRegistry.deploy(votingManager.address);
      await votingManager.setVotingRegister(votingRegistry.address);
      let votingExecutor = new Contracts3.OSWAP_MainChainVotingExecutor(wallet);
      result.votingExecutor = await votingExecutor.deploy(votingManager.address);
      let chainRegistry = new Contracts3.OSWAP_ChainRegistry(wallet);
      result.chainRegistry = await chainRegistry.deploy(votingManager.address);
      await votingExecutor.initAddress(chainRegistry.address);
      let chainRegistryExecutor = new Contracts3.OSWAP_ChainRegistryExecutor(wallet);
      result.chainRegistryExecutor = await chainRegistryExecutor.deploy({ chainRegistry: chainRegistry.address, votingManager: votingManager.address });
      await votingManager.initVotingExecutor([votingExecutor.address, chainRegistryExecutor.address]);
      console.log(result);
      return result;
    }
    exports.deploy = deploy;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/deploy/deploySideChain.js
var require_deploySideChain = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/deploy/deploySideChain.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deployStakingOnly = exports.deploy = exports.DefaultDeploymentOptions = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Contracts3 = __importStar(require_contracts3());
    exports.DefaultDeploymentOptions = {
      govToken: eth_wallet_1.Utils.nullAddress,
      swapPolicy: eth_wallet_1.Utils.nullAddress,
      router: eth_wallet_1.Utils.nullAddress,
      superTrollMinCount: 2,
      generalTrollMinCount: 1,
      transactionsGap: 0,
      configStore: eth_wallet_1.Utils.nullAddress,
      vaultTokens: [],
      bridgeVaults: {},
      baseFee: {},
      transactionFee: eth_wallet_1.Utils.toDecimals(1e-3),
      lpWithdrawlDelay: 24 * 60 * 60,
      rebalancer: eth_wallet_1.Utils.nullAddress,
      feeTo: eth_wallet_1.Utils.nullAddress
    };
    async function deploy(wallet, options) {
      let result = { vaultRegistry: {}, bridgeVault: {} };
      options = options || exports.DefaultDeploymentOptions;
      let wrapper = new Contracts3.OSWAP_RouterVaultWrapper(wallet);
      result.wrapper = await wrapper.deploy();
      let configStore = new Contracts3.OSWAP_ConfigStore(wallet);
      await configStore.deploy({
        govToken: options.govToken,
        swapPolicy: options.swapPolicy,
        lpWithdrawlDelay: options.lpWithdrawlDelay,
        transactionsGap: options.transactionsGap,
        superTrollMinCount: options.superTrollMinCount,
        generalTrollMinCount: options.generalTrollMinCount,
        transactionFee: options.transactionFee,
        router: options.router,
        rebalancer: options.rebalancer,
        feeTo: options.feeTo,
        wrapper: result.wrapper,
        asset: Object.keys(options.baseFee),
        baseFee: Object.values(options.baseFee)
      });
      result.configStore = configStore.address;
      await wrapper.initAddress(configStore.address);
      let trollRegistry = new Contracts3.OSWAP_SideChainTrollRegistry(wallet);
      await trollRegistry.deploy(configStore.address);
      result.trollRegistry = trollRegistry.address;
      if (await configStore.votingExecutorManager() == eth_wallet_1.Utils.nullAddress)
        await configStore.initAddress(result.trollRegistry);
      let votingExecutor = new Contracts3.OSWAP_SideChainVotingExecutor(wallet);
      await votingExecutor.deploy(trollRegistry.address);
      result.votingExecutor = votingExecutor.address;
      for (let i = 0; i < options.vaultTokens.length; i++) {
        let vaultToken = options.vaultTokens[i];
        let vaultRegistry = new Contracts3.OSWAP_BridgeVaultTrollRegistry(wallet);
        result.vaultRegistry[vaultToken] = await vaultRegistry.deploy(trollRegistry.address);
        let bridgeVaultAddress;
        let bridgeVault;
        if (options.bridgeVaults && options.bridgeVaults[vaultToken]) {
          bridgeVaultAddress = options.bridgeVaults[vaultToken];
          bridgeVault = new Contracts3.OSWAP_BridgeVault(wallet, bridgeVaultAddress);
        } else {
          bridgeVault = new Contracts3.OSWAP_BridgeVault(wallet);
          await bridgeVault.deploy({
            vaultRegistry: vaultRegistry.address,
            configStore: configStore.address,
            asset: vaultToken
          });
          bridgeVaultAddress = bridgeVault.address;
        }
        await vaultRegistry.initAddress(bridgeVault.address);
        result.bridgeVault[vaultToken] = bridgeVaultAddress;
      }
      await trollRegistry.initAddress({
        votingExecutor: votingExecutor.address,
        tokens: Object.keys(result.bridgeVault),
        vaults: Object.values(result.bridgeVault)
      });
      console.log(result);
      return result;
    }
    exports.deploy = deploy;
    async function deployStakingOnly(wallet, options) {
      let result = { vaultRegistry: {}, bridgeVault: {} };
      options = options || exports.DefaultDeploymentOptions;
      let configStore = new Contracts3.OSWAP_ConfigStore(wallet);
      if (options.configStore && options.configStore != eth_wallet_1.Utils.nullAddress) {
        configStore.at(options.configStore);
      } else {
        await configStore.deploy({
          govToken: options.govToken,
          swapPolicy: options.swapPolicy,
          lpWithdrawlDelay: options.lpWithdrawlDelay,
          transactionsGap: options.transactionsGap,
          superTrollMinCount: options.superTrollMinCount,
          generalTrollMinCount: options.generalTrollMinCount,
          transactionFee: options.transactionFee,
          router: options.router,
          rebalancer: options.rebalancer,
          feeTo: options.feeTo,
          wrapper: eth_wallet_1.Utils.nullAddress,
          asset: Object.keys(options.baseFee),
          baseFee: Object.values(options.baseFee)
        });
      }
      result.configStore = configStore.address;
      for (let i = 0; i < options.vaultTokens.length; i++) {
        let vaultToken = options.vaultTokens[i];
        let bridgeVault = new Contracts3.OSWAP_BridgeVault(wallet);
        if (options.bridgeVaults && options.bridgeVaults[vaultToken] && options.bridgeVaults[vaultToken] != eth_wallet_1.Utils.nullAddress) {
          bridgeVault.at(options.bridgeVaults[vaultToken]);
        } else {
          await bridgeVault.deploy({
            vaultRegistry: eth_wallet_1.Utils.nullAddress,
            configStore: configStore.address,
            asset: vaultToken
          });
        }
        result.bridgeVault[vaultToken] = bridgeVault.address;
      }
      console.log(result);
      return result;
    }
    exports.deployStakingOnly = deployStakingOnly;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/deploy/deploy.js
var require_deploy = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/deploy/deploy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initChainRegistryByAddress = exports.initChainRegistry = exports.deploy = void 0;
    var deployMainChain_1 = require_deployMainChain();
    var deploySideChain_1 = require_deploySideChain();
    var contracts_1 = require_contracts3();
    async function deploy(wallets, deployOptions, openSwapContracts, result) {
      let contracts = result && result.mainChain;
      if (!contracts) {
        contracts = await deployMainChain_1.deploy(wallets[deployOptions.mainChain.chainId], Object.assign(deployMainChain_1.DefaultDeploymentOptions, {
          govToken: openSwapContracts.mainChain.openSwap.address,
          superTrollMinCount: deployOptions.mainChain.superTrollMinCount,
          superTrollNft: deployOptions.mainChain.superTrollNft,
          generalTrollNft: deployOptions.mainChain.generalTrollNft,
          minStakePeriod: deployOptions.mainChain.minStakePeriod,
          rebalancer: deployOptions.mainChain.rebalancer,
          lpWithdrawlDelay: deployOptions.lpWithdrawlDelay
        }));
      }
      let sideChain;
      sideChain = {};
      for (let i = 0; i < deployOptions.sideChain.length; i++) {
        let chainId = deployOptions.sideChain[i].chainId;
        let chainName = deployOptions.sideChain[i].chainName;
        let contracts2 = result && result.sideChain[chainName];
        if (!contracts2) {
          contracts2 = await deploySideChain_1.deploy(wallets[chainId], Object.assign(deploySideChain_1.DefaultDeploymentOptions, {
            govToken: openSwapContracts.sideChain[chainName].openSwap.address,
            router: openSwapContracts.sideChain[chainName].hybridRouter.address,
            superTrollMinCount: deployOptions.sideChain[i].superTrollMinCount,
            vaultTokens: deployOptions.sideChain[i].vaultTokens,
            bridgeVaults: deployOptions.sideChain[i].bridgeVaults,
            rebalancer: deployOptions.sideChain[i].rebalancer,
            lpWithdrawlDelay: deployOptions.lpWithdrawlDelay,
            baseFee: deployOptions.sideChain[i].baseFee
          }));
        }
        let registry = new contracts_1.OSWAP_SideChainTrollRegistry(wallets[chainId], contracts2.trollRegistry);
        if (!await registry.isPermitted(wallets[chainId].defaultAccount))
          await registry.permit(wallets[chainId].defaultAccount);
        sideChain[chainId] = contracts2;
      }
      return { mainChain: contracts, sideChain };
    }
    exports.deploy = deploy;
    async function initChainRegistry(crossChain, pairing) {
      let mainChain = crossChain.crossChainContracts.mainChain;
      let sideChain = crossChain.crossChainContracts.sideChain;
      let govTokens = [];
      let configStoreAddresses = [];
      let contractAddresses = [];
      for (let _chainId in sideChain) {
        let primaryConfigStore = new contracts_1.OSWAP_ConfigStore(crossChain.wallets[crossChain.chains.mainChain]);
        let chainId = parseInt(_chainId);
        let govToken = crossChain.oswap[chainId].address;
        let asset = await sideChain[chainId].trollRegistry.allVaultToken();
        let configStore = sideChain[chainId].configStore;
        await primaryConfigStore.deploy({
          govToken,
          swapPolicy: await configStore.swapPolicy(),
          lpWithdrawlDelay: await configStore.lpWithdrawlDelay(),
          transactionsGap: await configStore.transactionsGap(),
          superTrollMinCount: await configStore.superTrollMinCount(),
          generalTrollMinCount: await configStore.generalTrollMinCount(),
          transactionFee: await configStore.transactionsGap(),
          router: await configStore.router(),
          rebalancer: await configStore.rebalancer(),
          feeTo: await configStore.feeTo(),
          wrapper: sideChain[chainId].wrapper.address,
          asset,
          baseFee: await Promise.all(asset.map((e) => configStore.baseFee(e)))
        });
        govTokens.push(govToken);
        configStoreAddresses.push(primaryConfigStore.address);
        contractAddresses.push([
          sideChain[chainId].trollRegistry.address,
          sideChain[chainId].wrapper.address
        ]);
        await primaryConfigStore.initAddress(mainChain.votingManager.address);
      }
      let mainChainContractNames = ["TrollRegistry"];
      let mainChainContractAddress = [mainChain.trollRegistry.address];
      let contractNames = ["TrollRegistry", "RouterWrapper"];
      let tokenNames = ["USDT", "OSWAP"];
      let vaults = [];
      for (let i = 0; i < pairing.length; i++) {
        let vaults2 = [];
        for (let chainId in sideChain) {
          let asset = pairing[i][chainId];
          let vault = {
            token: asset,
            vaultRegistry: sideChain[chainId].vaultRegistry[asset].address,
            bridgeVault: sideChain[chainId].bridgeVault[asset].address
          };
          vaults2.push(vault);
        }
        vaults.push(vaults2);
      }
      await mainChain.chainRegistry.init({
        chainId: Object.keys(sideChain).map((e) => parseInt(e)),
        status: [1, 1],
        govToken: govTokens,
        configStore: configStoreAddresses,
        mainChainContractNames,
        mainChainContractAddress,
        contractNames,
        address: contractAddresses,
        tokenNames,
        vault: vaults
      });
    }
    exports.initChainRegistry = initChainRegistry;
    async function initChainRegistryByAddress(deploymentResult, wallets, networks, pairing) {
      let mainChain = deploymentResult[networks[0].chainName].crossChainBridgeMainChain;
      let govTokens = [];
      let configStoreAddresses = [];
      let contractAddresses = [];
      for (let i = 0; i < networks.length; i++) {
        let sideChain = deploymentResult[networks[i].chainName].crossChainBridgeSideChain;
        let primaryConfigStore = new contracts_1.OSWAP_ConfigStore(wallets[networks[0].chainId]);
        let chainId = networks[i].chainId;
        let govToken = deploymentResult[networks[i].chainName].openswap.oswap;
        let asset = Object.keys(sideChain.vaultRegistry);
        let configStore = new contracts_1.OSWAP_ConfigStore(wallets[networks[i].chainId], sideChain.configStore);
        await primaryConfigStore.deploy({
          govToken,
          swapPolicy: await configStore.swapPolicy(),
          lpWithdrawlDelay: await configStore.lpWithdrawlDelay(),
          transactionsGap: await configStore.transactionsGap(),
          superTrollMinCount: await configStore.superTrollMinCount(),
          generalTrollMinCount: await configStore.generalTrollMinCount(),
          transactionFee: await configStore.transactionsGap(),
          router: await configStore.router(),
          rebalancer: await configStore.rebalancer(),
          feeTo: await configStore.feeTo(),
          wrapper: sideChain.wrapper,
          asset,
          baseFee: await Promise.all(asset.map((e) => configStore.baseFee(e)))
        });
        govTokens.push(govToken);
        configStoreAddresses.push(primaryConfigStore.address);
        contractAddresses.push([
          sideChain.trollRegistry,
          sideChain.wrapper
        ]);
        await primaryConfigStore.initAddress(mainChain.votingManager);
      }
      let mainChainContractNames = ["TrollRegistry"];
      let mainChainContractAddress = [mainChain.trollRegistry];
      let contractNames = ["TrollRegistry", "RouterWrapper"];
      let tokenNames = ["USDT", "OSWAP"];
      let vaults = [];
      if (pairing) {
        for (let i = 0; i < pairing.length; i++) {
          let vaults2 = [];
          for (let j = 0; j < networks.length; j++) {
            let sideChain = deploymentResult[networks[j].chainName].crossChainBridgeSideChain;
            let chainId = networks[j].chainId;
            let asset = pairing[i][chainId];
            let vault = {
              token: asset,
              vaultRegistry: sideChain.vaultRegistry[asset],
              bridgeVault: sideChain.bridgeVault[asset]
            };
            vaults2.push(vault);
          }
          vaults.push(vaults2);
        }
      } else {
        for (let j = 0; j < networks.length; j++) {
          let chainName = networks[j].chainName;
          let sideChain = deploymentResult[chainName].crossChainBridgeSideChain;
          let tokens = Object.keys(sideChain.bridgeVault);
          for (let i = 0; i < tokens.length; i++) {
            if (!vaults[i])
              vaults[i] = [];
            let asset = tokens[i];
            let vault = {
              token: asset,
              vaultRegistry: sideChain.vaultRegistry[asset],
              bridgeVault: sideChain.bridgeVault[asset]
            };
            vaults[i][j] = vault;
          }
        }
      }
      await new contracts_1.OSWAP_ChainRegistry(wallets[networks[0].chainId], mainChain.chainRegistry).init({
        chainId: networks.map((e) => e.chainId),
        status: networks.map((e) => 1),
        govToken: govTokens,
        configStore: configStoreAddresses,
        mainChainContractNames,
        mainChainContractAddress,
        contractNames,
        address: contractAddresses,
        tokenNames,
        vault: vaults
      });
    }
    exports.initChainRegistryByAddress = initChainRegistryByAddress;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/sideChainVoting.js
var require_sideChainVoting = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/sideChainVoting.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SideChainVoting = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var SideChainVoting = class {
      constructor(wallet, votingExecutor) {
        this.wallet = wallet;
        this.votingExecutor = votingExecutor;
      }
      setRouter(address) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfigAddress"),
          eth_wallet_1.Utils.stringToBytes32("router"),
          eth_wallet_1.Utils.addressToBytes32Right(address, true)
        ];
      }
      setRebalancer(address) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfigAddress"),
          eth_wallet_1.Utils.stringToBytes32("rebalancer"),
          eth_wallet_1.Utils.addressToBytes32Right(address, true)
        ];
      }
      setFeeTo(address) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfigAddress"),
          eth_wallet_1.Utils.stringToBytes32("feeTo"),
          eth_wallet_1.Utils.addressToBytes32Right(address, true)
        ];
      }
      setTransactionsGap(value) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig"),
          eth_wallet_1.Utils.stringToBytes32("transactionsGap"),
          eth_wallet_1.Utils.numberToBytes32(value, true)
        ];
      }
      setTransactionFee(value) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig"),
          eth_wallet_1.Utils.stringToBytes32("transactionFee"),
          eth_wallet_1.Utils.numberToBytes32(value, true)
        ];
      }
      setLpWithdrawlDelay(value) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig"),
          eth_wallet_1.Utils.stringToBytes32("lpWithdrawlDelay"),
          eth_wallet_1.Utils.numberToBytes32(value, true)
        ];
      }
      setGeneralTrollMinCount(count) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig"),
          eth_wallet_1.Utils.stringToBytes32("generalTrollMinCount"),
          eth_wallet_1.Utils.numberToBytes32(count, true)
        ];
      }
      setSuperTrollMinCount(count) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig"),
          eth_wallet_1.Utils.stringToBytes32("superTrollMinCount"),
          eth_wallet_1.Utils.numberToBytes32(count, true)
        ];
      }
      setOracle(params) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig2"),
          eth_wallet_1.Utils.stringToBytes32("oracle"),
          eth_wallet_1.Utils.addressToBytes32Right(params.asset, true),
          eth_wallet_1.Utils.addressToBytes32Right(params.oracle, true)
        ];
      }
      setConfigStore(address) {
        return [
          eth_wallet_1.Utils.stringToBytes32("upgradeConfigStore"),
          eth_wallet_1.Utils.addressToBytes32Right(address, true)
        ];
      }
      setIsApprovedProxy(wrapper, isApprovedProxy) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig2"),
          eth_wallet_1.Utils.stringToBytes32("isApprovedProxy"),
          eth_wallet_1.Utils.addressToBytes32Right(wrapper, true),
          eth_wallet_1.Utils.numberToBytes32(isApprovedProxy ? 1 : 0, true)
        ];
      }
      setBaseFee(asset, baseFee) {
        return [
          eth_wallet_1.Utils.stringToBytes32("setConfig2"),
          eth_wallet_1.Utils.stringToBytes32("baseFee"),
          eth_wallet_1.Utils.addressToBytes32Right(asset, true),
          eth_wallet_1.Utils.numberToBytes32(baseFee, true)
        ];
      }
      async getHash(params) {
        let hash = this.wallet.web3.utils.soliditySha3({ t: "uint", v: await this.wallet.getChainId() }, { t: "address", v: this.votingExecutor.address }, { t: "bytes32[]", v: params.params }, { t: "uint", v: "0x" + params.nonce.toString(16) });
        return hash;
      }
      static parseExecuteEventParams(params) {
        let nChain = new eth_wallet_1.BigNumber(params[2]).toNumber();
        let chains = [];
        for (let i = 0; i < nChain; i++) {
          chains.push(new eth_wallet_1.BigNumber(params[3 + i]).toNumber());
        }
        params = [params[1], ...params.slice(3 + nChain)];
        return { chains, params };
      }
      async execute(params) {
        return this.votingExecutor.execute(params);
      }
    };
    exports.SideChainVoting = SideChainVoting;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/mainChainVoting.js
var require_mainChainVoting = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/mainChainVoting.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MainChainVoting = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Contracts3 = __importStar(require_contracts3());
    var MainChainVoting = class {
      constructor(wallet, votingManager, votingRegistry, votingExecutor) {
        this.wallet = wallet;
        this.votingManager = votingManager;
        this.votingRegistry = votingRegistry;
        this.votingExecutor = votingExecutor;
      }
      async setTransactionsGap(params) {
        return await this.newVote(params.delay, "setConfig", params.quorum, [eth_wallet_1.Utils.numberToBytes32(params.chainId.length, true), ...params.chainId.map((e) => eth_wallet_1.Utils.numberToBytes32(e, true)), eth_wallet_1.Utils.stringToBytes32("transactionsGap"), eth_wallet_1.Utils.numberToBytes32(params.count, true)]);
      }
      async setSuperTrollMinCount(params) {
        return await this.newVote(params.delay, "setConfig", params.quorum, [eth_wallet_1.Utils.numberToBytes32(params.chainId.length, true), ...params.chainId.map((e) => eth_wallet_1.Utils.numberToBytes32(e, true)), eth_wallet_1.Utils.stringToBytes32("superTrollMinCount"), eth_wallet_1.Utils.numberToBytes32(params.count, true)]);
      }
      async setGeneralTrollMinCount(params) {
        return await this.newVote(params.delay, "setConfig", params.quorum, [eth_wallet_1.Utils.numberToBytes32(params.chainId.length, true), ...params.chainId.map((e) => eth_wallet_1.Utils.numberToBytes32(e, true)), eth_wallet_1.Utils.stringToBytes32("generalTrollMinCount"), eth_wallet_1.Utils.numberToBytes32(params.count, true)]);
      }
      async setRouter(params) {
        return await this.newVote(params.delay, "setConfigAddress", params.quorum, [eth_wallet_1.Utils.numberToBytes32(1, true), eth_wallet_1.Utils.numberToBytes32(params.chainId, true), eth_wallet_1.Utils.stringToBytes32("router"), eth_wallet_1.Utils.addressToBytes32Right(params.router, true)]);
      }
      async shutdown(params) {
        return await this.newVote(params.delay, "shutdown", params.quorum, []);
      }
      async resume(params) {
        return await this.newVote(params.delay, "resume", params.quorum, []);
      }
      async newVote(delay, type, quorum, param, executor) {
        let now = (await this.wallet.web3.eth.getBlock("latest")).timestamp;
        let votingConfig = await this.votingManager.votingConfigs(eth_wallet_1.Utils.stringToBytes32("vote"));
        if (!quorum)
          quorum = votingConfig.minQuorum;
        else {
          quorum = eth_wallet_1.Utils.toDecimals(quorum);
          if (quorum.lt(votingConfig.minQuorum)) {
            throw new Error("quorum too small");
          }
        }
        let threshold = eth_wallet_1.Utils.toDecimals("0.5");
        let voteEndTime = now + votingConfig.minVoteDuration.toNumber() + delay;
        let exeDelay = votingConfig.minExeDelay.toNumber();
        let executeParam = param;
        let name;
        if (type.startsWith("setConfig")) {
          executeParam = [eth_wallet_1.Utils.stringToBytes32("sideChainConfig"), eth_wallet_1.Utils.stringToBytes32(type)].concat(executeParam);
          name = "sideChainConfig_" + type;
        } else {
          executeParam = [eth_wallet_1.Utils.stringToBytes32(type)].concat(param);
          name = type;
        }
        let receipt = await this.votingRegistry.newVote({
          executor: executor || this.votingExecutor.address,
          name: eth_wallet_1.Utils.stringToBytes32(name),
          options: [eth_wallet_1.Utils.stringToBytes32("Y"), eth_wallet_1.Utils.stringToBytes32("N")],
          quorum,
          threshold,
          voteEndTime,
          executeDelay: exeDelay,
          executeParam
        });
        let event = this.votingManager.parseNewVoteEvent(receipt)[0];
        let voteAddr = event.vote;
        console.log("voting address " + voteAddr);
        let voting = new Contracts3.OSWAP_VotingContract(this.wallet, voteAddr);
        return voting;
      }
    };
    exports.MainChainVoting = MainChainVoting;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/wrappers/bridgeVault.js
var require_bridgeVault = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/wrappers/bridgeVault.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BridgeVault = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var contracts_1 = require_contracts3();
    var BridgeVault = class {
      constructor(wallet, address, tokenList) {
        this.address = address;
        this._bridgeVault = new contracts_1.OSWAP_BridgeVault(wallet, address);
        this.__tokenList = tokenList;
      }
      async deploy(params) {
        this.address = await this._bridgeVault.deploy(params);
        return this.address;
      }
      toNumber(f) {
        return async () => (await f).toNumber();
      }
      getTokenDecimals(chainId, tokenAddress) {
        if (tokenAddress == eth_wallet_1.Utils.nullAddress) {
          return 18;
        } else {
          let token = this.__tokenList[chainId].find((e) => e.address == tokenAddress);
          if (!token) {
            throw new Error("unknown token");
          }
          return token.decimals;
        }
      }
      async addLiquidity(amount) {
        let assetDecimals = await (await this.asset).decimals;
        amount = eth_wallet_1.Utils.toDecimals(amount, assetDecimals);
        let receipt = await this._bridgeVault.addLiquidity(amount);
        let event = this._bridgeVault.parseAddLiquidityEvent(receipt)[0];
        event.amount = eth_wallet_1.Utils.fromDecimals(event.amount, assetDecimals);
        event.mintAmount = eth_wallet_1.Utils.fromDecimals(event.mintAmount);
        event.newBalance = eth_wallet_1.Utils.fromDecimals(event.newBalance);
        event.newLpAssetBalance = eth_wallet_1.Utils.fromDecimals(event.newLpAssetBalance, assetDecimals);
        let mintEvent = this._bridgeVault.parseTransferEvent(receipt)[0];
        mintEvent.value = eth_wallet_1.Utils.fromDecimals(mintEvent.value);
        let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        assetTransferEvent.value = eth_wallet_1.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
        return { addLiquidityEvent: event, mintEvent, assetTransferEvent };
      }
      async allowance(params) {
        return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.allowance(params));
      }
      async approve(params) {
        let clone = Object.assign({}, params);
        clone.amount = eth_wallet_1.Utils.toDecimals(clone.amount);
        let receipt = await this._bridgeVault.approve(clone);
        let event = this._bridgeVault.parseApprovalEvent(receipt)[0];
        event.value = eth_wallet_1.Utils.fromDecimals(event.value);
        return event;
      }
      get asset() {
        return new Promise(async (resolve, reject) => {
          try {
            if (!this.__asset)
              this.__asset = new eth_wallet_1.Erc20(this._bridgeVault.wallet, await this._bridgeVault.asset());
            resolve(this.__asset);
          } catch (e) {
            reject(e);
          }
        });
      }
      get assetDecimalsScale() {
        return (async () => (await this._bridgeVault.assetDecimalsScale()).toNumber())();
      }
      async assetPriceAgainstGovToken(params) {
        return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.assetPriceAgainstGovToken(params));
      }
      async balanceOf(account) {
        return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.balanceOf(account));
      }
      async cancelOrder(params) {
        let clone = Object.assign({}, params);
        let assetDecimals = await (await this.asset).decimals;
        clone.protocolFee = eth_wallet_1.Utils.toDecimals(clone.protocolFee, assetDecimals);
        let receipt = await this._bridgeVault.cancelOrder(clone);
        let event = this._bridgeVault.parseOrderCanceledEvent(receipt)[0];
        event.newProtocolFeeBalance = eth_wallet_1.Utils.fromDecimals(event.newProtocolFeeBalance, assetDecimals);
        event.newImbalance = eth_wallet_1.Utils.fromDecimals(event.newImbalance, assetDecimals);
        return event;
      }
      get configStore() {
        return this._bridgeVault.configStore();
      }
      get decimals() {
        return new Promise(async (resolve, reject) => {
          try {
            if (!this.__decimals)
              this.__decimals = (await this._bridgeVault.decimals()).toNumber();
            resolve(this.__decimals);
          } catch (e) {
            reject(e);
          }
        });
      }
      async decreaseAllowance(params) {
        let clone = Object.assign({}, params);
        clone.subtractedValue = eth_wallet_1.Utils.toDecimals(clone.subtractedValue);
        let receipt = await this._bridgeVault.decreaseAllowance(clone);
        let event = this._bridgeVault.parseApprovalEvent(receipt)[0];
        event.value = eth_wallet_1.Utils.fromDecimals(event.value);
        return event;
      }
      get getChainId() {
        return (async () => (await this._bridgeVault.getChainId()).toNumber())();
      }
      async getOrders(params) {
        let assetDecimals = await (await this.asset).decimals;
        let orders = await this._bridgeVault.getOrders(params);
        orders.forEach((order) => {
          order.inAmount = eth_wallet_1.Utils.fromDecimals(order.inAmount, assetDecimals);
          let outTokenDecimals = this.getTokenDecimals(order.peerChain.toNumber(), order.outToken);
          order.minOutAmount = eth_wallet_1.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
        });
        return orders;
      }
      get govToken() {
        return new Promise(async (resolve, reject) => {
          try {
            if (!this.__govToken)
              this.__govToken = new eth_wallet_1.Erc20(this._bridgeVault.wallet, await this._bridgeVault.govToken());
            resolve(this.__govToken);
          } catch (e) {
            reject(e);
          }
        });
      }
      async hashCancelOrderParams(params) {
        return this._bridgeVault.hashCancelOrderParams(params);
      }
      async hashOrder(params) {
        return this._bridgeVault.hashOrder(params);
      }
      async hashSwapParams(params) {
        let clone = Object.assign({}, params);
        clone.order = Object.assign({}, clone.order);
        let assetDecimals = await (await this.asset).decimals;
        clone.order.inAmount = eth_wallet_1.Utils.toDecimals(clone.order.inAmount, assetDecimals);
        let chainId = typeof clone.order.peerChain === "number" ? clone.order.peerChain : clone.order.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(chainId, clone.order.outToken);
        clone.order.minOutAmount = eth_wallet_1.Utils.toDecimals(clone.order.minOutAmount, outTokenDecimals);
        return this._bridgeVault.hashSwapParams(clone);
      }
      async hashVoidOrderParams(orderId) {
        return this._bridgeVault.hashVoidOrderParams(orderId);
      }
      async hashWithdrawParams(params) {
        let clone = Object.assign({}, params);
        let assetDecimals = await (await this.asset).decimals;
        clone.amount = eth_wallet_1.Utils.toDecimals(clone.amount, assetDecimals);
        return this._bridgeVault.hashWithdrawParams(clone);
      }
      get imbalance() {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.imbalance(), await (await this.asset).decimals);
        })();
      }
      async increaseAllowance(params) {
        let clone = Object.assign({}, params);
        clone.addedValue = eth_wallet_1.Utils.toDecimals(clone.addedValue);
        let receipt = await this._bridgeVault.increaseAllowance(clone);
        let event = this._bridgeVault.parseApprovalEvent(receipt)[0];
        event.value = eth_wallet_1.Utils.fromDecimals(event.value);
        return event;
      }
      async initAddress(vaultRegistry) {
        return this._bridgeVault.initAddress(vaultRegistry);
      }
      get lastKnownBalance() {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.lastKnownBalance(), await (await this.asset).decimals);
        })();
      }
      get lpAssetBalance() {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.lpAssetBalance(), await (await this.asset).decimals);
        })();
      }
      get name() {
        return this._bridgeVault.govToken();
      }
      async newOrder(order) {
        let clone = Object.assign({}, order);
        let assetDecimals = await (await this.asset).decimals;
        clone.inAmount = eth_wallet_1.Utils.toDecimals(clone.inAmount, assetDecimals);
        let peerChainId = typeof clone.peerChain === "number" ? clone.peerChain : clone.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(peerChainId, clone.outToken);
        clone.minOutAmount = eth_wallet_1.Utils.toDecimals(clone.minOutAmount, outTokenDecimals);
        let receipt = await this._bridgeVault.newOrder(clone);
        let event = this._bridgeVault.parseNewOrderEvent(receipt)[0];
        event.order.inAmount = eth_wallet_1.Utils.fromDecimals(event.order.inAmount, assetDecimals);
        event.order.minOutAmount = eth_wallet_1.Utils.fromDecimals(event.order.minOutAmount, outTokenDecimals);
        event.newImbalance = eth_wallet_1.Utils.fromDecimals(event.newImbalance, assetDecimals);
        let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        assetTransferEvent.value = eth_wallet_1.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
        return { newOrderEvent: event, assetTransferEvent };
      }
      async parseNewOrderEvent(receipt) {
        let event = this._bridgeVault.parseNewOrderEvent(receipt)[0];
        event.order = await this._decodeNewOrder(event.order);
        return event;
      }
      async decodeNewOrderEvent(event) {
        let newOrderEvent = this._bridgeVault.decodeNewOrderEvent(event);
        newOrderEvent.order = await this._decodeNewOrder(newOrderEvent.order);
        newOrderEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(newOrderEvent.newImbalance, await (await this.asset).decimals);
        return newOrderEvent;
      }
      async decodeAmendOrderRequestEvent(event) {
        let amendOrderRequestEvent = this._bridgeVault.decodeAmendOrderRequestEvent(event);
        amendOrderRequestEvent.order = await this._decodeNewOrder(amendOrderRequestEvent.order);
        return amendOrderRequestEvent;
      }
      async _decodeNewOrder(order) {
        let assetDecimals = await (await this.asset).decimals;
        let dstChainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(dstChainId, order.outToken);
        order.inAmount = eth_wallet_1.Utils.fromDecimals(order.inAmount, assetDecimals);
        order.minOutAmount = eth_wallet_1.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
        return order;
      }
      async decodeSwapEvent(event) {
        let swapEvent = this._bridgeVault.decodeSwapEvent(event);
        let assetDecimals = await (await this.asset).decimals;
        swapEvent.order.peerChain = new eth_wallet_1.BigNumber(swapEvent.order.peerChain);
        let srcChainId = swapEvent.order.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(await this._bridgeVault.wallet.getChainId(), swapEvent.order.outToken);
        swapEvent.order.inAmount = eth_wallet_1.Utils.fromDecimals(swapEvent.order.inAmount, assetDecimals);
        swapEvent.order.minOutAmount = eth_wallet_1.Utils.fromDecimals(swapEvent.order.minOutAmount, outTokenDecimals);
        swapEvent.outAmount = eth_wallet_1.Utils.fromDecimals(swapEvent.outAmount, outTokenDecimals);
        swapEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(swapEvent.newImbalance, assetDecimals);
        swapEvent.newLpAssetBalance = eth_wallet_1.Utils.fromDecimals(swapEvent.newLpAssetBalance, assetDecimals);
        swapEvent.newProtocolFeeBalance = eth_wallet_1.Utils.fromDecimals(swapEvent.newProtocolFeeBalance, assetDecimals);
        return swapEvent;
      }
      async decodeOrderCanceledEvent(event) {
        let cancelEvent = this._bridgeVault.decodeOrderCanceledEvent(event);
        let assetDecimals = await (await this.asset).decimals;
        cancelEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(cancelEvent.newImbalance, assetDecimals);
        cancelEvent.newProtocolFeeBalance = eth_wallet_1.Utils.fromDecimals(cancelEvent.newProtocolFeeBalance, assetDecimals);
        return cancelEvent;
      }
      async newOrderFromRouterWei(params) {
        let receipt = await this._bridgeVault.newOrderFromRouter(params);
        return this._bridgeVault.parseNewOrderEvent(receipt)[0];
      }
      async orderAmendments(params) {
        let order = await this._bridgeVault.orderAmendments({ param1: params.orderId, param2: params.amendment });
        let assetDecimals = await (await this.asset).decimals;
        let chainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(chainId, order.outToken);
        let minOutAmount = eth_wallet_1.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
        ;
        return {
          peerChain: order.peerChain,
          inAmount: eth_wallet_1.Utils.fromDecimals(order.inAmount, assetDecimals),
          outToken: order.outToken,
          minOutAmount,
          to: order.to,
          expire: new eth_wallet_1.BigNumber(order.expire)
        };
      }
      async orderAmendmentsLength(orderId) {
        return (async () => {
          return (await this._bridgeVault.orderAmendmentsLength(orderId)).toNumber();
        })();
      }
      async orderOwner(orderId) {
        return this._bridgeVault.orderOwner(orderId);
      }
      async orderRefunds(orderId) {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.orderRefunds(orderId), await (await this.asset).decimals);
        })();
      }
      async orderStatus(orderId) {
        return this._bridgeVault.orderStatus(orderId);
      }
      async orders(orderId) {
        let order = await this._bridgeVault.orders(orderId);
        let assetDecimals = await (await this.asset).decimals;
        let chainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(chainId, order.outToken);
        let minOutAmount = eth_wallet_1.Utils.fromDecimals(order.minOutAmount, outTokenDecimals);
        return {
          peerChain: order.peerChain,
          inAmount: eth_wallet_1.Utils.fromDecimals(order.inAmount, assetDecimals),
          outToken: order.outToken,
          minOutAmount,
          to: order.to,
          expire: new Date(order.expire.toNumber() * 1e3)
        };
      }
      get ordersLength() {
        return (async () => {
          return (await this._bridgeVault.ordersLength()).toNumber();
        })();
      }
      async pendingWithdrawalAmount(liquidityProvider) {
        return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.pendingWithdrawalAmount(liquidityProvider), await (await this.asset).decimals);
      }
      async pendingWithdrawalTimeout(liquidityProvider) {
        return new Date((await this._bridgeVault.pendingWithdrawalTimeout(liquidityProvider)).toNumber() * 1e3);
      }
      get protocolFeeBalance() {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.protocolFeeBalance(), await (await this.asset).decimals);
        })();
      }
      async rebalancerDeposit(assetAmount) {
        let assetDecimals = await (await this.asset).decimals;
        assetAmount = eth_wallet_1.Utils.toDecimals(assetAmount, assetDecimals);
        let receipt = await this._bridgeVault.rebalancerDeposit(assetAmount);
        let rebalanceEvent = this._bridgeVault.parseRebalanceEvent(receipt)[0];
        rebalanceEvent.amount = eth_wallet_1.Utils.fromDecimals(rebalanceEvent.amount, assetDecimals);
        rebalanceEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(rebalanceEvent.newImbalance, assetDecimals);
        let transferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        transferEvent.value = eth_wallet_1.Utils.fromDecimals(transferEvent.value, assetDecimals);
        return { rebalanceEvent, transferEvent };
      }
      async rebalancerWithdraw(params) {
        let clone = Object.assign({}, params);
        let assetDecimals = await (await this.asset).decimals;
        clone.assetAmount = eth_wallet_1.Utils.toDecimals(clone.assetAmount, assetDecimals);
        let receipt = await this._bridgeVault.rebalancerWithdraw(clone);
        let rebalanceEvent = this._bridgeVault.parseRebalanceEvent(receipt)[0];
        rebalanceEvent.amount = eth_wallet_1.Utils.fromDecimals(rebalanceEvent.amount, assetDecimals);
        rebalanceEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(rebalanceEvent.newImbalance, assetDecimals);
        let transferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        transferEvent.value = eth_wallet_1.Utils.fromDecimals(transferEvent.value, assetDecimals);
        return { rebalanceEvent, transferEvent };
      }
      async removeLiquidity(params) {
        let clone = Object.assign({}, params);
        let assetDecimals = await (await this.asset).decimals;
        clone.assetAmount = eth_wallet_1.Utils.toDecimals(clone.assetAmount, assetDecimals);
        let receipt = await this._bridgeVault.removeLiquidity(clone);
        let event = this._bridgeVault.parseRemoveLiquidityEvent(receipt)[0];
        event.amount = eth_wallet_1.Utils.fromDecimals(event.amount, assetDecimals);
        event.newPendingWithdrawal = eth_wallet_1.Utils.fromDecimals(event.newPendingWithdrawal, assetDecimals);
        let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        assetTransferEvent.value = eth_wallet_1.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
        return { removeLiquidityEvent: event, assetTransferEvent };
      }
      async removeLiquidityRequest(lpTokenAmount) {
        let assetDecimals = await (await this.asset).decimals;
        lpTokenAmount = eth_wallet_1.Utils.toDecimals(lpTokenAmount);
        let receipt = await this._bridgeVault.removeLiquidityRequest(lpTokenAmount);
        let event = this._bridgeVault.parseRemoveLiquidityRequestEvent(receipt)[0];
        event.amount = eth_wallet_1.Utils.fromDecimals(event.amount, assetDecimals);
        event.burnAmount = eth_wallet_1.Utils.fromDecimals(event.burnAmount);
        event.newBalance = eth_wallet_1.Utils.fromDecimals(event.newBalance);
        event.newLpAssetBalance = eth_wallet_1.Utils.fromDecimals(event.newLpAssetBalance, assetDecimals);
        event.newPendingWithdrawal = eth_wallet_1.Utils.fromDecimals(event.newPendingWithdrawal, assetDecimals);
        let burnEvent = this._bridgeVault.parseTransferEvent(receipt)[0];
        burnEvent.value = eth_wallet_1.Utils.fromDecimals(burnEvent.value);
        let assetTransferEvents = (await this.asset).parseTransferEvent(receipt);
        if (assetTransferEvents && assetTransferEvents[0])
          assetTransferEvents[0].value = eth_wallet_1.Utils.fromDecimals(assetTransferEvents[0].value, assetDecimals);
        return { RemoveLiquidityRequestEvent: event, burnEvent, assetTransferEvent: assetTransferEvents[0] };
        ;
      }
      async requestCancelOrder(params) {
        let receipt = await this._bridgeVault.requestCancelOrder(params);
        let event = this._bridgeVault.parseRequestCancelOrderEvent(receipt)[0];
        return event;
      }
      async requestAmendOrder(params) {
        let clone = Object.assign({}, params);
        clone.order = Object.assign({}, clone.order);
        let assetDecimals = await (await this.asset).decimals;
        let order = clone.order;
        order.inAmount = eth_wallet_1.Utils.toDecimals(order.inAmount, assetDecimals);
        let peerChainId = typeof order.peerChain === "number" ? order.peerChain : order.peerChain.toNumber();
        let outTokenDecimals = this.getTokenDecimals(peerChainId, order.outToken);
        order.minOutAmount = eth_wallet_1.Utils.toDecimals(order.minOutAmount, outTokenDecimals);
        let receipt = await this._bridgeVault.requestAmendOrder({ orderId: clone.orderId, order });
        let amendOrderEvent = this._bridgeVault.parseAmendOrderRequestEvent(receipt)[0];
        amendOrderEvent.order.inAmount = eth_wallet_1.Utils.fromDecimals(amendOrderEvent.order.inAmount, assetDecimals);
        amendOrderEvent.order.minOutAmount = eth_wallet_1.Utils.fromDecimals(amendOrderEvent.order.minOutAmount, outTokenDecimals);
        return amendOrderEvent;
      }
      async swap(params) {
        let clone = Object.assign({}, params);
        clone.order = Object.assign({}, clone.order);
        let assetDecimals = await (await this.asset).decimals;
        let chainId = await this._bridgeVault.wallet.getChainId();
        let outTokenDecimals = this.getTokenDecimals(chainId, params.order.outToken);
        clone.order.inAmount = eth_wallet_1.Utils.toDecimals(clone.order.inAmount, assetDecimals);
        clone.order.minOutAmount = eth_wallet_1.Utils.toDecimals(clone.order.minOutAmount, outTokenDecimals);
        clone.protocolFee = eth_wallet_1.Utils.toDecimals(clone.protocolFee, assetDecimals);
        let receipt = await this._bridgeVault.swap(clone);
        let swapEvent = this._bridgeVault.parseSwapEvent(receipt)[0];
        swapEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(swapEvent.newImbalance, assetDecimals);
        swapEvent.newLpAssetBalance = eth_wallet_1.Utils.fromDecimals(swapEvent.newLpAssetBalance, assetDecimals);
        swapEvent.newProtocolFeeBalance = eth_wallet_1.Utils.fromDecimals(swapEvent.newProtocolFeeBalance, assetDecimals);
        let transferEvent;
        if (params.order.outToken != eth_wallet_1.Utils.nullAddress) {
          transferEvent = new eth_wallet_1.Erc20(this._bridgeVault.wallet, params.order.outToken).parseTransferEvent(receipt)[0];
          transferEvent.value = eth_wallet_1.Utils.fromDecimals(transferEvent.value, assetDecimals);
        }
        return { swapEvent, transferEvent };
      }
      async swapOrderStatus(orderId) {
        return (await this._bridgeVault.swapOrderStatus(orderId)).toNumber();
      }
      get symbol() {
        return this._bridgeVault.symbol();
      }
      async sync() {
        let assetDecimals = await (await this.asset).decimals;
        let receipt = await this._bridgeVault.sync();
        let syncEvent = this._bridgeVault.parseSyncEvent(receipt)[0];
        syncEvent.excess = eth_wallet_1.Utils.fromDecimals(syncEvent.excess, assetDecimals);
        syncEvent.newProtocolFeeBalance = eth_wallet_1.Utils.fromDecimals(syncEvent.newProtocolFeeBalance, assetDecimals);
        return syncEvent;
      }
      get totalPendingWithdrawal() {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.totalPendingWithdrawal(), await (await this.asset).decimals);
        })();
      }
      get totalSupply() {
        return (async () => {
          return eth_wallet_1.Utils.fromDecimals(await this._bridgeVault.totalSupply());
        })();
      }
      async transfer(params) {
        let clone = Object.assign({}, params);
        clone.amount = eth_wallet_1.Utils.toDecimals(clone.amount);
        let receipt = await this._bridgeVault.transfer(clone);
        let event = this._bridgeVault.parseTransferEvent(receipt)[0];
        event.value = eth_wallet_1.Utils.fromDecimals(event.value);
        return event;
      }
      async transferFrom(params) {
        let clone = Object.assign({}, params);
        clone.amount = eth_wallet_1.Utils.toDecimals(clone.amount);
        let receipt = await this._bridgeVault.transferFrom(clone);
        let transfer = this._bridgeVault.parseTransferEvent(receipt)[0];
        transfer.value = eth_wallet_1.Utils.fromDecimals(transfer.value);
        let approval = this._bridgeVault.parseApprovalEvent(receipt)[0];
        approval.value = eth_wallet_1.Utils.fromDecimals(approval.value);
        return { transfer, approval };
      }
      get trollRegistry() {
        return this._bridgeVault.trollRegistry();
      }
      async updateConfigStore() {
        let receipt = await this._bridgeVault.updateConfigStore();
        let event = this._bridgeVault.parseUpdateConfigStoreEvent(receipt)[0];
        return event;
      }
      async updateTrollRegistry() {
        let receipt = await this._bridgeVault.updateTrollRegistry();
        let event = this._bridgeVault.parseUpdateTrollRegistryEvent(receipt)[0];
        return event;
      }
      get vaultRegistry() {
        return this._bridgeVault.vaultRegistry();
      }
      async voidOrder(params) {
        let receipt = await this._bridgeVault.voidOrder(params);
        let event = this._bridgeVault.parseVoidOrderEvent(receipt)[0];
        return event;
      }
      async withdrawUnexecutedOrder(orderId) {
        let assetDecimals = await (await this.asset).decimals;
        let receipt = await this._bridgeVault.withdrawUnexecutedOrder(orderId);
        let withdrawUnexecutedOrderEvent = this._bridgeVault.parseWithdrawUnexecutedOrderEvent(receipt)[0];
        withdrawUnexecutedOrderEvent.newImbalance = eth_wallet_1.Utils.fromDecimals(withdrawUnexecutedOrderEvent.newImbalance, assetDecimals);
        let assetTransferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        assetTransferEvent.value = eth_wallet_1.Utils.fromDecimals(assetTransferEvent.value, assetDecimals);
        return { withdrawUnexecutedOrderEvent, assetTransferEvent };
      }
      async withdrawlTrollFee(amount) {
        let assetDecimals = await (await this.asset).decimals;
        amount = eth_wallet_1.Utils.toDecimals(amount, assetDecimals);
        let receipt = await this._bridgeVault.withdrawlTrollFee(amount);
        let widhdrawEvent = this._bridgeVault.parseWithdrawlTrollFeeEvent(receipt)[0];
        widhdrawEvent.amount = eth_wallet_1.Utils.fromDecimals(widhdrawEvent.amount, assetDecimals);
        widhdrawEvent.newProtocolFeeBalance = eth_wallet_1.Utils.fromDecimals(widhdrawEvent.newProtocolFeeBalance, assetDecimals);
        let transferEvent = (await this.asset).parseTransferEvent(receipt)[0];
        transferEvent.value = eth_wallet_1.Utils.fromDecimals(transferEvent.value, assetDecimals);
        return { widhdrawEvent, transferEvent };
      }
    };
    exports.BridgeVault = BridgeVault;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/wrappers/bridgeVaultTrollRegistry.js
var require_bridgeVaultTrollRegistry = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/wrappers/bridgeVaultTrollRegistry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BridgeVaultTrollRegistry = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var contracts_1 = require_contracts3();
    var BridgeVaultTrollRegistry = class {
      constructor(wallet, address) {
        this.address = address;
        this._bridgeVaultTrollRegistry = new contracts_1.OSWAP_BridgeVaultTrollRegistry(wallet, address);
      }
      async deploy(trollRegistry) {
        this.address = await this._bridgeVaultTrollRegistry.deploy(trollRegistry);
        return this.address;
      }
      async decodeStakeEvent(event) {
        let stakeEvent = this._bridgeVaultTrollRegistry.decodeStakeEvent(event);
        stakeEvent.amount = eth_wallet_1.Utils.fromDecimals(stakeEvent.amount);
        stakeEvent.shares = eth_wallet_1.Utils.fromDecimals(stakeEvent.shares);
        stakeEvent.backerBalance = eth_wallet_1.Utils.fromDecimals(stakeEvent.backerBalance);
        stakeEvent.trollBalance = eth_wallet_1.Utils.fromDecimals(stakeEvent.trollBalance);
        stakeEvent.totalShares = eth_wallet_1.Utils.fromDecimals(stakeEvent.totalShares);
        return stakeEvent;
      }
      async parseUnstakeRequestEvent(receipt) {
        let unstakeEvent = this._bridgeVaultTrollRegistry.parseUnstakeRequestEvent(receipt)[0];
        unstakeEvent.shares = eth_wallet_1.Utils.fromDecimals(unstakeEvent.shares);
        unstakeEvent.backerBalance = eth_wallet_1.Utils.fromDecimals(unstakeEvent.backerBalance);
        return unstakeEvent;
      }
      async decodeUnstakeRequestEvent(event) {
        let unstakeEvent = this._bridgeVaultTrollRegistry.decodeUnstakeRequestEvent(event);
        unstakeEvent.shares = eth_wallet_1.Utils.fromDecimals(unstakeEvent.shares);
        unstakeEvent.backerBalance = eth_wallet_1.Utils.fromDecimals(unstakeEvent.backerBalance);
        return unstakeEvent;
      }
      async parseUnstakeApprovalEvent(receipt) {
        let unstakeEvent = this._bridgeVaultTrollRegistry.parseUnstakeApprovalEvent(receipt)[0];
        unstakeEvent.shares = eth_wallet_1.Utils.fromDecimals(unstakeEvent.shares);
        return unstakeEvent;
      }
      async decodeUnstakeApprovalEvent(event) {
        let unstakeEvent = this._bridgeVaultTrollRegistry.decodeUnstakeApprovalEvent(event);
        unstakeEvent.shares = eth_wallet_1.Utils.fromDecimals(unstakeEvent.shares);
        return unstakeEvent;
      }
      async backerStakes(backer) {
        let result = await this._bridgeVaultTrollRegistry.backerStakes(backer);
        result.shares = eth_wallet_1.Utils.fromDecimals(result.shares);
        result.pendingWithdrawal = eth_wallet_1.Utils.fromDecimals(result.pendingWithdrawal);
        result.approvedWithdrawal = eth_wallet_1.Utils.fromDecimals(result.approvedWithdrawal);
        return result;
      }
      get configStore() {
        return this._bridgeVaultTrollRegistry.configStore();
      }
      async getBackers(trollProfileIndex) {
        return this._bridgeVaultTrollRegistry.getBackers(trollProfileIndex);
      }
      get govToken() {
        return new Promise(async (resolve, reject) => {
          try {
            if (!this.__govToken)
              this.__govToken = new eth_wallet_1.Erc20(this._bridgeVaultTrollRegistry.wallet, await this._bridgeVaultTrollRegistry.govToken());
            resolve(this.__govToken);
          } catch (e) {
            reject(e);
          }
        });
      }
      async hashUnstakeRequest(params) {
        return this._bridgeVaultTrollRegistry.hashUnstakeRequest(params);
      }
      async lastTrollTxCount(troll) {
        return (async () => (await this._bridgeVaultTrollRegistry.lastTrollTxCount(troll)).toNumber())();
      }
      async maxWithdrawal(backer) {
        return this._bridgeVaultTrollRegistry.maxWithdrawal(backer);
      }
      async penalizeSuperTroll(params) {
        let receipt = await this._bridgeVaultTrollRegistry.penalizeSuperTroll(params);
        let event = this._bridgeVaultTrollRegistry.parsePenaltyEvent(receipt)[0];
        event.amount = eth_wallet_1.Utils.fromDecimals(event.amount);
        return event;
      }
      async stake(params) {
        params.amount = eth_wallet_1.Utils.toDecimals(params.amount);
        let receipt = await this._bridgeVaultTrollRegistry.stake(params);
        let event = this._bridgeVaultTrollRegistry.parseStakeEvent(receipt)[0];
        event.amount = eth_wallet_1.Utils.fromDecimals(event.amount);
        event.shares = eth_wallet_1.Utils.fromDecimals(event.shares);
        event.backerBalance = eth_wallet_1.Utils.fromDecimals(event.backerBalance);
        event.trollBalance = eth_wallet_1.Utils.fromDecimals(event.trollBalance);
        let govToken = await this.govToken;
        let transferEvent = govToken.parseTransferEvent(receipt)[0];
        transferEvent.value = eth_wallet_1.Utils.fromDecimals(transferEvent.value, await govToken.decimals);
        return { stakeEvent: event, transferEvent };
      }
      async stakedBy(params) {
        let backer = await this._bridgeVaultTrollRegistry.stakedBy({ param1: params.trollProfileIndex, param2: params.index });
        return backer;
      }
      async stakedByInv(params) {
        let stakedByIdx = await this._bridgeVaultTrollRegistry.stakedByInv({ param1: params.trollProfileIndex, param2: params.backer });
        return stakedByIdx.toNumber();
      }
      async stakedByLength(trollProfileIndex) {
        return (async () => {
          return (await this._bridgeVaultTrollRegistry.stakedByLength(trollProfileIndex)).toNumber();
        })();
      }
      get transactionsCount() {
        return (async () => {
          return (await this._bridgeVaultTrollRegistry.transactionsCount()).toNumber();
        })();
      }
      get trollRegistry() {
        return this._bridgeVaultTrollRegistry.trollRegistry();
      }
      async trollStakesBalances(trollProfileIndex) {
        return eth_wallet_1.Utils.fromDecimals(await this._bridgeVaultTrollRegistry.trollStakesBalances(trollProfileIndex));
      }
      async trollStakesTotalShares(trollProfileIndex) {
        return eth_wallet_1.Utils.fromDecimals(await this._bridgeVaultTrollRegistry.trollStakesTotalShares(trollProfileIndex));
      }
      async unstake(params) {
        params.shares = eth_wallet_1.Utils.toDecimals(params.shares);
        let receipt = await this._bridgeVaultTrollRegistry.unstake(params);
        let event = this._bridgeVaultTrollRegistry.parseUnstakeEvent(receipt)[0];
        event.amount = eth_wallet_1.Utils.fromDecimals(event.amount);
        event.shares = eth_wallet_1.Utils.fromDecimals(event.shares);
        event.trollBalance = eth_wallet_1.Utils.fromDecimals(event.trollBalance);
        let govToken = await this.govToken;
        let transferEvent = govToken.parseTransferEvent(receipt)[0];
        transferEvent.value = eth_wallet_1.Utils.fromDecimals(transferEvent.value, await govToken.decimals);
        return { unstakeEvent: event, transferEvent };
        ;
      }
      async unstakeApprove(params) {
        params.shares = eth_wallet_1.Utils.toDecimals(params.shares);
        let receipt = await this._bridgeVaultTrollRegistry.unstakeApprove(params);
        let event = this._bridgeVaultTrollRegistry.parseUnstakeApprovalEvent(receipt)[0];
        event.shares = eth_wallet_1.Utils.fromDecimals(event.shares);
        return event;
      }
      async unstakeRequest(shares) {
        shares = eth_wallet_1.Utils.toDecimals(shares);
        let receipt = await this._bridgeVaultTrollRegistry.unstakeRequest(shares);
        let event = this._bridgeVaultTrollRegistry.parseUnstakeRequestEvent(receipt)[0];
        event.shares = eth_wallet_1.Utils.fromDecimals(event.shares);
        event.backerBalance = eth_wallet_1.Utils.fromDecimals(event.backerBalance);
        return event;
      }
      async updateConfigStore() {
        let receipt = await this._bridgeVaultTrollRegistry.updateConfigStore();
        return this._bridgeVaultTrollRegistry.parseUpdateConfigStoreEvent(receipt)[0];
      }
      async updateTrollRegistry() {
        let receipt = await this._bridgeVaultTrollRegistry.updateTrollRegistry();
        return this._bridgeVaultTrollRegistry.parseUpdateTrollRegistryEvent(receipt)[0];
      }
      async usedNonce(nonce) {
        return this._bridgeVaultTrollRegistry.usedNonce(nonce);
      }
      async verifyStakedValue(params) {
        return this._bridgeVaultTrollRegistry.verifyStakedValue(params);
      }
    };
    exports.BridgeVaultTrollRegistry = BridgeVaultTrollRegistry;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/crossChain.js
var require_crossChain = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/crossChain.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCrossChain = exports.buildTokenPairByAddress = exports.buildTokenPairBySymbol = exports.CrossChainMulti = exports.CrossChainSingle = exports.SideChain = exports.MainChain = void 0;
    var sdk_1 = require("@openswap/sdk");
    var Contracts3 = __importStar(require_contracts3());
    var bridgeVault_1 = require_bridgeVault();
    var bridgeVaultTrollRegistry_1 = require_bridgeVaultTrollRegistry();
    var mainChainVoting_1 = require_mainChainVoting();
    var sideChainVoting_1 = require_sideChainVoting();
    function MainChain(wallet, result, tokenList) {
      let votingManager = new Contracts3.OSWAP_VotingManager(wallet, result.votingManager);
      let votingRegistry = new Contracts3.OSWAP_VotingRegistry(wallet, result.votingRegistry);
      let votingExecutor = new Contracts3.OSWAP_MainChainVotingExecutor(wallet, result.votingExecutor);
      return {
        votingManager,
        trollRegistry: new Contracts3.OSWAP_MainChainTrollRegistry(wallet, result.trollRegistry),
        votingRegistry,
        votingExecutor,
        voting: new mainChainVoting_1.MainChainVoting(wallet, votingManager, votingRegistry, votingExecutor),
        chainRegistry: new Contracts3.OSWAP_ChainRegistry(wallet, result.chainRegistry)
      };
    }
    exports.MainChain = MainChain;
    function SideChain(wallet, result, tokenList) {
      let _vaultRegistry = {};
      let _bridgeVault = {};
      for (let v in result.bridgeVault) {
        _vaultRegistry[v] = _vaultRegistry[result.vaultRegistry[v]] = _vaultRegistry[result.bridgeVault[v]] = new bridgeVaultTrollRegistry_1.BridgeVaultTrollRegistry(wallet, result.vaultRegistry[v]);
        _bridgeVault[v] = _bridgeVault[result.bridgeVault[v]] = _bridgeVault[result.vaultRegistry[v]] = new bridgeVault_1.BridgeVault(wallet, result.bridgeVault[v], tokenList);
      }
      let votingExecutor = new Contracts3.OSWAP_SideChainVotingExecutor(wallet, result.votingExecutor);
      let wrapper = new Contracts3.OSWAP_RouterVaultWrapper(wallet, result.wrapper);
      return {
        configStore: new Contracts3.OSWAP_ConfigStore(wallet, result.configStore),
        trollRegistry: new Contracts3.OSWAP_SideChainTrollRegistry(wallet, result.trollRegistry),
        votingExecutor,
        vaultRegistry: _vaultRegistry,
        bridgeVault: _bridgeVault,
        voting: new sideChainVoting_1.SideChainVoting(wallet, votingExecutor),
        wrapper
      };
    }
    exports.SideChain = SideChain;
    var CrossChainSingle = class {
      constructor(_oswap, contractsAddresses, chains, tokenList) {
        this._oswap = {};
        for (let chainId in _oswap) {
          this._oswap[chainId] = _oswap[chainId];
        }
        this.contractsAddresses = contractsAddresses;
        this.chains = chains;
        this.tokenList = tokenList;
      }
      onChainChange(wallet, chainId) {
        this.wallet = wallet;
        this.chainId = chainId;
        if (!this._oswap[chainId]) {
          throw new Error("Invalid chainId");
        }
        this.oswap = new sdk_1.OpenSwap(wallet, this._oswap[chainId]);
        this.mainChain = chainId == this.chains.mainChain ? MainChain(wallet, this.contractsAddresses.mainChain, this.tokenList) : null;
        let contracts = this.contractsAddresses.sideChain[chainId];
        this.crossChainContracts = contracts ? SideChain(wallet, contracts, this.tokenList) : null;
      }
    };
    exports.CrossChainSingle = CrossChainSingle;
    var CrossChainMulti = class {
      constructor(wallets, oswap, contractsAddresses, chains, tokenList, wrappedTokens, tokenPair) {
        this.wallets = wallets;
        this.oswap = {};
        for (let chainId in oswap) {
          this.oswap[chainId] = new sdk_1.OpenSwap(wallets[chainId], oswap[chainId]);
        }
        this.contractsAddresses = contractsAddresses;
        this.chains = chains;
        this.crossChainContracts = {};
        if (contractsAddresses.mainChain)
          this.crossChainContracts.mainChain = MainChain(wallets[chains.mainChain], contractsAddresses.mainChain, tokenList);
        this.crossChainContracts.sideChain = {};
        for (let i = 0; i < chains.sideChain.length; i++) {
          let chainId = chains.sideChain[i];
          if (!wallets[chainId]) {
            throw new Error("Invalid chain id");
          }
          this.crossChainContracts.sideChain[chainId] = SideChain(wallets[chainId], contractsAddresses.sideChain[chainId], tokenList);
        }
        this.tokenList = tokenList;
        this.wrappedTokens = wrappedTokens;
        this.tokenPair = tokenPair;
      }
    };
    exports.CrossChainMulti = CrossChainMulti;
    function buildTokenPairBySymbol(tokenList, pairing) {
      let tokenPair = {};
      pairing.forEach((pair) => {
        for (let srcChain in pair) {
          if (!tokenPair[srcChain])
            tokenPair[srcChain] = {};
          let address = tokenList[srcChain].find((e) => e.symbol == pair[srcChain]).address;
          tokenPair[srcChain][address] = {};
          for (let dstChain in pair) {
            if (srcChain != dstChain) {
              tokenPair[srcChain][address][dstChain] = tokenList[dstChain].find((e) => e.symbol == pair[dstChain]).address;
            }
          }
        }
      });
      return tokenPair;
    }
    exports.buildTokenPairBySymbol = buildTokenPairBySymbol;
    function buildTokenPairByAddress(pairing) {
      let tokenPair = {};
      pairing.forEach((pair) => {
        for (let srcChain in pair) {
          if (!tokenPair[srcChain])
            tokenPair[srcChain] = {};
          let address = pair[srcChain];
          tokenPair[srcChain][address] = {};
          for (let dstChain in pair) {
            if (srcChain != dstChain) {
              tokenPair[srcChain][address][dstChain] = pair[dstChain];
            }
          }
        }
      });
      return tokenPair;
    }
    exports.buildTokenPairByAddress = buildTokenPairByAddress;
    async function getCrossChain(wallets, chains, tokenList, wrappedTokens, chainRegistryAddress) {
      let oswap = {};
      let sideChain = {};
      let chainRegistry = new Contracts3.OSWAP_ChainRegistry(wallets[chains.mainChain], chainRegistryAddress);
      let allChainIds = (await chainRegistry.allChains()).map((e) => e.toNumber());
      let vaultsLength = (await chainRegistry.vaultsLength()).toNumber();
      let mainChain;
      {
        let _trollRegistry = await chainRegistry.mainChainContractAddress("TrollRegistry");
        let trollRegistry = new Contracts3.OSWAP_MainChainTrollRegistry(wallets[chains.mainChain], _trollRegistry);
        let _votingManager = await trollRegistry.votingManager();
        let votingManager = new Contracts3.OSWAP_VotingManager(wallets[chains.mainChain], _votingManager);
        let _votingExecutor = await votingManager.votingExecutor(0);
        let _votingRegistry = await votingManager.votingRegister();
        mainChain = {
          trollRegistry: _trollRegistry,
          votingExecutor: _votingExecutor,
          votingManager: _votingManager,
          votingRegistry: _votingRegistry,
          chainRegistry: chainRegistry.address
        };
      }
      let pairing = [];
      for (let chainId of allChainIds) {
        let status = (await chainRegistry.status(chainId)).toNumber();
        if (status == 1) {
          oswap[chainId] = await chainRegistry.govToken(chainId);
          let _trollRegistry = await chainRegistry.sideChainContractAddress({ param1: chainId, param2: "TrollRegistry" });
          let trollRegistry = new Contracts3.OSWAP_SideChainTrollRegistry(wallets[chainId], _trollRegistry);
          let _configStore = await trollRegistry.configStore();
          let configStore = new Contracts3.OSWAP_ConfigStore(wallets[chainId], _configStore);
          let _router = await configStore.router();
          let _wrapper = await chainRegistry.sideChainContractAddress({ param1: chainId, param2: "RouterWrapper" });
          let votingExecutor = await trollRegistry.votingExecutor(0);
          let vaultRegistry = {}, bridgeVault = {};
          for (let i = 0; i < vaultsLength; i++) {
            let vault = await chainRegistry.vaults({ param1: i, param2: chainId });
            vaultRegistry[vault.token] = vault.vaultRegistry;
            bridgeVault[vault.token] = vault.bridgeVault;
            if (!pairing[i])
              pairing.push({});
            pairing[i][chainId] = vault.token;
          }
          sideChain[chainId] = {
            configStore: _configStore,
            trollRegistry: _trollRegistry,
            votingExecutor,
            wrapper: _wrapper,
            vaultRegistry,
            bridgeVault
          };
        }
      }
      let tokenPair = buildTokenPairByAddress(pairing);
      for (let srcChain in tokenPair)
        for (let srcToken in tokenPair[srcChain])
          for (let dstChain in tokenPair[srcChain][srcToken]) {
            let dstToken = tokenPair[srcChain][srcToken][dstChain];
            let dstVault = sideChain[dstChain].bridgeVault[dstToken];
            let srcVault = sideChain[srcChain].bridgeVault[srcToken];
            if (!tokenPair[parseInt(srcChain)][srcVault])
              tokenPair[parseInt(srcChain)][srcVault] = {};
            tokenPair[parseInt(srcChain)][srcVault][parseInt(dstChain)] = dstVault;
          }
      let crossChain = new CrossChainMulti(wallets, oswap, { mainChain, sideChain }, chains, tokenList, wrappedTokens, tokenPair);
      return crossChain;
    }
    exports.getCrossChain = getCrossChain;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/generalTroll.js
var require_generalTroll = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/generalTroll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GeneralTroll = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var GeneralTroll = class {
      constructor(address, crosschain, isSuperTroll, config, trollProfileIndex) {
        this.address = address;
        this.crosschain = crosschain;
        this.trollProfileIndex = trollProfileIndex;
        this.isSuperTroll = isSuperTroll;
        this.vaults = {};
        let vaults;
        let sideChains = crosschain.crossChainContracts.sideChain;
        for (let chain in sideChains) {
          this.vaults[chain] = {};
          vaults = sideChains[chain].bridgeVault;
          for (let vault in vaults)
            this.vaults[chain][vaults[vault].address] = vaults[vault];
        }
        this.config = config;
      }
      init(trollProfileIndex) {
        this.trollProfileIndex = trollProfileIndex;
      }
      async _isGeneralTroll(params) {
        let chain = this.getChain(params.chainId);
        return await chain.trollRegistry.isGeneralTroll({ troll: this.address, returnFalseIfBlocked: params.returnFalseIfBlocked });
      }
      getChain(chainId) {
        return this.crosschain.crossChainContracts.sideChain[chainId];
      }
      async getTargetOrderId2(params) {
        let srcVault = this.crosschain.crossChainContracts.sideChain[params.sourceChain].bridgeVault[params.srcToken];
        let order = await srcVault.orders(params.orderId);
        let owner = await srcVault.orderOwner(params.orderId);
        let targetChain = order.peerChain.toNumber();
        let inToken = this.crosschain.tokenPair[params.sourceChain][(await srcVault.asset).address][targetChain];
        let targetVault = this.crosschain.crossChainContracts.sideChain[targetChain].bridgeVault[inToken];
        let wallet = this.crosschain.wallets[targetChain];
        let targetOrderId = wallet.web3.utils.soliditySha3({ t: "address", v: owner }, { t: "uint256", v: await wallet.getChainId() }, { t: "address", v: targetVault.address }, { t: "uint256", v: params.sourceChain.toString() }, { t: "uint256", v: params.orderId.toString() });
        return { targetChain, targetVault: targetVault.address, targetOrderId };
      }
      async getTargetOrderId(order) {
        let wallet = this.crosschain.wallets[order.targetChain];
        let chainId = order.targetChain;
        let targetVault = this.getChain(chainId).bridgeVault[order.inToken];
        let orderId = wallet.web3.utils.soliditySha3({ t: "address", v: order.owner }, { t: "uint256", v: await wallet.getChainId() }, { t: "address", v: targetVault.address }, { t: "uint256", v: order.sourceChain.toString() }, { t: "uint256", v: order.orderId.toString() });
        return orderId;
      }
      async signAddress(params) {
        let wallet = this.crosschain.wallets[params.chainId];
        let signatures = await wallet.signMessage(wallet.web3.utils.soliditySha3({ t: "address", v: params.address }));
        return signatures;
      }
      async hashOrderForSigning(params) {
        let wallet = this.crosschain.wallets[params.order.targetChain];
        let chainId = params.order.targetChain;
        let chain = this.getChain(chainId);
        let vault = chain.bridgeVault[params.order.inToken];
        let decimals = await (await vault.asset).decimals;
        let outTokenDecimals = params.order.outToken == eth_wallet_1.Utils.nullAddress ? this.crosschain.wrappedTokens[chainId].decimals : this.crosschain.tokenList[chainId].find((e) => e.address == params.order.outToken).decimals;
        let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: vault.address }, { t: "bytes32", v: eth_wallet_1.Utils.stringToBytes32(await this.getTargetOrderId(params.order)) }, { t: "uint", v: params.order.amendment.toFixed() }, { t: "uint", v: eth_wallet_1.Utils.toDecimals(params.order.inAmount, decimals).toFixed() }, { t: "address", v: params.order.outToken }, { t: "uint", v: eth_wallet_1.Utils.toDecimals(params.order.minOutAmount, outTokenDecimals).toFixed() }, { t: "uint", v: eth_wallet_1.Utils.toDecimals(params.order.protocolFee, decimals).toFixed() }, { t: "address[]", v: params.pair }, { t: "address", v: params.order.to }, { t: "uint", v: params.order.expire.toFixed() });
        return hash;
      }
      async hashCancelOrderForSigning(cancelOrder) {
        let wallet = this.crosschain.wallets[cancelOrder.sourceChainId];
        let chain = this.getChain(cancelOrder.sourceChainId);
        let vault = chain.bridgeVault[cancelOrder.srcToken];
        let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: vault.address }, { t: "uint", v: cancelOrder.orderId.toString() }, { t: "uint8", v: cancelOrder.canceledByOrderOwner ? 1 : 0 }, { t: "uint", v: eth_wallet_1.Utils.toDecimals(cancelOrder.protocolFee.toFixed(), await (await vault.asset).decimals).toFixed() });
        return hash;
      }
      async hashUnstakeBondRequestForSigning(params) {
        let wallet = this.crosschain.wallets[params.chainId];
        let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: params.event._event.address }, { t: "address", v: params.event.backer }, { t: "uint", v: params.event.trollProfileIndex.toFixed() }, { t: "uint", v: eth_wallet_1.Utils.toDecimals(params.event.shares).toFixed() }, { t: "uint", v: "0x" + params.nonce.toString(16) });
        return hash;
      }
      async hashRebalancerWithdrawForSigning(params) {
        let chain = this.getChain(params.chainId);
        let to = await chain.configStore.rebalancer();
        let wallet = this.crosschain.wallets[params.chainId];
        let vault = chain.bridgeVault[params.asset];
        let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: vault.address }, { t: "address", v: to }, { t: "uint256", v: eth_wallet_1.Utils.toDecimals(params.assetAmount, await (await vault.asset).decimals).toString() }, { t: "uint256", v: "0x" + params.nonce.toString(16) });
        return hash;
      }
      async hashVoidOrderForSigning(params) {
        let wallet = this.crosschain.wallets[params.targetChain];
        let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: params.targetChain }, { t: "address", v: params.targetVault }, { t: "bytes32", v: params.targetOrderId });
        return hash;
      }
    };
    exports.GeneralTroll = GeneralTroll;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/troll.js
var require_troll = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/troll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Troll = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var generalTroll_1 = require_generalTroll();
    var Troll = class extends generalTroll_1.GeneralTroll {
      async _isSuperTroll(params) {
        let chain = this.getChain(params.chainId);
        return await chain.trollRegistry.isSuperTroll({ troll: this.address, returnFalseIfBlocked: params.returnFalseIfBlocked });
      }
      async canCreateTransactionSideChainRegistry(chainId) {
        if (!await this._isSuperTroll({ chainId, returnFalseIfBlocked: false }))
          return false;
        let chain = this.getChain(chainId);
        let gap = (await chain.configStore.transactionsGap()).toNumber();
        let registry = this.crosschain.crossChainContracts.sideChain[chainId].trollRegistry;
        let last = (await registry.lastTrollTxCount(this.address)).toNumber();
        let count = (await registry.transactionsCount()).toNumber();
        return last + gap <= count || count < gap;
      }
      async canTrollCreateTransactionSideChainRegistry(params) {
        let chain = this.getChain(params.chainId);
        if (!await chain.trollRegistry.isSuperTroll({ troll: params.troll, returnFalseIfBlocked: false }))
          return false;
        let gap = (await chain.configStore.transactionsGap()).toNumber();
        let registry = chain.trollRegistry;
        let last = (await registry.lastTrollTxCount(params.troll)).toNumber();
        let count = (await registry.transactionsCount()).toNumber();
        return last + gap <= count || count < gap;
      }
      async canCreateTransaction(params) {
        let chain = this.getChain(params.chainId);
        let vaultRegistry = chain.vaultRegistry[params.asset];
        let gap = (await chain.configStore.transactionsGap()).toNumber();
        let last = await vaultRegistry.lastTrollTxCount(this.address);
        let count = await vaultRegistry.transactionsCount;
        return last + gap <= count || count < gap;
      }
      async canTrollCreateTransaction(params) {
        let chain = this.getChain(params.chainId);
        if (!await chain.trollRegistry.isSuperTroll({ troll: params.troll, returnFalseIfBlocked: false }))
          return false;
        let vaultRegistry = chain.vaultRegistry[params.asset];
        let gap = (await chain.configStore.transactionsGap()).toNumber();
        let last = await vaultRegistry.lastTrollTxCount(params.troll);
        let count = await vaultRegistry.transactionsCount;
        return last + gap <= count || count < gap;
      }
      async hashAddTrollForSigning(params) {
        let chain = this.crosschain.crossChainContracts.sideChain[params.chainId];
        let wallet = this.crosschain.wallets[params.chainId];
        if (!wallet) {
          throw new Error("invalid chain id");
        }
        let troll = await this.crosschain.crossChainContracts.mainChain.trollRegistry.trollProfiles(params.addTrollEvent.trollProfileIndex);
        let hash = wallet.web3.utils.soliditySha3({ t: "uint", v: await wallet.getChainId() }, { t: "address", v: chain.trollRegistry.address }, { t: "uint", v: params.addTrollEvent.trollProfileIndex.toString() }, { t: "address", v: troll.troll }, { t: "uint8", v: troll.trollType.toNumber() == 1 ? 1 : 0 }, { t: "uint", v: "0x" + params.nonce.toString(16) });
        return hash;
      }
      async addTrollSideChain(params) {
        let chain = this.crosschain.crossChainContracts.sideChain[params.chainId];
        if (!chain) {
          throw new Error("Invalid chainId");
        }
        let wallet = this.crosschain.wallets[params.chainId];
        let registry = chain.trollRegistry;
        let troll = await this.crosschain.crossChainContracts.mainChain.trollRegistry.trollProfiles(params.event.trollProfileIndex);
        let receipt = await registry.addTroll({ signatures: params.signatures, trollProfileIndex: params.event.trollProfileIndex, troll: troll.troll, isSuperTroll: troll.trollType.toNumber() == 1, nonce: params.nonce });
        let event = registry.parseAddTrollEvent(receipt)[0];
        return event;
      }
      async _prepareNewOrder(sourceChain, vaultAddress, order, owner, orderId, raw) {
        let srcVault = this.vaults[sourceChain][vaultAddress];
        let srcToken = await srcVault.asset;
        let targetChain = parseInt(order.peerChain.toString());
        let inTokenAddress = this.crosschain.tokenPair[sourceChain][srcToken.address][targetChain];
        let inToken = new eth_wallet_1.Erc20(this.crosschain.wallets[targetChain], inTokenAddress);
        let inAmount = new eth_wallet_1.BigNumber(order.inAmount);
        if (raw)
          inAmount = eth_wallet_1.Utils.fromDecimals(inAmount, await srcToken.decimals);
        inAmount = inAmount.dp(await inToken.decimals, eth_wallet_1.BigNumber.ROUND_DOWN);
        let outToken;
        if (order.outToken == eth_wallet_1.Utils.nullAddress) {
          outToken = this.crosschain.wrappedTokens[targetChain];
        } else {
          outToken = this.crosschain.tokenList[targetChain].find((e) => e.address.toLowerCase() == order.outToken.toLowerCase());
        }
        if (!outToken) {
          throw new Error("unknown token");
        }
        let outTokenDecimals = outToken ? outToken.decimals : 18;
        let minOutAmount = new eth_wallet_1.BigNumber(order.minOutAmount);
        if (raw)
          minOutAmount = eth_wallet_1.Utils.fromDecimals(minOutAmount, outTokenDecimals);
        let protocolFee = inAmount.times(this.config.protocolFeeRate).dp(await inToken.decimals, eth_wallet_1.BigNumber.ROUND_DOWN);
        let imbalance = await this.crosschain.crossChainContracts.sideChain[targetChain].bridgeVault[inToken.address]._bridgeVault.imbalance();
        imbalance = imbalance.minus(order.inAmount);
        let imbalanceFee = imbalance.lt(0) ? imbalance.times(this.config.imbalanceFeeRate).dp(await inToken.decimals, eth_wallet_1.BigNumber.ROUND_DOWN) : new eth_wallet_1.BigNumber(0);
        if (imbalanceFee.eq(0))
          imbalanceFee = new eth_wallet_1.BigNumber(0);
        let _order = {
          owner,
          orderId: parseInt(orderId.toString()),
          amendment: 0,
          sourceChain,
          targetChain,
          srcToken: srcToken.address,
          inToken: inTokenAddress,
          inAmount,
          outToken: order.outToken,
          minOutAmount,
          protocolFee,
          imbalanceFee,
          to: order.to,
          expire: parseInt(order.expire.toString())
        };
        return _order;
      }
      async prepareNewOrder(params) {
        let _order = await this._prepareNewOrder(params.sourceChain, params.orderEvent._event.address, {
          peerChain: params.orderEvent.order.peerChain,
          inAmount: params.orderEvent.order.inAmount,
          outToken: params.orderEvent.order.outToken,
          minOutAmount: params.orderEvent.order.minOutAmount,
          to: params.orderEvent.order.to,
          expire: params.orderEvent.order.expire
        }, params.orderEvent.owner, params.orderEvent.orderId, params.raw);
        return _order;
      }
      async prepareAmendOrder(params) {
        let srcVault = this.vaults[params.sourceChain][params.amendOrderRequestEvent._event.address];
        let owner = await srcVault.orderOwner(params.amendOrderRequestEvent.orderId);
        let _order = await this._prepareNewOrder(params.sourceChain, params.amendOrderRequestEvent._event.address, {
          peerChain: params.amendOrderRequestEvent.order.peerChain,
          inAmount: params.amendOrderRequestEvent.order.inAmount,
          outToken: params.amendOrderRequestEvent.order.outToken,
          minOutAmount: params.amendOrderRequestEvent.order.minOutAmount,
          to: params.amendOrderRequestEvent.order.to,
          expire: params.amendOrderRequestEvent.order.expire
        }, owner, params.amendOrderRequestEvent.orderId, params.raw);
        _order.amendment = params.amendOrderRequestEvent.amendment.toNumber();
        return _order;
      }
      async prepareCancelOrder(params) {
        let targetChain = this.getChain(params.targetChainId);
        let inToken = await targetChain.bridgeVault[params.event._event.address].asset;
        let srcChainId = params.event.sourceChainId.toNumber();
        let srcToken = this.crosschain.tokenPair[params.targetChainId][inToken._address][srcChainId];
        let srcChain = this.getChain(srcChainId);
        let srcVault = srcChain.bridgeVault[srcToken];
        let order = await srcChain.bridgeVault[srcVault.address].orders(params.event.orderId);
        let protocolFee = order.inAmount.times(this.config.protocolFeeRate).dp(await (await srcVault.asset).decimals, eth_wallet_1.BigNumber.ROUND_DOWN);
        return { sourceChainId: parseInt(params.event.sourceChainId.toString()), srcToken, orderId: params.event.orderId, owner: params.event.owner, canceledByOrderOwner: true, protocolFee };
      }
      async prepareCancelOrderFromUnexecuteOrder(params) {
        let srcChain = this.getChain(params.srcChainId);
        let srcVault = srcChain.bridgeVault[params.srcToken].address;
        let owner = await srcChain.bridgeVault[srcVault].orderOwner(params.orderId);
        let protocolFee = new eth_wallet_1.BigNumber(0);
        return { sourceChainId: params.srcChainId, srcToken: params.srcToken, srcVault, orderId: params.orderId, owner, canceledByOrderOwner: false, protocolFee };
      }
      async swap(params) {
        let wallet = this.crosschain.wallets[params.order.targetChain];
        let chainId = params.order.targetChain;
        let chain = this.getChain(chainId);
        let vault = chain.bridgeVault[params.order.inToken];
        let _params = {
          signatures: params.signatures,
          owner: params.order.owner,
          orderId: params.order.orderId,
          amendment: params.order.amendment,
          protocolFee: params.order.protocolFee,
          pair: params.pair,
          order: {
            peerChain: params.order.sourceChain,
            inAmount: params.order.inAmount,
            outToken: params.order.outToken,
            minOutAmount: params.order.minOutAmount,
            to: params.order.to,
            expire: params.order.expire
          }
        };
        let event = await vault.swap(_params);
        return event;
      }
      async cancelOrder(params) {
        let chain = this.getChain(params.cancelOrder.sourceChainId);
        let srcVault = chain.bridgeVault[params.cancelOrder.srcToken];
        let event = await srcVault.cancelOrder({ signatures: params.signatures, orderId: params.cancelOrder.orderId, canceledByOrderOwner: params.cancelOrder.canceledByOrderOwner, protocolFee: params.cancelOrder.protocolFee });
        return event;
      }
      async unstakeApprove(params) {
        let chainId = params.chainId;
        let chain = this.getChain(chainId);
        let vaultRegistry = chain.vaultRegistry[params.event._event.address];
        if (!vaultRegistry) {
          throw new Error("vault registry not found");
        }
        let receipt = await vaultRegistry.unstakeApprove({ signatures: params.signatures, backer: params.event.backer, trollProfileIndex: params.event.trollProfileIndex, shares: params.event.shares, nonce: params.nonce });
        return receipt;
      }
      async hashUpdateTrollForSigning(params) {
        let wallet = this.crosschain.wallets[params.chainId];
        let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry.address }, { t: "uint256", v: params.event.trollProfileIndex.toString() }, { t: "address", v: params.event.newTroll }, { t: "uint256", v: params.event._event.transactionHash });
        return hash;
      }
      async updateTrollSideChain(params) {
        let chain = this.crosschain.crossChainContracts.sideChain[params.chainId];
        if (!chain) {
          throw new Error("Invalid chainId");
        }
        let wallet = this.crosschain.wallets[params.chainId];
        let registry = chain.trollRegistry;
        let receipt = await registry.updateTroll({ signatures: params.signatures, trollProfileIndex: params.event.trollProfileIndex, newTroll: params.event.newTroll, nonce: new eth_wallet_1.BigNumber(params.event._event.transactionHash) });
        let event = registry.parseAddTrollEvent(receipt)[0];
        return event;
      }
      async hashRemoveTrollForSigning(params) {
        let wallet = this.crosschain.wallets[params.chainId];
        let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry.address }, { t: "uint256", v: params.trollProfileIndex.toString() }, { t: "address", v: params.newTroll }, { t: "uint256", v: "0x" + params.nonce.toString(16) });
        return hash;
      }
      async hashUnlockTrollForSigning(params) {
        let wallet = this.crosschain.wallets[params.chainId];
        let decimals = await this.crosschain.oswap[params.chainId].decimals;
        let penalty = Object.values(params.penalties).map((e) => eth_wallet_1.Utils.toDecimals(e, decimals));
        let hash = wallet.web3.utils.soliditySha3({ t: "uint256", v: await wallet.getChainId() }, { t: "address", v: this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry.address }, { t: "uint256", v: params.trollProfileIndex.toString() }, { t: "uint8", v: params.unlock ? 1 : 0 }, { t: "address[]", v: Object.keys(params.penalties) }, { t: "uint256[]", v: penalty }, { t: "uint256", v: "0x" + params.nonce.toString(16) });
        return hash;
      }
      async unlockSuperTroll(params) {
        let penalty = [];
        let decimals = await this.crosschain.oswap[params.chainId].decimals;
        for (let vault in params.penalties) {
          penalty.push(eth_wallet_1.Utils.toDecimals(params.penalties[vault], decimals));
        }
        let registry = this.crosschain.crossChainContracts.sideChain[params.chainId].trollRegistry;
        let receipt = await registry.unlockSuperTroll({
          signatures: params.signatures,
          trollProfileIndex: params.trollProfileIndex,
          unlock: params.unlock,
          vaultRegistry: Object.keys(params.penalties),
          penalty,
          nonce: params.nonce
        });
        return registry.parseUnlockSuperTrollEvent(receipt);
      }
      hashVotingExecutionForSigning(params) {
        return this.crosschain.crossChainContracts.sideChain[params.chainId].voting.getHash({ params: params.params, nonce: params.nonce });
      }
      executeVoting(params) {
        return this.crosschain.crossChainContracts.sideChain[params.chainId].votingExecutor.execute(params);
      }
      async rebalancerWithdraw(params) {
        let chain = this.getChain(params.chainId);
        let vault = chain.bridgeVault[params.asset];
        let event = await vault.rebalancerWithdraw({
          signatures: params.signatures,
          assetAmount: params.assetAmount,
          nonce: params.nonce
        });
        return event;
      }
      async voidOrder(params) {
        let chain = this.getChain(params.order.targetChain);
        let vault = chain.bridgeVault[params.order.targetVault];
        let event = vault.voidOrder({ signatures: params.signatures, orderId: params.order.targetOrderId });
        return event;
      }
    };
    exports.Troll = Troll;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/owner.js
var require_owner = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/owner.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Owner = void 0;
    var Owner = class {
      constructor(crosschain) {
        this.crosschain = crosschain;
      }
      async addTroll(params) {
        let chain = this.crosschain.mainChain;
        if (!chain) {
          throw new Error("not on main chain");
        }
        if (this.crosschain.chains.mainChain != this.crosschain.chainId) {
          throw new Error("not on main chain");
        }
        let registry = chain.trollRegistry;
        let receipt = await registry.addTroll(params);
        let event = registry.parseAddTrollEvent(receipt)[0];
        return event;
      }
      async updateTroll(params) {
        let chain = this.crosschain.mainChain;
        if (!chain) {
          throw new Error("not on main chain");
        }
        if (this.crosschain.chains.mainChain != this.crosschain.chainId) {
          throw new Error("not on main chain");
        }
        let registry = chain.trollRegistry;
        let receipt = await registry.updateTroll(params);
        let event = registry.parseUpdateTrollEvent(receipt)[0];
        return event;
      }
    };
    exports.Owner = Owner;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/@openzeppelin/contracts/token/ERC721/ERC721.json.js
var require_ERC721_json = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/@openzeppelin/contracts/token/ERC721/ERC721.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "name_", "type": "string" }, { "internalType": "string", "name": "symbol_", "type": "string" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "60806040523480156200001157600080fd5b5060405162001baf38038062001baf8339810160408190526200003491620001c1565b81516200004990600090602085019062000068565b5080516200005f90600190602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611924806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d0578063b88d4fde146101e3578063c87b56dd146101f6578063e985e9c51461020957600080fd5b80636352211e1461019457806370a08231146101a757806395d89b41146101c857600080fd5b8063095ea7b3116100bd578063095ea7b31461015957806323b872dd1461016e57806342842e0e1461018157600080fd5b806301ffc9a7146100e457806306fdde031461010c578063081812fc14610121575b600080fd5b6100f76100f23660046115fb565b610252565b60405190151581526020015b60405180910390f35b610114610337565b604051610103919061170d565b61013461012f366004611633565b6103c9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016c6101673660046115d2565b6104a8565b005b61016c61017c36600461146a565b610635565b61016c61018f36600461146a565b6106d6565b6101346101a2366004611633565b6106f1565b6101ba6101b536600461141e565b6107a3565b604051908152602001610103565b610114610871565b61016c6101de366004611598565b610880565b61016c6101f13660046114a5565b610997565b610114610204366004611633565b610a3f565b6100f7610217366004611438565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260056020908152604080832093909416825291909152205460ff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806102e557507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061033157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060600080546103469061178f565b80601f01602080910402602001604051908101604052809291908181526020018280546103729061178f565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b5050505050905090565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1661047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60006104b3826106f1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610476565b3373ffffffffffffffffffffffffffffffffffffffff8216148061059a575061059a8133610217565b610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610476565b6106308383610b5c565b505050565b61063f3382610bfc565b6106cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610476565b610630838383610d6c565b61063083838360405180602001604052806000815250610997565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610476565b600073ffffffffffffffffffffffffffffffffffffffff8216610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610476565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6060600180546103469061178f565b73ffffffffffffffffffffffffffffffffffffffff8216331415610900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610476565b33600081815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6109a13383610bfc565b610a2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610476565b610a3984848484610fd3565b50505050565b60008181526002602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16610af3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610476565b6000610b0a60408051602081019091526000815290565b90506000815111610b2a5760405180602001604052806000815250610b55565b80610b3484611076565b604051602001610b45929190611695565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091558190610bb6826106f1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526002602052604081205473ffffffffffffffffffffffffffffffffffffffff16610cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610476565b6000610cb8836106f1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d2757508373ffffffffffffffffffffffffffffffffffffffff16610d0f846103c9565b73ffffffffffffffffffffffffffffffffffffffff16145b80610d64575073ffffffffffffffffffffffffffffffffffffffff80821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b8273ffffffffffffffffffffffffffffffffffffffff16610d8c826106f1565b73ffffffffffffffffffffffffffffffffffffffff1614610e2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610476565b73ffffffffffffffffffffffffffffffffffffffff8216610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610476565b610edc600082610b5c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120805460019290610f1290849061174c565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120805460019290610f4d908490611720565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610fde848484610d6c565b610fea848484846111f6565b610a39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610476565b6060816110b657505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156110e057806110ca816117e3565b91506110d99050600a83611738565b91506110ba565b60008167ffffffffffffffff811115611122577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561114c576020820181803683370190505b5090505b8415610d645761116160018361174c565b915061116e600a8661181c565b611179906030611720565b60f81b8183815181106111b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506111ef600a86611738565b9450611150565b600073ffffffffffffffffffffffffffffffffffffffff84163b156113ea576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a029061126d9033908990889088906004016116c4565b602060405180830381600087803b15801561128757600080fd5b505af19250505080156112d5575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526112d291810190611617565b60015b61139f573d808015611303576040519150601f19603f3d011682016040523d82523d6000602084013e611308565b606091505b508051611397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610476565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050610d64565b506001949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461141957600080fd5b919050565b60006020828403121561142f578081fd5b610b55826113f5565b6000806040838503121561144a578081fd5b611453836113f5565b9150611461602084016113f5565b90509250929050565b60008060006060848603121561147e578081fd5b611487846113f5565b9250611495602085016113f5565b9150604084013590509250925092565b600080600080608085870312156114ba578081fd5b6114c3856113f5565b93506114d1602086016113f5565b925060408501359150606085013567ffffffffffffffff808211156114f4578283fd5b818701915087601f830112611507578283fd5b8135818111156115195761151961188e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561155f5761155f61188e565b816040528281528a6020848701011115611577578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156115aa578182fd5b6115b3836113f5565b9150602083013580151581146115c7578182fd5b809150509250929050565b600080604083850312156115e4578182fd5b6115ed836113f5565b946020939093013593505050565b60006020828403121561160c578081fd5b8135610b55816118bd565b600060208284031215611628578081fd5b8151610b55816118bd565b600060208284031215611644578081fd5b5035919050565b60008151808452611663816020860160208601611763565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600083516116a7818460208801611763565b8351908301906116bb818360208801611763565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152611703608083018461164b565b9695505050505050565b602081526000610b55602083018461164b565b6000821982111561173357611733611830565b500190565b6000826117475761174761185f565b500490565b60008282101561175e5761175e611830565b500390565b60005b8381101561177e578181015183820152602001611766565b83811115610a395750506000910152565b600181811c908216806117a357607f821691505b602082108114156117dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561181557611815611830565b5060010190565b60008261182b5761182b61185f565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffff00000000000000000000000000000000000000000000000000000000811681146118eb57600080fd5b5056fea2646970667358221220922699f7c61e9b59c1ba3a3a99dc263bcead3505e4e1bbea0f6393ce5e03c2e064736f6c63430008040033"
    };
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/@openzeppelin/contracts/token/ERC721/ERC721.js
var require_ERC721 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/@openzeppelin/contracts/token/ERC721/ERC721.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721 = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var ERC721_json_1 = __importDefault(require_ERC721_json());
    var ERC721 = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, ERC721_json_1.default.abi, ERC721_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          approved: result.approved,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseApprovalForAllEvent(receipt) {
        return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
      }
      decodeApprovalForAllEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          operator: result.operator,
          approved: result.approved,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      assign() {
        let balanceOf_call = async (owner) => {
          let result = await this.call("balanceOf", [owner]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let getApproved_call = async (tokenId) => {
          let result = await this.call("getApproved", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.getApproved = getApproved_call;
        let isApprovedForAllParams = (params) => [params.owner, params.operator];
        let isApprovedForAll_call = async (params) => {
          let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
          return result;
        };
        this.isApprovedForAll = isApprovedForAll_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let ownerOf_call = async (tokenId) => {
          let result = await this.call("ownerOf", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.ownerOf = ownerOf_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let tokenURI_call = async (tokenId) => {
          let result = await this.call("tokenURI", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.tokenURI = tokenURI_call;
        let approveParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let safeTransferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let safeTransferFrom_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
          call: safeTransferFrom_call
        });
        let safeTransferFrom_1Params = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.stringToBytes(params.data)];
        let safeTransferFrom_1_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_1_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
          call: safeTransferFrom_1_call
        });
        let setApprovalForAllParams = (params) => [params.operator, params.approved];
        let setApprovalForAll_send = async (params) => {
          let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
          return result;
        };
        let setApprovalForAll_call = async (params) => {
          let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
          return;
        };
        this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
          call: setApprovalForAll_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
      }
    };
    exports.ERC721 = ERC721;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/Authorization.json.js
var require_Authorization_json2 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/Authorization.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556104e2806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639c52a7f11161005b5780639c52a7f114610109578063a2f55ae51461011c578063d4ee1d901461012f578063f2fde38b1461014f57600080fd5b80633fd8cc4e1461008257806360536172146100ba5780638da5cb5b146100c4575b600080fd5b6100a5610090366004610471565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100c2610162565b005b6000546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100b1565b6100c2610117366004610471565b610290565b6100c261012a366004610471565b610337565b6001546100e49073ffffffffffffffffffffffffffffffffffffffff1681565b6100c261015d366004610471565b6103da565b60015473ffffffffffffffffffffffffffffffffffffffff16331461020d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e0000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b457600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a788491015b60405180910390a150565b60005473ffffffffffffffffffffffffffffffffffffffff16331461035b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf5910161032c565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103fe57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b9060200161032c565b600060208284031215610482578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104a5578182fd5b939250505056fea2646970667358221220969fcce27c06d496b8d77895f68979df4ff3898826245c8afd2d61cb3763b7e064736f6c63430008040033"
    };
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/Authorization.js
var require_Authorization2 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/Authorization.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Authorization = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Authorization_json_1 = __importDefault(require_Authorization_json2());
    var Authorization = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, Authorization_json_1.default.abi, Authorization_json_1.default.bytecode);
        this.assign();
      }
      deploy() {
        return this.__deploy();
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      assign() {
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
      }
    };
    exports.Authorization = Authorization;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT.json.js
var require_TrollNFT_json = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT.js
var require_TrollNFT = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrollNFT = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TrollNFT_json_1 = __importDefault(require_TrollNFT_json());
    var TrollNFT = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TrollNFT_json_1.default.abi, TrollNFT_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol, params.baseURI, eth_wallet_1.Utils.toString(params.cap), params.stakeToken, params.requireApproval, eth_wallet_1.Utils.toString(params.minimumStake), eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          approved: result.approved,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseApprovalForAllEvent(receipt) {
        return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
      }
      decodeApprovalForAllEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          operator: result.operator,
          approved: result.approved,
          _event: event
        };
      }
      parseApprovedStakerEvent(receipt) {
        return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
      }
      decodeApprovedStakerEvent(event) {
        let result = event.data;
        return {
          staker: result.staker,
          allow: result.allow,
          _event: event
        };
      }
      parseAttributeEvent(receipt) {
        return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
      }
      decodeAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseBaseURIEvent(receipt) {
        return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
      }
      decodeBaseURIEvent(event) {
        let result = event.data;
        return {
          baseURI: result.baseURI,
          _event: event
        };
      }
      parseCapEvent(receipt) {
        return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
      }
      decodeCapEvent(event) {
        let result = event.data;
        return {
          cap: new eth_wallet_1.BigNumber(result.cap),
          _event: event
        };
      }
      parseCustomAttributeEvent(receipt) {
        return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
      }
      decodeCustomAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseMinimumStakeEvent(receipt) {
        return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
      }
      decodeMinimumStakeEvent(event) {
        let result = event.data;
        return {
          minimumStake: new eth_wallet_1.BigNumber(result.minimumStake),
          _event: event
        };
      }
      parseProtocolFeeEvent(receipt) {
        return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
      }
      decodeProtocolFeeEvent(event) {
        let result = event.data;
        return {
          protocolFee: new eth_wallet_1.BigNumber(result.protocolFee),
          protocolFeeTo: result.protocolFeeTo,
          _event: event
        };
      }
      parseStakeEvent(receipt) {
        return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
      }
      decodeStakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnstakeEvent(receipt) {
        return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
      }
      decodeUnstakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      assign() {
        let _attributes_call = async (param1) => {
          let result = await this.call("_attributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._attributes = _attributes_call;
        let _customAttributes_call = async (param1) => {
          let result = await this.call("_customAttributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._customAttributes = _customAttributes_call;
        let approvedStaker_call = async (param1) => {
          let result = await this.call("approvedStaker", [param1]);
          return result;
        };
        this.approvedStaker = approvedStaker_call;
        let balanceOf_call = async (owner) => {
          let result = await this.call("balanceOf", [owner]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let baseURI_call = async () => {
          let result = await this.call("baseURI");
          return result;
        };
        this.baseURI = baseURI_call;
        let cap_call = async () => {
          let result = await this.call("cap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.cap = cap_call;
        let counter_call = async () => {
          let result = await this.call("counter");
          return new eth_wallet_1.BigNumber(result);
        };
        this.counter = counter_call;
        let creationTime_call = async (param1) => {
          let result = await this.call("creationTime", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.creationTime = creationTime_call;
        let getApproved_call = async (tokenId) => {
          let result = await this.call("getApproved", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.getApproved = getApproved_call;
        let getAttributes1Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.offset), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes1_call = async (params) => {
          let result = await this.call("getAttributes1", getAttributes1Params(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.getAttributes1 = getAttributes1_call;
        let getAttributes2Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes2_call = async (params) => {
          let result = await this.call("getAttributes2", getAttributes2Params(params));
          return result.map((e) => new eth_wallet_1.BigNumber(e));
        };
        this.getAttributes2 = getAttributes2_call;
        let isApprovedForAllParams = (params) => [params.owner, params.operator];
        let isApprovedForAll_call = async (params) => {
          let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
          return result;
        };
        this.isApprovedForAll = isApprovedForAll_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let minimumStake_call = async () => {
          let result = await this.call("minimumStake");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumStake = minimumStake_call;
        let minted_call = async (param1) => {
          let result = await this.call("minted", [param1]);
          return result;
        };
        this.minted = minted_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let ownerOf_call = async (tokenId) => {
          let result = await this.call("ownerOf", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.ownerOf = ownerOf_call;
        let protocolFee_call = async () => {
          let result = await this.call("protocolFee");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFee = protocolFee_call;
        let protocolFeeBalance_call = async () => {
          let result = await this.call("protocolFeeBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFeeBalance = protocolFeeBalance_call;
        let protocolFeeTo_call = async () => {
          let result = await this.call("protocolFeeTo");
          return result;
        };
        this.protocolFeeTo = protocolFeeTo_call;
        let requireApproval_call = async () => {
          let result = await this.call("requireApproval");
          return result;
        };
        this.requireApproval = requireApproval_call;
        let stakeToken_call = async () => {
          let result = await this.call("stakeToken");
          return result;
        };
        this.stakeToken = stakeToken_call;
        let stakingBalance_call = async (param1) => {
          let result = await this.call("stakingBalance", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakingBalance = stakingBalance_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let tokenByIndex_call = async (index) => {
          let result = await this.call("tokenByIndex", [eth_wallet_1.Utils.toString(index)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenByIndex = tokenByIndex_call;
        let tokenOfOwnerByIndexParams = (params) => [params.owner, eth_wallet_1.Utils.toString(params.index)];
        let tokenOfOwnerByIndex_call = async (params) => {
          let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
        let tokenURI_call = async (tokenId) => {
          let result = await this.call("tokenURI", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.tokenURI = tokenURI_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let batchApprove_send = async (stakers) => {
          let result = await this.send("batchApprove", [stakers]);
          return result;
        };
        let batchApprove_call = async (stakers) => {
          let result = await this.call("batchApprove", [stakers]);
          return;
        };
        this.batchApprove = Object.assign(batchApprove_send, {
          call: batchApprove_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let safeTransferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let safeTransferFrom_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
          call: safeTransferFrom_call
        });
        let safeTransferFrom_1Params = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.stringToBytes(params.data)];
        let safeTransferFrom_1_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_1_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
          call: safeTransferFrom_1_call
        });
        let setApprovalForAllParams = (params) => [params.operator, params.approved];
        let setApprovalForAll_send = async (params) => {
          let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
          return result;
        };
        let setApprovalForAll_call = async (params) => {
          let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
          return;
        };
        this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
          call: setApprovalForAll_call
        });
        let setApprovedStakerParams = (params) => [params.staker, params.allow];
        let setApprovedStaker_send = async (params) => {
          let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
          return result;
        };
        let setApprovedStaker_call = async (params) => {
          let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
          return;
        };
        this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
          call: setApprovedStaker_call
        });
        let setBaseURI_send = async (baseURI) => {
          let result = await this.send("setBaseURI", [baseURI]);
          return result;
        };
        let setBaseURI_call = async (baseURI) => {
          let result = await this.call("setBaseURI", [baseURI]);
          return;
        };
        this.setBaseURI = Object.assign(setBaseURI_send, {
          call: setBaseURI_call
        });
        let setCap_send = async (cap) => {
          let result = await this.send("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return result;
        };
        let setCap_call = async (cap) => {
          let result = await this.call("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return;
        };
        this.setCap = Object.assign(setCap_send, {
          call: setCap_call
        });
        let setCustomAttributeParams = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.attribute)];
        let setCustomAttribute_send = async (params) => {
          let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
          return result;
        };
        let setCustomAttribute_call = async (params) => {
          let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
          return;
        };
        this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
          call: setCustomAttribute_call
        });
        let setMinimumStake_send = async (minimumStake) => {
          let result = await this.send("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return result;
        };
        let setMinimumStake_call = async (minimumStake) => {
          let result = await this.call("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return;
        };
        this.setMinimumStake = Object.assign(setMinimumStake_send, {
          call: setMinimumStake_call
        });
        let setProtocolFeeParams = (params) => [eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo];
        let setProtocolFee_send = async (params) => {
          let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
          return result;
        };
        let setProtocolFee_call = async (params) => {
          let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
          return;
        };
        this.setProtocolFee = Object.assign(setProtocolFee_send, {
          call: setProtocolFee_call
        });
        let stake_send = async (amount) => {
          let result = await this.send("stake", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let stake_call = async (amount) => {
          let result = await this.call("stake", [eth_wallet_1.Utils.toString(amount)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stake = Object.assign(stake_send, {
          call: stake_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let transferProtocolFee_send = async () => {
          let result = await this.send("transferProtocolFee");
          return result;
        };
        let transferProtocolFee_call = async () => {
          let result = await this.call("transferProtocolFee");
          return;
        };
        this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
          call: transferProtocolFee_call
        });
        let unstake_send = async (tokenId) => {
          let result = await this.send("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        let unstake_call = async (tokenId) => {
          let result = await this.call("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return;
        };
        this.unstake = Object.assign(unstake_send, {
          call: unstake_call
        });
      }
    };
    exports.TrollNFT = TrollNFT;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFTV2.json.js
var require_TrollNFTV2_json = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFTV2.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }, { "components": [{ "internalType": "contract IERC721[]", "name": "listValidNFTs", "type": "address[]" }, { "internalType": "uint256", "name": "maximumValidNFTs", "type": "uint256" }], "internalType": "struct TrollNFTV2.NFTInfo", "name": "_nftInfo", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountAdded", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmount", "type": "uint256" }], "name": "AddStakes", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }], "name": "AddValidNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "EquipNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesApproval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "toTokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "UnequipNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "_stakesTransferAllowances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakes", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC721[]", "name": "nfts", "type": "address[]" }], "name": "addValidNFTs", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "destoryDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "equipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "extraStakes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "isValidNFT", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "lastStakeDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "listValidNFTs", "outputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "maximumValidNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "nftsEquipped", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "trollOwnedNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "unequipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "validNFTsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFTV2.js
var require_TrollNFTV2 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFTV2.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrollNFTV2 = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TrollNFTV2_json_1 = __importDefault(require_TrollNFTV2_json());
    var TrollNFTV2 = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TrollNFTV2_json_1.default.abi, TrollNFTV2_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol, params.baseURI, eth_wallet_1.Utils.toString(params.cap), params.stakeToken, params.requireApproval, eth_wallet_1.Utils.toString(params.minimumStake), eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo, [params.nftInfo.listValidNFTs, eth_wallet_1.Utils.toString(params.nftInfo.maximumValidNFTs)]]);
      }
      parseAddStakesEvent(receipt) {
        return this.parseEvents(receipt, "AddStakes").map((e) => this.decodeAddStakesEvent(e));
      }
      decodeAddStakesEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amountAdded: new eth_wallet_1.BigNumber(result.amountAdded),
          newAmount: new eth_wallet_1.BigNumber(result.newAmount),
          _event: event
        };
      }
      parseAddValidNFTEvent(receipt) {
        return this.parseEvents(receipt, "AddValidNFT").map((e) => this.decodeAddValidNFTEvent(e));
      }
      decodeAddValidNFTEvent(event) {
        let result = event.data;
        return {
          nft: result.nft,
          _event: event
        };
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          approved: result.approved,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseApprovalForAllEvent(receipt) {
        return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
      }
      decodeApprovalForAllEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          operator: result.operator,
          approved: result.approved,
          _event: event
        };
      }
      parseApprovedStakerEvent(receipt) {
        return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
      }
      decodeApprovedStakerEvent(event) {
        let result = event.data;
        return {
          staker: result.staker,
          allow: result.allow,
          _event: event
        };
      }
      parseAttributeEvent(receipt) {
        return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
      }
      decodeAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseBaseURIEvent(receipt) {
        return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
      }
      decodeBaseURIEvent(event) {
        let result = event.data;
        return {
          baseURI: result.baseURI,
          _event: event
        };
      }
      parseCapEvent(receipt) {
        return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
      }
      decodeCapEvent(event) {
        let result = event.data;
        return {
          cap: new eth_wallet_1.BigNumber(result.cap),
          _event: event
        };
      }
      parseCustomAttributeEvent(receipt) {
        return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
      }
      decodeCustomAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseEquipNFTEvent(receipt) {
        return this.parseEvents(receipt, "EquipNFT").map((e) => this.decodeEquipNFTEvent(e));
      }
      decodeEquipNFTEvent(event) {
        let result = event.data;
        return {
          trollId: new eth_wallet_1.BigNumber(result.trollId),
          nft: result.nft,
          nftId: new eth_wallet_1.BigNumber(result.nftId),
          _event: event
        };
      }
      parseMinimumStakeEvent(receipt) {
        return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
      }
      decodeMinimumStakeEvent(event) {
        let result = event.data;
        return {
          minimumStake: new eth_wallet_1.BigNumber(result.minimumStake),
          _event: event
        };
      }
      parseProtocolFeeEvent(receipt) {
        return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
      }
      decodeProtocolFeeEvent(event) {
        let result = event.data;
        return {
          protocolFee: new eth_wallet_1.BigNumber(result.protocolFee),
          protocolFeeTo: result.protocolFeeTo,
          _event: event
        };
      }
      parseStakeEvent(receipt) {
        return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
      }
      decodeStakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStakesApprovalEvent(receipt) {
        return this.parseEvents(receipt, "StakesApproval").map((e) => this.decodeStakesApprovalEvent(e));
      }
      decodeStakesApprovalEvent(event) {
        let result = event.data;
        return {
          fromTokenId: new eth_wallet_1.BigNumber(result.fromTokenId),
          spender: result.spender,
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStakesTransferEvent(receipt) {
        return this.parseEvents(receipt, "StakesTransfer").map((e) => this.decodeStakesTransferEvent(e));
      }
      decodeStakesTransferEvent(event) {
        let result = event.data;
        return {
          fromTokenId: new eth_wallet_1.BigNumber(result.fromTokenId),
          toTokenId: new eth_wallet_1.BigNumber(result.toTokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnequipNFTEvent(receipt) {
        return this.parseEvents(receipt, "UnequipNFT").map((e) => this.decodeUnequipNFTEvent(e));
      }
      decodeUnequipNFTEvent(event) {
        let result = event.data;
        return {
          trollId: new eth_wallet_1.BigNumber(result.trollId),
          nft: result.nft,
          nftId: new eth_wallet_1.BigNumber(result.nftId),
          _event: event
        };
      }
      parseUnstakeEvent(receipt) {
        return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
      }
      decodeUnstakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      assign() {
        let _attributes_call = async (param1) => {
          let result = await this.call("_attributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._attributes = _attributes_call;
        let _customAttributes_call = async (param1) => {
          let result = await this.call("_customAttributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._customAttributes = _customAttributes_call;
        let _stakesTransferAllowancesParams = (params) => [eth_wallet_1.Utils.toString(params.param1), params.param2];
        let _stakesTransferAllowances_call = async (params) => {
          let result = await this.call("_stakesTransferAllowances", _stakesTransferAllowancesParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this._stakesTransferAllowances = _stakesTransferAllowances_call;
        let approvedStaker_call = async (param1) => {
          let result = await this.call("approvedStaker", [param1]);
          return result;
        };
        this.approvedStaker = approvedStaker_call;
        let balanceOf_call = async (owner) => {
          let result = await this.call("balanceOf", [owner]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let baseURI_call = async () => {
          let result = await this.call("baseURI");
          return result;
        };
        this.baseURI = baseURI_call;
        let cap_call = async () => {
          let result = await this.call("cap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.cap = cap_call;
        let counter_call = async () => {
          let result = await this.call("counter");
          return new eth_wallet_1.BigNumber(result);
        };
        this.counter = counter_call;
        let creationDate_call = async (param1) => {
          let result = await this.call("creationDate", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.creationDate = creationDate_call;
        let destoryDate_call = async (param1) => {
          let result = await this.call("destoryDate", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.destoryDate = destoryDate_call;
        let extraStakes_call = async (param1) => {
          let result = await this.call("extraStakes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.extraStakes = extraStakes_call;
        let getApproved_call = async (tokenId) => {
          let result = await this.call("getApproved", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.getApproved = getApproved_call;
        let getAttributes1Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.offset), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes1_call = async (params) => {
          let result = await this.call("getAttributes1", getAttributes1Params(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.getAttributes1 = getAttributes1_call;
        let getAttributes2Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes2_call = async (params) => {
          let result = await this.call("getAttributes2", getAttributes2Params(params));
          return result.map((e) => new eth_wallet_1.BigNumber(e));
        };
        this.getAttributes2 = getAttributes2_call;
        let isApprovedForAllParams = (params) => [params.owner, params.operator];
        let isApprovedForAll_call = async (params) => {
          let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
          return result;
        };
        this.isApprovedForAll = isApprovedForAll_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let isValidNFT_call = async (param1) => {
          let result = await this.call("isValidNFT", [param1]);
          return result;
        };
        this.isValidNFT = isValidNFT_call;
        let lastStakeDate_call = async (param1) => {
          let result = await this.call("lastStakeDate", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lastStakeDate = lastStakeDate_call;
        let listValidNFTs_call = async (param1) => {
          let result = await this.call("listValidNFTs", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.listValidNFTs = listValidNFTs_call;
        let maximumValidNFTs_call = async () => {
          let result = await this.call("maximumValidNFTs");
          return new eth_wallet_1.BigNumber(result);
        };
        this.maximumValidNFTs = maximumValidNFTs_call;
        let minimumStake_call = async () => {
          let result = await this.call("minimumStake");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumStake = minimumStake_call;
        let minted_call = async (param1) => {
          let result = await this.call("minted", [param1]);
          return result;
        };
        this.minted = minted_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let nftsEquippedParams = (params) => [params.param1, eth_wallet_1.Utils.toString(params.param2)];
        let nftsEquipped_call = async (params) => {
          let result = await this.call("nftsEquipped", nftsEquippedParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.nftsEquipped = nftsEquipped_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let ownerOf_call = async (tokenId) => {
          let result = await this.call("ownerOf", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.ownerOf = ownerOf_call;
        let protocolFee_call = async () => {
          let result = await this.call("protocolFee");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFee = protocolFee_call;
        let protocolFeeBalance_call = async () => {
          let result = await this.call("protocolFeeBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFeeBalance = protocolFeeBalance_call;
        let protocolFeeTo_call = async () => {
          let result = await this.call("protocolFeeTo");
          return result;
        };
        this.protocolFeeTo = protocolFeeTo_call;
        let requireApproval_call = async () => {
          let result = await this.call("requireApproval");
          return result;
        };
        this.requireApproval = requireApproval_call;
        let stakeToken_call = async () => {
          let result = await this.call("stakeToken");
          return result;
        };
        this.stakeToken = stakeToken_call;
        let stakingBalance_call = async (param1) => {
          let result = await this.call("stakingBalance", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakingBalance = stakingBalance_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let tokenByIndex_call = async (index) => {
          let result = await this.call("tokenByIndex", [eth_wallet_1.Utils.toString(index)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenByIndex = tokenByIndex_call;
        let tokenOfOwnerByIndexParams = (params) => [params.owner, eth_wallet_1.Utils.toString(params.index)];
        let tokenOfOwnerByIndex_call = async (params) => {
          let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
        let tokenURI_call = async (tokenId) => {
          let result = await this.call("tokenURI", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.tokenURI = tokenURI_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let trollOwnedNFTsParams = (params) => [eth_wallet_1.Utils.toString(params.param1), params.param2];
        let trollOwnedNFTs_call = async (params) => {
          let result = await this.call("trollOwnedNFTs", trollOwnedNFTsParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollOwnedNFTs = trollOwnedNFTs_call;
        let validNFTsLength_call = async () => {
          let result = await this.call("validNFTsLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.validNFTsLength = validNFTsLength_call;
        let addStakesParams = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.amount)];
        let addStakes_send = async (params) => {
          let result = await this.send("addStakes", addStakesParams(params));
          return result;
        };
        let addStakes_call = async (params) => {
          let result = await this.call("addStakes", addStakesParams(params));
          return;
        };
        this.addStakes = Object.assign(addStakes_send, {
          call: addStakes_call
        });
        let addValidNFTs_send = async (nfts) => {
          let result = await this.send("addValidNFTs", [nfts]);
          return result;
        };
        let addValidNFTs_call = async (nfts) => {
          let result = await this.call("addValidNFTs", [nfts]);
          return;
        };
        this.addValidNFTs = Object.assign(addValidNFTs_send, {
          call: addValidNFTs_call
        });
        let approveParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let batchApprove_send = async (stakers) => {
          let result = await this.send("batchApprove", [stakers]);
          return result;
        };
        let batchApprove_call = async (stakers) => {
          let result = await this.call("batchApprove", [stakers]);
          return;
        };
        this.batchApprove = Object.assign(batchApprove_send, {
          call: batchApprove_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let equipNFTParams = (params) => [eth_wallet_1.Utils.toString(params.trollId), params.nft, eth_wallet_1.Utils.toString(params.nftId)];
        let equipNFT_send = async (params) => {
          let result = await this.send("equipNFT", equipNFTParams(params));
          return result;
        };
        let equipNFT_call = async (params) => {
          let result = await this.call("equipNFT", equipNFTParams(params));
          return;
        };
        this.equipNFT = Object.assign(equipNFT_send, {
          call: equipNFT_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let safeTransferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let safeTransferFrom_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
          call: safeTransferFrom_call
        });
        let safeTransferFrom_1Params = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.stringToBytes(params.data)];
        let safeTransferFrom_1_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_1_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
          call: safeTransferFrom_1_call
        });
        let setApprovalForAllParams = (params) => [params.operator, params.approved];
        let setApprovalForAll_send = async (params) => {
          let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
          return result;
        };
        let setApprovalForAll_call = async (params) => {
          let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
          return;
        };
        this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
          call: setApprovalForAll_call
        });
        let setApprovedStakerParams = (params) => [params.staker, params.allow];
        let setApprovedStaker_send = async (params) => {
          let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
          return result;
        };
        let setApprovedStaker_call = async (params) => {
          let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
          return;
        };
        this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
          call: setApprovedStaker_call
        });
        let setBaseURI_send = async (baseURI) => {
          let result = await this.send("setBaseURI", [baseURI]);
          return result;
        };
        let setBaseURI_call = async (baseURI) => {
          let result = await this.call("setBaseURI", [baseURI]);
          return;
        };
        this.setBaseURI = Object.assign(setBaseURI_send, {
          call: setBaseURI_call
        });
        let setCap_send = async (cap) => {
          let result = await this.send("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return result;
        };
        let setCap_call = async (cap) => {
          let result = await this.call("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return;
        };
        this.setCap = Object.assign(setCap_send, {
          call: setCap_call
        });
        let setCustomAttributeParams = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.attribute)];
        let setCustomAttribute_send = async (params) => {
          let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
          return result;
        };
        let setCustomAttribute_call = async (params) => {
          let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
          return;
        };
        this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
          call: setCustomAttribute_call
        });
        let setMinimumStake_send = async (minimumStake) => {
          let result = await this.send("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return result;
        };
        let setMinimumStake_call = async (minimumStake) => {
          let result = await this.call("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return;
        };
        this.setMinimumStake = Object.assign(setMinimumStake_send, {
          call: setMinimumStake_call
        });
        let setProtocolFeeParams = (params) => [eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo];
        let setProtocolFee_send = async (params) => {
          let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
          return result;
        };
        let setProtocolFee_call = async (params) => {
          let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
          return;
        };
        this.setProtocolFee = Object.assign(setProtocolFee_send, {
          call: setProtocolFee_call
        });
        let stake_send = async (amount) => {
          let result = await this.send("stake", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let stake_call = async (amount) => {
          let result = await this.call("stake", [eth_wallet_1.Utils.toString(amount)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stake = Object.assign(stake_send, {
          call: stake_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let transferProtocolFee_send = async () => {
          let result = await this.send("transferProtocolFee");
          return result;
        };
        let transferProtocolFee_call = async () => {
          let result = await this.call("transferProtocolFee");
          return;
        };
        this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
          call: transferProtocolFee_call
        });
        let unequipNFTParams = (params) => [eth_wallet_1.Utils.toString(params.trollId), params.nft, eth_wallet_1.Utils.toString(params.nftId)];
        let unequipNFT_send = async (params) => {
          let result = await this.send("unequipNFT", unequipNFTParams(params));
          return result;
        };
        let unequipNFT_call = async (params) => {
          let result = await this.call("unequipNFT", unequipNFTParams(params));
          return;
        };
        this.unequipNFT = Object.assign(unequipNFT_send, {
          call: unequipNFT_call
        });
        let unstake_send = async (tokenId) => {
          let result = await this.send("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        let unstake_call = async (tokenId) => {
          let result = await this.call("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return;
        };
        this.unstake = Object.assign(unstake_send, {
          call: unstake_call
        });
      }
    };
    exports.TrollNFTV2 = TrollNFTV2;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRF.json.js
var require_TrollNFT_VRF_json = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRF.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }, { "internalType": "address[2]", "name": "vrfAddresses", "type": "address[2]" }, { "internalType": "bytes32[2]", "name": "vrfParams", "type": "bytes32[2]" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationTime", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "requestId", "type": "bytes32" }, { "internalType": "uint256", "name": "randomness", "type": "uint256" }], "name": "rawFulfillRandomness", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "_vrfKeyHash", "type": "bytes32" }, { "internalType": "uint256", "name": "_vrfFee", "type": "uint256" }], "name": "setVrfParams", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawLink", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": ""
    };
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRF.js
var require_TrollNFT_VRF = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRF.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrollNFT_VRF = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TrollNFT_VRF_json_1 = __importDefault(require_TrollNFT_VRF_json());
    var TrollNFT_VRF = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TrollNFT_VRF_json_1.default.abi, TrollNFT_VRF_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol, params.baseURI, eth_wallet_1.Utils.toString(params.cap), params.stakeToken, params.requireApproval, eth_wallet_1.Utils.toString(params.minimumStake), eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo, params.vrfAddresses, eth_wallet_1.Utils.stringToBytes32(params.vrfParams)]);
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          approved: result.approved,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseApprovalForAllEvent(receipt) {
        return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
      }
      decodeApprovalForAllEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          operator: result.operator,
          approved: result.approved,
          _event: event
        };
      }
      parseApprovedStakerEvent(receipt) {
        return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
      }
      decodeApprovedStakerEvent(event) {
        let result = event.data;
        return {
          staker: result.staker,
          allow: result.allow,
          _event: event
        };
      }
      parseAttributeEvent(receipt) {
        return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
      }
      decodeAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseBaseURIEvent(receipt) {
        return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
      }
      decodeBaseURIEvent(event) {
        let result = event.data;
        return {
          baseURI: result.baseURI,
          _event: event
        };
      }
      parseCapEvent(receipt) {
        return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
      }
      decodeCapEvent(event) {
        let result = event.data;
        return {
          cap: new eth_wallet_1.BigNumber(result.cap),
          _event: event
        };
      }
      parseCustomAttributeEvent(receipt) {
        return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
      }
      decodeCustomAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseMinimumStakeEvent(receipt) {
        return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
      }
      decodeMinimumStakeEvent(event) {
        let result = event.data;
        return {
          minimumStake: new eth_wallet_1.BigNumber(result.minimumStake),
          _event: event
        };
      }
      parseProtocolFeeEvent(receipt) {
        return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
      }
      decodeProtocolFeeEvent(event) {
        let result = event.data;
        return {
          protocolFee: new eth_wallet_1.BigNumber(result.protocolFee),
          protocolFeeTo: result.protocolFeeTo,
          _event: event
        };
      }
      parseStakeEvent(receipt) {
        return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
      }
      decodeStakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnstakeEvent(receipt) {
        return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
      }
      decodeUnstakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      assign() {
        let _attributes_call = async (param1) => {
          let result = await this.call("_attributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._attributes = _attributes_call;
        let _customAttributes_call = async (param1) => {
          let result = await this.call("_customAttributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._customAttributes = _customAttributes_call;
        let approvedStaker_call = async (param1) => {
          let result = await this.call("approvedStaker", [param1]);
          return result;
        };
        this.approvedStaker = approvedStaker_call;
        let balanceOf_call = async (owner) => {
          let result = await this.call("balanceOf", [owner]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let baseURI_call = async () => {
          let result = await this.call("baseURI");
          return result;
        };
        this.baseURI = baseURI_call;
        let cap_call = async () => {
          let result = await this.call("cap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.cap = cap_call;
        let counter_call = async () => {
          let result = await this.call("counter");
          return new eth_wallet_1.BigNumber(result);
        };
        this.counter = counter_call;
        let creationTime_call = async (param1) => {
          let result = await this.call("creationTime", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.creationTime = creationTime_call;
        let getApproved_call = async (tokenId) => {
          let result = await this.call("getApproved", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.getApproved = getApproved_call;
        let getAttributes1Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.offset), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes1_call = async (params) => {
          let result = await this.call("getAttributes1", getAttributes1Params(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.getAttributes1 = getAttributes1_call;
        let getAttributes2Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes2_call = async (params) => {
          let result = await this.call("getAttributes2", getAttributes2Params(params));
          return result.map((e) => new eth_wallet_1.BigNumber(e));
        };
        this.getAttributes2 = getAttributes2_call;
        let isApprovedForAllParams = (params) => [params.owner, params.operator];
        let isApprovedForAll_call = async (params) => {
          let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
          return result;
        };
        this.isApprovedForAll = isApprovedForAll_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let minimumStake_call = async () => {
          let result = await this.call("minimumStake");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumStake = minimumStake_call;
        let minted_call = async (param1) => {
          let result = await this.call("minted", [param1]);
          return result;
        };
        this.minted = minted_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let ownerOf_call = async (tokenId) => {
          let result = await this.call("ownerOf", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.ownerOf = ownerOf_call;
        let protocolFee_call = async () => {
          let result = await this.call("protocolFee");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFee = protocolFee_call;
        let protocolFeeBalance_call = async () => {
          let result = await this.call("protocolFeeBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFeeBalance = protocolFeeBalance_call;
        let protocolFeeTo_call = async () => {
          let result = await this.call("protocolFeeTo");
          return result;
        };
        this.protocolFeeTo = protocolFeeTo_call;
        let requireApproval_call = async () => {
          let result = await this.call("requireApproval");
          return result;
        };
        this.requireApproval = requireApproval_call;
        let stakeToken_call = async () => {
          let result = await this.call("stakeToken");
          return result;
        };
        this.stakeToken = stakeToken_call;
        let stakingBalance_call = async (param1) => {
          let result = await this.call("stakingBalance", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakingBalance = stakingBalance_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let tokenByIndex_call = async (index) => {
          let result = await this.call("tokenByIndex", [eth_wallet_1.Utils.toString(index)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenByIndex = tokenByIndex_call;
        let tokenOfOwnerByIndexParams = (params) => [params.owner, eth_wallet_1.Utils.toString(params.index)];
        let tokenOfOwnerByIndex_call = async (params) => {
          let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
        let tokenURI_call = async (tokenId) => {
          let result = await this.call("tokenURI", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.tokenURI = tokenURI_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let approveParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let batchApprove_send = async (stakers) => {
          let result = await this.send("batchApprove", [stakers]);
          return result;
        };
        let batchApprove_call = async (stakers) => {
          let result = await this.call("batchApprove", [stakers]);
          return;
        };
        this.batchApprove = Object.assign(batchApprove_send, {
          call: batchApprove_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let rawFulfillRandomnessParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.requestId), eth_wallet_1.Utils.toString(params.randomness)];
        let rawFulfillRandomness_send = async (params) => {
          let result = await this.send("rawFulfillRandomness", rawFulfillRandomnessParams(params));
          return result;
        };
        let rawFulfillRandomness_call = async (params) => {
          let result = await this.call("rawFulfillRandomness", rawFulfillRandomnessParams(params));
          return;
        };
        this.rawFulfillRandomness = Object.assign(rawFulfillRandomness_send, {
          call: rawFulfillRandomness_call
        });
        let safeTransferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let safeTransferFrom_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
          call: safeTransferFrom_call
        });
        let safeTransferFrom_1Params = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.stringToBytes(params.data)];
        let safeTransferFrom_1_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_1_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
          call: safeTransferFrom_1_call
        });
        let setApprovalForAllParams = (params) => [params.operator, params.approved];
        let setApprovalForAll_send = async (params) => {
          let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
          return result;
        };
        let setApprovalForAll_call = async (params) => {
          let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
          return;
        };
        this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
          call: setApprovalForAll_call
        });
        let setApprovedStakerParams = (params) => [params.staker, params.allow];
        let setApprovedStaker_send = async (params) => {
          let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
          return result;
        };
        let setApprovedStaker_call = async (params) => {
          let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
          return;
        };
        this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
          call: setApprovedStaker_call
        });
        let setBaseURI_send = async (baseURI) => {
          let result = await this.send("setBaseURI", [baseURI]);
          return result;
        };
        let setBaseURI_call = async (baseURI) => {
          let result = await this.call("setBaseURI", [baseURI]);
          return;
        };
        this.setBaseURI = Object.assign(setBaseURI_send, {
          call: setBaseURI_call
        });
        let setCap_send = async (cap) => {
          let result = await this.send("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return result;
        };
        let setCap_call = async (cap) => {
          let result = await this.call("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return;
        };
        this.setCap = Object.assign(setCap_send, {
          call: setCap_call
        });
        let setCustomAttributeParams = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.attribute)];
        let setCustomAttribute_send = async (params) => {
          let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
          return result;
        };
        let setCustomAttribute_call = async (params) => {
          let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
          return;
        };
        this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
          call: setCustomAttribute_call
        });
        let setMinimumStake_send = async (minimumStake) => {
          let result = await this.send("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return result;
        };
        let setMinimumStake_call = async (minimumStake) => {
          let result = await this.call("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return;
        };
        this.setMinimumStake = Object.assign(setMinimumStake_send, {
          call: setMinimumStake_call
        });
        let setProtocolFeeParams = (params) => [eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo];
        let setProtocolFee_send = async (params) => {
          let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
          return result;
        };
        let setProtocolFee_call = async (params) => {
          let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
          return;
        };
        this.setProtocolFee = Object.assign(setProtocolFee_send, {
          call: setProtocolFee_call
        });
        let setVrfParamsParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.vrfKeyHash), eth_wallet_1.Utils.toString(params.vrfFee)];
        let setVrfParams_send = async (params) => {
          let result = await this.send("setVrfParams", setVrfParamsParams(params));
          return result;
        };
        let setVrfParams_call = async (params) => {
          let result = await this.call("setVrfParams", setVrfParamsParams(params));
          return;
        };
        this.setVrfParams = Object.assign(setVrfParams_send, {
          call: setVrfParams_call
        });
        let stake_send = async (amount) => {
          let result = await this.send("stake", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let stake_call = async (amount) => {
          let result = await this.call("stake", [eth_wallet_1.Utils.toString(amount)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stake = Object.assign(stake_send, {
          call: stake_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let transferProtocolFee_send = async () => {
          let result = await this.send("transferProtocolFee");
          return result;
        };
        let transferProtocolFee_call = async () => {
          let result = await this.call("transferProtocolFee");
          return;
        };
        this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
          call: transferProtocolFee_call
        });
        let unstake_send = async (tokenId) => {
          let result = await this.send("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        let unstake_call = async (tokenId) => {
          let result = await this.call("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return;
        };
        this.unstake = Object.assign(unstake_send, {
          call: unstake_call
        });
        let withdrawLink_send = async (amount) => {
          let result = await this.send("withdrawLink", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let withdrawLink_call = async (amount) => {
          let result = await this.call("withdrawLink", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.withdrawLink = Object.assign(withdrawLink_send, {
          call: withdrawLink_call
        });
      }
    };
    exports.TrollNFT_VRF = TrollNFT_VRF;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRFV2.json.js
var require_TrollNFT_VRFV2_json = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRFV2.json.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      "abi": [
        { "inputs": [{ "internalType": "string", "name": "_name", "type": "string" }, { "internalType": "string", "name": "_symbol", "type": "string" }, { "internalType": "string", "name": "__baseURI", "type": "string" }, { "internalType": "uint256", "name": "_cap", "type": "uint256" }, { "internalType": "contract IERC20", "name": "_stakeToken", "type": "address" }, { "internalType": "bool", "name": "_requireApproval", "type": "bool" }, { "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }, { "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }, { "components": [{ "internalType": "contract IERC721[]", "name": "listValidNFTs", "type": "address[]" }, { "internalType": "uint256", "name": "maximumValidNFTs", "type": "uint256" }], "internalType": "struct TrollNFTV2.NFTInfo", "name": "_nftInfo", "type": "tuple" }, { "components": [{ "internalType": "address[2]", "name": "vrfAddresses", "type": "address[2]" }, { "internalType": "bytes32[2]", "name": "vrfParams", "type": "bytes32[2]" }], "internalType": "struct TrollNFT_VRFV2.VRFInfo", "name": "_vrfInfo", "type": "tuple" }], "stateMutability": "nonpayable", "type": "constructor" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amountAdded", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "newAmount", "type": "uint256" }], "name": "AddStakes", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }], "name": "AddValidNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "staker", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "allow", "type": "bool" }], "name": "ApprovedStaker", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "Attribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Authorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "baseURI", "type": "string" }], "name": "BaseURI", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "cap", "type": "uint256" }], "name": "Cap", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "CustomAttribute", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "Deauthorize", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "EquipNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "minimumStake", "type": "uint256" }], "name": "MinimumStake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "protocolFee", "type": "uint256" }, { "indexed": false, "internalType": "address", "name": "protocolFeeTo", "type": "address" }], "name": "ProtocolFee", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Stake", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "address", "name": "spender", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesApproval", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "fromTokenId", "type": "uint256" }, { "indexed": true, "internalType": "uint256", "name": "toTokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "StakesTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "StartOwnershipTransfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "user", "type": "address" }], "name": "TransferOwnership", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "indexed": true, "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "UnequipNFT", "type": "event" },
        { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "who", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "Unstake", "type": "event" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_attributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "_customAttributes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "address", "name": "", "type": "address" }], "name": "_stakesTransferAllowances", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "addStakes", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC721[]", "name": "nfts", "type": "address[]" }], "name": "addValidNFTs", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "approvedStaker", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address[]", "name": "stakers", "type": "address[]" }], "name": "batchApprove", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "cap", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "counter", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "creationDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "deny", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "destoryDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "equipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "extraStakes", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256", "name": "offset", "type": "uint256" }, { "internalType": "uint256", "name": "digits", "type": "uint256" }], "name": "getAttributes1", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "base", "type": "uint256" }, { "internalType": "uint256[]", "name": "digits", "type": "uint256[]" }], "name": "getAttributes2", "outputs": [{ "internalType": "uint256[]", "name": "params", "type": "uint256[]" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "isPermitted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "isValidNFT", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "lastStakeDate", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "listValidNFTs", "outputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "maximumValidNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "minimumStake", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "", "type": "address" }], "name": "minted", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "newOwner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "contract IERC721", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "name": "nftsEquipped", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "user", "type": "address" }], "name": "permit", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "protocolFee", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "protocolFeeTo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "requestId", "type": "bytes32" }, { "internalType": "uint256", "name": "randomness", "type": "uint256" }], "name": "rawFulfillRandomness", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "requireApproval", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "staker", "type": "address" }, { "internalType": "bool", "name": "allow", "type": "bool" }], "name": "setApprovedStaker", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "string", "name": "__baseURI", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_cap", "type": "uint256" }], "name": "setCap", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "attribute", "type": "uint256" }], "name": "setCustomAttribute", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_minimumStake", "type": "uint256" }], "name": "setMinimumStake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "_protocolFee", "type": "uint256" }, { "internalType": "address", "name": "_protocolFeeTo", "type": "address" }], "name": "setProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "bytes32", "name": "_vrfKeyHash", "type": "bytes32" }, { "internalType": "uint256", "name": "_vrfFee", "type": "uint256" }], "name": "setVrfParams", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "stake", "outputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "stakeToken", "outputs": [{ "internalType": "contract IERC20", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "name": "stakingBalance", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "takeOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "uint256", "name": "index", "type": "uint256" }], "name": "tokenOfOwnerByIndex", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" },
        { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "address", "name": "newOwner_", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "transferProtocolFee", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }, { "internalType": "contract IERC721", "name": "", "type": "address" }], "name": "trollOwnedNFTs", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "trollId", "type": "uint256" }, { "internalType": "contract IERC721", "name": "nft", "type": "address" }, { "internalType": "uint256", "name": "nftId", "type": "uint256" }], "name": "unequipNFT", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "unstake", "outputs": [], "stateMutability": "nonpayable", "type": "function" },
        { "inputs": [], "name": "validNFTsLength", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawLink", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
      ],
      "bytecode": "60e06040523480156200001157600080fd5b50604051620063e9380380620063e983398101604081905262000034916200081f565b80518051602091820151600080546001600160a01b0319163317905560016003558d51919290918e918e918e918e918e918e918e918e918e918e918b918b91620000859160049190850190620004f2565b5080516200009b906005906020840190620004f2565b5050508260001480620000b657506001600160a01b03821615155b620001085760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726f746f636f6c4665652f466565546f0000000000000060448201526064015b60405180910390fd5b602081015181515111156200015b5760405162461bcd60e51b815260206004820152602480820152600080516020620063c98339815191526044820152634e46547360e01b6064820152608401620000ff565b87516200017090600f9060208b0190620004f2565b50600e879055606086901b6001600160601b0319166080526010805460ff191686151517905560118490556012839055601380546001600160a01b0319166001600160a01b03841617905560208101516016558051620001d09062000319565b7f01e56a02aca7f26a28165a040851ba78f30282b55ca81c63a804cdc1e2dcea72600f60405162000202919062000954565b60405180910390a17fddf4c293a3479db41117899542b2a5d272b166296d11693304a6c1eac191054b600e546040516200023e91815260200190565b60405180910390a17f0be9186a0f7f1e3c3019fdaacbaffb9ea92e4aacae81a3dbcc3a18220a47380d6011546040516200027a91815260200190565b60405180910390a1601254601354604080519283526001600160a01b0390911660208301527f5ecd7df85e51aff79e169c80a23d9299697dcb741138d732a78485f61370843d910160405180910390a15050505050606096871b6001600160601b031990811660c0529590961b90941660a052505050506020828101518051910151620003089250620004cf565b505050505050505050505062000b1b565b6000546001600160a01b031633146200033157600080fd5b601654815160155462000345919062000a60565b1115620003905760405162461bcd60e51b815260206004820152602480820152600080516020620063c98339815191526044820152634e46547360e01b6064820152608401620000ff565b60005b8151811015620004cb576000828281518110620003c057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038116600090815291805260409091205490915060ff16156200042d5760405162461bcd60e51b815260206004820152601160248201527013919508185b1c9958591e481859191959607a1b6044820152606401620000ff565b6001600160a01b0381166000818152602080526040808220805460ff1916600190811790915560158054918201815583527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180546001600160a01b03191684179055517f6f0f8cee3d9c2f167393540bc77d82ef43045c19beafd62240a7e45f2519171a9190a25080620004c28162000ab8565b91505062000393565b5050565b6000546001600160a01b03163314620004e757600080fd5b602691909155602755565b828054620005009062000a7b565b90600052602060002090601f0160209004810192826200052457600085556200056f565b82601f106200053f57805160ff19168380011785556200056f565b828001600101855582156200056f579182015b828111156200056f57825182559160200191906001019062000552565b506200057d92915062000581565b5090565b5b808211156200057d576000815560010162000582565b8051620005a58162000b02565b919050565b600082601f830112620005bb578081fd5b620005c562000a02565b808385604086011115620005d7578384fd5b835b6002811015620005fa578151845260209384019390910190600101620005d9565b509095945050505050565b80518015158114620005a557600080fd5b600082601f83011262000627578081fd5b81516001600160401b0381111562000643576200064362000aec565b602062000659601f8301601f1916820162000a2d565b82815285828487010111156200066d578384fd5b835b838110156200068c5785810183015182820184015282016200066f565b838111156200069d57848385840101525b5095945050505050565b600060408284031215620006b9578081fd5b620006c362000a02565b82519091506001600160401b0380821115620006de57600080fd5b818401915084601f830112620006f357600080fd5b81516020828211156200070a576200070a62000aec565b8160051b92506200071d81840162000a2d565b8281528181019085830185870184018a10156200073957600080fd5b600096505b848710156200076c5780519550620007568662000b02565b858352600196909601959183019183016200073e565b50808752505080860151818601525050505092915050565b60006080828403121562000796578081fd5b620007a062000a02565b905082601f830112620007b257600080fd5b620007bc62000a02565b80836040850186811115620007d057600080fd5b60005b600281101562000800578251620007ea8162000b02565b85526020948501949290920191600101620007d3565b50828552620008108782620005aa565b60208601525050505092915050565b60008060008060008060008060008060006101c08c8e03121562000841578687fd5b8b516001600160401b0381111562000857578788fd5b620008658e828f0162000616565b60208e0151909c5090506001600160401b0381111562000883578788fd5b620008918e828f0162000616565b60408e0151909b5090506001600160401b03811115620008af578788fd5b620008bd8e828f0162000616565b99505060608c01519750620008d560808d0162000598565b9650620008e560a08d0162000605565b955060c08c0151945060e08c01519350620009046101008d0162000598565b6101208d01519093506001600160401b0381111562000921578283fd5b6200092f8e828f01620006a7565b925050620009428d6101408e0162000784565b90509295989b509295989b9093969950565b6000602080835281845483600182811c9150808316806200097657607f831692505b8583108114156200099557634e487b7160e01b87526022600452602487fd5b878601838152602001818015620009b55760018114620009c757620009f3565b60ff19861682528782019650620009f3565b60008b815260209020895b86811015620009ed57815484820152908501908901620009d2565b83019750505b50949998505050505050505050565b604080519081016001600160401b038111828210171562000a275762000a2762000aec565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000a585762000a5862000aec565b604052919050565b6000821982111562000a765762000a7662000ad6565b500190565b600181811c9082168062000a9057607f821691505b6020821081141562000ab257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000acf5762000acf62000ad6565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000b1857600080fd5b50565b60805160601c60a05160601c60c05160601c61584462000b85600039600081816126fd0152613f650152600081816125c301528181612a4c0152613f2901526000818161061f0152818161112d015281816126b301528181612f860152613e3201526158446000f3fe608060405234801561001057600080fd5b50600436106104215760003560e01c806378511f6111610235578063b88d4fde11610135578063e7201063116100c8578063ec5ffac211610097578063f0ab14ed1161007c578063f0ab14ed146109f4578063f2fde38b14610a14578063f43d958414610a2757600080fd5b8063ec5ffac2146109cb578063ef369252146109d457600080fd5b8063e720106314610949578063e985e9c51461095c578063ea289d00146109a5578063ea5ed3db146109b857600080fd5b8063d4ee1d9011610104578063d4ee1d90146108e1578063d793006614610901578063d8f8504f14610921578063da1bbcf61461094157600080fd5b8063b88d4fde14610890578063baba73a5146108a3578063c287e806146108ac578063c87b56dd146108ce57600080fd5b806395d89b41116101c8578063a694fc3a11610197578063b13db5761161017c578063b13db5761461083d578063b1bc99161461085d578063b55e58471461087057600080fd5b8063a694fc3a14610821578063b0e21e8a1461083457600080fd5b806395d89b41146107e05780639c52a7f1146107e8578063a22cb465146107fb578063a2f55ae51461080e57600080fd5b806382d5ea6c1161020457806382d5ea6c146107805780638c8c8a501461078d5780638da5cb5b146107ad57806394985ddd146107cd57600080fd5b806378511f611461071a5780637a8042bd1461073a5780637e09858e1461074d57806381fdc72b1461077857600080fd5b806342842e0e116103405780635981f75a116102d357806368c1c088116102a25780636e660ab1116102875780636e660ab1146106b957806370a08231146106e45780637776a0e5146106f757600080fd5b806368c1c0881461069e5780636c0360eb146106b157600080fd5b80635981f75a14610667578063605361721461067a57806361bc221a146106825780636352211e1461068b57600080fd5b80635174df051161030f5780635174df051461060757806351ed6a301461061a5780635452f3691461064157806355f804b31461065457600080fd5b806342842e0e146105bb578063476f2d5c146105ce57806347786d37146105e15780634f6ccce7146105f457600080fd5b8063233e9903116103b85780632f745c59116103875780632f745c5914610569578063355274ea1461057c5780633a2f5511146105855780633fd8cc4e1461059857600080fd5b8063233e99031461051d57806323b872dd146105305780632457c8ea146105435780632e17de781461055657600080fd5b80630a22d68c116103f45780630a22d68c146104b057806318160ddd146104c75780631864bbc9146104cf5780631e7269c5146104fa57600080fd5b806301ffc9a71461042657806306fdde031461044e578063081812fc14610463578063095ea7b31461049b575b600080fd5b610439610434366004615203565b610a47565b60405190151581526020015b60405180910390f35b610456610aa3565b60405161044591906154d4565b610476610471366004615281565b610b35565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610445565b6104ae6104a93660046150a7565b610c14565b005b6104b960145481565b604051908152602001610445565b600c546104b9565b6104b96104dd3660046150a7565b602260209081526000928352604080842090915290825290205481565b610439610508366004614f4d565b601f6020526000908152604090205460ff1681565b6104ae61052b366004615281565b610da1565b6104ae61053e366004614fbd565b610e01565b6104ae6105513660046151e2565b610ea2565b6104ae610564366004615281565b611008565b6104b96105773660046150a7565b611280565b6104b9600e5481565b6104ae610593366004615112565b61134f565b6104396105a6366004614f4d565b60026020526000908152604090205460ff1681565b6104ae6105c9366004614fbd565b6115d9565b6104b96105dc36600461534c565b6115f4565b6104ae6105ef366004615281565b611638565b6104b9610602366004615281565b6116fc565b6104ae6106153660046152d5565b6117e1565b6104767f000000000000000000000000000000000000000000000000000000000000000081565b6104ae61064f3660046151e2565b611c35565b6104ae61066236600461523b565b611c64565b6104ae6106753660046152d5565b611ccc565b6104ae612119565b6104b960175481565b610476610699366004615281565b612243565b6104ae6106ac36600461507a565b6122f5565b61045661243e565b6104b96106c73660046152b1565b602460209081526000928352604080842090915290825290205481565b6104b96106f2366004614f4d565b6124cc565b610439610705366004614f4d565b601e6020526000908152604090205460ff1681565b6104b9610728366004615281565b60236020526000908152604090205481565b6104ae610748366004615281565b61259a565b6104b961075b3660046152b1565b602160209081526000928352604080842090915290825290205481565b6104ae6125ec565b6010546104399060ff1681565b6104b961079b366004615281565b60186020526000908152604090205481565b6000546104769073ffffffffffffffffffffffffffffffffffffffff1681565b6104ae6107db3660046151e2565b6126e5565b61045661278e565b6104ae6107f6366004614f4d565b61279d565b6104ae61080936600461507a565b61283d565b6104ae61081c366004614f4d565b612954565b6104b961082f366004615281565b6129f7565b6104b960125481565b6104b961084b366004615281565b60196020526000908152604090205481565b61047661086b366004615281565b612b55565b6104b961087e366004615281565b601d6020526000908152604090205481565b6104ae61089e366004614ffd565b612b8c565b6104b960165481565b6104396108ba366004614f4d565b602080526000908152604090205460ff1681565b6104566108dc366004615281565b612c34565b6001546104769073ffffffffffffffffffffffffffffffffffffffff1681565b61091461090f3660046152fb565b612d44565b6040516104459190615490565b6104b961092f366004615281565b601c6020526000908152604090205481565b6015546104b9565b6104ae6109573660046151e2565b612ee5565b61043961096a366004614f85565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260096020908152604080832093909416825291909152205460ff1690565b6104ae6109b33660046152b1565b613021565b6104ae6109c63660046150d2565b613153565b6104b960115481565b6013546104769073ffffffffffffffffffffffffffffffffffffffff1681565b6104b9610a02366004615281565b601a6020526000908152604090205481565b6104ae610a22366004614f4d565b613307565b6104b9610a35366004615281565b601b6020526000908152604090205481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d63000000000000000000000000000000000000000000000000000000001480610a9d5750610a9d8261339e565b92915050565b606060048054610ab290615682565b80601f0160208091040260200160405190810160405280929190818152602001828054610ade90615682565b8015610b2b5780601f10610b0057610100808354040283529160200191610b2b565b820191906000526020600020905b815481529060010190602001808311610b0e57829003601f168201915b5050505050905090565b60008181526006602052604081205473ffffffffffffffffffffffffffffffffffffffff16610beb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526008602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b6000610c1f82612243565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610be2565b3373ffffffffffffffffffffffffffffffffffffffff82161480610d065750610d06813361096a565b610d92576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610be2565b610d9c8383613481565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dc557600080fd5b60118190556040518181527f0be9186a0f7f1e3c3019fdaacbaffb9ea92e4aacae81a3dbcc3a18220a47380d906020015b60405180910390a150565b610e0b3382613521565b610e97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610be2565b610d9c83838361368d565b3360009081526002602052604090205460ff16610f41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610be2565b6000828152601a602052604090205415610fb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f41747472696275746520616c72656164792073657400000000000000000000006044820152606401610be2565b6000828152601a6020526040908190208290555182907fe73a9e48f41e228034f18c54b3f003b3de0b3bf1069ffd0c352543431b8a86a390610ffc9084815260200190565b60405180910390a25050565b60026003541415611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be2565b60026003556110843382613521565b6110ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610be2565b6110f3816138ff565b6000818152601c6020908152604080832042905560189091528120805491905561115473ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633836139d8565b60005b60155481101561123f5760006015828154811061119d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015486835260218252604080842073ffffffffffffffffffffffffffffffffffffffff90921680855291909252912054909150801561122a5773ffffffffffffffffffffffffffffffffffffffff82166000818152602260209081526040808320858452825280832083905588835260218252808320938352929052908120555b50508080611237906156d6565b915050611157565b50604051818152829033907ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb2809060200160405180910390a350506001600355565b600061128b836124cc565b8210611319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610be2565b5073ffffffffffffffffffffffffffffffffffffffff919091166000908152600a60209081526040808320938352929052205490565b60005473ffffffffffffffffffffffffffffffffffffffff16331461137357600080fd5b60165481516015546113859190615613565b1115611412576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45786365656473206d6178696d756d206e756d626572206f662076616c69642060448201527f4e465473000000000000000000000000000000000000000000000000000000006064820152608401610be2565b60005b81518110156115d5576000828281518110611459577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff8116600090815291805260409091205490915060ff16156114f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e465420616c72656164792061646465640000000000000000000000000000006044820152606401610be2565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260208052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915560158054918201815583527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517f6f0f8cee3d9c2f167393540bc77d82ef43045c19beafd62240a7e45f2519171a9190a250806115cd816156d6565b915050611415565b5050565b610d9c83838360405180602001604052806000815250612b8c565b60006116008483613aac565b61160a8585613aac565b600087815260196020526040902054611623919061562b565b61162d919061570f565b90505b949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461165c57600080fd5b600e5481116116c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f43617020616c72656164792065786365656465640000000000000000000000006044820152606401610be2565b600e8190556040518181527fddf4c293a3479db41117899542b2a5d272b166296d11693304a6c1eac191054b90602001610df6565b6000611707600c5490565b8210611795576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610be2565b600c82815481106117cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208052604090205460ff1661186f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f742076616c6964204e4654000000000000000000000000000000000000006044820152606401610be2565b3361187984612243565b73ffffffffffffffffffffffffffffffffffffffff161461191c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320747260448201527f6f6c6c00000000000000000000000000000000000000000000000000000000006064820152608401610be2565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff841690636352211e9060240160206040518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190614f69565b73ffffffffffffffffffffffffffffffffffffffff1614611a5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f662074686973204e4660448201527f54000000000000000000000000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260226020908152604080832084845290915290205415611af7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e465420616c72656164792065717569707065640000000000000000000000006044820152606401610be2565b600083815260216020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205415611bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f456163682074726f6c6c2063616e206f6e6c79206571756970206f6e6520746f60448201527f6b656e20706572204e46540000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff82166000818152602260209081526040808320858452825280832087905586835260218252808320848452825291829020849055905183815285917f5f3e52a313d16d3e3d13ea422592abcdf8484958442b5d977890b64c53523e2391015b60405180910390a3505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c5957600080fd5b602691909155602755565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c8857600080fd5b8051611c9b90600f906020840190614df4565b507f01e56a02aca7f26a28165a040851ba78f30282b55ca81c63a804cdc1e2dcea72600f604051610df691906154e7565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208052604090205460ff16611d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f742076616c6964204e4654000000000000000000000000000000000000006044820152606401610be2565b33611d6484612243565b73ffffffffffffffffffffffffffffffffffffffff1614611e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320747260448201527f6f6c6c00000000000000000000000000000000000000000000000000000000006064820152608401610be2565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101829052339073ffffffffffffffffffffffffffffffffffffffff841690636352211e9060240160206040518083038186803b158015611e6f57600080fd5b505afa158015611e83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea79190614f69565b73ffffffffffffffffffffffffffffffffffffffff1614611f4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f596f7520617265206e6f7420746865206f776e6572206f662074686973204e4660448201527f54000000000000000000000000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff821660009081526022602090815260408083208484529091529020548314612009576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f54686973204e465420646f6573206e6f742062656c6f6e6720746f207468697360448201527f2074726f6c6c00000000000000000000000000000000000000000000000000006064820152608401610be2565b600083815260216020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205481146120a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f546869732074726f6c6c20646f6573206e6f74206f776e2074686973204e46546044820152606401610be2565b73ffffffffffffffffffffffffffffffffffffffff82166000818152602260209081526040808320858452825280832083905586835260218252808320848452825280832092909255905183815285917f209edba55054a6d25cdb7cd481d568e6a0fbe2ecc48276caee30a061cb1f744f9101611c28565b60015473ffffffffffffffffffffffffffffffffffffffff1633146121c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f416374696f6e20706572666f726d656420627920756e617574686f72697a656460448201527f20616464726573732e00000000000000000000000000000000000000000000006064820152608401610be2565b600180546000805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000091821681179092559091169091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a1565b60008181526006602052604081205473ffffffffffffffffffffffffffffffffffffffff1680610a9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610be2565b60005473ffffffffffffffffffffffffffffffffffffffff16331461231957600080fd5b60105460ff1661234f57601080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b80156123a85773ffffffffffffffffffffffffffffffffffffffff82166000908152601e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556123f4565b73ffffffffffffffffffffffffffffffffffffffff82166000908152601e6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b8173ffffffffffffffffffffffffffffffffffffffff167fd1b1846bd2f96d78a14f8960ca200e7a29f8d8d08c0386ffe28dc5c99067c52382604051610ffc911515815260200190565b600f805461244b90615682565b80601f016020809104026020016040519081016040528092919081815260200182805461247790615682565b80156124c45780601f10612499576101008083540402835291602001916124c4565b820191906000526020600020905b8154815290600101906020018083116124a757829003601f168201915b505050505081565b600073ffffffffffffffffffffffffffffffffffffffff8216612571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610be2565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b60005473ffffffffffffffffffffffffffffffffffffffff1633146125be57600080fd5b6125e97f000000000000000000000000000000000000000000000000000000000000000033836139d8565b50565b60026003541415612659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be2565b600260035560135473ffffffffffffffffffffffffffffffffffffffff161580159061268757506000601454115b156126de576014805460009091556013546126dc9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169116836139d8565b505b6001600355565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614612784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c006044820152606401610be2565b6115d58282613b3e565b606060058054610ab290615682565b60005473ffffffffffffffffffffffffffffffffffffffff1633146127c157600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905590519182527f79ede3839cd7a7d8bd77e97e5c890565fe4f76cdbbeaa364646e28a8695a78849101610df6565b73ffffffffffffffffffffffffffffffffffffffff82163314156128bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610be2565b33600081815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461297857600080fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f6d81a01b39982517ba331aeb4f387b0f9cc32334b65bb9a343a077973cf7adf59101610df6565b6000612a0282613b94565b6027546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529192509073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b158015612a8e57600080fd5b505afa158015612aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac69190615299565b1015612b2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420656e6f756768204c494e4b00000000000000000000000000000000006044820152606401610be2565b6000612b3e602654602754613f25565b600090815260286020526040902082905550919050565b60158181548110612b6557600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b612b963383613521565b612c22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610be2565b612c2e848484846140bd565b50505050565b60008181526006602052604090205460609073ffffffffffffffffffffffffffffffffffffffff16612ce8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610be2565b6000612cf2614160565b90506000815111612d125760405180602001604052806000815250612d3d565b80612d1c8461416f565b604051602001612d2d9291906153e3565b6040516020818303038152906040525b9392505050565b6060818067ffffffffffffffff811115612d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015612db0578160200160208202803683370190505b5060008781526019602052604081205491935090815b83811015612ed957612e1788888884818110612e0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135613aac565b612e218985613aac565b612e2b908461562b565b612e35919061570f565b858281518110612e6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050868682818110612eb3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013583612ec59190615613565b925080612ed1816156d6565b915050612dc6565b50505050949350505050565b33612eef83612243565b73ffffffffffffffffffffffffffffffffffffffff1614612f6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610be2565b612fae73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846142ef565b60008281526018602052604081208054839290612fcc908490615613565b90915550506000828152601d6020908152604080832042905560188252918290205482518481529182015283917f9dd9373946c68e9420a62b36f888feb3e769b907bb535e27af7f59f2886337499101610ffc565b60005473ffffffffffffffffffffffffffffffffffffffff16331461304557600080fd5b811580613067575073ffffffffffffffffffffffffffffffffffffffff811615155b6130cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642070726f746f636f6c4665652f466565546f000000000000006044820152606401610be2565b6012829055601380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040805184815260208101929092527f5ecd7df85e51aff79e169c80a23d9299697dcb741138d732a78485f61370843d910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461317757600080fd5b601080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558060005b81811015612c2e576001601e60008686858181106131ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906132029190614f4d565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905583838281811061328e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906132a39190614f4d565b73ffffffffffffffffffffffffffffffffffffffff167fd1b1846bd2f96d78a14f8960ca200e7a29f8d8d08c0386ffe28dc5c99067c52360016040516132ed911515815260200190565b60405180910390a2806132ff816156d6565b9150506131a6565b60005473ffffffffffffffffffffffffffffffffffffffff16331461332b57600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f686a7ab184e6928ddedba810af7b443d6baa40bf32c4787ccd72c5b4b28cae1b90602001610df6565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061343157507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a9d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610a9d565b600081815260086020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff841690811790915581906134db82612243565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008181526006602052604081205473ffffffffffffffffffffffffffffffffffffffff166135d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610be2565b60006135dd83612243565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061364c57508373ffffffffffffffffffffffffffffffffffffffff1661363484610b35565b73ffffffffffffffffffffffffffffffffffffffff16145b80611630575073ffffffffffffffffffffffffffffffffffffffff80821660009081526009602090815260408083209388168352929052205460ff16611630565b8273ffffffffffffffffffffffffffffffffffffffff166136ad82612243565b73ffffffffffffffffffffffffffffffffffffffff1614613750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610be2565b73ffffffffffffffffffffffffffffffffffffffff82166137f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610be2565b6137fd83838361434d565b613808600082613481565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260076020526040812080546001929061383e90849061563f565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260408120805460019290613879908490615613565b909155505060008181526006602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061390a82612243565b90506139188160008461434d565b613923600083613481565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260076020526040812080546001929061395990849061563f565b909155505060008281526006602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555183919073ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610d9c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614453565b6000828015613b2057600183168015613ac757849250613acc565b600192505b506002830492505b8215613b1b578384028485820414613aeb57600080fd5b93506001831615613b10578382028285820414158515151615613b0d57600080fd5b91505b600283049250613ad4565b613b37565b828015613b305760009250613b35565b600192505b505b5092915050565b60008281526028602090815260408083205480845260198352928190208490555183815282917f1e6edca497f4aff07b388b2c8af55371a16eb956ed650861cb45f11758e4a65b910160405180910390a2505050565b600060026003541415613c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be2565b600260035560105460ff161580613c295750336000908152601e602052604090205460ff165b613c8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f7420617574686f72697a65640000000000000000000000000000000000006044820152606401610be2565b600060125483613c9f919061563f565b9050601154811015613d0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4d696e696e756d207374616b65206e6f74206d657400000000000000000000006044820152606401610be2565b600e54600c5410613d7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f43617020657863656564656400000000000000000000000000000000000000006044820152606401610be2565b60105460ff161580613d9c5750336000908152601f602052604090205460ff16155b613e02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f596f752063616e206f6e6c79207374616b65206f6e63650000000000000000006044820152606401610be2565b601760008154613e11906156d6565b91829055509150613e5a73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330866142ef565b60008281526018602052604081208290556012546014805491929091613e81908490615613565b9091555050336000818152601f6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055858352601b82528083204290819055601d90925290912055613ee3908361455f565b604051838152829033907f5af417134f72a9d41143ace85b0a26dce6f550f894f2cbc1eeee8810603d91b69060200160405180910390a3506001600355919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001613fa2929190918252602082015260400190565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401613fcf9392919061545b565b602060405180830381600087803b158015613fe957600080fd5b505af1158015613ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061402191906151c6565b50600083815260256020818152604080842054815180840189905280830186905230606082015260808082018390528351808303909101815260a09091019092528151918301919091209387905291905261407d906001615613565b6000858152602560205260409020556116308482604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6140c884848461368d565b6140d484848484614579565b612c2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610be2565b6060600f8054610ab290615682565b6060816141af57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156141d957806141c3816156d6565b91506141d29050600a8361562b565b91506141b3565b60008167ffffffffffffffff81111561421b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614245576020820181803683370190505b5090505b84156116305761425a60018361563f565b9150614267600a8661570f565b614272906030615613565b60f81b8183815181106142ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506142e8600a8661562b565b9450614249565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612c2e9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613a2a565b73ffffffffffffffffffffffffffffffffffffffff83166143b5576143b081600c80546000838152600d60205260408120829055600182018355919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70155565b6143f2565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146143f2576143f28382614775565b73ffffffffffffffffffffffffffffffffffffffff821661441657610d9c8161482c565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610d9c57610d9c8282614950565b60006144b5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166149a19092919063ffffffff16565b805190915015610d9c57808060200190518101906144d391906151c6565b610d9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610be2565b6115d58282604051806020016040528060008152506149b0565b600073ffffffffffffffffffffffffffffffffffffffff84163b1561476d576040517f150b7a0200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85169063150b7a02906145f0903390899088908890600401615412565b602060405180830381600087803b15801561460a57600080fd5b505af1925050508015614658575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526146559181019061521f565b60015b614722573d808015614686576040519150601f19603f3d011682016040523d82523d6000602084013e61468b565b606091505b50805161471a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610be2565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611630565b506001611630565b60006001614782846124cc565b61478c919061563f565b6000838152600b60205260409020549091508082146147ec5773ffffffffffffffffffffffffffffffffffffffff84166000908152600a602090815260408083208584528252808320548484528184208190558352600b90915290208190555b506000918252600b6020908152604080842084905573ffffffffffffffffffffffffffffffffffffffff9094168352600a81528383209183525290812055565b600c5460009061483e9060019061563f565b6000838152600d6020526040812054600c805493945090928490811061488d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600c83815481106148d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602080832090910192909255828152600d9091526040808220849055858252812055600c805480614934577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061495b836124cc565b73ffffffffffffffffffffffffffffffffffffffff9093166000908152600a602090815260408083208684528252808320859055938252600b9052919091209190915550565b60606116308484600085614a53565b6149ba8383614bd3565b6149c76000848484614579565b610d9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610be2565b606082471015614ae5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610be2565b843b614b4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610be2565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051614b7691906153c7565b60006040518083038185875af1925050503d8060008114614bb3576040519150601f19603f3d011682016040523d82523d6000602084013e614bb8565b606091505b5091509150614bc8828286614da1565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216614c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610be2565b60008181526006602052604090205473ffffffffffffffffffffffffffffffffffffffff1615614cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610be2565b614ce86000838361434d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600760205260408120805460019290614d1e908490615613565b909155505060008181526006602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608315614db0575081612d3d565b825115614dc05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be291906154d4565b828054614e0090615682565b90600052602060002090601f016020900481019282614e225760008555614e68565b82601f10614e3b57805160ff1916838001178555614e68565b82800160010185558215614e68579182015b82811115614e68578251825591602001919060010190614e4d565b50614e74929150614e78565b5090565b5b80821115614e745760008155600101614e79565b600067ffffffffffffffff831115614ea757614ea7615781565b614ed860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116016155c4565b9050828152838383011115614eec57600080fd5b828260208301376000602084830101529392505050565b60008083601f840112614f14578182fd5b50813567ffffffffffffffff811115614f2b578182fd5b6020830191508360208260051b8501011115614f4657600080fd5b9250929050565b600060208284031215614f5e578081fd5b8135612d3d816157b0565b600060208284031215614f7a578081fd5b8151612d3d816157b0565b60008060408385031215614f97578081fd5b8235614fa2816157b0565b91506020830135614fb2816157b0565b809150509250929050565b600080600060608486031215614fd1578081fd5b8335614fdc816157b0565b92506020840135614fec816157b0565b929592945050506040919091013590565b60008060008060808587031215615012578081fd5b843561501d816157b0565b9350602085013561502d816157b0565b925060408501359150606085013567ffffffffffffffff81111561504f578182fd5b8501601f8101871361505f578182fd5b61506e87823560208401614e8d565b91505092959194509250565b6000806040838503121561508c578182fd5b8235615097816157b0565b91506020830135614fb2816157d2565b600080604083850312156150b9578182fd5b82356150c4816157b0565b946020939093013593505050565b600080602083850312156150e4578081fd5b823567ffffffffffffffff8111156150fa578182fd5b61510685828601614f03565b90969095509350505050565b60006020808385031215615124578182fd5b823567ffffffffffffffff8082111561513b578384fd5b818501915085601f83011261514e578384fd5b81358181111561516057615160615781565b8060051b91506151718483016155c4565b8181528481019084860184860187018a101561518b578788fd5b8795505b838610156151b957803594506151a4856157b0565b8483526001959095019491860191860161518f565b5098975050505050505050565b6000602082840312156151d7578081fd5b8151612d3d816157d2565b600080604083850312156151f4578182fd5b50508035926020909101359150565b600060208284031215615214578081fd5b8135612d3d816157e0565b600060208284031215615230578081fd5b8151612d3d816157e0565b60006020828403121561524c578081fd5b813567ffffffffffffffff811115615262578182fd5b8201601f81018413615272578182fd5b61163084823560208401614e8d565b600060208284031215615292578081fd5b5035919050565b6000602082840312156152aa578081fd5b5051919050565b600080604083850312156152c3578182fd5b823591506020830135614fb2816157b0565b6000806000606084860312156152e9578081fd5b833592506020840135614fec816157b0565b60008060008060608587031215615310578182fd5b8435935060208501359250604085013567ffffffffffffffff811115615334578283fd5b61534087828801614f03565b95989497509550505050565b60008060008060808587031215615361578182fd5b5050823594602084013594506040840135936060013592509050565b60008151808452615395816020860160208601615656565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082516153d9818460208701615656565b9190910192915050565b600083516153f5818460208801615656565b835190830190615409818360208801615656565b01949350505050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525083604083015260806060830152615451608083018461537d565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061162d606083018461537d565b6020808252825182820181905260009190848201906040850190845b818110156154c8578351835292840192918401916001016154ac565b50909695505050505050565b602081526000612d3d602083018461537d565b6000602080835281845483600182811c91508083168061550857607f831692505b85831081141561553f577f4e487b710000000000000000000000000000000000000000000000000000000087526022600452602487fd5b87860183815260200181801561555c576001811461558b576155b5565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008616825287820196506155b5565b60008b815260209020895b868110156155af57815484820152908501908901615596565b83019750505b50949998505050505050505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561560b5761560b615781565b604052919050565b6000821982111561562657615626615723565b500190565b60008261563a5761563a615752565b500490565b60008282101561565157615651615723565b500390565b60005b83811015615671578181015183820152602001615659565b83811115612c2e5750506000910152565b600181811c9082168061569657607f821691505b602082108114156156d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561570857615708615723565b5060010190565b60008261571e5761571e615752565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146125e957600080fd5b80151581146125e957600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000811681146125e957600080fdfea26469706673582212200495bc6ed80174cb19cb981f89e01fc347e1f828ae9810bba3821e6b93de356c64736f6c6343000804003345786365656473206d6178696d756d206e756d626572206f662076616c696420"
    };
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRFV2.js
var require_TrollNFT_VRFV2 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/TrollNFT_VRFV2.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrollNFT_VRFV2 = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var TrollNFT_VRFV2_json_1 = __importDefault(require_TrollNFT_VRFV2_json());
    var TrollNFT_VRFV2 = class extends eth_wallet_1.Contract {
      constructor(wallet, address) {
        super(wallet, address, TrollNFT_VRFV2_json_1.default.abi, TrollNFT_VRFV2_json_1.default.bytecode);
        this.assign();
      }
      deploy(params) {
        return this.__deploy([params.name, params.symbol, params.baseURI, eth_wallet_1.Utils.toString(params.cap), params.stakeToken, params.requireApproval, eth_wallet_1.Utils.toString(params.minimumStake), eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo, [params.nftInfo.listValidNFTs, eth_wallet_1.Utils.toString(params.nftInfo.maximumValidNFTs)], [params.vrfInfo.vrfAddresses, eth_wallet_1.Utils.stringToBytes32(params.vrfInfo.vrfParams)]]);
      }
      parseAddStakesEvent(receipt) {
        return this.parseEvents(receipt, "AddStakes").map((e) => this.decodeAddStakesEvent(e));
      }
      decodeAddStakesEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amountAdded: new eth_wallet_1.BigNumber(result.amountAdded),
          newAmount: new eth_wallet_1.BigNumber(result.newAmount),
          _event: event
        };
      }
      parseAddValidNFTEvent(receipt) {
        return this.parseEvents(receipt, "AddValidNFT").map((e) => this.decodeAddValidNFTEvent(e));
      }
      decodeAddValidNFTEvent(event) {
        let result = event.data;
        return {
          nft: result.nft,
          _event: event
        };
      }
      parseApprovalEvent(receipt) {
        return this.parseEvents(receipt, "Approval").map((e) => this.decodeApprovalEvent(e));
      }
      decodeApprovalEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          approved: result.approved,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseApprovalForAllEvent(receipt) {
        return this.parseEvents(receipt, "ApprovalForAll").map((e) => this.decodeApprovalForAllEvent(e));
      }
      decodeApprovalForAllEvent(event) {
        let result = event.data;
        return {
          owner: result.owner,
          operator: result.operator,
          approved: result.approved,
          _event: event
        };
      }
      parseApprovedStakerEvent(receipt) {
        return this.parseEvents(receipt, "ApprovedStaker").map((e) => this.decodeApprovedStakerEvent(e));
      }
      decodeApprovedStakerEvent(event) {
        let result = event.data;
        return {
          staker: result.staker,
          allow: result.allow,
          _event: event
        };
      }
      parseAttributeEvent(receipt) {
        return this.parseEvents(receipt, "Attribute").map((e) => this.decodeAttributeEvent(e));
      }
      decodeAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseAuthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Authorize").map((e) => this.decodeAuthorizeEvent(e));
      }
      decodeAuthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseBaseURIEvent(receipt) {
        return this.parseEvents(receipt, "BaseURI").map((e) => this.decodeBaseURIEvent(e));
      }
      decodeBaseURIEvent(event) {
        let result = event.data;
        return {
          baseURI: result.baseURI,
          _event: event
        };
      }
      parseCapEvent(receipt) {
        return this.parseEvents(receipt, "Cap").map((e) => this.decodeCapEvent(e));
      }
      decodeCapEvent(event) {
        let result = event.data;
        return {
          cap: new eth_wallet_1.BigNumber(result.cap),
          _event: event
        };
      }
      parseCustomAttributeEvent(receipt) {
        return this.parseEvents(receipt, "CustomAttribute").map((e) => this.decodeCustomAttributeEvent(e));
      }
      decodeCustomAttributeEvent(event) {
        let result = event.data;
        return {
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          attribute: new eth_wallet_1.BigNumber(result.attribute),
          _event: event
        };
      }
      parseDeauthorizeEvent(receipt) {
        return this.parseEvents(receipt, "Deauthorize").map((e) => this.decodeDeauthorizeEvent(e));
      }
      decodeDeauthorizeEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseEquipNFTEvent(receipt) {
        return this.parseEvents(receipt, "EquipNFT").map((e) => this.decodeEquipNFTEvent(e));
      }
      decodeEquipNFTEvent(event) {
        let result = event.data;
        return {
          trollId: new eth_wallet_1.BigNumber(result.trollId),
          nft: result.nft,
          nftId: new eth_wallet_1.BigNumber(result.nftId),
          _event: event
        };
      }
      parseMinimumStakeEvent(receipt) {
        return this.parseEvents(receipt, "MinimumStake").map((e) => this.decodeMinimumStakeEvent(e));
      }
      decodeMinimumStakeEvent(event) {
        let result = event.data;
        return {
          minimumStake: new eth_wallet_1.BigNumber(result.minimumStake),
          _event: event
        };
      }
      parseProtocolFeeEvent(receipt) {
        return this.parseEvents(receipt, "ProtocolFee").map((e) => this.decodeProtocolFeeEvent(e));
      }
      decodeProtocolFeeEvent(event) {
        let result = event.data;
        return {
          protocolFee: new eth_wallet_1.BigNumber(result.protocolFee),
          protocolFeeTo: result.protocolFeeTo,
          _event: event
        };
      }
      parseStakeEvent(receipt) {
        return this.parseEvents(receipt, "Stake").map((e) => this.decodeStakeEvent(e));
      }
      decodeStakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStakesApprovalEvent(receipt) {
        return this.parseEvents(receipt, "StakesApproval").map((e) => this.decodeStakesApprovalEvent(e));
      }
      decodeStakesApprovalEvent(event) {
        let result = event.data;
        return {
          fromTokenId: new eth_wallet_1.BigNumber(result.fromTokenId),
          spender: result.spender,
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStakesTransferEvent(receipt) {
        return this.parseEvents(receipt, "StakesTransfer").map((e) => this.decodeStakesTransferEvent(e));
      }
      decodeStakesTransferEvent(event) {
        let result = event.data;
        return {
          fromTokenId: new eth_wallet_1.BigNumber(result.fromTokenId),
          toTokenId: new eth_wallet_1.BigNumber(result.toTokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      parseStartOwnershipTransferEvent(receipt) {
        return this.parseEvents(receipt, "StartOwnershipTransfer").map((e) => this.decodeStartOwnershipTransferEvent(e));
      }
      decodeStartOwnershipTransferEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseTransferEvent(receipt) {
        return this.parseEvents(receipt, "Transfer").map((e) => this.decodeTransferEvent(e));
      }
      decodeTransferEvent(event) {
        let result = event.data;
        return {
          from: result.from,
          to: result.to,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          _event: event
        };
      }
      parseTransferOwnershipEvent(receipt) {
        return this.parseEvents(receipt, "TransferOwnership").map((e) => this.decodeTransferOwnershipEvent(e));
      }
      decodeTransferOwnershipEvent(event) {
        let result = event.data;
        return {
          user: result.user,
          _event: event
        };
      }
      parseUnequipNFTEvent(receipt) {
        return this.parseEvents(receipt, "UnequipNFT").map((e) => this.decodeUnequipNFTEvent(e));
      }
      decodeUnequipNFTEvent(event) {
        let result = event.data;
        return {
          trollId: new eth_wallet_1.BigNumber(result.trollId),
          nft: result.nft,
          nftId: new eth_wallet_1.BigNumber(result.nftId),
          _event: event
        };
      }
      parseUnstakeEvent(receipt) {
        return this.parseEvents(receipt, "Unstake").map((e) => this.decodeUnstakeEvent(e));
      }
      decodeUnstakeEvent(event) {
        let result = event.data;
        return {
          who: result.who,
          tokenId: new eth_wallet_1.BigNumber(result.tokenId),
          amount: new eth_wallet_1.BigNumber(result.amount),
          _event: event
        };
      }
      assign() {
        let _attributes_call = async (param1) => {
          let result = await this.call("_attributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._attributes = _attributes_call;
        let _customAttributes_call = async (param1) => {
          let result = await this.call("_customAttributes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this._customAttributes = _customAttributes_call;
        let _stakesTransferAllowancesParams = (params) => [eth_wallet_1.Utils.toString(params.param1), params.param2];
        let _stakesTransferAllowances_call = async (params) => {
          let result = await this.call("_stakesTransferAllowances", _stakesTransferAllowancesParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this._stakesTransferAllowances = _stakesTransferAllowances_call;
        let approvedStaker_call = async (param1) => {
          let result = await this.call("approvedStaker", [param1]);
          return result;
        };
        this.approvedStaker = approvedStaker_call;
        let balanceOf_call = async (owner) => {
          let result = await this.call("balanceOf", [owner]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.balanceOf = balanceOf_call;
        let baseURI_call = async () => {
          let result = await this.call("baseURI");
          return result;
        };
        this.baseURI = baseURI_call;
        let cap_call = async () => {
          let result = await this.call("cap");
          return new eth_wallet_1.BigNumber(result);
        };
        this.cap = cap_call;
        let counter_call = async () => {
          let result = await this.call("counter");
          return new eth_wallet_1.BigNumber(result);
        };
        this.counter = counter_call;
        let creationDate_call = async (param1) => {
          let result = await this.call("creationDate", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.creationDate = creationDate_call;
        let destoryDate_call = async (param1) => {
          let result = await this.call("destoryDate", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.destoryDate = destoryDate_call;
        let extraStakes_call = async (param1) => {
          let result = await this.call("extraStakes", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.extraStakes = extraStakes_call;
        let getApproved_call = async (tokenId) => {
          let result = await this.call("getApproved", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.getApproved = getApproved_call;
        let getAttributes1Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.offset), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes1_call = async (params) => {
          let result = await this.call("getAttributes1", getAttributes1Params(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.getAttributes1 = getAttributes1_call;
        let getAttributes2Params = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.base), eth_wallet_1.Utils.toString(params.digits)];
        let getAttributes2_call = async (params) => {
          let result = await this.call("getAttributes2", getAttributes2Params(params));
          return result.map((e) => new eth_wallet_1.BigNumber(e));
        };
        this.getAttributes2 = getAttributes2_call;
        let isApprovedForAllParams = (params) => [params.owner, params.operator];
        let isApprovedForAll_call = async (params) => {
          let result = await this.call("isApprovedForAll", isApprovedForAllParams(params));
          return result;
        };
        this.isApprovedForAll = isApprovedForAll_call;
        let isPermitted_call = async (param1) => {
          let result = await this.call("isPermitted", [param1]);
          return result;
        };
        this.isPermitted = isPermitted_call;
        let isValidNFT_call = async (param1) => {
          let result = await this.call("isValidNFT", [param1]);
          return result;
        };
        this.isValidNFT = isValidNFT_call;
        let lastStakeDate_call = async (param1) => {
          let result = await this.call("lastStakeDate", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.lastStakeDate = lastStakeDate_call;
        let listValidNFTs_call = async (param1) => {
          let result = await this.call("listValidNFTs", [eth_wallet_1.Utils.toString(param1)]);
          return result;
        };
        this.listValidNFTs = listValidNFTs_call;
        let maximumValidNFTs_call = async () => {
          let result = await this.call("maximumValidNFTs");
          return new eth_wallet_1.BigNumber(result);
        };
        this.maximumValidNFTs = maximumValidNFTs_call;
        let minimumStake_call = async () => {
          let result = await this.call("minimumStake");
          return new eth_wallet_1.BigNumber(result);
        };
        this.minimumStake = minimumStake_call;
        let minted_call = async (param1) => {
          let result = await this.call("minted", [param1]);
          return result;
        };
        this.minted = minted_call;
        let name_call = async () => {
          let result = await this.call("name");
          return result;
        };
        this.name = name_call;
        let newOwner_call = async () => {
          let result = await this.call("newOwner");
          return result;
        };
        this.newOwner = newOwner_call;
        let nftsEquippedParams = (params) => [params.param1, eth_wallet_1.Utils.toString(params.param2)];
        let nftsEquipped_call = async (params) => {
          let result = await this.call("nftsEquipped", nftsEquippedParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.nftsEquipped = nftsEquipped_call;
        let owner_call = async () => {
          let result = await this.call("owner");
          return result;
        };
        this.owner = owner_call;
        let ownerOf_call = async (tokenId) => {
          let result = await this.call("ownerOf", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.ownerOf = ownerOf_call;
        let protocolFee_call = async () => {
          let result = await this.call("protocolFee");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFee = protocolFee_call;
        let protocolFeeBalance_call = async () => {
          let result = await this.call("protocolFeeBalance");
          return new eth_wallet_1.BigNumber(result);
        };
        this.protocolFeeBalance = protocolFeeBalance_call;
        let protocolFeeTo_call = async () => {
          let result = await this.call("protocolFeeTo");
          return result;
        };
        this.protocolFeeTo = protocolFeeTo_call;
        let requireApproval_call = async () => {
          let result = await this.call("requireApproval");
          return result;
        };
        this.requireApproval = requireApproval_call;
        let stakeToken_call = async () => {
          let result = await this.call("stakeToken");
          return result;
        };
        this.stakeToken = stakeToken_call;
        let stakingBalance_call = async (param1) => {
          let result = await this.call("stakingBalance", [eth_wallet_1.Utils.toString(param1)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stakingBalance = stakingBalance_call;
        let supportsInterface_call = async (interfaceId) => {
          let result = await this.call("supportsInterface", [interfaceId]);
          return result;
        };
        this.supportsInterface = supportsInterface_call;
        let symbol_call = async () => {
          let result = await this.call("symbol");
          return result;
        };
        this.symbol = symbol_call;
        let tokenByIndex_call = async (index) => {
          let result = await this.call("tokenByIndex", [eth_wallet_1.Utils.toString(index)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenByIndex = tokenByIndex_call;
        let tokenOfOwnerByIndexParams = (params) => [params.owner, eth_wallet_1.Utils.toString(params.index)];
        let tokenOfOwnerByIndex_call = async (params) => {
          let result = await this.call("tokenOfOwnerByIndex", tokenOfOwnerByIndexParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.tokenOfOwnerByIndex = tokenOfOwnerByIndex_call;
        let tokenURI_call = async (tokenId) => {
          let result = await this.call("tokenURI", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        this.tokenURI = tokenURI_call;
        let totalSupply_call = async () => {
          let result = await this.call("totalSupply");
          return new eth_wallet_1.BigNumber(result);
        };
        this.totalSupply = totalSupply_call;
        let trollOwnedNFTsParams = (params) => [eth_wallet_1.Utils.toString(params.param1), params.param2];
        let trollOwnedNFTs_call = async (params) => {
          let result = await this.call("trollOwnedNFTs", trollOwnedNFTsParams(params));
          return new eth_wallet_1.BigNumber(result);
        };
        this.trollOwnedNFTs = trollOwnedNFTs_call;
        let validNFTsLength_call = async () => {
          let result = await this.call("validNFTsLength");
          return new eth_wallet_1.BigNumber(result);
        };
        this.validNFTsLength = validNFTsLength_call;
        let addStakesParams = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.amount)];
        let addStakes_send = async (params) => {
          let result = await this.send("addStakes", addStakesParams(params));
          return result;
        };
        let addStakes_call = async (params) => {
          let result = await this.call("addStakes", addStakesParams(params));
          return;
        };
        this.addStakes = Object.assign(addStakes_send, {
          call: addStakes_call
        });
        let addValidNFTs_send = async (nfts) => {
          let result = await this.send("addValidNFTs", [nfts]);
          return result;
        };
        let addValidNFTs_call = async (nfts) => {
          let result = await this.call("addValidNFTs", [nfts]);
          return;
        };
        this.addValidNFTs = Object.assign(addValidNFTs_send, {
          call: addValidNFTs_call
        });
        let approveParams = (params) => [params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let approve_send = async (params) => {
          let result = await this.send("approve", approveParams(params));
          return result;
        };
        let approve_call = async (params) => {
          let result = await this.call("approve", approveParams(params));
          return;
        };
        this.approve = Object.assign(approve_send, {
          call: approve_call
        });
        let batchApprove_send = async (stakers) => {
          let result = await this.send("batchApprove", [stakers]);
          return result;
        };
        let batchApprove_call = async (stakers) => {
          let result = await this.call("batchApprove", [stakers]);
          return;
        };
        this.batchApprove = Object.assign(batchApprove_send, {
          call: batchApprove_call
        });
        let deny_send = async (user) => {
          let result = await this.send("deny", [user]);
          return result;
        };
        let deny_call = async (user) => {
          let result = await this.call("deny", [user]);
          return;
        };
        this.deny = Object.assign(deny_send, {
          call: deny_call
        });
        let equipNFTParams = (params) => [eth_wallet_1.Utils.toString(params.trollId), params.nft, eth_wallet_1.Utils.toString(params.nftId)];
        let equipNFT_send = async (params) => {
          let result = await this.send("equipNFT", equipNFTParams(params));
          return result;
        };
        let equipNFT_call = async (params) => {
          let result = await this.call("equipNFT", equipNFTParams(params));
          return;
        };
        this.equipNFT = Object.assign(equipNFT_send, {
          call: equipNFT_call
        });
        let permit_send = async (user) => {
          let result = await this.send("permit", [user]);
          return result;
        };
        let permit_call = async (user) => {
          let result = await this.call("permit", [user]);
          return;
        };
        this.permit = Object.assign(permit_send, {
          call: permit_call
        });
        let rawFulfillRandomnessParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.requestId), eth_wallet_1.Utils.toString(params.randomness)];
        let rawFulfillRandomness_send = async (params) => {
          let result = await this.send("rawFulfillRandomness", rawFulfillRandomnessParams(params));
          return result;
        };
        let rawFulfillRandomness_call = async (params) => {
          let result = await this.call("rawFulfillRandomness", rawFulfillRandomnessParams(params));
          return;
        };
        this.rawFulfillRandomness = Object.assign(rawFulfillRandomness_send, {
          call: rawFulfillRandomness_call
        });
        let safeTransferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let safeTransferFrom_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom = Object.assign(safeTransferFrom_send, {
          call: safeTransferFrom_call
        });
        let safeTransferFrom_1Params = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.stringToBytes(params.data)];
        let safeTransferFrom_1_send = async (params) => {
          let result = await this.send("safeTransferFrom", safeTransferFromParams(params));
          return result;
        };
        let safeTransferFrom_1_call = async (params) => {
          let result = await this.call("safeTransferFrom", safeTransferFromParams(params));
          return;
        };
        this.safeTransferFrom_1 = Object.assign(safeTransferFrom_1_send, {
          call: safeTransferFrom_1_call
        });
        let setApprovalForAllParams = (params) => [params.operator, params.approved];
        let setApprovalForAll_send = async (params) => {
          let result = await this.send("setApprovalForAll", setApprovalForAllParams(params));
          return result;
        };
        let setApprovalForAll_call = async (params) => {
          let result = await this.call("setApprovalForAll", setApprovalForAllParams(params));
          return;
        };
        this.setApprovalForAll = Object.assign(setApprovalForAll_send, {
          call: setApprovalForAll_call
        });
        let setApprovedStakerParams = (params) => [params.staker, params.allow];
        let setApprovedStaker_send = async (params) => {
          let result = await this.send("setApprovedStaker", setApprovedStakerParams(params));
          return result;
        };
        let setApprovedStaker_call = async (params) => {
          let result = await this.call("setApprovedStaker", setApprovedStakerParams(params));
          return;
        };
        this.setApprovedStaker = Object.assign(setApprovedStaker_send, {
          call: setApprovedStaker_call
        });
        let setBaseURI_send = async (baseURI) => {
          let result = await this.send("setBaseURI", [baseURI]);
          return result;
        };
        let setBaseURI_call = async (baseURI) => {
          let result = await this.call("setBaseURI", [baseURI]);
          return;
        };
        this.setBaseURI = Object.assign(setBaseURI_send, {
          call: setBaseURI_call
        });
        let setCap_send = async (cap) => {
          let result = await this.send("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return result;
        };
        let setCap_call = async (cap) => {
          let result = await this.call("setCap", [eth_wallet_1.Utils.toString(cap)]);
          return;
        };
        this.setCap = Object.assign(setCap_send, {
          call: setCap_call
        });
        let setCustomAttributeParams = (params) => [eth_wallet_1.Utils.toString(params.tokenId), eth_wallet_1.Utils.toString(params.attribute)];
        let setCustomAttribute_send = async (params) => {
          let result = await this.send("setCustomAttribute", setCustomAttributeParams(params));
          return result;
        };
        let setCustomAttribute_call = async (params) => {
          let result = await this.call("setCustomAttribute", setCustomAttributeParams(params));
          return;
        };
        this.setCustomAttribute = Object.assign(setCustomAttribute_send, {
          call: setCustomAttribute_call
        });
        let setMinimumStake_send = async (minimumStake) => {
          let result = await this.send("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return result;
        };
        let setMinimumStake_call = async (minimumStake) => {
          let result = await this.call("setMinimumStake", [eth_wallet_1.Utils.toString(minimumStake)]);
          return;
        };
        this.setMinimumStake = Object.assign(setMinimumStake_send, {
          call: setMinimumStake_call
        });
        let setProtocolFeeParams = (params) => [eth_wallet_1.Utils.toString(params.protocolFee), params.protocolFeeTo];
        let setProtocolFee_send = async (params) => {
          let result = await this.send("setProtocolFee", setProtocolFeeParams(params));
          return result;
        };
        let setProtocolFee_call = async (params) => {
          let result = await this.call("setProtocolFee", setProtocolFeeParams(params));
          return;
        };
        this.setProtocolFee = Object.assign(setProtocolFee_send, {
          call: setProtocolFee_call
        });
        let setVrfParamsParams = (params) => [eth_wallet_1.Utils.stringToBytes32(params.vrfKeyHash), eth_wallet_1.Utils.toString(params.vrfFee)];
        let setVrfParams_send = async (params) => {
          let result = await this.send("setVrfParams", setVrfParamsParams(params));
          return result;
        };
        let setVrfParams_call = async (params) => {
          let result = await this.call("setVrfParams", setVrfParamsParams(params));
          return;
        };
        this.setVrfParams = Object.assign(setVrfParams_send, {
          call: setVrfParams_call
        });
        let stake_send = async (amount) => {
          let result = await this.send("stake", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let stake_call = async (amount) => {
          let result = await this.call("stake", [eth_wallet_1.Utils.toString(amount)]);
          return new eth_wallet_1.BigNumber(result);
        };
        this.stake = Object.assign(stake_send, {
          call: stake_call
        });
        let takeOwnership_send = async () => {
          let result = await this.send("takeOwnership");
          return result;
        };
        let takeOwnership_call = async () => {
          let result = await this.call("takeOwnership");
          return;
        };
        this.takeOwnership = Object.assign(takeOwnership_send, {
          call: takeOwnership_call
        });
        let transferFromParams = (params) => [params.from, params.to, eth_wallet_1.Utils.toString(params.tokenId)];
        let transferFrom_send = async (params) => {
          let result = await this.send("transferFrom", transferFromParams(params));
          return result;
        };
        let transferFrom_call = async (params) => {
          let result = await this.call("transferFrom", transferFromParams(params));
          return;
        };
        this.transferFrom = Object.assign(transferFrom_send, {
          call: transferFrom_call
        });
        let transferOwnership_send = async (newOwner) => {
          let result = await this.send("transferOwnership", [newOwner]);
          return result;
        };
        let transferOwnership_call = async (newOwner) => {
          let result = await this.call("transferOwnership", [newOwner]);
          return;
        };
        this.transferOwnership = Object.assign(transferOwnership_send, {
          call: transferOwnership_call
        });
        let transferProtocolFee_send = async () => {
          let result = await this.send("transferProtocolFee");
          return result;
        };
        let transferProtocolFee_call = async () => {
          let result = await this.call("transferProtocolFee");
          return;
        };
        this.transferProtocolFee = Object.assign(transferProtocolFee_send, {
          call: transferProtocolFee_call
        });
        let unequipNFTParams = (params) => [eth_wallet_1.Utils.toString(params.trollId), params.nft, eth_wallet_1.Utils.toString(params.nftId)];
        let unequipNFT_send = async (params) => {
          let result = await this.send("unequipNFT", unequipNFTParams(params));
          return result;
        };
        let unequipNFT_call = async (params) => {
          let result = await this.call("unequipNFT", unequipNFTParams(params));
          return;
        };
        this.unequipNFT = Object.assign(unequipNFT_send, {
          call: unequipNFT_call
        });
        let unstake_send = async (tokenId) => {
          let result = await this.send("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return result;
        };
        let unstake_call = async (tokenId) => {
          let result = await this.call("unstake", [eth_wallet_1.Utils.toString(tokenId)]);
          return;
        };
        this.unstake = Object.assign(unstake_send, {
          call: unstake_call
        });
        let withdrawLink_send = async (amount) => {
          let result = await this.send("withdrawLink", [eth_wallet_1.Utils.toString(amount)]);
          return result;
        };
        let withdrawLink_call = async (amount) => {
          let result = await this.call("withdrawLink", [eth_wallet_1.Utils.toString(amount)]);
          return;
        };
        this.withdrawLink = Object.assign(withdrawLink_send, {
          call: withdrawLink_call
        });
      }
    };
    exports.TrollNFT_VRFV2 = TrollNFT_VRFV2;
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/contracts/index.js
var require_contracts4 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/contracts/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TrollNFT_VRFV2 = exports.TrollNFT_VRF = exports.TrollNFTV2 = exports.TrollNFT = exports.Authorization = exports.ERC721 = void 0;
    var ERC721_1 = require_ERC721();
    Object.defineProperty(exports, "ERC721", { enumerable: true, get: function() {
      return ERC721_1.ERC721;
    } });
    var Authorization_1 = require_Authorization2();
    Object.defineProperty(exports, "Authorization", { enumerable: true, get: function() {
      return Authorization_1.Authorization;
    } });
    var TrollNFT_1 = require_TrollNFT();
    Object.defineProperty(exports, "TrollNFT", { enumerable: true, get: function() {
      return TrollNFT_1.TrollNFT;
    } });
    var TrollNFTV2_1 = require_TrollNFTV2();
    Object.defineProperty(exports, "TrollNFTV2", { enumerable: true, get: function() {
      return TrollNFTV2_1.TrollNFTV2;
    } });
    var TrollNFT_VRF_1 = require_TrollNFT_VRF();
    Object.defineProperty(exports, "TrollNFT_VRF", { enumerable: true, get: function() {
      return TrollNFT_VRF_1.TrollNFT_VRF;
    } });
    var TrollNFT_VRFV2_1 = require_TrollNFT_VRFV2();
    Object.defineProperty(exports, "TrollNFT_VRFV2", { enumerable: true, get: function() {
      return TrollNFT_VRFV2_1.TrollNFT_VRFV2;
    } });
  }
});

// node_modules/@openswap/troll-nft-sdk/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@openswap/troll-nft-sdk/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contracts = void 0;
    exports.Contracts = __importStar(require_contracts4());
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/backer.js
var require_backer = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/backer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Backer = void 0;
    var Nft = __importStar(require_lib3());
    var Backer = class {
      constructor(crosschain) {
        this.crosschain = crosschain;
      }
      async stakeTroll(params) {
        let chain = this.crosschain;
        if (!chain.mainChain) {
          throw new Error("not on main chain");
        }
        if (chain.chains.mainChain != this.crosschain.chainId) {
          throw new Error("Not on main chain");
        }
        let registry = chain.mainChain.trollRegistry;
        let receipt = await (params.isSuperTroll ? registry.stakeSuperTroll(params) : registry.stakeGeneralTroll(params));
        let stakeEvent = params.isSuperTroll ? registry.parseStakeSuperTollEvent(receipt)[0] : registry.parseStakeGeneralTollEvent(receipt)[0];
        let transferEvent = new Nft.Contracts.TrollNFT(this.crosschain.wallet, params.nft).parseTransferEvent(receipt)[0];
        return { stakeEvent, transferEvent };
      }
      async unstakeTroll(params) {
        let chain = this.crosschain;
        if (!chain.mainChain) {
          throw new Error("not on main chain");
        }
        if (chain.chains.mainChain != this.crosschain.chainId) {
          throw new Error("Not on main chain");
        }
        let registry = chain.mainChain.trollRegistry;
        let stakedByInv = await registry.stakedByInv({ param1: params.nft, param2: params.tokenId });
        if (stakedByInv.trollProfileIndex.eq(0)) {
          throw new Error("Not staked");
        }
        let type = (await registry.trollProfiles(stakedByInv.trollProfileIndex)).trollType.toNumber();
        let receipt = await (type == 1 || type == 3 ? registry.unstakeSuperTroll(params) : registry.unstakeGeneralTroll(params));
        let unstakeEvent = type == 1 ? registry.parseUnstakeSuperTollEvent(receipt)[0] : registry.parseUnstakeGeneralTollEvent(receipt)[0];
        let transferEvent = new Nft.Contracts.TrollNFT(this.crosschain.wallet, params.nft).parseTransferEvent(receipt)[0];
        return { unstakeEvent, transferEvent };
      }
      async addStakes(params) {
        let chain = this.crosschain;
        if (!chain.mainChain) {
          throw new Error("not on main chain");
        }
        if (chain.chains.mainChain != this.crosschain.chainId) {
          throw new Error("Not on main chain");
        }
        let registry = chain.mainChain.trollRegistry;
        let stakedByInv = await registry.stakedByInv({ param1: params.nft, param2: params.tokenId });
        if (stakedByInv.trollProfileIndex.eq(0)) {
          throw new Error("Not staked");
        }
        let type = (await registry.trollProfiles(stakedByInv.trollProfileIndex)).trollType.toNumber();
        let receipt = await (type == 1 || type == 3 ? registry.addStakesSuperTroll(params) : registry.addStakesGeneralTroll(params));
        let addStakesEvent = new Nft.Contracts.TrollNFTV2(this.crosschain.wallet, params.nft).parseAddStakesEvent(receipt)[0];
        let transferEvent = chain.oswap._oswap.parseTransferEvent(receipt)[0];
        return { addStakesEvent, transferEvent };
      }
      async getStakedBridgeVaultBond(token) {
        let vault = this.crosschain.crossChainContracts.vaultRegistry[token.address];
        if (!vault) {
          throw new Error("vault not found");
        }
        let staked = await vault.backerStakes(this.crosschain.wallet.defaultAccount);
        return staked;
      }
      async approveToStake(params) {
        let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        let oswap = this.crosschain.oswap;
        return oswap.approve({ spender: vault.address, amount: params.oswapAmount });
      }
      async stakeBridgeVaultBond(params) {
        let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        let backer = this.crosschain.wallet.defaultAccount;
        if ((await this.crosschain.oswap.balanceOf(backer)).lt(params.oswapAmount)) {
          throw new Error("Insufficient balance");
        }
        if ((await this.crosschain.oswap.allowance({ owner: backer, spender: vault.address })).lt(params.oswapAmount)) {
          throw new Error("Insufficient allowance");
        }
        let event = await vault.stake({ trollProfileIndex: params.trollProfileIndex, amount: params.oswapAmount });
        return event;
      }
      async stakes(asset) {
        let vault = this.crosschain.crossChainContracts.vaultRegistry[asset.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        let backer = this.crosschain.wallet.defaultAccount;
        let stakes = await vault.backerStakes(backer);
        return stakes;
      }
      async unstakeRequest(params) {
        let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        let backer = this.crosschain.wallet.defaultAccount;
        let stakes = await vault.backerStakes(backer);
        if (stakes.shares.lt(params.shares)) {
          throw new Error("Insufficient balance");
        }
        let event = await vault.unstakeRequest(params.shares);
        return event;
      }
      async unstake(params) {
        let vault = this.crosschain.crossChainContracts.vaultRegistry[params.asset.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        let backer = this.crosschain.wallet.defaultAccount;
        let stakes = await vault.backerStakes(backer);
        if (stakes.approvedWithdrawal.lt(params.shares)) {
          throw new Error("Insufficient withdraw approval");
        }
        let event = await vault.unstake({ backer: this.crosschain.wallet.defaultAccount, shares: params.shares });
        return event;
      }
    };
    exports.Backer = Backer;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/liquidityProvider.js
var require_liquidityProvider = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/liquidityProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LiquidityProvider = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var LiquidityProvider = class {
      constructor(crosschain) {
        this.crosschain = crosschain;
      }
      async getLiquidityBalance(token) {
        let chain = this.crosschain.crossChainContracts;
        let vault = chain.bridgeVault[token.address];
        let lp = this.crosschain.wallet.defaultAccount;
        if (!vault) {
          throw new Error("vault not found");
        }
        let amount = await vault.balanceOf(lp);
        let totalSupply = await vault.totalSupply;
        let lpAssetBalance = await vault.lpAssetBalance;
        amount = totalSupply.eq(0) ? new eth_wallet_1.BigNumber(0) : amount.times(lpAssetBalance).idiv(totalSupply);
        return amount;
      }
      async approveToAddLiquidity(params) {
        let vault = this.crosschain.crossChainContracts.bridgeVault[params.asset.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        return params.asset.approve({ spender: vault.address, amount: params.amount });
      }
      async addLiquidity(params) {
        let chain = this.crosschain.crossChainContracts;
        let vault = chain.bridgeVault[params.token.address];
        let lp = this.crosschain.wallet.defaultAccount;
        if (!vault) {
          throw new Error("vault not found");
        }
        if ((await params.token.balanceOf(lp)).lt(params.amount)) {
          throw new Error("Insufficient balance");
        }
        if ((await params.token.allowance({ owner: lp, spender: vault.address })).lt(params.amount)) {
          throw new Error("Insufficient allowance");
        }
        let events = await vault.addLiquidity(params.amount);
        return events;
      }
      async removeLiquidityRequest(params) {
        let chain = this.crosschain.crossChainContracts;
        let vault = chain.bridgeVault[params.token.address];
        let lp = this.crosschain.wallet.defaultAccount;
        if ((await vault.balanceOf(lp)).lt(params.lpTokenAmount)) {
          throw new Error("Insufficient balance");
        }
        let events = await vault.removeLiquidityRequest(params.lpTokenAmount);
        return events;
      }
      async removeLiquidity(params) {
        let chain = this.crosschain.crossChainContracts;
        let vault = chain.bridgeVault[params.token.address];
        let lp = this.crosschain.wallet.defaultAccount;
        if ((await vault.pendingWithdrawalAmount(lp)).lt(params.amount)) {
          throw new Error("Request exceeded previous request");
        }
        if ((await vault.pendingWithdrawalTimeout(lp)).getTime() < Math.round(Date.now() / 1e3)) {
          throw new Error("Timeout not passed yet");
        }
        let events = await vault.removeLiquidity({ provider: this.crosschain.wallet.defaultAccount, assetAmount: params.amount });
        return events;
      }
    };
    exports.LiquidityProvider = LiquidityProvider;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/trader.js
var require_trader = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/trader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Trader = void 0;
    var eth_wallet_1 = require("@ijstech/eth-wallet");
    var Trader = class {
      constructor(crosschain) {
        this.crosschain = crosschain;
      }
      async approveToNewOrder(params) {
        let vault = this.crosschain.crossChainContracts.bridgeVault[params.inToken.address];
        if (!vault) {
          throw new Error("Vault not found");
        }
        params.amount = eth_wallet_1.Utils.toDecimals(params.amount, await params.inToken.decimals);
        return params.inToken.approve({ spender: vault.address, amount: params.amount });
      }
      async newOrder(params) {
        let sourceChain = this.crosschain.crossChainContracts;
        let vault = sourceChain.bridgeVault[params.inToken.address];
        let trader = this.crosschain.wallet.defaultAccount;
        if (!vault) {
          throw new Error("vault not found");
        }
        if ((await params.inToken.balanceOf(trader)).lt(params.inAmount)) {
          throw new Error("Insufficient balance");
        }
        if ((await params.inToken.allowance({ owner: trader, spender: vault.address })).lt(params.inAmount)) {
          throw new Error("Insufficient allowance");
        }
        let _params = {
          peerChain: params.targetChain,
          inAmount: params.inAmount,
          outToken: params.outToken ? params.outToken.address : eth_wallet_1.Utils.nullAddress,
          minOutAmount: params.minOutAmount,
          to: params.to,
          expire: params.expire
        };
        let events = await vault.newOrder(_params);
        return events;
      }
      async amendOrder(params) {
        let sourceChain = this.crosschain.crossChainContracts;
        let vault = sourceChain.bridgeVault[params.inToken.address];
        return await vault.requestAmendOrder(params);
      }
      async swapOrderStatus(params) {
        let targetChain = this.crosschain.crossChainContracts;
        let vault = targetChain.bridgeVault[params.inToken];
        let hash = await vault.hashOrder({ owner: this.crosschain.wallet.defaultAccount, sourceChainId: params.sourceChainId, orderId: params.orderId });
        return vault.swapOrderStatus(hash);
      }
      async cancelOrderOnSideChain(params) {
        let targetChain = this.crosschain.crossChainContracts;
        let vault = targetChain.bridgeVault[params.inToken];
        if (!vault) {
          new Error("vault not found");
        }
        let trader = this.crosschain.wallet.defaultAccount;
        let event = vault.requestCancelOrder(params);
        return event;
      }
      async withdrawUnexecutedOrder(params) {
        let targetChain = this.crosschain.crossChainContracts;
        let vault = targetChain.bridgeVault[params.srcToken];
        if (!vault) {
          new Error("vault not found");
        }
        if (await vault.orderOwner(params.orderId) != this.crosschain.wallet.defaultAccount) {
          new Error("not from the owner of order");
        }
        let event = await vault.withdrawUnexecutedOrder(params.orderId);
        return event;
      }
    };
    exports.Trader = Trader;
  }
});

// node_modules/@ijstech/cross-chain-bridge/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@ijstech/cross-chain-bridge/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initChainRegistryByAddress = exports.initChainRegistry = exports.deploy = exports.SideChainDefaultDeploymentOptions = exports.deployStakingOnly = exports.deploySideChain = exports.MainChainDefaultDeploymentOptions = exports.deployMainChain = exports.Contracts = void 0;
    exports.Contracts = __importStar(require_contracts3());
    var deployMainChain_1 = require_deployMainChain();
    Object.defineProperty(exports, "deployMainChain", { enumerable: true, get: function() {
      return deployMainChain_1.deploy;
    } });
    Object.defineProperty(exports, "MainChainDefaultDeploymentOptions", { enumerable: true, get: function() {
      return deployMainChain_1.DefaultDeploymentOptions;
    } });
    var deploySideChain_1 = require_deploySideChain();
    Object.defineProperty(exports, "deploySideChain", { enumerable: true, get: function() {
      return deploySideChain_1.deploy;
    } });
    Object.defineProperty(exports, "deployStakingOnly", { enumerable: true, get: function() {
      return deploySideChain_1.deployStakingOnly;
    } });
    Object.defineProperty(exports, "SideChainDefaultDeploymentOptions", { enumerable: true, get: function() {
      return deploySideChain_1.DefaultDeploymentOptions;
    } });
    var deploy_1 = require_deploy();
    Object.defineProperty(exports, "deploy", { enumerable: true, get: function() {
      return deploy_1.deploy;
    } });
    Object.defineProperty(exports, "initChainRegistry", { enumerable: true, get: function() {
      return deploy_1.initChainRegistry;
    } });
    Object.defineProperty(exports, "initChainRegistryByAddress", { enumerable: true, get: function() {
      return deploy_1.initChainRegistryByAddress;
    } });
    __exportStar(require_sideChainVoting(), exports);
    __exportStar(require_mainChainVoting(), exports);
    __exportStar(require_crossChain(), exports);
    __exportStar(require_troll(), exports);
    __exportStar(require_generalTroll(), exports);
    __exportStar(require_owner(), exports);
    __exportStar(require_backer(), exports);
    __exportStar(require_liquidityProvider(), exports);
    __exportStar(require_trader(), exports);
    __exportStar(require_bridgeVault(), exports);
    __exportStar(require_bridgeVaultTrollRegistry(), exports);
  }
});

// src/staking-utils/index.ts
__export(exports, {
  claimToken: () => claimToken,
  deployCampaign: () => deployCampaign,
  getAllCampaignsInfo: () => getAllCampaignsInfo,
  getApprovalModelAction: () => getApprovalModelAction,
  getERC20RewardCurrentAPR: () => getERC20RewardCurrentAPR,
  getLPBalance: () => getLPBalance,
  getLPObject: () => getLPObject,
  getLPRewardCurrentAPR: () => getLPRewardCurrentAPR,
  getStakingTotalLocked: () => getStakingTotalLocked,
  getVaultBalance: () => getVaultBalance,
  getVaultObject: () => getVaultObject,
  getVaultRewardCurrentAPR: () => getVaultRewardCurrentAPR,
  lockToken: () => lockToken,
  withdrawToken: () => withdrawToken
});

// src/staking-utils/API.ts
var import_moment2 = __toModule(require_moment());
var import_eth_wallet4 = __toModule(require("@ijstech/eth-wallet"));
var import_time_is_money_sdk = __toModule(require_lib());
var import_sdk2 = __toModule(require("@openswap/sdk"));
var import_chainlink_sdk = __toModule(require_lib2());
var import_cross_chain_bridge = __toModule(require_lib4());

// src/global/approvalModel/index.ts
var import_eth_wallet = __toModule(require("@ijstech/eth-wallet"));
var ApprovalStatus;
(function(ApprovalStatus2) {
  ApprovalStatus2[ApprovalStatus2["TO_BE_APPROVED"] = 0] = "TO_BE_APPROVED";
  ApprovalStatus2[ApprovalStatus2["APPROVING"] = 1] = "APPROVING";
  ApprovalStatus2[ApprovalStatus2["NONE"] = 2] = "NONE";
})(ApprovalStatus || (ApprovalStatus = {}));
var ERC20ApprovalModel = class {
  constructor(options) {
    this.options = {
      sender: null,
      spenderAddress: "",
      payAction: async () => {
      },
      onToBeApproved: async (token) => {
      },
      onToBePaid: async (token) => {
      },
      onApproving: async (token, receipt, data) => {
      },
      onApproved: async (token, data) => {
      },
      onPaying: async (receipt, data) => {
      },
      onPaid: async (data) => {
      },
      onApprovingError: async (token, err) => {
      },
      onPayingError: async (err) => {
      }
    };
    this.checkAllowance = async (token, inputAmount) => {
      let allowance = await getERC20Allowance(token, this.options.spenderAddress);
      if (!allowance) {
        await this.options.onToBePaid.bind(this.options.sender)(token);
      } else if (new import_eth_wallet.BigNumber(inputAmount).gt(allowance)) {
        await this.options.onToBeApproved.bind(this.options.sender)(token);
      } else {
        await this.options.onToBePaid.bind(this.options.sender)(token);
      }
    };
    this.doApproveAction = async (token, inputAmount, data) => {
      const txHashCallback = async (err, receipt) => {
        if (err) {
          await this.options.onApprovingError.bind(this.options.sender)(token, err);
        } else {
          await this.options.onApproving.bind(this.options.sender)(token, receipt, data);
        }
      };
      const confirmationCallback = async (receipt) => {
        await this.options.onApproved.bind(this.options.sender)(token, data);
        await this.checkAllowance(token, inputAmount);
      };
      approveERC20Max(token, this.options.spenderAddress, txHashCallback, confirmationCallback);
    };
    this.doPayAction = async (data) => {
      const txHashCallback = async (err, receipt) => {
        if (err) {
          await this.options.onPayingError.bind(this.options.sender)(err);
        } else {
          await this.options.onPaying.bind(this.options.sender)(receipt, data);
        }
      };
      const confirmationCallback = async (receipt) => {
        await this.options.onPaid.bind(this.options.sender)(data);
      };
      registerSendTxEvents({
        transactionHash: txHashCallback,
        confirmation: confirmationCallback
      });
      await this.options.payAction.bind(this.options.sender)();
    };
    this.getAction = () => {
      return {
        doApproveAction: this.doApproveAction,
        doPayAction: this.doPayAction,
        checkAllowance: this.checkAllowance
      };
    };
    this.options = options;
  }
  set spenderAddress(value) {
    this.options.spenderAddress = value;
  }
};

// src/global/utils/helper.ts
var import_eth_wallet2 = __toModule(require("@ijstech/eth-wallet"));
var import_moment = __toModule(require_moment());
var SITE_ENV;
(function(SITE_ENV2) {
  SITE_ENV2["DEV"] = "dev";
  SITE_ENV2["TESTNET"] = "testnet";
  SITE_ENV2["MAINNET"] = "mainnet";
})(SITE_ENV || (SITE_ENV = {}));

// src/global/utils/common.ts
var import_eth_wallet3 = __toModule(require("@ijstech/eth-wallet"));
var import_sdk = __toModule(require("@openswap/sdk"));
var registerSendTxEvents = (sendTxEventHandlers) => {
  const wallet = import_eth_wallet3.Wallet.getInstance();
  wallet.registerSendTxEvents({
    transactionHash: (error, receipt) => {
      if (sendTxEventHandlers.transactionHash) {
        sendTxEventHandlers.transactionHash(error, receipt);
      }
    },
    confirmation: (receipt) => {
      if (sendTxEventHandlers.confirmation) {
        sendTxEventHandlers.confirmation(receipt);
      }
    }
  });
};
var approveERC20Max = async (token, spenderAddress, callback, confirmationCallback) => {
  let wallet = import_eth_wallet3.Wallet.getInstance();
  let amount = new import_eth_wallet3.BigNumber(2).pow(256).minus(1);
  let erc20 = new import_sdk.Contracts.ERC20(wallet, token.address);
  registerSendTxEvents({
    transactionHash: callback,
    confirmation: confirmationCallback
  });
  let receipt = await erc20.approve({
    spender: spenderAddress,
    amount
  });
  return receipt;
};
var getERC20Allowance = async (token, spenderAddress) => {
  if (!token.address)
    return null;
  let wallet = import_eth_wallet3.Wallet.getInstance();
  let erc20 = new import_sdk.Contracts.ERC20(wallet, token.address);
  let allowance = await erc20.allowance({
    owner: wallet.account.address,
    spender: spenderAddress
  });
  return allowance;
};

// src/global/index.ts
var EventId;
(function(EventId2) {
  EventId2["ConnectWallet"] = "connectWallet";
  EventId2["IsWalletConnected"] = "isWalletConnected";
  EventId2["IsWalletDisconnected"] = "IsWalletDisconnected";
  EventId2["Paid"] = "Paid";
  EventId2["chainChanged"] = "chainChanged";
  EventId2["EmitButtonStatus"] = "emitButtonStatus";
  EventId2["EmitInput"] = "emitInput";
  EventId2["EmitNewToken"] = "emitNewToken";
})(EventId || (EventId = {}));

// src/staking-utils/API.ts
var import_store = __toModule(require("@staking/store"));
var getTokenPrice = async (token) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let chainId = wallet.chainId;
  let tokenPrice;
  let tokenPriceFeedAddress = import_store.ToUSDPriceFeedAddressesMap[chainId][token.toLowerCase()];
  if (tokenPriceFeedAddress) {
    let aggregator = new import_chainlink_sdk.Contracts.EACAggregatorProxy(wallet, tokenPriceFeedAddress);
    let tokenLatestRoundData = await aggregator.latestRoundData();
    let tokenPriceFeedDecimals = await aggregator.decimals();
    return tokenLatestRoundData.answer.shiftedBy(-tokenPriceFeedDecimals).toFixed();
  }
  let referencePair = import_store.tokenPriceAMMReference[chainId][token.toLowerCase()];
  if (!referencePair)
    return null;
  let pair = new import_sdk2.Contracts.OSWAP_Pair(wallet, referencePair);
  let token0 = await pair.token0();
  let token1 = await pair.token1();
  let reserves = await pair.getReserves();
  let token0PriceFeedAddress = import_store.ToUSDPriceFeedAddressesMap[chainId][token0.toLowerCase()];
  let token1PriceFeedAddress = import_store.ToUSDPriceFeedAddressesMap[chainId][token1.toLowerCase()];
  if (token0PriceFeedAddress || token1PriceFeedAddress) {
    if (token0PriceFeedAddress) {
      let aggregator = new import_chainlink_sdk.Contracts.EACAggregatorProxy(wallet, token0PriceFeedAddress);
      let token0LatestRoundData = await aggregator.latestRoundData();
      let token0PriceFeedDecimals = await aggregator.decimals();
      let token0USDPrice = new import_eth_wallet4.BigNumber(token0LatestRoundData.answer).shiftedBy(-token0PriceFeedDecimals).toFixed();
      if (new import_eth_wallet4.BigNumber(token.toLowerCase()).lt(token0.toLowerCase())) {
        tokenPrice = new import_eth_wallet4.BigNumber(reserves._reserve1).div(reserves._reserve0).times(token0USDPrice).toFixed();
      } else {
        tokenPrice = new import_eth_wallet4.BigNumber(reserves._reserve0).div(reserves._reserve1).times(token0USDPrice).toFixed();
      }
    } else {
      let aggregator = new import_chainlink_sdk.Contracts.EACAggregatorProxy(wallet, token1PriceFeedAddress);
      let token1LatestRoundData = await aggregator.latestRoundData();
      let token1PriceFeedDecimals = await aggregator.decimals();
      let token1USDPrice = new import_eth_wallet4.BigNumber(token1LatestRoundData.answer).shiftedBy(-token1PriceFeedDecimals).toFixed();
      if (new import_eth_wallet4.BigNumber(token.toLowerCase()).lt(token1.toLowerCase())) {
        tokenPrice = new import_eth_wallet4.BigNumber(reserves._reserve1).div(reserves._reserve0).times(token1USDPrice).toFixed();
      } else {
        tokenPrice = new import_eth_wallet4.BigNumber(reserves._reserve0).div(reserves._reserve1).times(token1USDPrice).toFixed();
      }
    }
  } else {
    if (token0.toLowerCase() == token.toLowerCase()) {
      let token1Price = await getTokenPrice(token1);
      if (!token1Price)
        return null;
      tokenPrice = new import_eth_wallet4.BigNumber(token1Price).times(reserves._reserve1).div(reserves._reserve0).toFixed();
    } else {
      let token0Price = await getTokenPrice(token0);
      if (!token0Price)
        return null;
      tokenPrice = new import_eth_wallet4.BigNumber(token0Price).times(reserves._reserve0).div(reserves._reserve1).toFixed();
    }
  }
  return tokenPrice;
};
var getStakingRewardInfoByAddresses = async (option, providerAddress, releaseTime) => {
  try {
    let rewardAddress = option.address;
    let isCommonStartDate = option.isCommonStartDate;
    let reward = "0";
    let claimSoFar = "0";
    let claimable = "0";
    if (!rewardAddress) {
      return {
        reward,
        claimSoFar,
        claimable,
        multiplier: option.multiplier
      };
    }
    let wallet = import_eth_wallet4.Wallet.getInstance();
    let rewardsContract;
    if (isCommonStartDate) {
      rewardsContract = new import_time_is_money_sdk.Contracts.RewardsCommonStartDate(wallet, rewardAddress);
    } else {
      rewardsContract = new import_time_is_money_sdk.Contracts.Rewards(wallet, rewardAddress);
    }
    try {
      let rewardWei = await rewardsContract.reward();
      let unclaimedWei = await rewardsContract.unclaimed();
      let claimSoFarWei = await rewardsContract.claimSoFar(providerAddress);
      reward = import_eth_wallet4.Utils.fromDecimals(rewardWei).toFixed();
      claimSoFar = import_eth_wallet4.Utils.fromDecimals(claimSoFarWei).toFixed();
      claimable = import_eth_wallet4.Utils.fromDecimals(unclaimedWei).toFixed();
    } catch (err) {
    }
    let vestingPeriod = (await rewardsContract.vestingPeriod()).toNumber();
    let vestingStart;
    if (rewardsContract instanceof import_time_is_money_sdk.Contracts.RewardsCommonStartDate) {
      let vestingStartDateRaw = (await rewardsContract.vestingStartDate()).toNumber();
      vestingStart = import_moment2.default.unix(vestingStartDateRaw);
    } else {
      vestingStart = import_moment2.default.unix(releaseTime);
    }
    let vestingEnd = (0, import_moment2.default)(vestingStart).add(vestingPeriod, "seconds");
    let multiplierWei = await rewardsContract.multiplier();
    let multiplier = import_eth_wallet4.Utils.fromDecimals(multiplierWei).toFixed();
    return {
      vestingPeriod,
      vestingStart,
      vestingEnd,
      reward,
      claimSoFar,
      claimable,
      multiplier
    };
  } catch (err) {
    console.log("err", err);
    return null;
  }
};
var getStakingOptionExtendedInfoByAddress = async (option) => {
  try {
    let wallet = import_eth_wallet4.Wallet.getInstance();
    let stakingAddress = option.address;
    let rewardOptions = option.rewards;
    let decimalsOffset = option.decimalsOffset || 0;
    let currentAddress = wallet.address;
    let hasRewardAddress = rewardOptions.length > 0 && rewardOptions[0].address;
    let timeIsMoney = new import_time_is_money_sdk.Contracts.TimeIsMoney(wallet, stakingAddress);
    let totalCreditWei = await timeIsMoney.getCredit(currentAddress);
    let lockAmountWei = await timeIsMoney.lockAmount(currentAddress);
    let withdrawn = await timeIsMoney.withdrawn(currentAddress);
    let totalCredit = import_eth_wallet4.Utils.fromDecimals(totalCreditWei).shiftedBy(decimalsOffset).toFixed();
    let lockAmount = import_eth_wallet4.Utils.fromDecimals(lockAmountWei).shiftedBy(decimalsOffset).toFixed();
    let stakeQty = withdrawn ? "0" : lockAmount;
    let mode = "";
    if (new import_eth_wallet4.BigNumber(totalCredit).gt(0) && hasRewardAddress) {
      mode = "Claim";
    } else if (new import_eth_wallet4.BigNumber(stakeQty).isZero()) {
      mode = "Stake";
    } else {
      mode = "Unlock";
    }
    let minimumLockTime = await timeIsMoney.minimumLockTime();
    let releaseTime = await timeIsMoney.releaseTime(currentAddress);
    let maximumTotalLock = await timeIsMoney.maximumTotalLock();
    let totalLockedWei = await timeIsMoney.totalLocked();
    let startOfEntryPeriod = "0";
    try {
      startOfEntryPeriod = (await timeIsMoney.startOfEntryPeriod()).toFixed();
    } catch (err) {
    }
    let endOfEntryPeriod = (await timeIsMoney.endOfEntryPeriod()).toFixed();
    let perAddressCapWei = await timeIsMoney.perAddressCap();
    let lockedTime = releaseTime.minus(minimumLockTime);
    let maxTotalLock = import_eth_wallet4.Utils.fromDecimals(maximumTotalLock).shiftedBy(decimalsOffset).toFixed();
    let totalLocked = import_eth_wallet4.Utils.fromDecimals(totalLockedWei).shiftedBy(decimalsOffset).toFixed();
    let perAddressCap = import_eth_wallet4.Utils.fromDecimals(perAddressCapWei).shiftedBy(decimalsOffset).toFixed();
    let tokenAddress = await timeIsMoney.token();
    let obj = {
      mode,
      minLockTime: minimumLockTime.toNumber(),
      releaseTime: releaseTime.toNumber() * 1e3,
      lockedTime: lockedTime.toNumber() * 1e3,
      maxTotalLock,
      totalLocked,
      totalCredit,
      stakeQty,
      withdrawn,
      lockAmount,
      startOfEntryPeriod: parseInt(startOfEntryPeriod) * 1e3,
      endOfEntryPeriod: parseInt(endOfEntryPeriod) * 1e3,
      perAddressCap,
      tokenAddress: tokenAddress.toLowerCase(),
      decimalsOffset
    };
    if (mode === "Claim" && hasRewardAddress) {
      let rewardsData = [];
      let promises = rewardOptions.map(async (option2, index) => {
        return new Promise(async (resolve, reject) => {
          try {
            let stakingRewardInfo = await getStakingRewardInfoByAddresses(option2, currentAddress, releaseTime.toNumber());
            if (stakingRewardInfo) {
              let vestedReward = new import_eth_wallet4.BigNumber(totalCredit).times(stakingRewardInfo.multiplier).minus(stakingRewardInfo.claimSoFar).toFixed();
              rewardsData.push(__spreadProps(__spreadValues(__spreadValues({}, option2), stakingRewardInfo), {
                vestedReward,
                index
              }));
            }
          } catch (error) {
          }
          resolve();
        });
      });
      await Promise.all(promises);
      return __spreadProps(__spreadValues({}, obj), {
        rewardsData: rewardsData.sort((a, b) => a.index - b.index)
      });
    } else {
      return obj;
    }
  } catch (err) {
    console.log("err", err);
    return null;
  }
};
var composeCampaignInfoList = async (stakingCampaignInfoList, addDurationOption) => {
  let campaigns = [];
  for (let i = 0; i < stakingCampaignInfoList.length; i++) {
    let stakingCampaignInfo = stakingCampaignInfoList[i];
    let durationOptionsWithExtendedInfo = [];
    let durationOptions = stakingCampaignInfo.stakings;
    for (let j = 0; j < durationOptions.length; j++) {
      let durationOption = durationOptions[j];
      addDurationOption(durationOptionsWithExtendedInfo, durationOption);
    }
    let campaignObj = __spreadProps(__spreadValues({}, stakingCampaignInfo), {
      campaignName: stakingCampaignInfo.customName,
      campaignDesc: stakingCampaignInfo.customDesc,
      getTokenURL: stakingCampaignInfo.getTokenURL,
      options: durationOptionsWithExtendedInfo
    });
    if (durationOptionsWithExtendedInfo.length > 0) {
      campaignObj = __spreadProps(__spreadValues({}, campaignObj), {
        tokenAddress: durationOptionsWithExtendedInfo[0].tokenAddress.toLowerCase()
      });
    }
    campaigns.push(campaignObj);
  }
  return campaigns;
};
var getAllCampaignsInfo = async (stakingInfo) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let chainId = wallet.chainId;
  let stakingCampaignInfoList = stakingInfo[chainId];
  if (!stakingCampaignInfoList)
    return [];
  let optionExtendedInfoMap = {};
  let allCampaignOptions = stakingCampaignInfoList.flatMap((v) => v.stakings);
  let promises = allCampaignOptions.map(async (option, index) => {
    return new Promise(async (resolve, reject) => {
      try {
        let optionExtendedInfo = await getStakingOptionExtendedInfoByAddress(option);
        if (optionExtendedInfo)
          optionExtendedInfoMap[option.address] = optionExtendedInfo;
      } catch (error) {
      }
      resolve();
    });
  });
  await Promise.all(promises);
  let campaigns = await composeCampaignInfoList(stakingCampaignInfoList, (options, defaultOption) => {
    if (defaultOption.address && optionExtendedInfoMap[defaultOption.address]) {
      options.push(__spreadValues(__spreadValues({}, defaultOption), optionExtendedInfoMap[defaultOption.address]));
    }
  });
  return campaigns;
};
var getStakingTotalLocked = async (stakingAddress, decimalsOffset) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let timeIsMoney = new import_time_is_money_sdk.Contracts.TimeIsMoney(wallet, stakingAddress);
  let totalLockedWei = await timeIsMoney.totalLocked();
  let totalLocked = import_eth_wallet4.Utils.fromDecimals(totalLockedWei).shiftedBy(decimalsOffset).toFixed();
  return totalLocked;
};
var getWETH = (wallet) => {
  let wrappedToken = import_store.WETHByChainId[wallet.chainId];
  return wrappedToken;
};
var getLPObject = async (pairAddress) => {
  try {
    let wallet = import_eth_wallet4.Wallet.getInstance();
    const WETH = getWETH(wallet);
    let pair = new import_sdk2.Contracts.OSWAP_Pair(wallet, pairAddress);
    let getSymbol = await pair.symbol();
    let getName = await pair.name();
    let getDecimal = await pair.decimals();
    let token0 = (await pair.token0()).toLowerCase();
    let token1 = (await pair.token1()).toLowerCase();
    return {
      address: pairAddress.toLowerCase(),
      decimals: getDecimal.toFixed(),
      name: getName,
      symbol: getSymbol,
      token0: token0 == WETH.address.toLowerCase() ? "" : token0,
      token1: token1 == WETH.address.toLowerCase() ? "" : token1
    };
  } catch (e) {
    return null;
  }
};
var getLPBalance = async (pairAddress) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let pair = new import_sdk2.Contracts.OSWAP_Pair(wallet, pairAddress);
  let balance = await pair.balanceOf(wallet.address);
  return import_eth_wallet4.Utils.fromDecimals(balance).toFixed();
};
var getVaultObject = async (vaultAddress) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let vault = new import_cross_chain_bridge.Contracts.OSWAP_BridgeVault(wallet, vaultAddress);
  let symbol = await vault.symbol();
  let name = await vault.name();
  let decimals = await vault.decimals();
  let asset = await vault.asset();
  let tokenMap = (0, import_store.getTokenMap)();
  let assetToken = tokenMap[asset.toLowerCase()];
  return {
    address: vaultAddress.toLowerCase(),
    decimals,
    name,
    symbol,
    assetToken
  };
};
var getVaultBalance = async (vaultAddress) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let vault = new import_cross_chain_bridge.Contracts.OSWAP_BridgeVault(wallet, vaultAddress);
  let balance = await vault.balanceOf(wallet.address);
  return import_eth_wallet4.Utils.fromDecimals(balance).toFixed();
};
var getERC20RewardCurrentAPR = async (rewardOption, lockedToken, lockedDays) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let chainId = wallet.chainId;
  const usdPeggedTokenAddress = import_store.USDPeggedTokenAddressMap[chainId];
  if (!usdPeggedTokenAddress)
    return "";
  let APR = "";
  let rewardPrice = await getTokenPrice(rewardOption.rewardTokenAddress);
  let lockedTokenPrice = await getTokenPrice(lockedToken.address);
  if (!rewardPrice || !lockedTokenPrice)
    return null;
  APR = new import_eth_wallet4.BigNumber(rewardOption.multiplier).times(new import_eth_wallet4.BigNumber(rewardPrice).times(365)).div(new import_eth_wallet4.BigNumber(lockedTokenPrice).times(lockedDays)).toFixed();
  return APR;
};
var getReservesByPair = async (pairAddress, tokenInAddress, tokenOutAddress) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let reserveObj;
  let pair = new import_sdk2.Contracts.OSWAP_Pair(wallet, pairAddress);
  let reserves = await pair.getReserves();
  if (!tokenInAddress || !tokenOutAddress) {
    tokenInAddress = await pair.token0();
    tokenOutAddress = await pair.token1();
  }
  if (tokenInAddress && tokenOutAddress) {
    if (new import_eth_wallet4.BigNumber(tokenInAddress.toLowerCase()).lt(tokenOutAddress.toLowerCase())) {
      reserveObj = {
        reserveA: reserves._reserve0,
        reserveB: reserves._reserve1
      };
    } else {
      reserveObj = {
        reserveA: reserves._reserve1,
        reserveB: reserves._reserve0
      };
    }
  }
  return reserveObj;
};
var getLPRewardCurrentAPR = async (rewardOption, lpObject, lockedDays) => {
  let wallet = import_eth_wallet4.Wallet.getInstance();
  const WETH = getWETH(wallet);
  const WETHAddress = WETH.address;
  let chainId = wallet.chainId;
  const usdPeggedTokenAddress = import_store.USDPeggedTokenAddressMap[chainId];
  if (!usdPeggedTokenAddress)
    return "";
  let APR = "";
  if (lpObject.token0.toLowerCase() == usdPeggedTokenAddress.toLowerCase() || lpObject.token1.toLowerCase() == usdPeggedTokenAddress.toLowerCase()) {
    let rewardPrice = "";
    if (rewardOption.APROption && rewardOption.APROption == 1) {
      let WETH9PriceFeedAddress = import_store.ToUSDPriceFeedAddressesMap[chainId][WETHAddress.toLowerCase()];
      if (!WETH9PriceFeedAddress)
        return "";
      let aggregator = new import_chainlink_sdk.Contracts.EACAggregatorProxy(wallet, WETH9PriceFeedAddress);
      let WETH9LatestRoundData = await aggregator.latestRoundData();
      let WETH9PriceFeedDecimals = await aggregator.decimals();
      let WETH9USDPrice = new import_eth_wallet4.BigNumber(WETH9LatestRoundData.answer).shiftedBy(-WETH9PriceFeedDecimals).toFixed();
      let rewardReserves = await getReservesByPair(rewardOption.referencePair, WETHAddress, rewardOption.rewardTokenAddress);
      if (!rewardReserves)
        return "";
      rewardPrice = new import_eth_wallet4.BigNumber(rewardReserves.reserveA).div(rewardReserves.reserveB).times(WETH9USDPrice).toFixed();
    } else {
      let rewardReserves = await getReservesByPair(rewardOption.referencePair, usdPeggedTokenAddress, rewardOption.rewardTokenAddress);
      if (!rewardReserves)
        return "";
      rewardPrice = new import_eth_wallet4.BigNumber(rewardReserves.reserveA).div(rewardReserves.reserveB).toFixed();
    }
    let lpTokenOut = lpObject.token0.toLowerCase() == usdPeggedTokenAddress.toLowerCase() ? lpObject.token1 : lpObject.token0;
    let lockedLPReserves = await getReservesByPair(lpObject.address, usdPeggedTokenAddress, lpTokenOut);
    if (!lockedLPReserves)
      return "";
    let lockedLPPrice = new import_eth_wallet4.BigNumber(lockedLPReserves.reserveA).div(lockedLPReserves.reserveB).times(2).toFixed();
    APR = new import_eth_wallet4.BigNumber(rewardOption.multiplier).times(new import_eth_wallet4.BigNumber(rewardPrice).times(365)).div(new import_eth_wallet4.BigNumber(lockedLPPrice).times(lockedDays)).toFixed();
  } else {
    if (!lpObject.token0 || !lpObject.token1 || lpObject.token0.toLowerCase() == WETHAddress.toLowerCase() || lpObject.token1.toLowerCase() == WETHAddress.toLowerCase()) {
      let WETH9PriceFeedAddress = import_store.ToUSDPriceFeedAddressesMap[chainId][WETHAddress.toLowerCase()];
      if (!WETH9PriceFeedAddress)
        return "";
      let aggregator = new import_chainlink_sdk.Contracts.EACAggregatorProxy(wallet, WETH9PriceFeedAddress);
      let WETH9LatestRoundData = await aggregator.latestRoundData();
      let WETH9PriceFeedDecimals = await aggregator.decimals();
      let WETH9USDPrice = new import_eth_wallet4.BigNumber(WETH9LatestRoundData.answer).shiftedBy(-WETH9PriceFeedDecimals).toFixed();
      let rewardReserves = await getReservesByPair(rewardOption.referencePair, WETHAddress, rewardOption.rewardTokenAddress);
      if (!rewardReserves)
        return "";
      let rewardPrice = new import_eth_wallet4.BigNumber(rewardReserves.reserveA).div(rewardReserves.reserveB).times(WETH9USDPrice).toFixed();
      let otherTokenAddress = !lpObject.token0 || lpObject.token0.toLowerCase() == WETHAddress.toLowerCase() ? lpObject.token1 : lpObject.token0;
      let lockedLPReserves = await getReservesByPair(lpObject.address, WETHAddress, otherTokenAddress);
      if (!lockedLPReserves)
        return "";
      let otherTokenPrice = new import_eth_wallet4.BigNumber(lockedLPReserves.reserveA).div(lockedLPReserves.reserveB).times(WETH9USDPrice).toFixed();
      let lockedLPPrice = new import_eth_wallet4.BigNumber(otherTokenPrice).times(2).div(new import_eth_wallet4.BigNumber(otherTokenPrice).div(WETH9USDPrice).sqrt()).toFixed();
      APR = new import_eth_wallet4.BigNumber(rewardOption.multiplier).times(new import_eth_wallet4.BigNumber(rewardPrice).times(365)).div(new import_eth_wallet4.BigNumber(lockedLPPrice).times(lockedDays)).toFixed();
    }
  }
  return APR;
};
var getVaultRewardCurrentAPR = async (rewardOption, vaultObject, lockedDays) => {
  let APR = "";
  let rewardPrice = await getTokenPrice(rewardOption.rewardTokenAddress);
  let assetTokenPrice = await getTokenPrice(vaultObject.assetToken.address);
  if (!assetTokenPrice || !rewardPrice)
    return "";
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let vault = new import_cross_chain_bridge.Contracts.OSWAP_BridgeVault(wallet, vaultObject.address);
  let vaultTokenTotalSupply = await vault.totalSupply();
  let lpAssetBalance = await vault.lpAssetBalance();
  let lpToAssetRatio = new import_eth_wallet4.BigNumber(lpAssetBalance).div(vaultTokenTotalSupply).toFixed();
  let VaultTokenPrice = new import_eth_wallet4.BigNumber(assetTokenPrice).times(lpToAssetRatio).toFixed();
  APR = new import_eth_wallet4.BigNumber(rewardOption.multiplier).times(new import_eth_wallet4.BigNumber(rewardPrice).times(365)).div(new import_eth_wallet4.BigNumber(VaultTokenPrice).times(lockedDays)).toFixed();
  return APR;
};
var withdrawToken = async (contractAddress, callback) => {
  if (!contractAddress)
    return;
  try {
    let wallet = import_eth_wallet4.Wallet.getInstance();
    let timeIsMoney = new import_time_is_money_sdk.Contracts.TimeIsMoney(wallet, contractAddress);
    let receipt = await timeIsMoney.withdraw(true);
    return receipt;
  } catch (error) {
    if (callback) {
      callback(error);
    }
  }
};
var claimToken = async (contractAddress, callback) => {
  if (!contractAddress)
    return;
  try {
    let wallet = import_eth_wallet4.Wallet.getInstance();
    let rewards = new import_time_is_money_sdk.Contracts.Rewards(wallet, contractAddress);
    let receipt = await rewards.claim();
    return receipt;
  } catch (error) {
    if (callback) {
      callback(error);
    }
  }
};
var lockToken = async (token, amount, contractAddress) => {
  if (!token)
    return;
  if (!contractAddress)
    return;
  let wallet = import_eth_wallet4.Wallet.getInstance();
  let decimals = typeof token.decimals === "object" ? token.decimals.toNumber() : token.decimals;
  let tokenAmount = import_eth_wallet4.Utils.toDecimals(amount, decimals);
  let timeIsMoney = new import_time_is_money_sdk.Contracts.TimeIsMoney(wallet, contractAddress);
  let receipt = await timeIsMoney.lock(tokenAmount);
  return receipt;
};
var getApprovalModelAction = (contractAddress, options) => {
  const approvalOptions = __spreadProps(__spreadValues({}, options), {
    spenderAddress: contractAddress
  });
  const approvalModel = new ERC20ApprovalModel(approvalOptions);
  let approvalModelAction = approvalModel.getAction();
  return approvalModelAction;
};
var deployCampaign = async (campaign, callback) => {
  try {
    let wallet = (0, import_store.getWallet)();
    let timeIsMoney = new import_time_is_money_sdk.Contracts.TimeIsMoney(wallet);
    let rewardsContract = new import_time_is_money_sdk.Contracts.Rewards(wallet);
    let result = __spreadProps(__spreadValues({}, campaign), { stakings: [] });
    for (const staking of campaign.stakings) {
      let stakingResult;
      const { campaignStart, campaignEnd } = campaign;
      const { lockTokenAddress, maxTotalLock, minLockTime, perAddressCap } = staking;
      let timeIsMoneyToken = new import_eth_wallet4.Erc20(wallet, lockTokenAddress);
      let timeIsMoneyTokenDecimals = await timeIsMoneyToken.decimals;
      const stakingAddress = await timeIsMoney.deploy({
        token: lockTokenAddress,
        maximumTotalLock: import_eth_wallet4.Utils.toDecimals(maxTotalLock, timeIsMoneyTokenDecimals),
        minimumLockTime: minLockTime,
        startOfEntryPeriod: campaignStart,
        endOfEntryPeriod: campaignEnd,
        perAddressCap: import_eth_wallet4.Utils.toDecimals(perAddressCap, timeIsMoneyTokenDecimals)
      });
      let rewardResult = [];
      for (const reward of staking.rewards) {
        const { multiplier, rewardTokenAddress, initialReward, vestingPeriod, claimDeadline, admin } = reward;
        let rewardToken = new import_eth_wallet4.Erc20(wallet, rewardTokenAddress);
        let rewardTokenDecimals = await rewardToken.decimals;
        const rewardAddress = await rewardsContract.deploy({
          timeIsMoney: timeIsMoney.address,
          token: rewardTokenAddress,
          multiplier: import_eth_wallet4.Utils.toDecimals(multiplier, rewardTokenDecimals),
          initialReward: import_eth_wallet4.Utils.toDecimals(initialReward, rewardTokenDecimals),
          vestingPeriod,
          claimDeadline,
          admin
        });
        rewardResult.push(__spreadProps(__spreadValues({}, reward), { address: rewardAddress }));
      }
      ;
      stakingResult = __spreadProps(__spreadValues({}, staking), { address: stakingAddress, rewards: rewardResult });
      result.stakings.push(stakingResult);
    }
    return result;
  } catch (error) {
    if (callback) {
      callback(error, null);
    }
    return null;
  }
};
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.29.1
  
  });